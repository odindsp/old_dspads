// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: baidu_realtime_bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "baidu_realtime_bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_BaiduId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_BaiduId_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_Coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_Coordinate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Geo_Coordinate_Standard_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_UserLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_UserLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_MobileID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_MobileID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileID_IDType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_DeviceOsVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_DeviceOsVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_ForAdvertisingID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_ForAdvertisingID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_ForAdvertisingID_IDType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_MobileApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_MobileApp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileApp_AppInteractionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileDeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_OS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_WirelessNetworkType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_VideoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_VideoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_LinkUnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_LinkUnitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_PreferredOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_PreferredOrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_ExpandCreativeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_ExpandCreativeInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_ExpandCreativeInfo_ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_ExpandCreativeInfo_Direction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_LinkUnitKeyword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_LinkUnitKeyword_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_ExpandCreativeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_ExpandCreativeInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_baidu_5frealtime_5fbidding_2eproto() {
  protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "baidu_realtime_bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, baidu_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, baidu_user_id_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, baidu_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, flash_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_geo_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, referer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, site_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, site_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_product_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  BidRequest_BaiduId_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_BaiduId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BaiduId, baidu_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BaiduId, baidu_user_id_version_),
  };
  BidRequest_BaiduId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_BaiduId_descriptor_,
      BidRequest_BaiduId::default_instance_,
      BidRequest_BaiduId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BaiduId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BaiduId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_BaiduId));
  BidRequest_Geo_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_Geo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, user_coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, user_location_),
  };
  BidRequest_Geo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Geo_descriptor_,
      BidRequest_Geo::default_instance_,
      BidRequest_Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Geo));
  BidRequest_Geo_Coordinate_descriptor_ = BidRequest_Geo_descriptor_->nested_type(0);
  static const int BidRequest_Geo_Coordinate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, standard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, longitude_),
  };
  BidRequest_Geo_Coordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Geo_Coordinate_descriptor_,
      BidRequest_Geo_Coordinate::default_instance_,
      BidRequest_Geo_Coordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Geo_Coordinate));
  BidRequest_Geo_Coordinate_Standard_descriptor_ = BidRequest_Geo_Coordinate_descriptor_->enum_type(0);
  BidRequest_Geo_UserLocation_descriptor_ = BidRequest_Geo_descriptor_->nested_type(1);
  static const int BidRequest_Geo_UserLocation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, district_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, street_),
  };
  BidRequest_Geo_UserLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Geo_UserLocation_descriptor_,
      BidRequest_Geo_UserLocation::default_instance_,
      BidRequest_Geo_UserLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Geo_UserLocation));
  BidRequest_Mobile_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_Mobile_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, screen_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, screen_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, carrier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, wireless_network_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_for_advertising_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, for_advertising_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, mobile_app_),
  };
  BidRequest_Mobile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_descriptor_,
      BidRequest_Mobile::default_instance_,
      BidRequest_Mobile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile));
  BidRequest_Mobile_MobileID_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_MobileID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileID, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileID, id_),
  };
  BidRequest_Mobile_MobileID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_MobileID_descriptor_,
      BidRequest_Mobile_MobileID::default_instance_,
      BidRequest_Mobile_MobileID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_MobileID));
  BidRequest_Mobile_MobileID_IDType_descriptor_ = BidRequest_Mobile_MobileID_descriptor_->enum_type(0);
  BidRequest_Mobile_DeviceOsVersion_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(1);
  static const int BidRequest_Mobile_DeviceOsVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_micro_),
  };
  BidRequest_Mobile_DeviceOsVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_DeviceOsVersion_descriptor_,
      BidRequest_Mobile_DeviceOsVersion::default_instance_,
      BidRequest_Mobile_DeviceOsVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_DeviceOsVersion));
  BidRequest_Mobile_ForAdvertisingID_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(2);
  static const int BidRequest_Mobile_ForAdvertisingID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_ForAdvertisingID, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_ForAdvertisingID, id_),
  };
  BidRequest_Mobile_ForAdvertisingID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_ForAdvertisingID_descriptor_,
      BidRequest_Mobile_ForAdvertisingID::default_instance_,
      BidRequest_Mobile_ForAdvertisingID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_ForAdvertisingID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_ForAdvertisingID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_ForAdvertisingID));
  BidRequest_Mobile_ForAdvertisingID_IDType_descriptor_ = BidRequest_Mobile_ForAdvertisingID_descriptor_->enum_type(0);
  BidRequest_Mobile_MobileApp_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(3);
  static const int BidRequest_Mobile_MobileApp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_bundle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_publisher_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_interaction_type_),
  };
  BidRequest_Mobile_MobileApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_MobileApp_descriptor_,
      BidRequest_Mobile_MobileApp::default_instance_,
      BidRequest_Mobile_MobileApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_MobileApp));
  BidRequest_Mobile_MobileApp_AppInteractionType_descriptor_ = BidRequest_Mobile_MobileApp_descriptor_->enum_type(0);
  BidRequest_Mobile_MobileDeviceType_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(0);
  BidRequest_Mobile_OS_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(1);
  BidRequest_Mobile_WirelessNetworkType_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(2);
  BidRequest_Video_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Video_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, content_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, channel_id_),
  };
  BidRequest_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Video_descriptor_,
      BidRequest_Video::default_instance_,
      BidRequest_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Video));
  BidRequest_AdSlot_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_AdSlot_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, ad_block_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, adslot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, slot_visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, creative_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, excluded_landing_page_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, minimum_cpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, max_video_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, min_video_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, video_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, video_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, link_unit_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, preferred_order_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, expand_creative_info_),
  };
  BidRequest_AdSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_descriptor_,
      BidRequest_AdSlot::default_instance_,
      BidRequest_AdSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot));
  BidRequest_AdSlot_VideoInfo_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_VideoInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, max_video_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, min_video_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, video_start_delay_),
  };
  BidRequest_AdSlot_VideoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_VideoInfo_descriptor_,
      BidRequest_AdSlot_VideoInfo::default_instance_,
      BidRequest_AdSlot_VideoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_VideoInfo));
  BidRequest_AdSlot_LinkUnitInfo_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(1);
  static const int BidRequest_AdSlot_LinkUnitInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, style_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, req_keyword_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, proposed_keyword_),
  };
  BidRequest_AdSlot_LinkUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_LinkUnitInfo_descriptor_,
      BidRequest_AdSlot_LinkUnitInfo::default_instance_,
      BidRequest_AdSlot_LinkUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_LinkUnitInfo));
  BidRequest_AdSlot_PreferredOrderInfo_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(2);
  static const int BidRequest_AdSlot_PreferredOrderInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo, preferred_orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo, allow_auction_),
  };
  BidRequest_AdSlot_PreferredOrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_PreferredOrderInfo_descriptor_,
      BidRequest_AdSlot_PreferredOrderInfo::default_instance_,
      BidRequest_AdSlot_PreferredOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_PreferredOrderInfo));
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_ = BidRequest_AdSlot_PreferredOrderInfo_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder, fixed_cpm_),
  };
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_,
      BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_,
      BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder));
  BidRequest_AdSlot_ExpandCreativeInfo_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(3);
  static const int BidRequest_AdSlot_ExpandCreativeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_creative_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_duration_),
  };
  BidRequest_AdSlot_ExpandCreativeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_ExpandCreativeInfo_descriptor_,
      BidRequest_AdSlot_ExpandCreativeInfo::default_instance_,
      BidRequest_AdSlot_ExpandCreativeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_ExpandCreativeInfo));
  BidRequest_AdSlot_ExpandCreativeInfo_ActionType_descriptor_ = BidRequest_AdSlot_ExpandCreativeInfo_descriptor_->enum_type(0);
  BidRequest_AdSlot_ExpandCreativeInfo_Direction_descriptor_ = BidRequest_AdSlot_ExpandCreativeInfo_descriptor_->enum_type(1);
  BidRequest_Gender_descriptor_ = BidRequest_descriptor_->enum_type(0);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, ad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, debug_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, processing_time_ms_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  BidResponse_Ad_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Ad_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, html_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, link_unit_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, advertiser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, landing_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, target_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, monitor_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, expand_creative_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, max_cpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, extdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, is_cookie_matching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, preferred_order_id_),
  };
  BidResponse_Ad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ad_descriptor_,
      BidResponse_Ad::default_instance_,
      BidResponse_Ad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ad));
  BidResponse_Ad_LinkUnitKeyword_descriptor_ = BidResponse_Ad_descriptor_->nested_type(0);
  static const int BidResponse_Ad_LinkUnitKeyword_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_LinkUnitKeyword, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_LinkUnitKeyword, selected_style_type_),
  };
  BidResponse_Ad_LinkUnitKeyword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ad_LinkUnitKeyword_descriptor_,
      BidResponse_Ad_LinkUnitKeyword::default_instance_,
      BidResponse_Ad_LinkUnitKeyword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_LinkUnitKeyword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_LinkUnitKeyword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ad_LinkUnitKeyword));
  BidResponse_Ad_ExpandCreativeInfo_descriptor_ = BidResponse_Ad_descriptor_->nested_type(1);
  static const int BidResponse_Ad_ExpandCreativeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, creative_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, creative_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, creative_landing_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, creative_type_),
  };
  BidResponse_Ad_ExpandCreativeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ad_ExpandCreativeInfo_descriptor_,
      BidResponse_Ad_ExpandCreativeInfo::default_instance_,
      BidResponse_Ad_ExpandCreativeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ad_ExpandCreativeInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_baidu_5frealtime_5fbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_BaiduId_descriptor_, &BidRequest_BaiduId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Geo_descriptor_, &BidRequest_Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Geo_Coordinate_descriptor_, &BidRequest_Geo_Coordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Geo_UserLocation_descriptor_, &BidRequest_Geo_UserLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_descriptor_, &BidRequest_Mobile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_MobileID_descriptor_, &BidRequest_Mobile_MobileID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_DeviceOsVersion_descriptor_, &BidRequest_Mobile_DeviceOsVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_ForAdvertisingID_descriptor_, &BidRequest_Mobile_ForAdvertisingID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_MobileApp_descriptor_, &BidRequest_Mobile_MobileApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Video_descriptor_, &BidRequest_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_descriptor_, &BidRequest_AdSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_VideoInfo_descriptor_, &BidRequest_AdSlot_VideoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_LinkUnitInfo_descriptor_, &BidRequest_AdSlot_LinkUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_PreferredOrderInfo_descriptor_, &BidRequest_AdSlot_PreferredOrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_, &BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_ExpandCreativeInfo_descriptor_, &BidRequest_AdSlot_ExpandCreativeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ad_descriptor_, &BidResponse_Ad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ad_LinkUnitKeyword_descriptor_, &BidResponse_Ad_LinkUnitKeyword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ad_ExpandCreativeInfo_descriptor_, &BidResponse_Ad_ExpandCreativeInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_baidu_5frealtime_5fbidding_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_BaiduId::default_instance_;
  delete BidRequest_BaiduId_reflection_;
  delete BidRequest_Geo::default_instance_;
  delete BidRequest_Geo_reflection_;
  delete BidRequest_Geo_Coordinate::default_instance_;
  delete BidRequest_Geo_Coordinate_reflection_;
  delete BidRequest_Geo_UserLocation::default_instance_;
  delete BidRequest_Geo_UserLocation_reflection_;
  delete BidRequest_Mobile::default_instance_;
  delete BidRequest_Mobile_reflection_;
  delete BidRequest_Mobile_MobileID::default_instance_;
  delete BidRequest_Mobile_MobileID_reflection_;
  delete BidRequest_Mobile_DeviceOsVersion::default_instance_;
  delete BidRequest_Mobile_DeviceOsVersion_reflection_;
  delete BidRequest_Mobile_ForAdvertisingID::default_instance_;
  delete BidRequest_Mobile_ForAdvertisingID_reflection_;
  delete BidRequest_Mobile_MobileApp::default_instance_;
  delete BidRequest_Mobile_MobileApp_reflection_;
  delete BidRequest_Video::default_instance_;
  delete BidRequest_Video_reflection_;
  delete BidRequest_AdSlot::default_instance_;
  delete BidRequest_AdSlot_reflection_;
  delete BidRequest_AdSlot_VideoInfo::default_instance_;
  delete BidRequest_AdSlot_VideoInfo_reflection_;
  delete BidRequest_AdSlot_LinkUnitInfo::default_instance_;
  delete BidRequest_AdSlot_LinkUnitInfo_reflection_;
  delete BidRequest_AdSlot_PreferredOrderInfo::default_instance_;
  delete BidRequest_AdSlot_PreferredOrderInfo_reflection_;
  delete BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_;
  delete BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_reflection_;
  delete BidRequest_AdSlot_ExpandCreativeInfo::default_instance_;
  delete BidRequest_AdSlot_ExpandCreativeInfo_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Ad::default_instance_;
  delete BidResponse_Ad_reflection_;
  delete BidResponse_Ad_LinkUnitKeyword::default_instance_;
  delete BidResponse_Ad_LinkUnitKeyword_reflection_;
  delete BidResponse_Ad_ExpandCreativeInfo::default_instance_;
  delete BidResponse_Ad_ExpandCreativeInfo_reflection_;
}

void protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034baidu_realtime_bidding.proto\"\202\037\n\nBidRe"
    "quest\022\n\n\002id\030\001 \002(\t\022\n\n\002ip\030\002 \001(\t\022\022\n\nuser_ag"
    "ent\030\003 \001(\t\022\025\n\rbaidu_user_id\030\004 \001(\t\022\035\n\025baid"
    "u_user_id_version\030\005 \001(\005\022*\n\rbaidu_id_list"
    "\030\010 \003(\0132\023.BidRequest.BaiduId\022\025\n\ruser_cate"
    "gory\030\006 \003(\003\022\"\n\006gender\030\007 \001(\0162\022.BidRequest."
    "Gender\022\031\n\021detected_language\030\t \001(\t\022\025\n\rfla"
    "sh_version\030\n \001(\t\022&\n\ruser_geo_info\030\034 \001(\0132"
    "\017.BidRequest.Geo\022\013\n\003url\030\013 \001(\t\022\017\n\007referer"
    "\030\014 \001(\t\022\025\n\rsite_category\030\r \001(\005\022\024\n\014site_qu"
    "ality\030\016 \001(\005\022\021\n\tpage_type\030\017 \001(\005\022\024\n\014page_k"
    "eyword\030\021 \003(\t\022\024\n\014page_quality\030\022 \001(\005\022\025\n\rpa"
    "ge_vertical\030\025 \001(\005\022%\n\031excluded_product_ca"
    "tegory\030\023 \003(\005B\002\020\001\022\"\n\006mobile\030\035 \001(\0132\022.BidRe"
    "quest.Mobile\022 \n\005video\030\036 \001(\0132\021.BidRequest"
    ".Video\022\"\n\006adslot\030\024 \003(\0132\022.BidRequest.AdSl"
    "ot\022\026\n\007is_test\030\032 \001(\010:\005false\022\026\n\007is_ping\030\033 "
    "\001(\010:\005false\032\?\n\007BaiduId\022\025\n\rbaidu_user_id\030\001"
    " \001(\t\022\035\n\025baidu_user_id_version\030\002 \001(\005\032\351\002\n\003"
    "Geo\0223\n\017user_coordinate\030\001 \003(\0132\032.BidReques"
    "t.Geo.Coordinate\0223\n\ruser_location\030\002 \001(\0132"
    "\034.BidRequest.Geo.UserLocation\032\245\001\n\nCoordi"
    "nate\0225\n\010standard\030\001 \001(\0162#.BidRequest.Geo."
    "Coordinate.Standard\022\020\n\010latitude\030\002 \001(\002\022\021\n"
    "\tlongitude\030\003 \001(\002\";\n\010Standard\022\t\n\005BD_09\020\000\022"
    "\n\n\006GCJ_02\020\001\022\n\n\006WGS_84\020\002\022\014\n\010BD_09_LL\020\003\032P\n"
    "\014UserLocation\022\020\n\010province\030\001 \001(\t\022\014\n\004city\030"
    "\002 \001(\t\022\020\n\010district\030\003 \001(\t\022\016\n\006street\030\004 \001(\t\032"
    "\347\n\n\006Mobile\022\034\n\024DEPRECATED_device_id\030\001 \001(\t"
    "\022\'\n\002id\030\r \003(\0132\033.BidRequest.Mobile.MobileI"
    "D\0228\n\013device_type\030\002 \001(\0162#.BidRequest.Mobi"
    "le.MobileDeviceType\0223\n\010platform\030\003 \001(\0162\025."
    "BidRequest.Mobile.OS:\nUNKNOWN_OS\0226\n\nos_v"
    "ersion\030\004 \001(\0132\".BidRequest.Mobile.DeviceO"
    "sVersion\022\r\n\005brand\030\005 \001(\t\022\r\n\005model\030\006 \001(\t\022\024"
    "\n\014screen_width\030\007 \001(\005\022\025\n\rscreen_height\030\010 "
    "\001(\005\022\022\n\ncarrier_id\030\t \001(\003\022E\n\025wireless_netw"
    "ork_type\030\n \001(\0162&.BidRequest.Mobile.Wirel"
    "essNetworkType\022%\n\035DEPRECATED_for_adverti"
    "sing_id\030\013 \001(\t\022\?\n\022for_advertising_id\030\016 \003("
    "\0132#.BidRequest.Mobile.ForAdvertisingID\0220"
    "\n\nmobile_app\030\014 \001(\0132\034.BidRequest.Mobile.M"
    "obileApp\032r\n\010MobileID\0220\n\004type\030\001 \001(\0162\".Bid"
    "Request.Mobile.MobileID.IDType\022\n\n\002id\030\002 \001"
    "(\t\"(\n\006IDType\022\013\n\007UNKNOWN\020\000\022\010\n\004IMEI\020\001\022\007\n\003M"
    "AC\020\002\032_\n\017DeviceOsVersion\022\030\n\020os_version_ma"
    "jor\030\001 \001(\005\022\030\n\020os_version_minor\030\002 \001(\005\022\030\n\020o"
    "s_version_micro\030\003 \001(\005\032\211\001\n\020ForAdvertising"
    "ID\0228\n\004type\030\001 \001(\0162*.BidRequest.Mobile.For"
    "AdvertisingID.IDType\022\n\n\002id\030\002 \001(\t\"/\n\006IDTy"
    "pe\022\013\n\007UNKNOWN\020\000\022\016\n\nANDROID_ID\020\004\022\010\n\004IDFA\020"
    "\005\032\344\001\n\tMobileApp\022\016\n\006app_id\030\001 \001(\t\022\025\n\rapp_b"
    "undle_id\030\002 \001(\t\022\024\n\014app_category\030\003 \001(\005\022\030\n\020"
    "app_publisher_id\030\004 \001(\005\022M\n\024app_interactio"
    "n_type\030\005 \003(\0162/.BidRequest.Mobile.MobileA"
    "pp.AppInteractionType\"1\n\022AppInteractionT"
    "ype\022\r\n\tTELEPHONE\020\000\022\014\n\010DOWNLOAD\020\001\"E\n\020Mobi"
    "leDeviceType\022\022\n\016UNKNOWN_DEVICE\020\000\022\021\n\rHIGH"
    "END_PHONE\020\001\022\n\n\006TABLET\020\002\"=\n\002OS\022\016\n\nUNKNOWN"
    "_OS\020\000\022\007\n\003IOS\020\001\022\013\n\007ANDROID\020\002\022\021\n\rWINDOWS_P"
    "HONE\020\003\"a\n\023WirelessNetworkType\022\023\n\017UNKNOWN"
    "_NETWORK\020\000\022\010\n\004WIFI\020\001\022\r\n\tMOBILE_2G\020\002\022\r\n\tM"
    "OBILE_3G\020\003\022\r\n\tMOBILE_4G\020\004\032P\n\005Video\022\r\n\005ti"
    "tle\030\001 \001(\t\022\014\n\004tags\030\002 \003(\t\022\026\n\016content_lengt"
    "h\030\003 \001(\005\022\022\n\nchannel_id\030\004 \003(\003\032\330\n\n\006AdSlot\022\024"
    "\n\014ad_block_key\030\001 \001(\004\022\023\n\013sequence_id\030\002 \001("
    "\005\022\023\n\013adslot_type\030\003 \001(\005\022\r\n\005width\030\004 \001(\005\022\016\n"
    "\006height\030\005 \001(\005\022\027\n\017slot_visibility\030\006 \001(\005\022\031"
    "\n\rcreative_type\030\007 \003(\005B\002\020\001\022!\n\031excluded_la"
    "nding_page_url\030\010 \003(\t\022\"\n\032publisher_settin"
    "gs_list_id\030\016 \003(\006\022\023\n\013minimum_cpm\030\t \001(\005\022\032\n"
    "\022max_video_duration\030\n \001(\005\022\032\n\022min_video_d"
    "uration\030\013 \001(\005\022\031\n\021video_start_delay\030\014 \001(\005"
    "\0220\n\nvideo_info\030\017 \001(\0132\034.BidRequest.AdSlot"
    ".VideoInfo\0227\n\016link_unit_info\030\020 \001(\0132\037.Bid"
    "Request.AdSlot.LinkUnitInfo\022C\n\024preferred"
    "_order_info\030\r \001(\0132%.BidRequest.AdSlot.Pr"
    "eferredOrderInfo\022C\n\024expand_creative_info"
    "\030\021 \001(\0132%.BidRequest.AdSlot.ExpandCreativ"
    "eInfo\032^\n\tVideoInfo\022\032\n\022max_video_duration"
    "\030\001 \001(\005\022\032\n\022min_video_duration\030\002 \001(\005\022\031\n\021vi"
    "deo_start_delay\030\003 \001(\005\032U\n\014LinkUnitInfo\022\022\n"
    "\nstyle_type\030\001 \003(\005\022\027\n\017req_keyword_num\030\002 \001"
    "(\005\022\030\n\020proposed_keyword\030\003 \003(\t\032\270\001\n\022Preferr"
    "edOrderInfo\022N\n\020preferred_orders\030\001 \003(\01324."
    "BidRequest.AdSlot.PreferredOrderInfo.Pre"
    "ferredOrder\022\033\n\rallow_auction\030\002 \001(\010:\004true"
    "\0325\n\016PreferredOrder\022\020\n\010order_id\030\001 \001(\t\022\021\n\t"
    "fixed_cpm\030\002 \001(\003\032\244\003\n\022ExpandCreativeInfo\022L"
    "\n\022expand_action_type\030\001 \003(\01620.BidRequest."
    "AdSlot.ExpandCreativeInfo.ActionType\022I\n\020"
    "expand_direction\030\002 \001(\0162/.BidRequest.AdSl"
    "ot.ExpandCreativeInfo.Direction\022 \n\024expan"
    "d_creative_type\030\003 \003(\005B\002\020\001\022\024\n\014expand_widt"
    "h\030\004 \001(\005\022\025\n\rexpand_height\030\005 \001(\005\022\027\n\017expand"
    "_duration\030\006 \001(\005\",\n\nActionType\022\t\n\005HOVER\020\001"
    "\022\t\n\005CLICK\020\002\022\010\n\004LOAD\020\003\"_\n\tDirection\022\017\n\013EX"
    "PAND_NONE\020\000\022\r\n\tEXPAND_UP\020\001\022\017\n\013EXPAND_DOW"
    "N\020\002\022\017\n\013EXPAND_LEFT\020\003\022\020\n\014EXPAND_RIGHT\020\004\"+"
    "\n\006Gender\022\013\n\007UNKNOWN\020\000\022\010\n\004MALE\020\001\022\n\n\006FEMAL"
    "E\020\002\"\342\005\n\013BidResponse\022\n\n\002id\030\001 \002(\t\022\033\n\002ad\030\002 "
    "\003(\0132\017.BidResponse.Ad\022\024\n\014debug_string\030\003 \001"
    "(\t\022\032\n\022processing_time_ms\030\004 \001(\005\032\367\004\n\002Ad\022\023\n"
    "\013sequence_id\030\001 \001(\005\022\023\n\013creative_id\030\002 \001(\003\022"
    "\024\n\014html_snippet\030\007 \001(\t\022:\n\021link_unit_keywo"
    "rd\030\022 \001(\0132\037.BidResponse.Ad.LinkUnitKeywor"
    "d\022\025\n\radvertiser_id\030\010 \001(\004\022\r\n\005width\030\t \001(\005\022"
    "\016\n\006height\030\n \001(\005\022\020\n\010category\030\013 \001(\005\022\014\n\004typ"
    "e\030\014 \001(\005\022\024\n\014landing_page\030\r \001(\t\022\022\n\ntarget_"
    "url\030\016 \003(\t\022\024\n\014monitor_urls\030\021 \003(\t\022@\n\024expan"
    "d_creative_info\030\023 \001(\0132\".BidResponse.Ad.E"
    "xpandCreativeInfo\022\017\n\007max_cpm\030\003 \001(\005\022\017\n\007ex"
    "tdata\030\005 \001(\t\022\032\n\022is_cookie_matching\030\006 \001(\010\022"
    "\032\n\022preferred_order_id\030\017 \001(\t\032\?\n\017LinkUnitK"
    "eyword\022\017\n\007keyword\030\001 \001(\t\022\033\n\023selected_styl"
    "e_type\030\002 \003(\005\032{\n\022ExpandCreativeInfo\022\026\n\016cr"
    "eative_width\030\001 \001(\005\022\027\n\017creative_height\030\002 "
    "\001(\005\022\035\n\025creative_landing_page\030\003 \001(\t\022\025\n\rcr"
    "eative_type\030\004 \001(\005*\005\010d\020\310\001:\"\n\tad_status\022\017."
    "BidResponse.Ad\030e \001(\005", 4780);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "baidu_realtime_bidding.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_BaiduId::default_instance_ = new BidRequest_BaiduId();
  BidRequest_Geo::default_instance_ = new BidRequest_Geo();
  BidRequest_Geo_Coordinate::default_instance_ = new BidRequest_Geo_Coordinate();
  BidRequest_Geo_UserLocation::default_instance_ = new BidRequest_Geo_UserLocation();
  BidRequest_Mobile::default_instance_ = new BidRequest_Mobile();
  BidRequest_Mobile_MobileID::default_instance_ = new BidRequest_Mobile_MobileID();
  BidRequest_Mobile_DeviceOsVersion::default_instance_ = new BidRequest_Mobile_DeviceOsVersion();
  BidRequest_Mobile_ForAdvertisingID::default_instance_ = new BidRequest_Mobile_ForAdvertisingID();
  BidRequest_Mobile_MobileApp::default_instance_ = new BidRequest_Mobile_MobileApp();
  BidRequest_Video::default_instance_ = new BidRequest_Video();
  BidRequest_AdSlot::default_instance_ = new BidRequest_AdSlot();
  BidRequest_AdSlot_VideoInfo::default_instance_ = new BidRequest_AdSlot_VideoInfo();
  BidRequest_AdSlot_LinkUnitInfo::default_instance_ = new BidRequest_AdSlot_LinkUnitInfo();
  BidRequest_AdSlot_PreferredOrderInfo::default_instance_ = new BidRequest_AdSlot_PreferredOrderInfo();
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_ = new BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder();
  BidRequest_AdSlot_ExpandCreativeInfo::default_instance_ = new BidRequest_AdSlot_ExpandCreativeInfo();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Ad::default_instance_ = new BidResponse_Ad();
  BidResponse_Ad_LinkUnitKeyword::default_instance_ = new BidResponse_Ad_LinkUnitKeyword();
  BidResponse_Ad_ExpandCreativeInfo::default_instance_ = new BidResponse_Ad_ExpandCreativeInfo();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::BidResponse_Ad::default_instance(),
    101, 5, false, false);
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_BaiduId::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo_Coordinate::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo_UserLocation::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_MobileID::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_DeviceOsVersion::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_ForAdvertisingID::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_MobileApp::default_instance_->InitAsDefaultInstance();
  BidRequest_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_VideoInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_LinkUnitInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_PreferredOrderInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_ExpandCreativeInfo::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_LinkUnitKeyword::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_ExpandCreativeInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_baidu_5frealtime_5fbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_baidu_5frealtime_5fbidding_2eproto {
  StaticDescriptorInitializer_baidu_5frealtime_5fbidding_2eproto() {
    protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  }
} static_descriptor_initializer_baidu_5frealtime_5fbidding_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BidRequest_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Gender_descriptor_;
}
bool BidRequest_Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Gender BidRequest::UNKNOWN;
const BidRequest_Gender BidRequest::MALE;
const BidRequest_Gender BidRequest::FEMALE;
const BidRequest_Gender BidRequest::Gender_MIN;
const BidRequest_Gender BidRequest::Gender_MAX;
const int BidRequest::Gender_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_BaiduId::kBaiduUserIdFieldNumber;
const int BidRequest_BaiduId::kBaiduUserIdVersionFieldNumber;
#endif  // !_MSC_VER

BidRequest_BaiduId::BidRequest_BaiduId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.BaiduId)
}

void BidRequest_BaiduId::InitAsDefaultInstance() {
}

BidRequest_BaiduId::BidRequest_BaiduId(const BidRequest_BaiduId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.BaiduId)
}

void BidRequest_BaiduId::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  baidu_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baidu_user_id_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_BaiduId::~BidRequest_BaiduId() {
  // @@protoc_insertion_point(destructor:BidRequest.BaiduId)
  SharedDtor();
}

void BidRequest_BaiduId::SharedDtor() {
  if (baidu_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete baidu_user_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_BaiduId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_BaiduId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_BaiduId_descriptor_;
}

const BidRequest_BaiduId& BidRequest_BaiduId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_BaiduId* BidRequest_BaiduId::default_instance_ = NULL;

BidRequest_BaiduId* BidRequest_BaiduId::New() const {
  return new BidRequest_BaiduId;
}

void BidRequest_BaiduId::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_baidu_user_id()) {
      if (baidu_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        baidu_user_id_->clear();
      }
    }
    baidu_user_id_version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_BaiduId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.BaiduId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string baidu_user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baidu_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->baidu_user_id().data(), this->baidu_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "baidu_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_baidu_user_id_version;
        break;
      }

      // optional int32 baidu_user_id_version = 2;
      case 2: {
        if (tag == 16) {
         parse_baidu_user_id_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baidu_user_id_version_)));
          set_has_baidu_user_id_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.BaiduId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.BaiduId)
  return false;
#undef DO_
}

void BidRequest_BaiduId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.BaiduId)
  // optional string baidu_user_id = 1;
  if (has_baidu_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baidu_user_id().data(), this->baidu_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "baidu_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->baidu_user_id(), output);
  }

  // optional int32 baidu_user_id_version = 2;
  if (has_baidu_user_id_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->baidu_user_id_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.BaiduId)
}

::google::protobuf::uint8* BidRequest_BaiduId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.BaiduId)
  // optional string baidu_user_id = 1;
  if (has_baidu_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baidu_user_id().data(), this->baidu_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "baidu_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->baidu_user_id(), target);
  }

  // optional int32 baidu_user_id_version = 2;
  if (has_baidu_user_id_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->baidu_user_id_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.BaiduId)
  return target;
}

int BidRequest_BaiduId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string baidu_user_id = 1;
    if (has_baidu_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baidu_user_id());
    }

    // optional int32 baidu_user_id_version = 2;
    if (has_baidu_user_id_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baidu_user_id_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_BaiduId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_BaiduId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_BaiduId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_BaiduId::MergeFrom(const BidRequest_BaiduId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baidu_user_id()) {
      set_baidu_user_id(from.baidu_user_id());
    }
    if (from.has_baidu_user_id_version()) {
      set_baidu_user_id_version(from.baidu_user_id_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_BaiduId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_BaiduId::CopyFrom(const BidRequest_BaiduId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_BaiduId::IsInitialized() const {

  return true;
}

void BidRequest_BaiduId::Swap(BidRequest_BaiduId* other) {
  if (other != this) {
    std::swap(baidu_user_id_, other->baidu_user_id_);
    std::swap(baidu_user_id_version_, other->baidu_user_id_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_BaiduId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_BaiduId_descriptor_;
  metadata.reflection = BidRequest_BaiduId_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Geo_Coordinate_Standard_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_Coordinate_Standard_descriptor_;
}
bool BidRequest_Geo_Coordinate_Standard_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::BD_09;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::GCJ_02;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::WGS_84;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::BD_09_LL;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::Standard_MIN;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::Standard_MAX;
const int BidRequest_Geo_Coordinate::Standard_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Geo_Coordinate::kStandardFieldNumber;
const int BidRequest_Geo_Coordinate::kLatitudeFieldNumber;
const int BidRequest_Geo_Coordinate::kLongitudeFieldNumber;
#endif  // !_MSC_VER

BidRequest_Geo_Coordinate::BidRequest_Geo_Coordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Geo.Coordinate)
}

void BidRequest_Geo_Coordinate::InitAsDefaultInstance() {
}

BidRequest_Geo_Coordinate::BidRequest_Geo_Coordinate(const BidRequest_Geo_Coordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Geo.Coordinate)
}

void BidRequest_Geo_Coordinate::SharedCtor() {
  _cached_size_ = 0;
  standard_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo_Coordinate::~BidRequest_Geo_Coordinate() {
  // @@protoc_insertion_point(destructor:BidRequest.Geo.Coordinate)
  SharedDtor();
}

void BidRequest_Geo_Coordinate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Geo_Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo_Coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_Coordinate_descriptor_;
}

const BidRequest_Geo_Coordinate& BidRequest_Geo_Coordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Geo_Coordinate* BidRequest_Geo_Coordinate::default_instance_ = NULL;

BidRequest_Geo_Coordinate* BidRequest_Geo_Coordinate::New() const {
  return new BidRequest_Geo_Coordinate;
}

void BidRequest_Geo_Coordinate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Geo_Coordinate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(standard_, longitude_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Geo_Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Geo.Coordinate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BidRequest.Geo.Coordinate.Standard standard = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Geo_Coordinate_Standard_IsValid(value)) {
            set_standard(static_cast< ::BidRequest_Geo_Coordinate_Standard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_latitude;
        break;
      }

      // optional float latitude = 2;
      case 2: {
        if (tag == 21) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_longitude;
        break;
      }

      // optional float longitude = 3;
      case 3: {
        if (tag == 29) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Geo.Coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Geo.Coordinate)
  return false;
#undef DO_
}

void BidRequest_Geo_Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Geo.Coordinate)
  // optional .BidRequest.Geo.Coordinate.Standard standard = 1;
  if (has_standard()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->standard(), output);
  }

  // optional float latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Geo.Coordinate)
}

::google::protobuf::uint8* BidRequest_Geo_Coordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Geo.Coordinate)
  // optional .BidRequest.Geo.Coordinate.Standard standard = 1;
  if (has_standard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->standard(), target);
  }

  // optional float latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Geo.Coordinate)
  return target;
}

int BidRequest_Geo_Coordinate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BidRequest.Geo.Coordinate.Standard standard = 1;
    if (has_standard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->standard());
    }

    // optional float latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo_Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Geo_Coordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Geo_Coordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Geo_Coordinate::MergeFrom(const BidRequest_Geo_Coordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_standard()) {
      set_standard(from.standard());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Geo_Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo_Coordinate::CopyFrom(const BidRequest_Geo_Coordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo_Coordinate::IsInitialized() const {

  return true;
}

void BidRequest_Geo_Coordinate::Swap(BidRequest_Geo_Coordinate* other) {
  if (other != this) {
    std::swap(standard_, other->standard_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Geo_Coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_Coordinate_descriptor_;
  metadata.reflection = BidRequest_Geo_Coordinate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Geo_UserLocation::kProvinceFieldNumber;
const int BidRequest_Geo_UserLocation::kCityFieldNumber;
const int BidRequest_Geo_UserLocation::kDistrictFieldNumber;
const int BidRequest_Geo_UserLocation::kStreetFieldNumber;
#endif  // !_MSC_VER

BidRequest_Geo_UserLocation::BidRequest_Geo_UserLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Geo.UserLocation)
}

void BidRequest_Geo_UserLocation::InitAsDefaultInstance() {
}

BidRequest_Geo_UserLocation::BidRequest_Geo_UserLocation(const BidRequest_Geo_UserLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Geo.UserLocation)
}

void BidRequest_Geo_UserLocation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  district_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo_UserLocation::~BidRequest_Geo_UserLocation() {
  // @@protoc_insertion_point(destructor:BidRequest.Geo.UserLocation)
  SharedDtor();
}

void BidRequest_Geo_UserLocation::SharedDtor() {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (district_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete district_;
  }
  if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete street_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Geo_UserLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo_UserLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_UserLocation_descriptor_;
}

const BidRequest_Geo_UserLocation& BidRequest_Geo_UserLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Geo_UserLocation* BidRequest_Geo_UserLocation::default_instance_ = NULL;

BidRequest_Geo_UserLocation* BidRequest_Geo_UserLocation::New() const {
  return new BidRequest_Geo_UserLocation;
}

void BidRequest_Geo_UserLocation::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_district()) {
      if (district_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        district_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        street_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Geo_UserLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Geo.UserLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional string city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_district;
        break;
      }

      // optional string district = 3;
      case 3: {
        if (tag == 26) {
         parse_district:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_district()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->district().data(), this->district().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "district");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_street;
        break;
      }

      // optional string street = 4;
      case 4: {
        if (tag == 34) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "street");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Geo.UserLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Geo.UserLocation)
  return false;
#undef DO_
}

void BidRequest_Geo_UserLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Geo.UserLocation)
  // optional string province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->province(), output);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city(), output);
  }

  // optional string district = 3;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "district");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->district(), output);
  }

  // optional string street = 4;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->street(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Geo.UserLocation)
}

::google::protobuf::uint8* BidRequest_Geo_UserLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Geo.UserLocation)
  // optional string province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->province(), target);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }

  // optional string district = 3;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "district");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->district(), target);
  }

  // optional string street = 4;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->street(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Geo.UserLocation)
  return target;
}

int BidRequest_Geo_UserLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string district = 3;
    if (has_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->district());
    }

    // optional string street = 4;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo_UserLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Geo_UserLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Geo_UserLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Geo_UserLocation::MergeFrom(const BidRequest_Geo_UserLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_district()) {
      set_district(from.district());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Geo_UserLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo_UserLocation::CopyFrom(const BidRequest_Geo_UserLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo_UserLocation::IsInitialized() const {

  return true;
}

void BidRequest_Geo_UserLocation::Swap(BidRequest_Geo_UserLocation* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(district_, other->district_);
    std::swap(street_, other->street_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Geo_UserLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_UserLocation_descriptor_;
  metadata.reflection = BidRequest_Geo_UserLocation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Geo::kUserCoordinateFieldNumber;
const int BidRequest_Geo::kUserLocationFieldNumber;
#endif  // !_MSC_VER

BidRequest_Geo::BidRequest_Geo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Geo)
}

void BidRequest_Geo::InitAsDefaultInstance() {
  user_location_ = const_cast< ::BidRequest_Geo_UserLocation*>(&::BidRequest_Geo_UserLocation::default_instance());
}

BidRequest_Geo::BidRequest_Geo(const BidRequest_Geo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Geo)
}

void BidRequest_Geo::SharedCtor() {
  _cached_size_ = 0;
  user_location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo::~BidRequest_Geo() {
  // @@protoc_insertion_point(destructor:BidRequest.Geo)
  SharedDtor();
}

void BidRequest_Geo::SharedDtor() {
  if (this != default_instance_) {
    delete user_location_;
  }
}

void BidRequest_Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_descriptor_;
}

const BidRequest_Geo& BidRequest_Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Geo* BidRequest_Geo::default_instance_ = NULL;

BidRequest_Geo* BidRequest_Geo::New() const {
  return new BidRequest_Geo;
}

void BidRequest_Geo::Clear() {
  if (has_user_location()) {
    if (user_location_ != NULL) user_location_->::BidRequest_Geo_UserLocation::Clear();
  }
  user_coordinate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BidRequest.Geo.Coordinate user_coordinate = 1;
      case 1: {
        if (tag == 10) {
         parse_user_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_coordinate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_coordinate;
        if (input->ExpectTag(18)) goto parse_user_location;
        break;
      }

      // optional .BidRequest.Geo.UserLocation user_location = 2;
      case 2: {
        if (tag == 18) {
         parse_user_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Geo)
  return false;
#undef DO_
}

void BidRequest_Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Geo)
  // repeated .BidRequest.Geo.Coordinate user_coordinate = 1;
  for (int i = 0; i < this->user_coordinate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_coordinate(i), output);
  }

  // optional .BidRequest.Geo.UserLocation user_location = 2;
  if (has_user_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Geo)
}

::google::protobuf::uint8* BidRequest_Geo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Geo)
  // repeated .BidRequest.Geo.Coordinate user_coordinate = 1;
  for (int i = 0; i < this->user_coordinate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_coordinate(i), target);
  }

  // optional .BidRequest.Geo.UserLocation user_location = 2;
  if (has_user_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Geo)
  return target;
}

int BidRequest_Geo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .BidRequest.Geo.UserLocation user_location = 2;
    if (has_user_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_location());
    }

  }
  // repeated .BidRequest.Geo.Coordinate user_coordinate = 1;
  total_size += 1 * this->user_coordinate_size();
  for (int i = 0; i < this->user_coordinate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_coordinate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Geo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Geo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Geo::MergeFrom(const BidRequest_Geo& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_coordinate_.MergeFrom(from.user_coordinate_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_user_location()) {
      mutable_user_location()->::BidRequest_Geo_UserLocation::MergeFrom(from.user_location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Geo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo::CopyFrom(const BidRequest_Geo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo::IsInitialized() const {

  return true;
}

void BidRequest_Geo::Swap(BidRequest_Geo* other) {
  if (other != this) {
    user_coordinate_.Swap(&other->user_coordinate_);
    std::swap(user_location_, other->user_location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_descriptor_;
  metadata.reflection = BidRequest_Geo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileDeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileDeviceType_descriptor_;
}
bool BidRequest_Mobile_MobileDeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::UNKNOWN_DEVICE;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::HIGHEND_PHONE;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::TABLET;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::MobileDeviceType_MIN;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::MobileDeviceType_MAX;
const int BidRequest_Mobile::MobileDeviceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_OS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_OS_descriptor_;
}
bool BidRequest_Mobile_OS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_OS BidRequest_Mobile::UNKNOWN_OS;
const BidRequest_Mobile_OS BidRequest_Mobile::IOS;
const BidRequest_Mobile_OS BidRequest_Mobile::ANDROID;
const BidRequest_Mobile_OS BidRequest_Mobile::WINDOWS_PHONE;
const BidRequest_Mobile_OS BidRequest_Mobile::OS_MIN;
const BidRequest_Mobile_OS BidRequest_Mobile::OS_MAX;
const int BidRequest_Mobile::OS_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_WirelessNetworkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_WirelessNetworkType_descriptor_;
}
bool BidRequest_Mobile_WirelessNetworkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::UNKNOWN_NETWORK;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::WIFI;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::MOBILE_2G;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::MOBILE_3G;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::MOBILE_4G;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::WirelessNetworkType_MIN;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::WirelessNetworkType_MAX;
const int BidRequest_Mobile::WirelessNetworkType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileID_IDType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileID_IDType_descriptor_;
}
bool BidRequest_Mobile_MobileID_IDType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::UNKNOWN;
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::IMEI;
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::MAC;
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::IDType_MIN;
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::IDType_MAX;
const int BidRequest_Mobile_MobileID::IDType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Mobile_MobileID::kTypeFieldNumber;
const int BidRequest_Mobile_MobileID::kIdFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_MobileID::BidRequest_Mobile_MobileID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Mobile.MobileID)
}

void BidRequest_Mobile_MobileID::InitAsDefaultInstance() {
}

BidRequest_Mobile_MobileID::BidRequest_Mobile_MobileID(const BidRequest_Mobile_MobileID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Mobile.MobileID)
}

void BidRequest_Mobile_MobileID::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_MobileID::~BidRequest_Mobile_MobileID() {
  // @@protoc_insertion_point(destructor:BidRequest.Mobile.MobileID)
  SharedDtor();
}

void BidRequest_Mobile_MobileID::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_MobileID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_MobileID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileID_descriptor_;
}

const BidRequest_Mobile_MobileID& BidRequest_Mobile_MobileID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_MobileID* BidRequest_Mobile_MobileID::default_instance_ = NULL;

BidRequest_Mobile_MobileID* BidRequest_Mobile_MobileID::New() const {
  return new BidRequest_Mobile_MobileID;
}

void BidRequest_Mobile_MobileID::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_MobileID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Mobile.MobileID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BidRequest.Mobile.MobileID.IDType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Mobile_MobileID_IDType_IsValid(value)) {
            set_type(static_cast< ::BidRequest_Mobile_MobileID_IDType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Mobile.MobileID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Mobile.MobileID)
  return false;
#undef DO_
}

void BidRequest_Mobile_MobileID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Mobile.MobileID)
  // optional .BidRequest.Mobile.MobileID.IDType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Mobile.MobileID)
}

::google::protobuf::uint8* BidRequest_Mobile_MobileID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Mobile.MobileID)
  // optional .BidRequest.Mobile.MobileID.IDType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Mobile.MobileID)
  return target;
}

int BidRequest_Mobile_MobileID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BidRequest.Mobile.MobileID.IDType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_MobileID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_MobileID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_MobileID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_MobileID::MergeFrom(const BidRequest_Mobile_MobileID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_MobileID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_MobileID::CopyFrom(const BidRequest_Mobile_MobileID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_MobileID::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_MobileID::Swap(BidRequest_Mobile_MobileID* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_MobileID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_MobileID_descriptor_;
  metadata.reflection = BidRequest_Mobile_MobileID_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMajorFieldNumber;
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMinorFieldNumber;
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMicroFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_DeviceOsVersion::BidRequest_Mobile_DeviceOsVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Mobile.DeviceOsVersion)
}

void BidRequest_Mobile_DeviceOsVersion::InitAsDefaultInstance() {
}

BidRequest_Mobile_DeviceOsVersion::BidRequest_Mobile_DeviceOsVersion(const BidRequest_Mobile_DeviceOsVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Mobile.DeviceOsVersion)
}

void BidRequest_Mobile_DeviceOsVersion::SharedCtor() {
  _cached_size_ = 0;
  os_version_major_ = 0;
  os_version_minor_ = 0;
  os_version_micro_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_DeviceOsVersion::~BidRequest_Mobile_DeviceOsVersion() {
  // @@protoc_insertion_point(destructor:BidRequest.Mobile.DeviceOsVersion)
  SharedDtor();
}

void BidRequest_Mobile_DeviceOsVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_DeviceOsVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_DeviceOsVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_DeviceOsVersion_descriptor_;
}

const BidRequest_Mobile_DeviceOsVersion& BidRequest_Mobile_DeviceOsVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile_DeviceOsVersion::default_instance_ = NULL;

BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile_DeviceOsVersion::New() const {
  return new BidRequest_Mobile_DeviceOsVersion;
}

void BidRequest_Mobile_DeviceOsVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile_DeviceOsVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(os_version_major_, os_version_micro_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_DeviceOsVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Mobile.DeviceOsVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 os_version_major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_major_)));
          set_has_os_version_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_os_version_minor;
        break;
      }

      // optional int32 os_version_minor = 2;
      case 2: {
        if (tag == 16) {
         parse_os_version_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_minor_)));
          set_has_os_version_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_os_version_micro;
        break;
      }

      // optional int32 os_version_micro = 3;
      case 3: {
        if (tag == 24) {
         parse_os_version_micro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_micro_)));
          set_has_os_version_micro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Mobile.DeviceOsVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Mobile.DeviceOsVersion)
  return false;
#undef DO_
}

void BidRequest_Mobile_DeviceOsVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Mobile.DeviceOsVersion)
  // optional int32 os_version_major = 1;
  if (has_os_version_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->os_version_major(), output);
  }

  // optional int32 os_version_minor = 2;
  if (has_os_version_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->os_version_minor(), output);
  }

  // optional int32 os_version_micro = 3;
  if (has_os_version_micro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->os_version_micro(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Mobile.DeviceOsVersion)
}

::google::protobuf::uint8* BidRequest_Mobile_DeviceOsVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Mobile.DeviceOsVersion)
  // optional int32 os_version_major = 1;
  if (has_os_version_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->os_version_major(), target);
  }

  // optional int32 os_version_minor = 2;
  if (has_os_version_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->os_version_minor(), target);
  }

  // optional int32 os_version_micro = 3;
  if (has_os_version_micro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->os_version_micro(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Mobile.DeviceOsVersion)
  return target;
}

int BidRequest_Mobile_DeviceOsVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 os_version_major = 1;
    if (has_os_version_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_major());
    }

    // optional int32 os_version_minor = 2;
    if (has_os_version_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_minor());
    }

    // optional int32 os_version_micro = 3;
    if (has_os_version_micro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_micro());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_DeviceOsVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_DeviceOsVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_DeviceOsVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_DeviceOsVersion::MergeFrom(const BidRequest_Mobile_DeviceOsVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os_version_major()) {
      set_os_version_major(from.os_version_major());
    }
    if (from.has_os_version_minor()) {
      set_os_version_minor(from.os_version_minor());
    }
    if (from.has_os_version_micro()) {
      set_os_version_micro(from.os_version_micro());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_DeviceOsVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_DeviceOsVersion::CopyFrom(const BidRequest_Mobile_DeviceOsVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_DeviceOsVersion::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_DeviceOsVersion::Swap(BidRequest_Mobile_DeviceOsVersion* other) {
  if (other != this) {
    std::swap(os_version_major_, other->os_version_major_);
    std::swap(os_version_minor_, other->os_version_minor_);
    std::swap(os_version_micro_, other->os_version_micro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_DeviceOsVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_DeviceOsVersion_descriptor_;
  metadata.reflection = BidRequest_Mobile_DeviceOsVersion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_ForAdvertisingID_IDType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_ForAdvertisingID_IDType_descriptor_;
}
bool BidRequest_Mobile_ForAdvertisingID_IDType_IsValid(int value) {
  switch(value) {
    case 0:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::UNKNOWN;
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::ANDROID_ID;
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::IDFA;
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::IDType_MIN;
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::IDType_MAX;
const int BidRequest_Mobile_ForAdvertisingID::IDType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Mobile_ForAdvertisingID::kTypeFieldNumber;
const int BidRequest_Mobile_ForAdvertisingID::kIdFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_ForAdvertisingID::BidRequest_Mobile_ForAdvertisingID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Mobile.ForAdvertisingID)
}

void BidRequest_Mobile_ForAdvertisingID::InitAsDefaultInstance() {
}

BidRequest_Mobile_ForAdvertisingID::BidRequest_Mobile_ForAdvertisingID(const BidRequest_Mobile_ForAdvertisingID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Mobile.ForAdvertisingID)
}

void BidRequest_Mobile_ForAdvertisingID::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_ForAdvertisingID::~BidRequest_Mobile_ForAdvertisingID() {
  // @@protoc_insertion_point(destructor:BidRequest.Mobile.ForAdvertisingID)
  SharedDtor();
}

void BidRequest_Mobile_ForAdvertisingID::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_ForAdvertisingID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_ForAdvertisingID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_ForAdvertisingID_descriptor_;
}

const BidRequest_Mobile_ForAdvertisingID& BidRequest_Mobile_ForAdvertisingID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_ForAdvertisingID* BidRequest_Mobile_ForAdvertisingID::default_instance_ = NULL;

BidRequest_Mobile_ForAdvertisingID* BidRequest_Mobile_ForAdvertisingID::New() const {
  return new BidRequest_Mobile_ForAdvertisingID;
}

void BidRequest_Mobile_ForAdvertisingID::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_ForAdvertisingID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Mobile.ForAdvertisingID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BidRequest.Mobile.ForAdvertisingID.IDType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Mobile_ForAdvertisingID_IDType_IsValid(value)) {
            set_type(static_cast< ::BidRequest_Mobile_ForAdvertisingID_IDType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Mobile.ForAdvertisingID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Mobile.ForAdvertisingID)
  return false;
#undef DO_
}

void BidRequest_Mobile_ForAdvertisingID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Mobile.ForAdvertisingID)
  // optional .BidRequest.Mobile.ForAdvertisingID.IDType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Mobile.ForAdvertisingID)
}

::google::protobuf::uint8* BidRequest_Mobile_ForAdvertisingID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Mobile.ForAdvertisingID)
  // optional .BidRequest.Mobile.ForAdvertisingID.IDType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Mobile.ForAdvertisingID)
  return target;
}

int BidRequest_Mobile_ForAdvertisingID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BidRequest.Mobile.ForAdvertisingID.IDType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_ForAdvertisingID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_ForAdvertisingID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_ForAdvertisingID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_ForAdvertisingID::MergeFrom(const BidRequest_Mobile_ForAdvertisingID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_ForAdvertisingID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_ForAdvertisingID::CopyFrom(const BidRequest_Mobile_ForAdvertisingID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_ForAdvertisingID::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_ForAdvertisingID::Swap(BidRequest_Mobile_ForAdvertisingID* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_ForAdvertisingID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_ForAdvertisingID_descriptor_;
  metadata.reflection = BidRequest_Mobile_ForAdvertisingID_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileApp_AppInteractionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileApp_AppInteractionType_descriptor_;
}
bool BidRequest_Mobile_MobileApp_AppInteractionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::TELEPHONE;
const BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::DOWNLOAD;
const BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::AppInteractionType_MIN;
const BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::AppInteractionType_MAX;
const int BidRequest_Mobile_MobileApp::AppInteractionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Mobile_MobileApp::kAppIdFieldNumber;
const int BidRequest_Mobile_MobileApp::kAppBundleIdFieldNumber;
const int BidRequest_Mobile_MobileApp::kAppCategoryFieldNumber;
const int BidRequest_Mobile_MobileApp::kAppPublisherIdFieldNumber;
const int BidRequest_Mobile_MobileApp::kAppInteractionTypeFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_MobileApp::BidRequest_Mobile_MobileApp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Mobile.MobileApp)
}

void BidRequest_Mobile_MobileApp::InitAsDefaultInstance() {
}

BidRequest_Mobile_MobileApp::BidRequest_Mobile_MobileApp(const BidRequest_Mobile_MobileApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Mobile.MobileApp)
}

void BidRequest_Mobile_MobileApp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_bundle_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_category_ = 0;
  app_publisher_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_MobileApp::~BidRequest_Mobile_MobileApp() {
  // @@protoc_insertion_point(destructor:BidRequest.Mobile.MobileApp)
  SharedDtor();
}

void BidRequest_Mobile_MobileApp::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_id_;
  }
  if (app_bundle_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_bundle_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_MobileApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_MobileApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileApp_descriptor_;
}

const BidRequest_Mobile_MobileApp& BidRequest_Mobile_MobileApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_MobileApp* BidRequest_Mobile_MobileApp::default_instance_ = NULL;

BidRequest_Mobile_MobileApp* BidRequest_Mobile_MobileApp::New() const {
  return new BidRequest_Mobile_MobileApp;
}

void BidRequest_Mobile_MobileApp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile_MobileApp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(app_category_, app_publisher_id_);
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_id_->clear();
      }
    }
    if (has_app_bundle_id()) {
      if (app_bundle_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_bundle_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  app_interaction_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_MobileApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Mobile.MobileApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_bundle_id;
        break;
      }

      // optional string app_bundle_id = 2;
      case 2: {
        if (tag == 18) {
         parse_app_bundle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_bundle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_bundle_id().data(), this->app_bundle_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_bundle_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_app_category;
        break;
      }

      // optional int32 app_category = 3;
      case 3: {
        if (tag == 24) {
         parse_app_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_category_)));
          set_has_app_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_app_publisher_id;
        break;
      }

      // optional int32 app_publisher_id = 4;
      case 4: {
        if (tag == 32) {
         parse_app_publisher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_publisher_id_)));
          set_has_app_publisher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_app_interaction_type;
        break;
      }

      // repeated .BidRequest.Mobile.MobileApp.AppInteractionType app_interaction_type = 5;
      case 5: {
        if (tag == 40) {
         parse_app_interaction_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Mobile_MobileApp_AppInteractionType_IsValid(value)) {
            add_app_interaction_type(static_cast< ::BidRequest_Mobile_MobileApp_AppInteractionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::BidRequest_Mobile_MobileApp_AppInteractionType_IsValid,
                 this->mutable_app_interaction_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_app_interaction_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Mobile.MobileApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Mobile.MobileApp)
  return false;
#undef DO_
}

void BidRequest_Mobile_MobileApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Mobile.MobileApp)
  // optional string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // optional string app_bundle_id = 2;
  if (has_app_bundle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_bundle_id().data(), this->app_bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_bundle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_bundle_id(), output);
  }

  // optional int32 app_category = 3;
  if (has_app_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->app_category(), output);
  }

  // optional int32 app_publisher_id = 4;
  if (has_app_publisher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->app_publisher_id(), output);
  }

  // repeated .BidRequest.Mobile.MobileApp.AppInteractionType app_interaction_type = 5;
  for (int i = 0; i < this->app_interaction_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->app_interaction_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Mobile.MobileApp)
}

::google::protobuf::uint8* BidRequest_Mobile_MobileApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Mobile.MobileApp)
  // optional string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // optional string app_bundle_id = 2;
  if (has_app_bundle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_bundle_id().data(), this->app_bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_bundle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_bundle_id(), target);
  }

  // optional int32 app_category = 3;
  if (has_app_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->app_category(), target);
  }

  // optional int32 app_publisher_id = 4;
  if (has_app_publisher_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->app_publisher_id(), target);
  }

  // repeated .BidRequest.Mobile.MobileApp.AppInteractionType app_interaction_type = 5;
  for (int i = 0; i < this->app_interaction_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->app_interaction_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Mobile.MobileApp)
  return target;
}

int BidRequest_Mobile_MobileApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string app_bundle_id = 2;
    if (has_app_bundle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_bundle_id());
    }

    // optional int32 app_category = 3;
    if (has_app_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_category());
    }

    // optional int32 app_publisher_id = 4;
    if (has_app_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_publisher_id());
    }

  }
  // repeated .BidRequest.Mobile.MobileApp.AppInteractionType app_interaction_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_interaction_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->app_interaction_type(i));
    }
    total_size += 1 * this->app_interaction_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_MobileApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_MobileApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_MobileApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_MobileApp::MergeFrom(const BidRequest_Mobile_MobileApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  app_interaction_type_.MergeFrom(from.app_interaction_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_app_bundle_id()) {
      set_app_bundle_id(from.app_bundle_id());
    }
    if (from.has_app_category()) {
      set_app_category(from.app_category());
    }
    if (from.has_app_publisher_id()) {
      set_app_publisher_id(from.app_publisher_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_MobileApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_MobileApp::CopyFrom(const BidRequest_Mobile_MobileApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_MobileApp::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_MobileApp::Swap(BidRequest_Mobile_MobileApp* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(app_bundle_id_, other->app_bundle_id_);
    std::swap(app_category_, other->app_category_);
    std::swap(app_publisher_id_, other->app_publisher_id_);
    app_interaction_type_.Swap(&other->app_interaction_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_MobileApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_MobileApp_descriptor_;
  metadata.reflection = BidRequest_Mobile_MobileApp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile::kDEPRECATEDDeviceIdFieldNumber;
const int BidRequest_Mobile::kIdFieldNumber;
const int BidRequest_Mobile::kDeviceTypeFieldNumber;
const int BidRequest_Mobile::kPlatformFieldNumber;
const int BidRequest_Mobile::kOsVersionFieldNumber;
const int BidRequest_Mobile::kBrandFieldNumber;
const int BidRequest_Mobile::kModelFieldNumber;
const int BidRequest_Mobile::kScreenWidthFieldNumber;
const int BidRequest_Mobile::kScreenHeightFieldNumber;
const int BidRequest_Mobile::kCarrierIdFieldNumber;
const int BidRequest_Mobile::kWirelessNetworkTypeFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDForAdvertisingIdFieldNumber;
const int BidRequest_Mobile::kForAdvertisingIdFieldNumber;
const int BidRequest_Mobile::kMobileAppFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile::BidRequest_Mobile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Mobile)
}

void BidRequest_Mobile::InitAsDefaultInstance() {
  os_version_ = const_cast< ::BidRequest_Mobile_DeviceOsVersion*>(&::BidRequest_Mobile_DeviceOsVersion::default_instance());
  mobile_app_ = const_cast< ::BidRequest_Mobile_MobileApp*>(&::BidRequest_Mobile_MobileApp::default_instance());
}

BidRequest_Mobile::BidRequest_Mobile(const BidRequest_Mobile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Mobile)
}

void BidRequest_Mobile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deprecated_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
  platform_ = 0;
  os_version_ = NULL;
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  screen_width_ = 0;
  screen_height_ = 0;
  carrier_id_ = GOOGLE_LONGLONG(0);
  wireless_network_type_ = 0;
  deprecated_for_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_app_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile::~BidRequest_Mobile() {
  // @@protoc_insertion_point(destructor:BidRequest.Mobile)
  SharedDtor();
}

void BidRequest_Mobile::SharedDtor() {
  if (deprecated_device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_device_id_;
  }
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (deprecated_for_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_for_advertising_id_;
  }
  if (this != default_instance_) {
    delete os_version_;
    delete mobile_app_;
  }
}

void BidRequest_Mobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_descriptor_;
}

const BidRequest_Mobile& BidRequest_Mobile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile* BidRequest_Mobile::default_instance_ = NULL;

BidRequest_Mobile* BidRequest_Mobile::New() const {
  return new BidRequest_Mobile;
}

void BidRequest_Mobile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(device_type_, platform_);
    if (has_deprecated_device_id()) {
      if (deprecated_device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_device_id_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != NULL) os_version_->::BidRequest_Mobile_DeviceOsVersion::Clear();
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    screen_width_ = 0;
  }
  if (_has_bits_[8 / 32] & 12032) {
    ZR_(screen_height_, carrier_id_);
    wireless_network_type_ = 0;
    if (has_deprecated_for_advertising_id()) {
      if (deprecated_for_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_for_advertising_id_->clear();
      }
    }
    if (has_mobile_app()) {
      if (mobile_app_ != NULL) mobile_app_->::BidRequest_Mobile_MobileApp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  for_advertising_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Mobile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DEPRECATED_device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_device_id().data(), this->deprecated_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_type;
        break;
      }

      // optional .BidRequest.Mobile.MobileDeviceType device_type = 2;
      case 2: {
        if (tag == 16) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Mobile_MobileDeviceType_IsValid(value)) {
            set_device_type(static_cast< ::BidRequest_Mobile_MobileDeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional .BidRequest.Mobile.OS platform = 3 [default = UNKNOWN_OS];
      case 3: {
        if (tag == 24) {
         parse_platform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Mobile_OS_IsValid(value)) {
            set_platform(static_cast< ::BidRequest_Mobile_OS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_os_version;
        break;
      }

      // optional .BidRequest.Mobile.DeviceOsVersion os_version = 4;
      case 4: {
        if (tag == 34) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_brand;
        break;
      }

      // optional string brand = 5;
      case 5: {
        if (tag == 42) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_model;
        break;
      }

      // optional string model = 6;
      case 6: {
        if (tag == 50) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screen_width;
        break;
      }

      // optional int32 screen_width = 7;
      case 7: {
        if (tag == 56) {
         parse_screen_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_width_)));
          set_has_screen_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_screen_height;
        break;
      }

      // optional int32 screen_height = 8;
      case 8: {
        if (tag == 64) {
         parse_screen_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_height_)));
          set_has_screen_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_carrier_id;
        break;
      }

      // optional int64 carrier_id = 9;
      case 9: {
        if (tag == 72) {
         parse_carrier_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrier_id_)));
          set_has_carrier_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_wireless_network_type;
        break;
      }

      // optional .BidRequest.Mobile.WirelessNetworkType wireless_network_type = 10;
      case 10: {
        if (tag == 80) {
         parse_wireless_network_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Mobile_WirelessNetworkType_IsValid(value)) {
            set_wireless_network_type(static_cast< ::BidRequest_Mobile_WirelessNetworkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_DEPRECATED_for_advertising_id;
        break;
      }

      // optional string DEPRECATED_for_advertising_id = 11;
      case 11: {
        if (tag == 90) {
         parse_DEPRECATED_for_advertising_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_for_advertising_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_for_advertising_id().data(), this->deprecated_for_advertising_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_for_advertising_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_mobile_app;
        break;
      }

      // optional .BidRequest.Mobile.MobileApp mobile_app = 12;
      case 12: {
        if (tag == 98) {
         parse_mobile_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_id;
        break;
      }

      // repeated .BidRequest.Mobile.MobileID id = 13;
      case 13: {
        if (tag == 106) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_id;
        if (input->ExpectTag(114)) goto parse_for_advertising_id;
        break;
      }

      // repeated .BidRequest.Mobile.ForAdvertisingID for_advertising_id = 14;
      case 14: {
        if (tag == 114) {
         parse_for_advertising_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_for_advertising_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_for_advertising_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Mobile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Mobile)
  return false;
#undef DO_
}

void BidRequest_Mobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Mobile)
  // optional string DEPRECATED_device_id = 1;
  if (has_deprecated_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_device_id().data(), this->deprecated_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deprecated_device_id(), output);
  }

  // optional .BidRequest.Mobile.MobileDeviceType device_type = 2;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_type(), output);
  }

  // optional .BidRequest.Mobile.OS platform = 3 [default = UNKNOWN_OS];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platform(), output);
  }

  // optional .BidRequest.Mobile.DeviceOsVersion os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->os_version(), output);
  }

  // optional string brand = 5;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->brand(), output);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->model(), output);
  }

  // optional int32 screen_width = 7;
  if (has_screen_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->screen_width(), output);
  }

  // optional int32 screen_height = 8;
  if (has_screen_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->screen_height(), output);
  }

  // optional int64 carrier_id = 9;
  if (has_carrier_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->carrier_id(), output);
  }

  // optional .BidRequest.Mobile.WirelessNetworkType wireless_network_type = 10;
  if (has_wireless_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->wireless_network_type(), output);
  }

  // optional string DEPRECATED_for_advertising_id = 11;
  if (has_deprecated_for_advertising_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_for_advertising_id().data(), this->deprecated_for_advertising_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_for_advertising_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->deprecated_for_advertising_id(), output);
  }

  // optional .BidRequest.Mobile.MobileApp mobile_app = 12;
  if (has_mobile_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->mobile_app(), output);
  }

  // repeated .BidRequest.Mobile.MobileID id = 13;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->id(i), output);
  }

  // repeated .BidRequest.Mobile.ForAdvertisingID for_advertising_id = 14;
  for (int i = 0; i < this->for_advertising_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->for_advertising_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Mobile)
}

::google::protobuf::uint8* BidRequest_Mobile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Mobile)
  // optional string DEPRECATED_device_id = 1;
  if (has_deprecated_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_device_id().data(), this->deprecated_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deprecated_device_id(), target);
  }

  // optional .BidRequest.Mobile.MobileDeviceType device_type = 2;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_type(), target);
  }

  // optional .BidRequest.Mobile.OS platform = 3 [default = UNKNOWN_OS];
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->platform(), target);
  }

  // optional .BidRequest.Mobile.DeviceOsVersion os_version = 4;
  if (has_os_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->os_version(), target);
  }

  // optional string brand = 5;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->brand(), target);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->model(), target);
  }

  // optional int32 screen_width = 7;
  if (has_screen_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->screen_width(), target);
  }

  // optional int32 screen_height = 8;
  if (has_screen_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->screen_height(), target);
  }

  // optional int64 carrier_id = 9;
  if (has_carrier_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->carrier_id(), target);
  }

  // optional .BidRequest.Mobile.WirelessNetworkType wireless_network_type = 10;
  if (has_wireless_network_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->wireless_network_type(), target);
  }

  // optional string DEPRECATED_for_advertising_id = 11;
  if (has_deprecated_for_advertising_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_for_advertising_id().data(), this->deprecated_for_advertising_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_for_advertising_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->deprecated_for_advertising_id(), target);
  }

  // optional .BidRequest.Mobile.MobileApp mobile_app = 12;
  if (has_mobile_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->mobile_app(), target);
  }

  // repeated .BidRequest.Mobile.MobileID id = 13;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->id(i), target);
  }

  // repeated .BidRequest.Mobile.ForAdvertisingID for_advertising_id = 14;
  for (int i = 0; i < this->for_advertising_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->for_advertising_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Mobile)
  return target;
}

int BidRequest_Mobile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string DEPRECATED_device_id = 1;
    if (has_deprecated_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_device_id());
    }

    // optional .BidRequest.Mobile.MobileDeviceType device_type = 2;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

    // optional .BidRequest.Mobile.OS platform = 3 [default = UNKNOWN_OS];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional .BidRequest.Mobile.DeviceOsVersion os_version = 4;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->os_version());
    }

    // optional string brand = 5;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 6;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional int32 screen_width = 7;
    if (has_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 screen_height = 8;
    if (has_screen_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_height());
    }

    // optional int64 carrier_id = 9;
    if (has_carrier_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrier_id());
    }

    // optional .BidRequest.Mobile.WirelessNetworkType wireless_network_type = 10;
    if (has_wireless_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wireless_network_type());
    }

    // optional string DEPRECATED_for_advertising_id = 11;
    if (has_deprecated_for_advertising_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_for_advertising_id());
    }

    // optional .BidRequest.Mobile.MobileApp mobile_app = 12;
    if (has_mobile_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile_app());
    }

  }
  // repeated .BidRequest.Mobile.MobileID id = 13;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id(i));
  }

  // repeated .BidRequest.Mobile.ForAdvertisingID for_advertising_id = 14;
  total_size += 1 * this->for_advertising_id_size();
  for (int i = 0; i < this->for_advertising_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->for_advertising_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile::MergeFrom(const BidRequest_Mobile& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  for_advertising_id_.MergeFrom(from.for_advertising_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deprecated_device_id()) {
      set_deprecated_device_id(from.deprecated_device_id());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_os_version()) {
      mutable_os_version()->::BidRequest_Mobile_DeviceOsVersion::MergeFrom(from.os_version());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_screen_width()) {
      set_screen_width(from.screen_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_screen_height()) {
      set_screen_height(from.screen_height());
    }
    if (from.has_carrier_id()) {
      set_carrier_id(from.carrier_id());
    }
    if (from.has_wireless_network_type()) {
      set_wireless_network_type(from.wireless_network_type());
    }
    if (from.has_deprecated_for_advertising_id()) {
      set_deprecated_for_advertising_id(from.deprecated_for_advertising_id());
    }
    if (from.has_mobile_app()) {
      mutable_mobile_app()->::BidRequest_Mobile_MobileApp::MergeFrom(from.mobile_app());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile::CopyFrom(const BidRequest_Mobile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile::IsInitialized() const {

  return true;
}

void BidRequest_Mobile::Swap(BidRequest_Mobile* other) {
  if (other != this) {
    std::swap(deprecated_device_id_, other->deprecated_device_id_);
    id_.Swap(&other->id_);
    std::swap(device_type_, other->device_type_);
    std::swap(platform_, other->platform_);
    std::swap(os_version_, other->os_version_);
    std::swap(brand_, other->brand_);
    std::swap(model_, other->model_);
    std::swap(screen_width_, other->screen_width_);
    std::swap(screen_height_, other->screen_height_);
    std::swap(carrier_id_, other->carrier_id_);
    std::swap(wireless_network_type_, other->wireless_network_type_);
    std::swap(deprecated_for_advertising_id_, other->deprecated_for_advertising_id_);
    for_advertising_id_.Swap(&other->for_advertising_id_);
    std::swap(mobile_app_, other->mobile_app_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_descriptor_;
  metadata.reflection = BidRequest_Mobile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Video::kTitleFieldNumber;
const int BidRequest_Video::kTagsFieldNumber;
const int BidRequest_Video::kContentLengthFieldNumber;
const int BidRequest_Video::kChannelIdFieldNumber;
#endif  // !_MSC_VER

BidRequest_Video::BidRequest_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Video)
}

void BidRequest_Video::InitAsDefaultInstance() {
}

BidRequest_Video::BidRequest_Video(const BidRequest_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Video)
}

void BidRequest_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video::~BidRequest_Video() {
  // @@protoc_insertion_point(destructor:BidRequest.Video)
  SharedDtor();
}

void BidRequest_Video::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_descriptor_;
}

const BidRequest_Video& BidRequest_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video* BidRequest_Video::default_instance_ = NULL;

BidRequest_Video* BidRequest_Video::New() const {
  return new BidRequest_Video;
}

void BidRequest_Video::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    content_length_ = 0;
  }
  tags_.Clear();
  channel_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated string tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        if (input->ExpectTag(24)) goto parse_content_length;
        break;
      }

      // optional int32 content_length = 3;
      case 3: {
        if (tag == 24) {
         parse_content_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_length_)));
          set_has_content_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        break;
      }

      // repeated int64 channel_id = 4;
      case 4: {
        if (tag == 32) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_channel_id())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_channel_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Video)
  return false;
#undef DO_
}

void BidRequest_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Video)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(i), output);
  }

  // optional int32 content_length = 3;
  if (has_content_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->content_length(), output);
  }

  // repeated int64 channel_id = 4;
  for (int i = 0; i < this->channel_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->channel_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Video)
}

::google::protobuf::uint8* BidRequest_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Video)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tags(i), target);
  }

  // optional int32 content_length = 3;
  if (has_content_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->content_length(), target);
  }

  // repeated int64 channel_id = 4;
  for (int i = 0; i < this->channel_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->channel_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Video)
  return target;
}

int BidRequest_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 content_length = 3;
    if (has_content_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_length());
    }

  }
  // repeated string tags = 2;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated int64 channel_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->channel_id(i));
    }
    total_size += 1 * this->channel_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video::MergeFrom(const BidRequest_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  channel_id_.MergeFrom(from.channel_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content_length()) {
      set_content_length(from.content_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video::CopyFrom(const BidRequest_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video::IsInitialized() const {

  return true;
}

void BidRequest_Video::Swap(BidRequest_Video* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    tags_.Swap(&other->tags_);
    std::swap(content_length_, other->content_length_);
    channel_id_.Swap(&other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_descriptor_;
  metadata.reflection = BidRequest_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdSlot_VideoInfo::kMaxVideoDurationFieldNumber;
const int BidRequest_AdSlot_VideoInfo::kMinVideoDurationFieldNumber;
const int BidRequest_AdSlot_VideoInfo::kVideoStartDelayFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_VideoInfo::BidRequest_AdSlot_VideoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.VideoInfo)
}

void BidRequest_AdSlot_VideoInfo::InitAsDefaultInstance() {
}

BidRequest_AdSlot_VideoInfo::BidRequest_AdSlot_VideoInfo(const BidRequest_AdSlot_VideoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.VideoInfo)
}

void BidRequest_AdSlot_VideoInfo::SharedCtor() {
  _cached_size_ = 0;
  max_video_duration_ = 0;
  min_video_duration_ = 0;
  video_start_delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_VideoInfo::~BidRequest_AdSlot_VideoInfo() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.VideoInfo)
  SharedDtor();
}

void BidRequest_AdSlot_VideoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_VideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_VideoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_VideoInfo_descriptor_;
}

const BidRequest_AdSlot_VideoInfo& BidRequest_AdSlot_VideoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_VideoInfo* BidRequest_AdSlot_VideoInfo::default_instance_ = NULL;

BidRequest_AdSlot_VideoInfo* BidRequest_AdSlot_VideoInfo::New() const {
  return new BidRequest_AdSlot_VideoInfo;
}

void BidRequest_AdSlot_VideoInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdSlot_VideoInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(max_video_duration_, video_start_delay_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_VideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.VideoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_video_duration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_video_duration_)));
          set_has_max_video_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_video_duration;
        break;
      }

      // optional int32 min_video_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_min_video_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_video_duration_)));
          set_has_min_video_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_video_start_delay;
        break;
      }

      // optional int32 video_start_delay = 3;
      case 3: {
        if (tag == 24) {
         parse_video_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_start_delay_)));
          set_has_video_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.VideoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.VideoInfo)
  return false;
#undef DO_
}

void BidRequest_AdSlot_VideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.VideoInfo)
  // optional int32 max_video_duration = 1;
  if (has_max_video_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_video_duration(), output);
  }

  // optional int32 min_video_duration = 2;
  if (has_min_video_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_video_duration(), output);
  }

  // optional int32 video_start_delay = 3;
  if (has_video_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->video_start_delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.VideoInfo)
}

::google::protobuf::uint8* BidRequest_AdSlot_VideoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.VideoInfo)
  // optional int32 max_video_duration = 1;
  if (has_max_video_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_video_duration(), target);
  }

  // optional int32 min_video_duration = 2;
  if (has_min_video_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_video_duration(), target);
  }

  // optional int32 video_start_delay = 3;
  if (has_video_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->video_start_delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.VideoInfo)
  return target;
}

int BidRequest_AdSlot_VideoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_video_duration = 1;
    if (has_max_video_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_video_duration());
    }

    // optional int32 min_video_duration = 2;
    if (has_min_video_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_video_duration());
    }

    // optional int32 video_start_delay = 3;
    if (has_video_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->video_start_delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_VideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_VideoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_VideoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_VideoInfo::MergeFrom(const BidRequest_AdSlot_VideoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_video_duration()) {
      set_max_video_duration(from.max_video_duration());
    }
    if (from.has_min_video_duration()) {
      set_min_video_duration(from.min_video_duration());
    }
    if (from.has_video_start_delay()) {
      set_video_start_delay(from.video_start_delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_VideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_VideoInfo::CopyFrom(const BidRequest_AdSlot_VideoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_VideoInfo::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_VideoInfo::Swap(BidRequest_AdSlot_VideoInfo* other) {
  if (other != this) {
    std::swap(max_video_duration_, other->max_video_duration_);
    std::swap(min_video_duration_, other->min_video_duration_);
    std::swap(video_start_delay_, other->video_start_delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_VideoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_VideoInfo_descriptor_;
  metadata.reflection = BidRequest_AdSlot_VideoInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdSlot_LinkUnitInfo::kStyleTypeFieldNumber;
const int BidRequest_AdSlot_LinkUnitInfo::kReqKeywordNumFieldNumber;
const int BidRequest_AdSlot_LinkUnitInfo::kProposedKeywordFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_LinkUnitInfo::BidRequest_AdSlot_LinkUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.LinkUnitInfo)
}

void BidRequest_AdSlot_LinkUnitInfo::InitAsDefaultInstance() {
}

BidRequest_AdSlot_LinkUnitInfo::BidRequest_AdSlot_LinkUnitInfo(const BidRequest_AdSlot_LinkUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.LinkUnitInfo)
}

void BidRequest_AdSlot_LinkUnitInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_keyword_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_LinkUnitInfo::~BidRequest_AdSlot_LinkUnitInfo() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.LinkUnitInfo)
  SharedDtor();
}

void BidRequest_AdSlot_LinkUnitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_LinkUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_LinkUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_LinkUnitInfo_descriptor_;
}

const BidRequest_AdSlot_LinkUnitInfo& BidRequest_AdSlot_LinkUnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_LinkUnitInfo* BidRequest_AdSlot_LinkUnitInfo::default_instance_ = NULL;

BidRequest_AdSlot_LinkUnitInfo* BidRequest_AdSlot_LinkUnitInfo::New() const {
  return new BidRequest_AdSlot_LinkUnitInfo;
}

void BidRequest_AdSlot_LinkUnitInfo::Clear() {
  req_keyword_num_ = 0;
  style_type_.Clear();
  proposed_keyword_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_LinkUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.LinkUnitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 style_type = 1;
      case 1: {
        if (tag == 8) {
         parse_style_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_style_type())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_style_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_style_type;
        if (input->ExpectTag(16)) goto parse_req_keyword_num;
        break;
      }

      // optional int32 req_keyword_num = 2;
      case 2: {
        if (tag == 16) {
         parse_req_keyword_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_keyword_num_)));
          set_has_req_keyword_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proposed_keyword;
        break;
      }

      // repeated string proposed_keyword = 3;
      case 3: {
        if (tag == 26) {
         parse_proposed_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_proposed_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proposed_keyword(this->proposed_keyword_size() - 1).data(),
            this->proposed_keyword(this->proposed_keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proposed_keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proposed_keyword;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.LinkUnitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.LinkUnitInfo)
  return false;
#undef DO_
}

void BidRequest_AdSlot_LinkUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.LinkUnitInfo)
  // repeated int32 style_type = 1;
  for (int i = 0; i < this->style_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->style_type(i), output);
  }

  // optional int32 req_keyword_num = 2;
  if (has_req_keyword_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->req_keyword_num(), output);
  }

  // repeated string proposed_keyword = 3;
  for (int i = 0; i < this->proposed_keyword_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->proposed_keyword(i).data(), this->proposed_keyword(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "proposed_keyword");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->proposed_keyword(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.LinkUnitInfo)
}

::google::protobuf::uint8* BidRequest_AdSlot_LinkUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.LinkUnitInfo)
  // repeated int32 style_type = 1;
  for (int i = 0; i < this->style_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->style_type(i), target);
  }

  // optional int32 req_keyword_num = 2;
  if (has_req_keyword_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->req_keyword_num(), target);
  }

  // repeated string proposed_keyword = 3;
  for (int i = 0; i < this->proposed_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposed_keyword(i).data(), this->proposed_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proposed_keyword");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->proposed_keyword(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.LinkUnitInfo)
  return target;
}

int BidRequest_AdSlot_LinkUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 req_keyword_num = 2;
    if (has_req_keyword_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_keyword_num());
    }

  }
  // repeated int32 style_type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->style_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->style_type(i));
    }
    total_size += 1 * this->style_type_size() + data_size;
  }

  // repeated string proposed_keyword = 3;
  total_size += 1 * this->proposed_keyword_size();
  for (int i = 0; i < this->proposed_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->proposed_keyword(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_LinkUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_LinkUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_LinkUnitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_LinkUnitInfo::MergeFrom(const BidRequest_AdSlot_LinkUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  style_type_.MergeFrom(from.style_type_);
  proposed_keyword_.MergeFrom(from.proposed_keyword_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_req_keyword_num()) {
      set_req_keyword_num(from.req_keyword_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_LinkUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_LinkUnitInfo::CopyFrom(const BidRequest_AdSlot_LinkUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_LinkUnitInfo::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_LinkUnitInfo::Swap(BidRequest_AdSlot_LinkUnitInfo* other) {
  if (other != this) {
    style_type_.Swap(&other->style_type_);
    std::swap(req_keyword_num_, other->req_keyword_num_);
    proposed_keyword_.Swap(&other->proposed_keyword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_LinkUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_LinkUnitInfo_descriptor_;
  metadata.reflection = BidRequest_AdSlot_LinkUnitInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::kOrderIdFieldNumber;
const int BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::kFixedCpmFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::InitAsDefaultInstance() {
}

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder(const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fixed_cpm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::~BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  SharedDtor();
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_;
}

const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder& BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_ = NULL;

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::New() const {
  return new BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder;
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_id_->clear();
      }
    }
    fixed_cpm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string order_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fixed_cpm;
        break;
      }

      // optional int64 fixed_cpm = 2;
      case 2: {
        if (tag == 16) {
         parse_fixed_cpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fixed_cpm_)));
          set_has_fixed_cpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  return false;
#undef DO_
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->order_id(), output);
  }

  // optional int64 fixed_cpm = 2;
  if (has_fixed_cpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fixed_cpm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
}

::google::protobuf::uint8* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }

  // optional int64 fixed_cpm = 2;
  if (has_fixed_cpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fixed_cpm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  return target;
}

int BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional int64 fixed_cpm = 2;
    if (has_fixed_cpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fixed_cpm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::MergeFrom(const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_fixed_cpm()) {
      set_fixed_cpm(from.fixed_cpm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::CopyFrom(const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::Swap(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(fixed_cpm_, other->fixed_cpm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_;
  metadata.reflection = BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdSlot_PreferredOrderInfo::kPreferredOrdersFieldNumber;
const int BidRequest_AdSlot_PreferredOrderInfo::kAllowAuctionFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_PreferredOrderInfo::BidRequest_AdSlot_PreferredOrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.PreferredOrderInfo)
}

void BidRequest_AdSlot_PreferredOrderInfo::InitAsDefaultInstance() {
}

BidRequest_AdSlot_PreferredOrderInfo::BidRequest_AdSlot_PreferredOrderInfo(const BidRequest_AdSlot_PreferredOrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.PreferredOrderInfo)
}

void BidRequest_AdSlot_PreferredOrderInfo::SharedCtor() {
  _cached_size_ = 0;
  allow_auction_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_PreferredOrderInfo::~BidRequest_AdSlot_PreferredOrderInfo() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.PreferredOrderInfo)
  SharedDtor();
}

void BidRequest_AdSlot_PreferredOrderInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_PreferredOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_PreferredOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_PreferredOrderInfo_descriptor_;
}

const BidRequest_AdSlot_PreferredOrderInfo& BidRequest_AdSlot_PreferredOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_PreferredOrderInfo* BidRequest_AdSlot_PreferredOrderInfo::default_instance_ = NULL;

BidRequest_AdSlot_PreferredOrderInfo* BidRequest_AdSlot_PreferredOrderInfo::New() const {
  return new BidRequest_AdSlot_PreferredOrderInfo;
}

void BidRequest_AdSlot_PreferredOrderInfo::Clear() {
  allow_auction_ = true;
  preferred_orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_PreferredOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.PreferredOrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder preferred_orders = 1;
      case 1: {
        if (tag == 10) {
         parse_preferred_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preferred_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_preferred_orders;
        if (input->ExpectTag(16)) goto parse_allow_auction;
        break;
      }

      // optional bool allow_auction = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_allow_auction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_auction_)));
          set_has_allow_auction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.PreferredOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.PreferredOrderInfo)
  return false;
#undef DO_
}

void BidRequest_AdSlot_PreferredOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.PreferredOrderInfo)
  // repeated .BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder preferred_orders = 1;
  for (int i = 0; i < this->preferred_orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->preferred_orders(i), output);
  }

  // optional bool allow_auction = 2 [default = true];
  if (has_allow_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_auction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.PreferredOrderInfo)
}

::google::protobuf::uint8* BidRequest_AdSlot_PreferredOrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.PreferredOrderInfo)
  // repeated .BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder preferred_orders = 1;
  for (int i = 0; i < this->preferred_orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->preferred_orders(i), target);
  }

  // optional bool allow_auction = 2 [default = true];
  if (has_allow_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow_auction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.PreferredOrderInfo)
  return target;
}

int BidRequest_AdSlot_PreferredOrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool allow_auction = 2 [default = true];
    if (has_allow_auction()) {
      total_size += 1 + 1;
    }

  }
  // repeated .BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder preferred_orders = 1;
  total_size += 1 * this->preferred_orders_size();
  for (int i = 0; i < this->preferred_orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preferred_orders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_PreferredOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_PreferredOrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_PreferredOrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_PreferredOrderInfo::MergeFrom(const BidRequest_AdSlot_PreferredOrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  preferred_orders_.MergeFrom(from.preferred_orders_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_allow_auction()) {
      set_allow_auction(from.allow_auction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_PreferredOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_PreferredOrderInfo::CopyFrom(const BidRequest_AdSlot_PreferredOrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_PreferredOrderInfo::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_PreferredOrderInfo::Swap(BidRequest_AdSlot_PreferredOrderInfo* other) {
  if (other != this) {
    preferred_orders_.Swap(&other->preferred_orders_);
    std::swap(allow_auction_, other->allow_auction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_PreferredOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_PreferredOrderInfo_descriptor_;
  metadata.reflection = BidRequest_AdSlot_PreferredOrderInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_ExpandCreativeInfo_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_ExpandCreativeInfo_ActionType_descriptor_;
}
bool BidRequest_AdSlot_ExpandCreativeInfo_ActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::HOVER;
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::CLICK;
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::LOAD;
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::ActionType_MIN;
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::ActionType_MAX;
const int BidRequest_AdSlot_ExpandCreativeInfo::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_ExpandCreativeInfo_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_ExpandCreativeInfo_Direction_descriptor_;
}
bool BidRequest_AdSlot_ExpandCreativeInfo_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_NONE;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_UP;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_DOWN;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_LEFT;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_RIGHT;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::Direction_MIN;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::Direction_MAX;
const int BidRequest_AdSlot_ExpandCreativeInfo::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandActionTypeFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandDirectionFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandCreativeTypeFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandWidthFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandHeightFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandDurationFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_ExpandCreativeInfo::BidRequest_AdSlot_ExpandCreativeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.ExpandCreativeInfo)
}

void BidRequest_AdSlot_ExpandCreativeInfo::InitAsDefaultInstance() {
}

BidRequest_AdSlot_ExpandCreativeInfo::BidRequest_AdSlot_ExpandCreativeInfo(const BidRequest_AdSlot_ExpandCreativeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.ExpandCreativeInfo)
}

void BidRequest_AdSlot_ExpandCreativeInfo::SharedCtor() {
  _cached_size_ = 0;
  expand_direction_ = 0;
  expand_width_ = 0;
  expand_height_ = 0;
  expand_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_ExpandCreativeInfo::~BidRequest_AdSlot_ExpandCreativeInfo() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.ExpandCreativeInfo)
  SharedDtor();
}

void BidRequest_AdSlot_ExpandCreativeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_ExpandCreativeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_ExpandCreativeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_ExpandCreativeInfo_descriptor_;
}

const BidRequest_AdSlot_ExpandCreativeInfo& BidRequest_AdSlot_ExpandCreativeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_ExpandCreativeInfo* BidRequest_AdSlot_ExpandCreativeInfo::default_instance_ = NULL;

BidRequest_AdSlot_ExpandCreativeInfo* BidRequest_AdSlot_ExpandCreativeInfo::New() const {
  return new BidRequest_AdSlot_ExpandCreativeInfo;
}

void BidRequest_AdSlot_ExpandCreativeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdSlot_ExpandCreativeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(expand_direction_, expand_duration_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  expand_action_type_.Clear();
  expand_creative_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_ExpandCreativeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.ExpandCreativeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BidRequest.AdSlot.ExpandCreativeInfo.ActionType expand_action_type = 1;
      case 1: {
        if (tag == 8) {
         parse_expand_action_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_ExpandCreativeInfo_ActionType_IsValid(value)) {
            add_expand_action_type(static_cast< ::BidRequest_AdSlot_ExpandCreativeInfo_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::BidRequest_AdSlot_ExpandCreativeInfo_ActionType_IsValid,
                 this->mutable_expand_action_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_expand_action_type;
        if (input->ExpectTag(16)) goto parse_expand_direction;
        break;
      }

      // optional .BidRequest.AdSlot.ExpandCreativeInfo.Direction expand_direction = 2;
      case 2: {
        if (tag == 16) {
         parse_expand_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_ExpandCreativeInfo_Direction_IsValid(value)) {
            set_expand_direction(static_cast< ::BidRequest_AdSlot_ExpandCreativeInfo_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_expand_creative_type;
        break;
      }

      // repeated int32 expand_creative_type = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_expand_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_expand_creative_type())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_expand_creative_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expand_width;
        break;
      }

      // optional int32 expand_width = 4;
      case 4: {
        if (tag == 32) {
         parse_expand_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_width_)));
          set_has_expand_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expand_height;
        break;
      }

      // optional int32 expand_height = 5;
      case 5: {
        if (tag == 40) {
         parse_expand_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_height_)));
          set_has_expand_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_expand_duration;
        break;
      }

      // optional int32 expand_duration = 6;
      case 6: {
        if (tag == 48) {
         parse_expand_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_duration_)));
          set_has_expand_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.ExpandCreativeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.ExpandCreativeInfo)
  return false;
#undef DO_
}

void BidRequest_AdSlot_ExpandCreativeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.ExpandCreativeInfo)
  // repeated .BidRequest.AdSlot.ExpandCreativeInfo.ActionType expand_action_type = 1;
  for (int i = 0; i < this->expand_action_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->expand_action_type(i), output);
  }

  // optional .BidRequest.AdSlot.ExpandCreativeInfo.Direction expand_direction = 2;
  if (has_expand_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->expand_direction(), output);
  }

  // repeated int32 expand_creative_type = 3 [packed = true];
  if (this->expand_creative_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_expand_creative_type_cached_byte_size_);
  }
  for (int i = 0; i < this->expand_creative_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->expand_creative_type(i), output);
  }

  // optional int32 expand_width = 4;
  if (has_expand_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->expand_width(), output);
  }

  // optional int32 expand_height = 5;
  if (has_expand_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expand_height(), output);
  }

  // optional int32 expand_duration = 6;
  if (has_expand_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->expand_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.ExpandCreativeInfo)
}

::google::protobuf::uint8* BidRequest_AdSlot_ExpandCreativeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.ExpandCreativeInfo)
  // repeated .BidRequest.AdSlot.ExpandCreativeInfo.ActionType expand_action_type = 1;
  for (int i = 0; i < this->expand_action_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->expand_action_type(i), target);
  }

  // optional .BidRequest.AdSlot.ExpandCreativeInfo.Direction expand_direction = 2;
  if (has_expand_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->expand_direction(), target);
  }

  // repeated int32 expand_creative_type = 3 [packed = true];
  if (this->expand_creative_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _expand_creative_type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->expand_creative_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->expand_creative_type(i), target);
  }

  // optional int32 expand_width = 4;
  if (has_expand_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->expand_width(), target);
  }

  // optional int32 expand_height = 5;
  if (has_expand_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expand_height(), target);
  }

  // optional int32 expand_duration = 6;
  if (has_expand_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->expand_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.ExpandCreativeInfo)
  return target;
}

int BidRequest_AdSlot_ExpandCreativeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .BidRequest.AdSlot.ExpandCreativeInfo.Direction expand_direction = 2;
    if (has_expand_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->expand_direction());
    }

    // optional int32 expand_width = 4;
    if (has_expand_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expand_width());
    }

    // optional int32 expand_height = 5;
    if (has_expand_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expand_height());
    }

    // optional int32 expand_duration = 6;
    if (has_expand_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expand_duration());
    }

  }
  // repeated .BidRequest.AdSlot.ExpandCreativeInfo.ActionType expand_action_type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->expand_action_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->expand_action_type(i));
    }
    total_size += 1 * this->expand_action_type_size() + data_size;
  }

  // repeated int32 expand_creative_type = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->expand_creative_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->expand_creative_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _expand_creative_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_ExpandCreativeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_ExpandCreativeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_ExpandCreativeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_ExpandCreativeInfo::MergeFrom(const BidRequest_AdSlot_ExpandCreativeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  expand_action_type_.MergeFrom(from.expand_action_type_);
  expand_creative_type_.MergeFrom(from.expand_creative_type_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_expand_direction()) {
      set_expand_direction(from.expand_direction());
    }
    if (from.has_expand_width()) {
      set_expand_width(from.expand_width());
    }
    if (from.has_expand_height()) {
      set_expand_height(from.expand_height());
    }
    if (from.has_expand_duration()) {
      set_expand_duration(from.expand_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_ExpandCreativeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_ExpandCreativeInfo::CopyFrom(const BidRequest_AdSlot_ExpandCreativeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_ExpandCreativeInfo::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_ExpandCreativeInfo::Swap(BidRequest_AdSlot_ExpandCreativeInfo* other) {
  if (other != this) {
    expand_action_type_.Swap(&other->expand_action_type_);
    std::swap(expand_direction_, other->expand_direction_);
    expand_creative_type_.Swap(&other->expand_creative_type_);
    std::swap(expand_width_, other->expand_width_);
    std::swap(expand_height_, other->expand_height_);
    std::swap(expand_duration_, other->expand_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_ExpandCreativeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_ExpandCreativeInfo_descriptor_;
  metadata.reflection = BidRequest_AdSlot_ExpandCreativeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdSlot::kAdBlockKeyFieldNumber;
const int BidRequest_AdSlot::kSequenceIdFieldNumber;
const int BidRequest_AdSlot::kAdslotTypeFieldNumber;
const int BidRequest_AdSlot::kWidthFieldNumber;
const int BidRequest_AdSlot::kHeightFieldNumber;
const int BidRequest_AdSlot::kSlotVisibilityFieldNumber;
const int BidRequest_AdSlot::kCreativeTypeFieldNumber;
const int BidRequest_AdSlot::kExcludedLandingPageUrlFieldNumber;
const int BidRequest_AdSlot::kPublisherSettingsListIdFieldNumber;
const int BidRequest_AdSlot::kMinimumCpmFieldNumber;
const int BidRequest_AdSlot::kMaxVideoDurationFieldNumber;
const int BidRequest_AdSlot::kMinVideoDurationFieldNumber;
const int BidRequest_AdSlot::kVideoStartDelayFieldNumber;
const int BidRequest_AdSlot::kVideoInfoFieldNumber;
const int BidRequest_AdSlot::kLinkUnitInfoFieldNumber;
const int BidRequest_AdSlot::kPreferredOrderInfoFieldNumber;
const int BidRequest_AdSlot::kExpandCreativeInfoFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot::BidRequest_AdSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot)
}

void BidRequest_AdSlot::InitAsDefaultInstance() {
  video_info_ = const_cast< ::BidRequest_AdSlot_VideoInfo*>(&::BidRequest_AdSlot_VideoInfo::default_instance());
  link_unit_info_ = const_cast< ::BidRequest_AdSlot_LinkUnitInfo*>(&::BidRequest_AdSlot_LinkUnitInfo::default_instance());
  preferred_order_info_ = const_cast< ::BidRequest_AdSlot_PreferredOrderInfo*>(&::BidRequest_AdSlot_PreferredOrderInfo::default_instance());
  expand_creative_info_ = const_cast< ::BidRequest_AdSlot_ExpandCreativeInfo*>(&::BidRequest_AdSlot_ExpandCreativeInfo::default_instance());
}

BidRequest_AdSlot::BidRequest_AdSlot(const BidRequest_AdSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot)
}

void BidRequest_AdSlot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ad_block_key_ = GOOGLE_ULONGLONG(0);
  sequence_id_ = 0;
  adslot_type_ = 0;
  width_ = 0;
  height_ = 0;
  slot_visibility_ = 0;
  minimum_cpm_ = 0;
  max_video_duration_ = 0;
  min_video_duration_ = 0;
  video_start_delay_ = 0;
  video_info_ = NULL;
  link_unit_info_ = NULL;
  preferred_order_info_ = NULL;
  expand_creative_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot::~BidRequest_AdSlot() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot)
  SharedDtor();
}

void BidRequest_AdSlot::SharedDtor() {
  if (this != default_instance_) {
    delete video_info_;
    delete link_unit_info_;
    delete preferred_order_info_;
    delete expand_creative_info_;
  }
}

void BidRequest_AdSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_descriptor_;
}

const BidRequest_AdSlot& BidRequest_AdSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot* BidRequest_AdSlot::default_instance_ = NULL;

BidRequest_AdSlot* BidRequest_AdSlot::New() const {
  return new BidRequest_AdSlot;
}

void BidRequest_AdSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ad_block_key_, height_);
    slot_visibility_ = 0;
  }
  if (_has_bits_[8 / 32] & 65024) {
    ZR_(max_video_duration_, min_video_duration_);
    minimum_cpm_ = 0;
    video_start_delay_ = 0;
    if (has_video_info()) {
      if (video_info_ != NULL) video_info_->::BidRequest_AdSlot_VideoInfo::Clear();
    }
    if (has_link_unit_info()) {
      if (link_unit_info_ != NULL) link_unit_info_->::BidRequest_AdSlot_LinkUnitInfo::Clear();
    }
    if (has_preferred_order_info()) {
      if (preferred_order_info_ != NULL) preferred_order_info_->::BidRequest_AdSlot_PreferredOrderInfo::Clear();
    }
  }
  if (has_expand_creative_info()) {
    if (expand_creative_info_ != NULL) expand_creative_info_->::BidRequest_AdSlot_ExpandCreativeInfo::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  creative_type_.Clear();
  excluded_landing_page_url_.Clear();
  publisher_settings_list_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ad_block_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ad_block_key_)));
          set_has_ad_block_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence_id;
        break;
      }

      // optional int32 sequence_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adslot_type;
        break;
      }

      // optional int32 adslot_type = 3;
      case 3: {
        if (tag == 24) {
         parse_adslot_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adslot_type_)));
          set_has_adslot_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_slot_visibility;
        break;
      }

      // optional int32 slot_visibility = 6;
      case 6: {
        if (tag == 48) {
         parse_slot_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_visibility_)));
          set_has_slot_visibility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_creative_type;
        break;
      }

      // repeated int32 creative_type = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_creative_type())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_creative_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_excluded_landing_page_url;
        break;
      }

      // repeated string excluded_landing_page_url = 8;
      case 8: {
        if (tag == 66) {
         parse_excluded_landing_page_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excluded_landing_page_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excluded_landing_page_url(this->excluded_landing_page_url_size() - 1).data(),
            this->excluded_landing_page_url(this->excluded_landing_page_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "excluded_landing_page_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_excluded_landing_page_url;
        if (input->ExpectTag(72)) goto parse_minimum_cpm;
        break;
      }

      // optional int32 minimum_cpm = 9;
      case 9: {
        if (tag == 72) {
         parse_minimum_cpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_cpm_)));
          set_has_minimum_cpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_max_video_duration;
        break;
      }

      // optional int32 max_video_duration = 10;
      case 10: {
        if (tag == 80) {
         parse_max_video_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_video_duration_)));
          set_has_max_video_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_min_video_duration;
        break;
      }

      // optional int32 min_video_duration = 11;
      case 11: {
        if (tag == 88) {
         parse_min_video_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_video_duration_)));
          set_has_min_video_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_video_start_delay;
        break;
      }

      // optional int32 video_start_delay = 12;
      case 12: {
        if (tag == 96) {
         parse_video_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_start_delay_)));
          set_has_video_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_preferred_order_info;
        break;
      }

      // optional .BidRequest.AdSlot.PreferredOrderInfo preferred_order_info = 13;
      case 13: {
        if (tag == 106) {
         parse_preferred_order_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_order_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_publisher_settings_list_id;
        break;
      }

      // repeated fixed64 publisher_settings_list_id = 14;
      case 14: {
        if (tag == 113) {
         parse_publisher_settings_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 113, input, this->mutable_publisher_settings_list_id())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_publisher_settings_list_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_publisher_settings_list_id;
        if (input->ExpectTag(122)) goto parse_video_info;
        break;
      }

      // optional .BidRequest.AdSlot.VideoInfo video_info = 15;
      case 15: {
        if (tag == 122) {
         parse_video_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_link_unit_info;
        break;
      }

      // optional .BidRequest.AdSlot.LinkUnitInfo link_unit_info = 16;
      case 16: {
        if (tag == 130) {
         parse_link_unit_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_unit_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_expand_creative_info;
        break;
      }

      // optional .BidRequest.AdSlot.ExpandCreativeInfo expand_creative_info = 17;
      case 17: {
        if (tag == 138) {
         parse_expand_creative_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expand_creative_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot)
  return false;
#undef DO_
}

void BidRequest_AdSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot)
  // optional uint64 ad_block_key = 1;
  if (has_ad_block_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ad_block_key(), output);
  }

  // optional int32 sequence_id = 2;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence_id(), output);
  }

  // optional int32 adslot_type = 3;
  if (has_adslot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adslot_type(), output);
  }

  // optional int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional int32 slot_visibility = 6;
  if (has_slot_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->slot_visibility(), output);
  }

  // repeated int32 creative_type = 7 [packed = true];
  if (this->creative_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_creative_type_cached_byte_size_);
  }
  for (int i = 0; i < this->creative_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->creative_type(i), output);
  }

  // repeated string excluded_landing_page_url = 8;
  for (int i = 0; i < this->excluded_landing_page_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->excluded_landing_page_url(i).data(), this->excluded_landing_page_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "excluded_landing_page_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->excluded_landing_page_url(i), output);
  }

  // optional int32 minimum_cpm = 9;
  if (has_minimum_cpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->minimum_cpm(), output);
  }

  // optional int32 max_video_duration = 10;
  if (has_max_video_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_video_duration(), output);
  }

  // optional int32 min_video_duration = 11;
  if (has_min_video_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->min_video_duration(), output);
  }

  // optional int32 video_start_delay = 12;
  if (has_video_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->video_start_delay(), output);
  }

  // optional .BidRequest.AdSlot.PreferredOrderInfo preferred_order_info = 13;
  if (has_preferred_order_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->preferred_order_info(), output);
  }

  // repeated fixed64 publisher_settings_list_id = 14;
  for (int i = 0; i < this->publisher_settings_list_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      14, this->publisher_settings_list_id(i), output);
  }

  // optional .BidRequest.AdSlot.VideoInfo video_info = 15;
  if (has_video_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->video_info(), output);
  }

  // optional .BidRequest.AdSlot.LinkUnitInfo link_unit_info = 16;
  if (has_link_unit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->link_unit_info(), output);
  }

  // optional .BidRequest.AdSlot.ExpandCreativeInfo expand_creative_info = 17;
  if (has_expand_creative_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->expand_creative_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot)
}

::google::protobuf::uint8* BidRequest_AdSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot)
  // optional uint64 ad_block_key = 1;
  if (has_ad_block_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ad_block_key(), target);
  }

  // optional int32 sequence_id = 2;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequence_id(), target);
  }

  // optional int32 adslot_type = 3;
  if (has_adslot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adslot_type(), target);
  }

  // optional int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // optional int32 slot_visibility = 6;
  if (has_slot_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->slot_visibility(), target);
  }

  // repeated int32 creative_type = 7 [packed = true];
  if (this->creative_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _creative_type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->creative_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->creative_type(i), target);
  }

  // repeated string excluded_landing_page_url = 8;
  for (int i = 0; i < this->excluded_landing_page_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_landing_page_url(i).data(), this->excluded_landing_page_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excluded_landing_page_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->excluded_landing_page_url(i), target);
  }

  // optional int32 minimum_cpm = 9;
  if (has_minimum_cpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->minimum_cpm(), target);
  }

  // optional int32 max_video_duration = 10;
  if (has_max_video_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_video_duration(), target);
  }

  // optional int32 min_video_duration = 11;
  if (has_min_video_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->min_video_duration(), target);
  }

  // optional int32 video_start_delay = 12;
  if (has_video_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->video_start_delay(), target);
  }

  // optional .BidRequest.AdSlot.PreferredOrderInfo preferred_order_info = 13;
  if (has_preferred_order_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->preferred_order_info(), target);
  }

  // repeated fixed64 publisher_settings_list_id = 14;
  for (int i = 0; i < this->publisher_settings_list_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(14, this->publisher_settings_list_id(i), target);
  }

  // optional .BidRequest.AdSlot.VideoInfo video_info = 15;
  if (has_video_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->video_info(), target);
  }

  // optional .BidRequest.AdSlot.LinkUnitInfo link_unit_info = 16;
  if (has_link_unit_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->link_unit_info(), target);
  }

  // optional .BidRequest.AdSlot.ExpandCreativeInfo expand_creative_info = 17;
  if (has_expand_creative_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->expand_creative_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot)
  return target;
}

int BidRequest_AdSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ad_block_key = 1;
    if (has_ad_block_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ad_block_key());
    }

    // optional int32 sequence_id = 2;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_id());
    }

    // optional int32 adslot_type = 3;
    if (has_adslot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adslot_type());
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 slot_visibility = 6;
    if (has_slot_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_visibility());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 minimum_cpm = 9;
    if (has_minimum_cpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minimum_cpm());
    }

    // optional int32 max_video_duration = 10;
    if (has_max_video_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_video_duration());
    }

    // optional int32 min_video_duration = 11;
    if (has_min_video_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_video_duration());
    }

    // optional int32 video_start_delay = 12;
    if (has_video_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->video_start_delay());
    }

    // optional .BidRequest.AdSlot.VideoInfo video_info = 15;
    if (has_video_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_info());
    }

    // optional .BidRequest.AdSlot.LinkUnitInfo link_unit_info = 16;
    if (has_link_unit_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link_unit_info());
    }

    // optional .BidRequest.AdSlot.PreferredOrderInfo preferred_order_info = 13;
    if (has_preferred_order_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preferred_order_info());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .BidRequest.AdSlot.ExpandCreativeInfo expand_creative_info = 17;
    if (has_expand_creative_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expand_creative_info());
    }

  }
  // repeated int32 creative_type = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->creative_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _creative_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string excluded_landing_page_url = 8;
  total_size += 1 * this->excluded_landing_page_url_size();
  for (int i = 0; i < this->excluded_landing_page_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excluded_landing_page_url(i));
  }

  // repeated fixed64 publisher_settings_list_id = 14;
  {
    int data_size = 0;
    data_size = 8 * this->publisher_settings_list_id_size();
    total_size += 1 * this->publisher_settings_list_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot::MergeFrom(const BidRequest_AdSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  creative_type_.MergeFrom(from.creative_type_);
  excluded_landing_page_url_.MergeFrom(from.excluded_landing_page_url_);
  publisher_settings_list_id_.MergeFrom(from.publisher_settings_list_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ad_block_key()) {
      set_ad_block_key(from.ad_block_key());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_adslot_type()) {
      set_adslot_type(from.adslot_type());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_slot_visibility()) {
      set_slot_visibility(from.slot_visibility());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_minimum_cpm()) {
      set_minimum_cpm(from.minimum_cpm());
    }
    if (from.has_max_video_duration()) {
      set_max_video_duration(from.max_video_duration());
    }
    if (from.has_min_video_duration()) {
      set_min_video_duration(from.min_video_duration());
    }
    if (from.has_video_start_delay()) {
      set_video_start_delay(from.video_start_delay());
    }
    if (from.has_video_info()) {
      mutable_video_info()->::BidRequest_AdSlot_VideoInfo::MergeFrom(from.video_info());
    }
    if (from.has_link_unit_info()) {
      mutable_link_unit_info()->::BidRequest_AdSlot_LinkUnitInfo::MergeFrom(from.link_unit_info());
    }
    if (from.has_preferred_order_info()) {
      mutable_preferred_order_info()->::BidRequest_AdSlot_PreferredOrderInfo::MergeFrom(from.preferred_order_info());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_expand_creative_info()) {
      mutable_expand_creative_info()->::BidRequest_AdSlot_ExpandCreativeInfo::MergeFrom(from.expand_creative_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot::CopyFrom(const BidRequest_AdSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot::Swap(BidRequest_AdSlot* other) {
  if (other != this) {
    std::swap(ad_block_key_, other->ad_block_key_);
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(adslot_type_, other->adslot_type_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(slot_visibility_, other->slot_visibility_);
    creative_type_.Swap(&other->creative_type_);
    excluded_landing_page_url_.Swap(&other->excluded_landing_page_url_);
    publisher_settings_list_id_.Swap(&other->publisher_settings_list_id_);
    std::swap(minimum_cpm_, other->minimum_cpm_);
    std::swap(max_video_duration_, other->max_video_duration_);
    std::swap(min_video_duration_, other->min_video_duration_);
    std::swap(video_start_delay_, other->video_start_delay_);
    std::swap(video_info_, other->video_info_);
    std::swap(link_unit_info_, other->link_unit_info_);
    std::swap(preferred_order_info_, other->preferred_order_info_);
    std::swap(expand_creative_info_, other->expand_creative_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_descriptor_;
  metadata.reflection = BidRequest_AdSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest::kIdFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kUserAgentFieldNumber;
const int BidRequest::kBaiduUserIdFieldNumber;
const int BidRequest::kBaiduUserIdVersionFieldNumber;
const int BidRequest::kBaiduIdListFieldNumber;
const int BidRequest::kUserCategoryFieldNumber;
const int BidRequest::kGenderFieldNumber;
const int BidRequest::kDetectedLanguageFieldNumber;
const int BidRequest::kFlashVersionFieldNumber;
const int BidRequest::kUserGeoInfoFieldNumber;
const int BidRequest::kUrlFieldNumber;
const int BidRequest::kRefererFieldNumber;
const int BidRequest::kSiteCategoryFieldNumber;
const int BidRequest::kSiteQualityFieldNumber;
const int BidRequest::kPageTypeFieldNumber;
const int BidRequest::kPageKeywordFieldNumber;
const int BidRequest::kPageQualityFieldNumber;
const int BidRequest::kPageVerticalFieldNumber;
const int BidRequest::kExcludedProductCategoryFieldNumber;
const int BidRequest::kMobileFieldNumber;
const int BidRequest::kVideoFieldNumber;
const int BidRequest::kAdslotFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kIsPingFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  user_geo_info_ = const_cast< ::BidRequest_Geo*>(&::BidRequest_Geo::default_instance());
  mobile_ = const_cast< ::BidRequest_Mobile*>(&::BidRequest_Mobile::default_instance());
  video_ = const_cast< ::BidRequest_Video*>(&::BidRequest_Video::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baidu_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baidu_user_id_version_ = 0;
  gender_ = 0;
  detected_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flash_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_geo_info_ = NULL;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_category_ = 0;
  site_quality_ = 0;
  page_type_ = 0;
  page_quality_ = 0;
  page_vertical_ = 0;
  mobile_ = NULL;
  video_ = NULL;
  is_test_ = false;
  is_ping_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_agent_;
  }
  if (baidu_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete baidu_user_id_;
  }
  if (detected_language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detected_language_;
  }
  if (flash_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flash_version_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (referer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete referer_;
  }
  if (this != default_instance_) {
    delete user_geo_info_;
    delete mobile_;
    delete video_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(baidu_user_id_version_, gender_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_agent_->clear();
      }
    }
    if (has_baidu_user_id()) {
      if (baidu_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        baidu_user_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(site_category_, site_quality_);
    if (has_detected_language()) {
      if (detected_language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        detected_language_->clear();
      }
    }
    if (has_flash_version()) {
      if (flash_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        flash_version_->clear();
      }
    }
    if (has_user_geo_info()) {
      if (user_geo_info_ != NULL) user_geo_info_->::BidRequest_Geo::Clear();
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_referer()) {
      if (referer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        referer_->clear();
      }
    }
    page_type_ = 0;
  }
  if (_has_bits_[16 / 32] & 11927552) {
    ZR_(page_vertical_, is_test_);
    page_quality_ = 0;
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::BidRequest_Mobile::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::BidRequest_Video::Clear();
    }
  }
  is_ping_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  baidu_id_list_.Clear();
  user_category_.Clear();
  page_keyword_.Clear();
  excluded_product_category_.Clear();
  adslot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 3;
      case 3: {
        if (tag == 26) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_baidu_user_id;
        break;
      }

      // optional string baidu_user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_baidu_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baidu_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->baidu_user_id().data(), this->baidu_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "baidu_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_baidu_user_id_version;
        break;
      }

      // optional int32 baidu_user_id_version = 5;
      case 5: {
        if (tag == 40) {
         parse_baidu_user_id_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baidu_user_id_version_)));
          set_has_baidu_user_id_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_user_category;
        break;
      }

      // repeated int64 user_category = 6;
      case 6: {
        if (tag == 48) {
         parse_user_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_user_category())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_user_category;
        if (input->ExpectTag(56)) goto parse_gender;
        break;
      }

      // optional .BidRequest.Gender gender = 7;
      case 7: {
        if (tag == 56) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Gender_IsValid(value)) {
            set_gender(static_cast< ::BidRequest_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_baidu_id_list;
        break;
      }

      // repeated .BidRequest.BaiduId baidu_id_list = 8;
      case 8: {
        if (tag == 66) {
         parse_baidu_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baidu_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_baidu_id_list;
        if (input->ExpectTag(74)) goto parse_detected_language;
        break;
      }

      // optional string detected_language = 9;
      case 9: {
        if (tag == 74) {
         parse_detected_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detected_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detected_language().data(), this->detected_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "detected_language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_flash_version;
        break;
      }

      // optional string flash_version = 10;
      case 10: {
        if (tag == 82) {
         parse_flash_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flash_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flash_version().data(), this->flash_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flash_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_url;
        break;
      }

      // optional string url = 11;
      case 11: {
        if (tag == 90) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_referer;
        break;
      }

      // optional string referer = 12;
      case 12: {
        if (tag == 98) {
         parse_referer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referer().data(), this->referer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "referer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_site_category;
        break;
      }

      // optional int32 site_category = 13;
      case 13: {
        if (tag == 104) {
         parse_site_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &site_category_)));
          set_has_site_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_site_quality;
        break;
      }

      // optional int32 site_quality = 14;
      case 14: {
        if (tag == 112) {
         parse_site_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &site_quality_)));
          set_has_site_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_page_type;
        break;
      }

      // optional int32 page_type = 15;
      case 15: {
        if (tag == 120) {
         parse_page_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_type_)));
          set_has_page_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_page_keyword;
        break;
      }

      // repeated string page_keyword = 17;
      case 17: {
        if (tag == 138) {
         parse_page_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page_keyword(this->page_keyword_size() - 1).data(),
            this->page_keyword(this->page_keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "page_keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_page_keyword;
        if (input->ExpectTag(144)) goto parse_page_quality;
        break;
      }

      // optional int32 page_quality = 18;
      case 18: {
        if (tag == 144) {
         parse_page_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_quality_)));
          set_has_page_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_excluded_product_category;
        break;
      }

      // repeated int32 excluded_product_category = 19 [packed = true];
      case 19: {
        if (tag == 154) {
         parse_excluded_product_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_product_category())));
        } else if (tag == 152) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 154, input, this->mutable_excluded_product_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_adslot;
        break;
      }

      // repeated .BidRequest.AdSlot adslot = 20;
      case 20: {
        if (tag == 162) {
         parse_adslot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adslot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_adslot;
        if (input->ExpectTag(168)) goto parse_page_vertical;
        break;
      }

      // optional int32 page_vertical = 21;
      case 21: {
        if (tag == 168) {
         parse_page_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_vertical_)));
          set_has_page_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_is_test;
        break;
      }

      // optional bool is_test = 26 [default = false];
      case 26: {
        if (tag == 208) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_is_ping;
        break;
      }

      // optional bool is_ping = 27 [default = false];
      case 27: {
        if (tag == 216) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_user_geo_info;
        break;
      }

      // optional .BidRequest.Geo user_geo_info = 28;
      case 28: {
        if (tag == 226) {
         parse_user_geo_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_geo_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_mobile;
        break;
      }

      // optional .BidRequest.Mobile mobile = 29;
      case 29: {
        if (tag == 234) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_video;
        break;
      }

      // optional .BidRequest.Video video = 30;
      case 30: {
        if (tag == 242) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_agent(), output);
  }

  // optional string baidu_user_id = 4;
  if (has_baidu_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baidu_user_id().data(), this->baidu_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "baidu_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->baidu_user_id(), output);
  }

  // optional int32 baidu_user_id_version = 5;
  if (has_baidu_user_id_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->baidu_user_id_version(), output);
  }

  // repeated int64 user_category = 6;
  for (int i = 0; i < this->user_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->user_category(i), output);
  }

  // optional .BidRequest.Gender gender = 7;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->gender(), output);
  }

  // repeated .BidRequest.BaiduId baidu_id_list = 8;
  for (int i = 0; i < this->baidu_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->baidu_id_list(i), output);
  }

  // optional string detected_language = 9;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detected_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->detected_language(), output);
  }

  // optional string flash_version = 10;
  if (has_flash_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flash_version().data(), this->flash_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flash_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->flash_version(), output);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->url(), output);
  }

  // optional string referer = 12;
  if (has_referer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referer().data(), this->referer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "referer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->referer(), output);
  }

  // optional int32 site_category = 13;
  if (has_site_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->site_category(), output);
  }

  // optional int32 site_quality = 14;
  if (has_site_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->site_quality(), output);
  }

  // optional int32 page_type = 15;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->page_type(), output);
  }

  // repeated string page_keyword = 17;
  for (int i = 0; i < this->page_keyword_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->page_keyword(i).data(), this->page_keyword(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "page_keyword");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->page_keyword(i), output);
  }

  // optional int32 page_quality = 18;
  if (has_page_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->page_quality(), output);
  }

  // repeated int32 excluded_product_category = 19 [packed = true];
  if (this->excluded_product_category_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(19, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_excluded_product_category_cached_byte_size_);
  }
  for (int i = 0; i < this->excluded_product_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->excluded_product_category(i), output);
  }

  // repeated .BidRequest.AdSlot adslot = 20;
  for (int i = 0; i < this->adslot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->adslot(i), output);
  }

  // optional int32 page_vertical = 21;
  if (has_page_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->page_vertical(), output);
  }

  // optional bool is_test = 26 [default = false];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_test(), output);
  }

  // optional bool is_ping = 27 [default = false];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_ping(), output);
  }

  // optional .BidRequest.Geo user_geo_info = 28;
  if (has_user_geo_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->user_geo_info(), output);
  }

  // optional .BidRequest.Mobile mobile = 29;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->mobile(), output);
  }

  // optional .BidRequest.Video video = 30;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->video(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest)
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_agent(), target);
  }

  // optional string baidu_user_id = 4;
  if (has_baidu_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baidu_user_id().data(), this->baidu_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "baidu_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->baidu_user_id(), target);
  }

  // optional int32 baidu_user_id_version = 5;
  if (has_baidu_user_id_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->baidu_user_id_version(), target);
  }

  // repeated int64 user_category = 6;
  for (int i = 0; i < this->user_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->user_category(i), target);
  }

  // optional .BidRequest.Gender gender = 7;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->gender(), target);
  }

  // repeated .BidRequest.BaiduId baidu_id_list = 8;
  for (int i = 0; i < this->baidu_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->baidu_id_list(i), target);
  }

  // optional string detected_language = 9;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detected_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->detected_language(), target);
  }

  // optional string flash_version = 10;
  if (has_flash_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flash_version().data(), this->flash_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flash_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->flash_version(), target);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->url(), target);
  }

  // optional string referer = 12;
  if (has_referer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referer().data(), this->referer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "referer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->referer(), target);
  }

  // optional int32 site_category = 13;
  if (has_site_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->site_category(), target);
  }

  // optional int32 site_quality = 14;
  if (has_site_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->site_quality(), target);
  }

  // optional int32 page_type = 15;
  if (has_page_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->page_type(), target);
  }

  // repeated string page_keyword = 17;
  for (int i = 0; i < this->page_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_keyword(i).data(), this->page_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "page_keyword");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->page_keyword(i), target);
  }

  // optional int32 page_quality = 18;
  if (has_page_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->page_quality(), target);
  }

  // repeated int32 excluded_product_category = 19 [packed = true];
  if (this->excluded_product_category_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _excluded_product_category_cached_byte_size_, target);
  }
  for (int i = 0; i < this->excluded_product_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->excluded_product_category(i), target);
  }

  // repeated .BidRequest.AdSlot adslot = 20;
  for (int i = 0; i < this->adslot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->adslot(i), target);
  }

  // optional int32 page_vertical = 21;
  if (has_page_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->page_vertical(), target);
  }

  // optional bool is_test = 26 [default = false];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_test(), target);
  }

  // optional bool is_ping = 27 [default = false];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_ping(), target);
  }

  // optional .BidRequest.Geo user_geo_info = 28;
  if (has_user_geo_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->user_geo_info(), target);
  }

  // optional .BidRequest.Mobile mobile = 29;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->mobile(), target);
  }

  // optional .BidRequest.Video video = 30;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->video(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string user_agent = 3;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional string baidu_user_id = 4;
    if (has_baidu_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baidu_user_id());
    }

    // optional int32 baidu_user_id_version = 5;
    if (has_baidu_user_id_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baidu_user_id_version());
    }

    // optional .BidRequest.Gender gender = 7;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string detected_language = 9;
    if (has_detected_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detected_language());
    }

    // optional string flash_version = 10;
    if (has_flash_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flash_version());
    }

    // optional .BidRequest.Geo user_geo_info = 28;
    if (has_user_geo_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_geo_info());
    }

    // optional string url = 11;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string referer = 12;
    if (has_referer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referer());
    }

    // optional int32 site_category = 13;
    if (has_site_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->site_category());
    }

    // optional int32 site_quality = 14;
    if (has_site_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->site_quality());
    }

    // optional int32 page_type = 15;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_type());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 page_quality = 18;
    if (has_page_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_quality());
    }

    // optional int32 page_vertical = 21;
    if (has_page_vertical()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_vertical());
    }

    // optional .BidRequest.Mobile mobile = 29;
    if (has_mobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

    // optional .BidRequest.Video video = 30;
    if (has_video()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional bool is_test = 26 [default = false];
    if (has_is_test()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool is_ping = 27 [default = false];
    if (has_is_ping()) {
      total_size += 2 + 1;
    }

  }
  // repeated .BidRequest.BaiduId baidu_id_list = 8;
  total_size += 1 * this->baidu_id_list_size();
  for (int i = 0; i < this->baidu_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baidu_id_list(i));
  }

  // repeated int64 user_category = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_category(i));
    }
    total_size += 1 * this->user_category_size() + data_size;
  }

  // repeated string page_keyword = 17;
  total_size += 2 * this->page_keyword_size();
  for (int i = 0; i < this->page_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_keyword(i));
  }

  // repeated int32 excluded_product_category = 19 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_product_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_product_category(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _excluded_product_category_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .BidRequest.AdSlot adslot = 20;
  total_size += 2 * this->adslot_size();
  for (int i = 0; i < this->adslot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adslot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  baidu_id_list_.MergeFrom(from.baidu_id_list_);
  user_category_.MergeFrom(from.user_category_);
  page_keyword_.MergeFrom(from.page_keyword_);
  excluded_product_category_.MergeFrom(from.excluded_product_category_);
  adslot_.MergeFrom(from.adslot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_baidu_user_id()) {
      set_baidu_user_id(from.baidu_user_id());
    }
    if (from.has_baidu_user_id_version()) {
      set_baidu_user_id_version(from.baidu_user_id_version());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_detected_language()) {
      set_detected_language(from.detected_language());
    }
    if (from.has_flash_version()) {
      set_flash_version(from.flash_version());
    }
    if (from.has_user_geo_info()) {
      mutable_user_geo_info()->::BidRequest_Geo::MergeFrom(from.user_geo_info());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_referer()) {
      set_referer(from.referer());
    }
    if (from.has_site_category()) {
      set_site_category(from.site_category());
    }
    if (from.has_site_quality()) {
      set_site_quality(from.site_quality());
    }
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_page_quality()) {
      set_page_quality(from.page_quality());
    }
    if (from.has_page_vertical()) {
      set_page_vertical(from.page_vertical());
    }
    if (from.has_mobile()) {
      mutable_mobile()->::BidRequest_Mobile::MergeFrom(from.mobile());
    }
    if (from.has_video()) {
      mutable_video()->::BidRequest_Video::MergeFrom(from.video());
    }
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(baidu_user_id_, other->baidu_user_id_);
    std::swap(baidu_user_id_version_, other->baidu_user_id_version_);
    baidu_id_list_.Swap(&other->baidu_id_list_);
    user_category_.Swap(&other->user_category_);
    std::swap(gender_, other->gender_);
    std::swap(detected_language_, other->detected_language_);
    std::swap(flash_version_, other->flash_version_);
    std::swap(user_geo_info_, other->user_geo_info_);
    std::swap(url_, other->url_);
    std::swap(referer_, other->referer_);
    std::swap(site_category_, other->site_category_);
    std::swap(site_quality_, other->site_quality_);
    std::swap(page_type_, other->page_type_);
    page_keyword_.Swap(&other->page_keyword_);
    std::swap(page_quality_, other->page_quality_);
    std::swap(page_vertical_, other->page_vertical_);
    excluded_product_category_.Swap(&other->excluded_product_category_);
    std::swap(mobile_, other->mobile_);
    std::swap(video_, other->video_);
    adslot_.Swap(&other->adslot_);
    std::swap(is_test_, other->is_test_);
    std::swap(is_ping_, other->is_ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse_Ad_LinkUnitKeyword::kKeywordFieldNumber;
const int BidResponse_Ad_LinkUnitKeyword::kSelectedStyleTypeFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ad_LinkUnitKeyword::BidResponse_Ad_LinkUnitKeyword()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad.LinkUnitKeyword)
}

void BidResponse_Ad_LinkUnitKeyword::InitAsDefaultInstance() {
}

BidResponse_Ad_LinkUnitKeyword::BidResponse_Ad_LinkUnitKeyword(const BidResponse_Ad_LinkUnitKeyword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad.LinkUnitKeyword)
}

void BidResponse_Ad_LinkUnitKeyword::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_LinkUnitKeyword::~BidResponse_Ad_LinkUnitKeyword() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad.LinkUnitKeyword)
  SharedDtor();
}

void BidResponse_Ad_LinkUnitKeyword::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_LinkUnitKeyword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_LinkUnitKeyword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_LinkUnitKeyword_descriptor_;
}

const BidResponse_Ad_LinkUnitKeyword& BidResponse_Ad_LinkUnitKeyword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_LinkUnitKeyword* BidResponse_Ad_LinkUnitKeyword::default_instance_ = NULL;

BidResponse_Ad_LinkUnitKeyword* BidResponse_Ad_LinkUnitKeyword::New() const {
  return new BidResponse_Ad_LinkUnitKeyword;
}

void BidResponse_Ad_LinkUnitKeyword::Clear() {
  if (has_keyword()) {
    if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      keyword_->clear();
    }
  }
  selected_style_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ad_LinkUnitKeyword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad.LinkUnitKeyword)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string keyword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_selected_style_type;
        break;
      }

      // repeated int32 selected_style_type = 2;
      case 2: {
        if (tag == 16) {
         parse_selected_style_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_selected_style_type())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_selected_style_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_selected_style_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad.LinkUnitKeyword)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad.LinkUnitKeyword)
  return false;
#undef DO_
}

void BidResponse_Ad_LinkUnitKeyword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad.LinkUnitKeyword)
  // optional string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyword(), output);
  }

  // repeated int32 selected_style_type = 2;
  for (int i = 0; i < this->selected_style_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->selected_style_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad.LinkUnitKeyword)
}

::google::protobuf::uint8* BidResponse_Ad_LinkUnitKeyword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad.LinkUnitKeyword)
  // optional string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyword(), target);
  }

  // repeated int32 selected_style_type = 2;
  for (int i = 0; i < this->selected_style_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->selected_style_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad.LinkUnitKeyword)
  return target;
}

int BidResponse_Ad_LinkUnitKeyword::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string keyword = 1;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

  }
  // repeated int32 selected_style_type = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->selected_style_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->selected_style_type(i));
    }
    total_size += 1 * this->selected_style_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_LinkUnitKeyword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ad_LinkUnitKeyword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ad_LinkUnitKeyword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad_LinkUnitKeyword::MergeFrom(const BidResponse_Ad_LinkUnitKeyword& from) {
  GOOGLE_CHECK_NE(&from, this);
  selected_style_type_.MergeFrom(from.selected_style_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ad_LinkUnitKeyword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_LinkUnitKeyword::CopyFrom(const BidResponse_Ad_LinkUnitKeyword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_LinkUnitKeyword::IsInitialized() const {

  return true;
}

void BidResponse_Ad_LinkUnitKeyword::Swap(BidResponse_Ad_LinkUnitKeyword* other) {
  if (other != this) {
    std::swap(keyword_, other->keyword_);
    selected_style_type_.Swap(&other->selected_style_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ad_LinkUnitKeyword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_LinkUnitKeyword_descriptor_;
  metadata.reflection = BidResponse_Ad_LinkUnitKeyword_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_Ad_ExpandCreativeInfo::kCreativeWidthFieldNumber;
const int BidResponse_Ad_ExpandCreativeInfo::kCreativeHeightFieldNumber;
const int BidResponse_Ad_ExpandCreativeInfo::kCreativeLandingPageFieldNumber;
const int BidResponse_Ad_ExpandCreativeInfo::kCreativeTypeFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ad_ExpandCreativeInfo::BidResponse_Ad_ExpandCreativeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad.ExpandCreativeInfo)
}

void BidResponse_Ad_ExpandCreativeInfo::InitAsDefaultInstance() {
}

BidResponse_Ad_ExpandCreativeInfo::BidResponse_Ad_ExpandCreativeInfo(const BidResponse_Ad_ExpandCreativeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad.ExpandCreativeInfo)
}

void BidResponse_Ad_ExpandCreativeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creative_width_ = 0;
  creative_height_ = 0;
  creative_landing_page_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_ExpandCreativeInfo::~BidResponse_Ad_ExpandCreativeInfo() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad.ExpandCreativeInfo)
  SharedDtor();
}

void BidResponse_Ad_ExpandCreativeInfo::SharedDtor() {
  if (creative_landing_page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creative_landing_page_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_ExpandCreativeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_ExpandCreativeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_ExpandCreativeInfo_descriptor_;
}

const BidResponse_Ad_ExpandCreativeInfo& BidResponse_Ad_ExpandCreativeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_ExpandCreativeInfo* BidResponse_Ad_ExpandCreativeInfo::default_instance_ = NULL;

BidResponse_Ad_ExpandCreativeInfo* BidResponse_Ad_ExpandCreativeInfo::New() const {
  return new BidResponse_Ad_ExpandCreativeInfo;
}

void BidResponse_Ad_ExpandCreativeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_Ad_ExpandCreativeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(creative_width_, creative_height_);
    if (has_creative_landing_page()) {
      if (creative_landing_page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creative_landing_page_->clear();
      }
    }
    creative_type_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ad_ExpandCreativeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad.ExpandCreativeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 creative_width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_width_)));
          set_has_creative_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creative_height;
        break;
      }

      // optional int32 creative_height = 2;
      case 2: {
        if (tag == 16) {
         parse_creative_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_height_)));
          set_has_creative_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creative_landing_page;
        break;
      }

      // optional string creative_landing_page = 3;
      case 3: {
        if (tag == 26) {
         parse_creative_landing_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_landing_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->creative_landing_page().data(), this->creative_landing_page().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "creative_landing_page");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_creative_type;
        break;
      }

      // optional int32 creative_type = 4;
      case 4: {
        if (tag == 32) {
         parse_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_type_)));
          set_has_creative_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad.ExpandCreativeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad.ExpandCreativeInfo)
  return false;
#undef DO_
}

void BidResponse_Ad_ExpandCreativeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad.ExpandCreativeInfo)
  // optional int32 creative_width = 1;
  if (has_creative_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->creative_width(), output);
  }

  // optional int32 creative_height = 2;
  if (has_creative_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->creative_height(), output);
  }

  // optional string creative_landing_page = 3;
  if (has_creative_landing_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_landing_page().data(), this->creative_landing_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "creative_landing_page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creative_landing_page(), output);
  }

  // optional int32 creative_type = 4;
  if (has_creative_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->creative_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad.ExpandCreativeInfo)
}

::google::protobuf::uint8* BidResponse_Ad_ExpandCreativeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad.ExpandCreativeInfo)
  // optional int32 creative_width = 1;
  if (has_creative_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->creative_width(), target);
  }

  // optional int32 creative_height = 2;
  if (has_creative_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->creative_height(), target);
  }

  // optional string creative_landing_page = 3;
  if (has_creative_landing_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_landing_page().data(), this->creative_landing_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "creative_landing_page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creative_landing_page(), target);
  }

  // optional int32 creative_type = 4;
  if (has_creative_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->creative_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad.ExpandCreativeInfo)
  return target;
}

int BidResponse_Ad_ExpandCreativeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 creative_width = 1;
    if (has_creative_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_width());
    }

    // optional int32 creative_height = 2;
    if (has_creative_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_height());
    }

    // optional string creative_landing_page = 3;
    if (has_creative_landing_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_landing_page());
    }

    // optional int32 creative_type = 4;
    if (has_creative_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_ExpandCreativeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ad_ExpandCreativeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ad_ExpandCreativeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad_ExpandCreativeInfo::MergeFrom(const BidResponse_Ad_ExpandCreativeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creative_width()) {
      set_creative_width(from.creative_width());
    }
    if (from.has_creative_height()) {
      set_creative_height(from.creative_height());
    }
    if (from.has_creative_landing_page()) {
      set_creative_landing_page(from.creative_landing_page());
    }
    if (from.has_creative_type()) {
      set_creative_type(from.creative_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ad_ExpandCreativeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_ExpandCreativeInfo::CopyFrom(const BidResponse_Ad_ExpandCreativeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_ExpandCreativeInfo::IsInitialized() const {

  return true;
}

void BidResponse_Ad_ExpandCreativeInfo::Swap(BidResponse_Ad_ExpandCreativeInfo* other) {
  if (other != this) {
    std::swap(creative_width_, other->creative_width_);
    std::swap(creative_height_, other->creative_height_);
    std::swap(creative_landing_page_, other->creative_landing_page_);
    std::swap(creative_type_, other->creative_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ad_ExpandCreativeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_ExpandCreativeInfo_descriptor_;
  metadata.reflection = BidResponse_Ad_ExpandCreativeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_Ad::kSequenceIdFieldNumber;
const int BidResponse_Ad::kCreativeIdFieldNumber;
const int BidResponse_Ad::kHtmlSnippetFieldNumber;
const int BidResponse_Ad::kLinkUnitKeywordFieldNumber;
const int BidResponse_Ad::kAdvertiserIdFieldNumber;
const int BidResponse_Ad::kWidthFieldNumber;
const int BidResponse_Ad::kHeightFieldNumber;
const int BidResponse_Ad::kCategoryFieldNumber;
const int BidResponse_Ad::kTypeFieldNumber;
const int BidResponse_Ad::kLandingPageFieldNumber;
const int BidResponse_Ad::kTargetUrlFieldNumber;
const int BidResponse_Ad::kMonitorUrlsFieldNumber;
const int BidResponse_Ad::kExpandCreativeInfoFieldNumber;
const int BidResponse_Ad::kMaxCpmFieldNumber;
const int BidResponse_Ad::kExtdataFieldNumber;
const int BidResponse_Ad::kIsCookieMatchingFieldNumber;
const int BidResponse_Ad::kPreferredOrderIdFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ad::BidResponse_Ad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad)
}

void BidResponse_Ad::InitAsDefaultInstance() {
  link_unit_keyword_ = const_cast< ::BidResponse_Ad_LinkUnitKeyword*>(&::BidResponse_Ad_LinkUnitKeyword::default_instance());
  expand_creative_info_ = const_cast< ::BidResponse_Ad_ExpandCreativeInfo*>(&::BidResponse_Ad_ExpandCreativeInfo::default_instance());
}

BidResponse_Ad::BidResponse_Ad(const BidResponse_Ad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad)
}

void BidResponse_Ad::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_id_ = 0;
  creative_id_ = GOOGLE_LONGLONG(0);
  html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_unit_keyword_ = NULL;
  advertiser_id_ = GOOGLE_ULONGLONG(0);
  width_ = 0;
  height_ = 0;
  category_ = 0;
  type_ = 0;
  landing_page_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expand_creative_info_ = NULL;
  max_cpm_ = 0;
  extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_cookie_matching_ = false;
  preferred_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad::~BidResponse_Ad() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad)
  SharedDtor();
}

void BidResponse_Ad::SharedDtor() {
  if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete html_snippet_;
  }
  if (landing_page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete landing_page_;
  }
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (preferred_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preferred_order_id_;
  }
  if (this != default_instance_) {
    delete link_unit_keyword_;
    delete expand_creative_info_;
  }
}

void BidResponse_Ad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_descriptor_;
}

const BidResponse_Ad& BidResponse_Ad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad* BidResponse_Ad::default_instance_ = NULL;

BidResponse_Ad* BidResponse_Ad::New() const {
  return new BidResponse_Ad;
}

void BidResponse_Ad::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_Ad*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sequence_id_, width_);
    ZR_(advertiser_id_, category_);
    creative_id_ = GOOGLE_LONGLONG(0);
    if (has_html_snippet()) {
      if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        html_snippet_->clear();
      }
    }
    if (has_link_unit_keyword()) {
      if (link_unit_keyword_ != NULL) link_unit_keyword_->::BidResponse_Ad_LinkUnitKeyword::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 62208) {
    ZR_(type_, max_cpm_);
    if (has_landing_page()) {
      if (landing_page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        landing_page_->clear();
      }
    }
    if (has_expand_creative_info()) {
      if (expand_creative_info_ != NULL) expand_creative_info_->::BidResponse_Ad_ExpandCreativeInfo::Clear();
    }
    if (has_extdata()) {
      if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extdata_->clear();
      }
    }
    is_cookie_matching_ = false;
  }
  if (has_preferred_order_id()) {
    if (preferred_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      preferred_order_id_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  target_url_.Clear();
  monitor_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creative_id;
        break;
      }

      // optional int64 creative_id = 2;
      case 2: {
        if (tag == 16) {
         parse_creative_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creative_id_)));
          set_has_creative_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_cpm;
        break;
      }

      // optional int32 max_cpm = 3;
      case 3: {
        if (tag == 24) {
         parse_max_cpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cpm_)));
          set_has_max_cpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extdata;
        break;
      }

      // optional string extdata = 5;
      case 5: {
        if (tag == 42) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_cookie_matching;
        break;
      }

      // optional bool is_cookie_matching = 6;
      case 6: {
        if (tag == 48) {
         parse_is_cookie_matching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cookie_matching_)));
          set_has_is_cookie_matching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_html_snippet;
        break;
      }

      // optional string html_snippet = 7;
      case 7: {
        if (tag == 58) {
         parse_html_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html_snippet().data(), this->html_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "html_snippet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_advertiser_id;
        break;
      }

      // optional uint64 advertiser_id = 8;
      case 8: {
        if (tag == 64) {
         parse_advertiser_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &advertiser_id_)));
          set_has_advertiser_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_width;
        break;
      }

      // optional int32 width = 9;
      case 9: {
        if (tag == 72) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // optional int32 height = 10;
      case 10: {
        if (tag == 80) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_category;
        break;
      }

      // optional int32 category = 11;
      case 11: {
        if (tag == 88) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional int32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_landing_page;
        break;
      }

      // optional string landing_page = 13;
      case 13: {
        if (tag == 106) {
         parse_landing_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_landing_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->landing_page().data(), this->landing_page().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "landing_page");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_target_url;
        break;
      }

      // repeated string target_url = 14;
      case 14: {
        if (tag == 114) {
         parse_target_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_target_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_url(this->target_url_size() - 1).data(),
            this->target_url(this->target_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_target_url;
        if (input->ExpectTag(122)) goto parse_preferred_order_id;
        break;
      }

      // optional string preferred_order_id = 15;
      case 15: {
        if (tag == 122) {
         parse_preferred_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_order_id().data(), this->preferred_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preferred_order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_monitor_urls;
        break;
      }

      // repeated string monitor_urls = 17;
      case 17: {
        if (tag == 138) {
         parse_monitor_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_monitor_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monitor_urls(this->monitor_urls_size() - 1).data(),
            this->monitor_urls(this->monitor_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "monitor_urls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_monitor_urls;
        if (input->ExpectTag(146)) goto parse_link_unit_keyword;
        break;
      }

      // optional .BidResponse.Ad.LinkUnitKeyword link_unit_keyword = 18;
      case 18: {
        if (tag == 146) {
         parse_link_unit_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_unit_keyword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_expand_creative_info;
        break;
      }

      // optional .BidResponse.Ad.ExpandCreativeInfo expand_creative_info = 19;
      case 19: {
        if (tag == 154) {
         parse_expand_creative_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expand_creative_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad)
  return false;
#undef DO_
}

void BidResponse_Ad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad)
  // optional int32 sequence_id = 1;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_id(), output);
  }

  // optional int64 creative_id = 2;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->creative_id(), output);
  }

  // optional int32 max_cpm = 3;
  if (has_max_cpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_cpm(), output);
  }

  // optional string extdata = 5;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extdata(), output);
  }

  // optional bool is_cookie_matching = 6;
  if (has_is_cookie_matching()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_cookie_matching(), output);
  }

  // optional string html_snippet = 7;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "html_snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->html_snippet(), output);
  }

  // optional uint64 advertiser_id = 8;
  if (has_advertiser_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->advertiser_id(), output);
  }

  // optional int32 width = 9;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->width(), output);
  }

  // optional int32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->height(), output);
  }

  // optional int32 category = 11;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->category(), output);
  }

  // optional int32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->type(), output);
  }

  // optional string landing_page = 13;
  if (has_landing_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->landing_page().data(), this->landing_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "landing_page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->landing_page(), output);
  }

  // repeated string target_url = 14;
  for (int i = 0; i < this->target_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->target_url(i).data(), this->target_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "target_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->target_url(i), output);
  }

  // optional string preferred_order_id = 15;
  if (has_preferred_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_order_id().data(), this->preferred_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->preferred_order_id(), output);
  }

  // repeated string monitor_urls = 17;
  for (int i = 0; i < this->monitor_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->monitor_urls(i).data(), this->monitor_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "monitor_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->monitor_urls(i), output);
  }

  // optional .BidResponse.Ad.LinkUnitKeyword link_unit_keyword = 18;
  if (has_link_unit_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->link_unit_keyword(), output);
  }

  // optional .BidResponse.Ad.ExpandCreativeInfo expand_creative_info = 19;
  if (has_expand_creative_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->expand_creative_info(), output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad)
}

::google::protobuf::uint8* BidResponse_Ad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad)
  // optional int32 sequence_id = 1;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_id(), target);
  }

  // optional int64 creative_id = 2;
  if (has_creative_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->creative_id(), target);
  }

  // optional int32 max_cpm = 3;
  if (has_max_cpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_cpm(), target);
  }

  // optional string extdata = 5;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extdata(), target);
  }

  // optional bool is_cookie_matching = 6;
  if (has_is_cookie_matching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_cookie_matching(), target);
  }

  // optional string html_snippet = 7;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "html_snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->html_snippet(), target);
  }

  // optional uint64 advertiser_id = 8;
  if (has_advertiser_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->advertiser_id(), target);
  }

  // optional int32 width = 9;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->width(), target);
  }

  // optional int32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->height(), target);
  }

  // optional int32 category = 11;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->category(), target);
  }

  // optional int32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->type(), target);
  }

  // optional string landing_page = 13;
  if (has_landing_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->landing_page().data(), this->landing_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "landing_page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->landing_page(), target);
  }

  // repeated string target_url = 14;
  for (int i = 0; i < this->target_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_url(i).data(), this->target_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->target_url(i), target);
  }

  // optional string preferred_order_id = 15;
  if (has_preferred_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_order_id().data(), this->preferred_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->preferred_order_id(), target);
  }

  // repeated string monitor_urls = 17;
  for (int i = 0; i < this->monitor_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor_urls(i).data(), this->monitor_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monitor_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->monitor_urls(i), target);
  }

  // optional .BidResponse.Ad.LinkUnitKeyword link_unit_keyword = 18;
  if (has_link_unit_keyword()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->link_unit_keyword(), target);
  }

  // optional .BidResponse.Ad.ExpandCreativeInfo expand_creative_info = 19;
  if (has_expand_creative_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->expand_creative_info(), target);
  }

  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad)
  return target;
}

int BidResponse_Ad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sequence_id = 1;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_id());
    }

    // optional int64 creative_id = 2;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creative_id());
    }

    // optional string html_snippet = 7;
    if (has_html_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->html_snippet());
    }

    // optional .BidResponse.Ad.LinkUnitKeyword link_unit_keyword = 18;
    if (has_link_unit_keyword()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link_unit_keyword());
    }

    // optional uint64 advertiser_id = 8;
    if (has_advertiser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->advertiser_id());
    }

    // optional int32 width = 9;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 category = 11;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string landing_page = 13;
    if (has_landing_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->landing_page());
    }

    // optional .BidResponse.Ad.ExpandCreativeInfo expand_creative_info = 19;
    if (has_expand_creative_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expand_creative_info());
    }

    // optional int32 max_cpm = 3;
    if (has_max_cpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cpm());
    }

    // optional string extdata = 5;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

    // optional bool is_cookie_matching = 6;
    if (has_is_cookie_matching()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string preferred_order_id = 15;
    if (has_preferred_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_order_id());
    }

  }
  // repeated string target_url = 14;
  total_size += 1 * this->target_url_size();
  for (int i = 0; i < this->target_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->target_url(i));
  }

  // repeated string monitor_urls = 17;
  total_size += 2 * this->monitor_urls_size();
  for (int i = 0; i < this->monitor_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->monitor_urls(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad::MergeFrom(const BidResponse_Ad& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_url_.MergeFrom(from.target_url_);
  monitor_urls_.MergeFrom(from.monitor_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
    if (from.has_html_snippet()) {
      set_html_snippet(from.html_snippet());
    }
    if (from.has_link_unit_keyword()) {
      mutable_link_unit_keyword()->::BidResponse_Ad_LinkUnitKeyword::MergeFrom(from.link_unit_keyword());
    }
    if (from.has_advertiser_id()) {
      set_advertiser_id(from.advertiser_id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_landing_page()) {
      set_landing_page(from.landing_page());
    }
    if (from.has_expand_creative_info()) {
      mutable_expand_creative_info()->::BidResponse_Ad_ExpandCreativeInfo::MergeFrom(from.expand_creative_info());
    }
    if (from.has_max_cpm()) {
      set_max_cpm(from.max_cpm());
    }
    if (from.has_extdata()) {
      set_extdata(from.extdata());
    }
    if (from.has_is_cookie_matching()) {
      set_is_cookie_matching(from.is_cookie_matching());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_preferred_order_id()) {
      set_preferred_order_id(from.preferred_order_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad::CopyFrom(const BidResponse_Ad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse_Ad::Swap(BidResponse_Ad* other) {
  if (other != this) {
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(creative_id_, other->creative_id_);
    std::swap(html_snippet_, other->html_snippet_);
    std::swap(link_unit_keyword_, other->link_unit_keyword_);
    std::swap(advertiser_id_, other->advertiser_id_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(category_, other->category_);
    std::swap(type_, other->type_);
    std::swap(landing_page_, other->landing_page_);
    target_url_.Swap(&other->target_url_);
    monitor_urls_.Swap(&other->monitor_urls_);
    std::swap(expand_creative_info_, other->expand_creative_info_);
    std::swap(max_cpm_, other->max_cpm_);
    std::swap(extdata_, other->extdata_);
    std::swap(is_cookie_matching_, other->is_cookie_matching_);
    std::swap(preferred_order_id_, other->preferred_order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidResponse_Ad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_descriptor_;
  metadata.reflection = BidResponse_Ad_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse::kIdFieldNumber;
const int BidResponse::kAdFieldNumber;
const int BidResponse::kDebugStringFieldNumber;
const int BidResponse::kProcessingTimeMsFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (debug_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete debug_string_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5frealtime_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_debug_string()) {
      if (debug_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        debug_string_->clear();
      }
    }
    processing_time_ms_ = 0;
  }
  ad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ad;
        break;
      }

      // repeated .BidResponse.Ad ad = 2;
      case 2: {
        if (tag == 18) {
         parse_ad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ad;
        if (input->ExpectTag(26)) goto parse_debug_string;
        break;
      }

      // optional string debug_string = 3;
      case 3: {
        if (tag == 26) {
         parse_debug_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_string().data(), this->debug_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "debug_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_processing_time_ms;
        break;
      }

      // optional int32 processing_time_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processing_time_ms_)));
          set_has_processing_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .BidResponse.Ad ad = 2;
  for (int i = 0; i < this->ad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ad(i), output);
  }

  // optional string debug_string = 3;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "debug_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->debug_string(), output);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->processing_time_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .BidResponse.Ad ad = 2;
  for (int i = 0; i < this->ad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ad(i), target);
  }

  // optional string debug_string = 3;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "debug_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->debug_string(), target);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->processing_time_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string debug_string = 3;
    if (has_debug_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_string());
    }

    // optional int32 processing_time_ms = 4;
    if (has_processing_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processing_time_ms());
    }

  }
  // repeated .BidResponse.Ad ad = 2;
  total_size += 1 * this->ad_size();
  for (int i = 0; i < this->ad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ad(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ad_.MergeFrom(from.ad_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_string()) {
      set_debug_string(from.debug_string());
    }
    if (from.has_processing_time_ms()) {
      set_processing_time_ms(from.processing_time_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ad())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    ad_.Swap(&other->ad_);
    std::swap(debug_string_, other->debug_string_);
    std::swap(processing_time_ms_, other->processing_time_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::BidResponse_Ad,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  ad_status(kAdStatusFieldNumber, 0);

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

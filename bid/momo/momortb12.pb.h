// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: momortb12.proto

#ifndef PROTOBUF_momortb12_2eproto__INCLUDED
#define PROTOBUF_momortb12_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace immomo {
namespace moaservice {
namespace third {
namespace rtb {
namespace v12 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_momortb12_2eproto();
void protobuf_AssignDesc_momortb12_2eproto();
void protobuf_ShutdownFile_momortb12_2eproto();

class BidRequest;
class BidRequest_Imp;
class BidRequest_Imp_Native;
class BidRequest_Device;
class BidRequest_App;
class BidRequest_User;
class BidRequest_Geo;
class Data;
class Segment;
class BidResponse;
class BidResponse_SeatBid;
class BidResponse_SeatBid_Bid;
class BidResponse_SeatBid_Bid_NativeCreative;
class BidResponse_SeatBid_Bid_NativeCreative_Image;
class BidResponse_SeatBid_Bid_Link;

enum BidRequest_Device_ConnectionType {
  BidRequest_Device_ConnectionType_CONNECTION_UNKNOWN = 0,
  BidRequest_Device_ConnectionType_ETHERNET = 1,
  BidRequest_Device_ConnectionType_WIFI = 2,
  BidRequest_Device_ConnectionType_CELL_UNKNOWN = 3,
  BidRequest_Device_ConnectionType_CELL_2G = 4,
  BidRequest_Device_ConnectionType_CELL_3G = 5,
  BidRequest_Device_ConnectionType_CELL_4G = 6
};
bool BidRequest_Device_ConnectionType_IsValid(int value);
const BidRequest_Device_ConnectionType BidRequest_Device_ConnectionType_ConnectionType_MIN = BidRequest_Device_ConnectionType_CONNECTION_UNKNOWN;
const BidRequest_Device_ConnectionType BidRequest_Device_ConnectionType_ConnectionType_MAX = BidRequest_Device_ConnectionType_CELL_4G;
const int BidRequest_Device_ConnectionType_ConnectionType_ARRAYSIZE = BidRequest_Device_ConnectionType_ConnectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Device_ConnectionType_descriptor();
inline const ::std::string& BidRequest_Device_ConnectionType_Name(BidRequest_Device_ConnectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Device_ConnectionType_descriptor(), value);
}
inline bool BidRequest_Device_ConnectionType_Parse(
    const ::std::string& name, BidRequest_Device_ConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Device_ConnectionType>(
    BidRequest_Device_ConnectionType_descriptor(), name, value);
}
enum BidRequest_User_Gender {
  BidRequest_User_Gender_MALE = 1,
  BidRequest_User_Gender_FEMALE = 2,
  BidRequest_User_Gender_OTHER = 3
};
bool BidRequest_User_Gender_IsValid(int value);
const BidRequest_User_Gender BidRequest_User_Gender_Gender_MIN = BidRequest_User_Gender_MALE;
const BidRequest_User_Gender BidRequest_User_Gender_Gender_MAX = BidRequest_User_Gender_OTHER;
const int BidRequest_User_Gender_Gender_ARRAYSIZE = BidRequest_User_Gender_Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_User_Gender_descriptor();
inline const ::std::string& BidRequest_User_Gender_Name(BidRequest_User_Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_User_Gender_descriptor(), value);
}
inline bool BidRequest_User_Gender_Parse(
    const ::std::string& name, BidRequest_User_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_User_Gender>(
    BidRequest_User_Gender_descriptor(), name, value);
}
enum BidResponse_NoBidReason {
  BidResponse_NoBidReason_UNKNOWN_ERROR = 0,
  BidResponse_NoBidReason_TECHNICAL_ERROR = 1,
  BidResponse_NoBidReason_INVALID_REQUEST = 2,
  BidResponse_NoBidReason_KNOWN_WEB_SPIDER = 3,
  BidResponse_NoBidReason_SUSPECTED_NONHUMAN_TRAFFIC = 4,
  BidResponse_NoBidReason_CLOUD_DATACENTER_PROXYIP = 5,
  BidResponse_NoBidReason_UNSUPPORTED_DEVICE = 6,
  BidResponse_NoBidReason_BLOCKED_PUBLISHER = 7,
  BidResponse_NoBidReason_UNMATCHED_USER = 8
};
bool BidResponse_NoBidReason_IsValid(int value);
const BidResponse_NoBidReason BidResponse_NoBidReason_NoBidReason_MIN = BidResponse_NoBidReason_UNKNOWN_ERROR;
const BidResponse_NoBidReason BidResponse_NoBidReason_NoBidReason_MAX = BidResponse_NoBidReason_UNMATCHED_USER;
const int BidResponse_NoBidReason_NoBidReason_ARRAYSIZE = BidResponse_NoBidReason_NoBidReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidResponse_NoBidReason_descriptor();
inline const ::std::string& BidResponse_NoBidReason_Name(BidResponse_NoBidReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidResponse_NoBidReason_descriptor(), value);
}
inline bool BidResponse_NoBidReason_Parse(
    const ::std::string& name, BidResponse_NoBidReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidResponse_NoBidReason>(
    BidResponse_NoBidReason_descriptor(), name, value);
}
enum NativeFormat {
  FEED_LANDING_PAGE_LARGE_IMG = 1,
  FEED_LANDING_PAGE_SMALL_IMG = 2,
  NEARBY_LANDING_PAGE_NO_IMG = 3,
  FEED_APP_IOS_LARGE_IMG = 4,
  FEED_APP_IOS_SMALL_IMG = 5,
  NEARBY_APP_IOS_NO_IMG = 6,
  FEED_APP_ANDROID_LARGE_IMG = 7,
  FEED_APP_ANDROID_SMALL_IMG = 8,
  NEARBY_APP_ANDROID_NO_IMG = 9
};
bool NativeFormat_IsValid(int value);
const NativeFormat NativeFormat_MIN = FEED_LANDING_PAGE_LARGE_IMG;
const NativeFormat NativeFormat_MAX = NEARBY_APP_ANDROID_NO_IMG;
const int NativeFormat_ARRAYSIZE = NativeFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* NativeFormat_descriptor();
inline const ::std::string& NativeFormat_Name(NativeFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    NativeFormat_descriptor(), value);
}
inline bool NativeFormat_Parse(
    const ::std::string& name, NativeFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NativeFormat>(
    NativeFormat_descriptor(), name, value);
}
// ===================================================================

class BidRequest_Imp_Native : public ::google::protobuf::Message {
 public:
  BidRequest_Imp_Native();
  virtual ~BidRequest_Imp_Native();

  BidRequest_Imp_Native(const BidRequest_Imp_Native& from);

  inline BidRequest_Imp_Native& operator=(const BidRequest_Imp_Native& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Native& default_instance();

  void Swap(BidRequest_Imp_Native* other);

  // implements Message ----------------------------------------------

  BidRequest_Imp_Native* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Native& from);
  void MergeFrom(const BidRequest_Imp_Native& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
  inline int native_format_size() const;
  inline void clear_native_format();
  static const int kNativeFormatFieldNumber = 1;
  inline ::com::immomo::moaservice::third::rtb::v12::NativeFormat native_format(int index) const;
  inline void set_native_format(int index, ::com::immomo::moaservice::third::rtb::v12::NativeFormat value);
  inline void add_native_format(::com::immomo::moaservice::third::rtb::v12::NativeFormat value);
  inline const ::google::protobuf::RepeatedField<int>& native_format() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_native_format();

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> native_format_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Native* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp : public ::google::protobuf::Message {
 public:
  BidRequest_Imp();
  virtual ~BidRequest_Imp();

  BidRequest_Imp(const BidRequest_Imp& from);

  inline BidRequest_Imp& operator=(const BidRequest_Imp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp& default_instance();

  void Swap(BidRequest_Imp* other);

  // implements Message ----------------------------------------------

  BidRequest_Imp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp& from);
  void MergeFrom(const BidRequest_Imp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp_Native Native;

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string slotid = 2;
  inline bool has_slotid() const;
  inline void clear_slotid();
  static const int kSlotidFieldNumber = 2;
  inline const ::std::string& slotid() const;
  inline void set_slotid(const ::std::string& value);
  inline void set_slotid(const char* value);
  inline void set_slotid(const char* value, size_t size);
  inline ::std::string* mutable_slotid();
  inline ::std::string* release_slotid();
  inline void set_allocated_slotid(::std::string* slotid);

  // optional double bidfloor = 3;
  inline bool has_bidfloor() const;
  inline void clear_bidfloor();
  static const int kBidfloorFieldNumber = 3;
  inline double bidfloor() const;
  inline void set_bidfloor(double value);

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native native = 4;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 4;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native& native() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native* mutable_native();
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native* release_native();
  inline void set_allocated_native(::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native* native);

  // repeated string bcat = 5;
  inline int bcat_size() const;
  inline void clear_bcat();
  static const int kBcatFieldNumber = 5;
  inline const ::std::string& bcat(int index) const;
  inline ::std::string* mutable_bcat(int index);
  inline void set_bcat(int index, const ::std::string& value);
  inline void set_bcat(int index, const char* value);
  inline void set_bcat(int index, const char* value, size_t size);
  inline ::std::string* add_bcat();
  inline void add_bcat(const ::std::string& value);
  inline void add_bcat(const char* value);
  inline void add_bcat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bcat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bcat();

  // repeated string badv = 6;
  inline int badv_size() const;
  inline void clear_badv();
  static const int kBadvFieldNumber = 6;
  inline const ::std::string& badv(int index) const;
  inline ::std::string* mutable_badv(int index);
  inline void set_badv(int index, const ::std::string& value);
  inline void set_badv(int index, const char* value);
  inline void set_badv(int index, const char* value, size_t size);
  inline ::std::string* add_badv();
  inline void add_badv(const ::std::string& value);
  inline void add_badv(const char* value);
  inline void add_badv(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& badv() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_badv();

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_slotid();
  inline void clear_has_slotid();
  inline void set_has_bidfloor();
  inline void clear_has_bidfloor();
  inline void set_has_native();
  inline void clear_has_native();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* slotid_;
  double bidfloor_;
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native* native_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bcat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> badv_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Device : public ::google::protobuf::Message {
 public:
  BidRequest_Device();
  virtual ~BidRequest_Device();

  BidRequest_Device(const BidRequest_Device& from);

  inline BidRequest_Device& operator=(const BidRequest_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Device& default_instance();

  void Swap(BidRequest_Device* other);

  // implements Message ----------------------------------------------

  BidRequest_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Device& from);
  void MergeFrom(const BidRequest_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Device_ConnectionType ConnectionType;
  static const ConnectionType CONNECTION_UNKNOWN = BidRequest_Device_ConnectionType_CONNECTION_UNKNOWN;
  static const ConnectionType ETHERNET = BidRequest_Device_ConnectionType_ETHERNET;
  static const ConnectionType WIFI = BidRequest_Device_ConnectionType_WIFI;
  static const ConnectionType CELL_UNKNOWN = BidRequest_Device_ConnectionType_CELL_UNKNOWN;
  static const ConnectionType CELL_2G = BidRequest_Device_ConnectionType_CELL_2G;
  static const ConnectionType CELL_3G = BidRequest_Device_ConnectionType_CELL_3G;
  static const ConnectionType CELL_4G = BidRequest_Device_ConnectionType_CELL_4G;
  static inline bool ConnectionType_IsValid(int value) {
    return BidRequest_Device_ConnectionType_IsValid(value);
  }
  static const ConnectionType ConnectionType_MIN =
    BidRequest_Device_ConnectionType_ConnectionType_MIN;
  static const ConnectionType ConnectionType_MAX =
    BidRequest_Device_ConnectionType_ConnectionType_MAX;
  static const int ConnectionType_ARRAYSIZE =
    BidRequest_Device_ConnectionType_ConnectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectionType_descriptor() {
    return BidRequest_Device_ConnectionType_descriptor();
  }
  static inline const ::std::string& ConnectionType_Name(ConnectionType value) {
    return BidRequest_Device_ConnectionType_Name(value);
  }
  static inline bool ConnectionType_Parse(const ::std::string& name,
      ConnectionType* value) {
    return BidRequest_Device_ConnectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string os = 1;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 1;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // optional string osv = 2;
  inline bool has_osv() const;
  inline void clear_osv();
  static const int kOsvFieldNumber = 2;
  inline const ::std::string& osv() const;
  inline void set_osv(const ::std::string& value);
  inline void set_osv(const char* value);
  inline void set_osv(const char* value, size_t size);
  inline ::std::string* mutable_osv();
  inline ::std::string* release_osv();
  inline void set_allocated_osv(::std::string* osv);

  // optional string model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string make = 4;
  inline bool has_make() const;
  inline void clear_make();
  static const int kMakeFieldNumber = 4;
  inline const ::std::string& make() const;
  inline void set_make(const ::std::string& value);
  inline void set_make(const char* value);
  inline void set_make(const char* value, size_t size);
  inline ::std::string* mutable_make();
  inline ::std::string* release_make();
  inline void set_allocated_make(::std::string* make);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string macmd5 = 6;
  inline bool has_macmd5() const;
  inline void clear_macmd5();
  static const int kMacmd5FieldNumber = 6;
  inline const ::std::string& macmd5() const;
  inline void set_macmd5(const ::std::string& value);
  inline void set_macmd5(const char* value);
  inline void set_macmd5(const char* value, size_t size);
  inline ::std::string* mutable_macmd5();
  inline ::std::string* release_macmd5();
  inline void set_allocated_macmd5(::std::string* macmd5);

  // optional string did = 7;
  inline bool has_did() const;
  inline void clear_did();
  static const int kDidFieldNumber = 7;
  inline const ::std::string& did() const;
  inline void set_did(const ::std::string& value);
  inline void set_did(const char* value);
  inline void set_did(const char* value, size_t size);
  inline ::std::string* mutable_did();
  inline ::std::string* release_did();
  inline void set_allocated_did(::std::string* did);

  // optional string didmd5 = 8;
  inline bool has_didmd5() const;
  inline void clear_didmd5();
  static const int kDidmd5FieldNumber = 8;
  inline const ::std::string& didmd5() const;
  inline void set_didmd5(const ::std::string& value);
  inline void set_didmd5(const char* value);
  inline void set_didmd5(const char* value, size_t size);
  inline ::std::string* mutable_didmd5();
  inline ::std::string* release_didmd5();
  inline void set_allocated_didmd5(::std::string* didmd5);

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ConnectionType connectiontype = 9;
  inline bool has_connectiontype() const;
  inline void clear_connectiontype();
  static const int kConnectiontypeFieldNumber = 9;
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType connectiontype() const;
  inline void set_connectiontype(::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType value);

  // optional string ua = 10;
  inline bool has_ua() const;
  inline void clear_ua();
  static const int kUaFieldNumber = 10;
  inline const ::std::string& ua() const;
  inline void set_ua(const ::std::string& value);
  inline void set_ua(const char* value);
  inline void set_ua(const char* value, size_t size);
  inline ::std::string* mutable_ua();
  inline ::std::string* release_ua();
  inline void set_allocated_ua(::std::string* ua);

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 11;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 11;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo& geo() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* mutable_geo();
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* release_geo();
  inline void set_allocated_geo(::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* geo);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
 private:
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_osv();
  inline void clear_has_osv();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_make();
  inline void clear_has_make();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_macmd5();
  inline void clear_has_macmd5();
  inline void set_has_did();
  inline void clear_has_did();
  inline void set_has_didmd5();
  inline void clear_has_didmd5();
  inline void set_has_connectiontype();
  inline void clear_has_connectiontype();
  inline void set_has_ua();
  inline void clear_has_ua();
  inline void set_has_geo();
  inline void clear_has_geo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* os_;
  ::std::string* osv_;
  ::std::string* model_;
  ::std::string* make_;
  ::std::string* ip_;
  ::std::string* macmd5_;
  ::std::string* did_;
  ::std::string* didmd5_;
  ::std::string* ua_;
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* geo_;
  int connectiontype_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Device* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_App : public ::google::protobuf::Message {
 public:
  BidRequest_App();
  virtual ~BidRequest_App();

  BidRequest_App(const BidRequest_App& from);

  inline BidRequest_App& operator=(const BidRequest_App& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_App& default_instance();

  void Swap(BidRequest_App* other);

  // implements Message ----------------------------------------------

  BidRequest_App* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_App& from);
  void MergeFrom(const BidRequest_App& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string ver = 3;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 3;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // optional string bundle = 4;
  inline bool has_bundle() const;
  inline void clear_bundle();
  static const int kBundleFieldNumber = 4;
  inline const ::std::string& bundle() const;
  inline void set_bundle(const ::std::string& value);
  inline void set_bundle(const char* value);
  inline void set_bundle(const char* value, size_t size);
  inline ::std::string* mutable_bundle();
  inline ::std::string* release_bundle();
  inline void set_allocated_bundle(::std::string* bundle);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_bundle();
  inline void clear_has_bundle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* ver_;
  ::std::string* bundle_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_App* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_User : public ::google::protobuf::Message {
 public:
  BidRequest_User();
  virtual ~BidRequest_User();

  BidRequest_User(const BidRequest_User& from);

  inline BidRequest_User& operator=(const BidRequest_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_User& default_instance();

  void Swap(BidRequest_User* other);

  // implements Message ----------------------------------------------

  BidRequest_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_User& from);
  void MergeFrom(const BidRequest_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_User_Gender Gender;
  static const Gender MALE = BidRequest_User_Gender_MALE;
  static const Gender FEMALE = BidRequest_User_Gender_FEMALE;
  static const Gender OTHER = BidRequest_User_Gender_OTHER;
  static inline bool Gender_IsValid(int value) {
    return BidRequest_User_Gender_IsValid(value);
  }
  static const Gender Gender_MIN =
    BidRequest_User_Gender_Gender_MIN;
  static const Gender Gender_MAX =
    BidRequest_User_Gender_Gender_MAX;
  static const int Gender_ARRAYSIZE =
    BidRequest_User_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gender_descriptor() {
    return BidRequest_User_Gender_descriptor();
  }
  static inline const ::std::string& Gender_Name(Gender value) {
    return BidRequest_User_Gender_Name(value);
  }
  static inline bool Gender_Parse(const ::std::string& name,
      Gender* value) {
    return BidRequest_User_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User.Gender gender = 2;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 2;
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender gender() const;
  inline void set_gender(::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender value);

  // optional int32 age_low = 3 [default = 0];
  inline bool has_age_low() const;
  inline void clear_age_low();
  static const int kAgeLowFieldNumber = 3;
  inline ::google::protobuf::int32 age_low() const;
  inline void set_age_low(::google::protobuf::int32 value);

  // optional int32 age_high = 4 [default = 999];
  inline bool has_age_high() const;
  inline void clear_age_high();
  static const int kAgeHighFieldNumber = 4;
  inline ::google::protobuf::int32 age_high() const;
  inline void set_age_high(::google::protobuf::int32 value);

  // repeated .com.immomo.moaservice.third.rtb.v12.Data data = 8;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::com::immomo::moaservice::third::rtb::v12::Data& data(int index) const;
  inline ::com::immomo::moaservice::third::rtb::v12::Data* mutable_data(int index);
  inline ::com::immomo::moaservice::third::rtb::v12::Data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Data >*
      mutable_data();

  // optional string keywords = 6;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 6;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 7;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 7;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo& geo() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* mutable_geo();
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* release_geo();
  inline void set_allocated_geo(::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* geo);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_age_low();
  inline void clear_has_age_low();
  inline void set_has_age_high();
  inline void clear_has_age_high();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_geo();
  inline void clear_has_geo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  int gender_;
  ::google::protobuf::int32 age_low_;
  ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Data > data_;
  ::std::string* keywords_;
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* geo_;
  ::google::protobuf::int32 age_high_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_User* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Geo : public ::google::protobuf::Message {
 public:
  BidRequest_Geo();
  virtual ~BidRequest_Geo();

  BidRequest_Geo(const BidRequest_Geo& from);

  inline BidRequest_Geo& operator=(const BidRequest_Geo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Geo& default_instance();

  void Swap(BidRequest_Geo* other);

  // implements Message ----------------------------------------------

  BidRequest_Geo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Geo& from);
  void MergeFrom(const BidRequest_Geo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double lat = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 1;
  inline double lat() const;
  inline void set_lat(double value);

  // optional double lon = 2;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 2;
  inline double lon() const;
  inline void set_lon(double value);

  // optional string province = 4;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 4;
  inline const ::std::string& province() const;
  inline void set_province(const ::std::string& value);
  inline void set_province(const char* value);
  inline void set_province(const char* value, size_t size);
  inline ::std::string* mutable_province();
  inline ::std::string* release_province();
  inline void set_allocated_province(::std::string* province);

  // optional string city = 5;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 5;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional string district = 6;
  inline bool has_district() const;
  inline void clear_district();
  static const int kDistrictFieldNumber = 6;
  inline const ::std::string& district() const;
  inline void set_district(const ::std::string& value);
  inline void set_district(const char* value);
  inline void set_district(const char* value, size_t size);
  inline ::std::string* mutable_district();
  inline ::std::string* release_district();
  inline void set_allocated_district(::std::string* district);

  // optional string street = 7;
  inline bool has_street() const;
  inline void clear_street();
  static const int kStreetFieldNumber = 7;
  inline const ::std::string& street() const;
  inline void set_street(const ::std::string& value);
  inline void set_street(const char* value);
  inline void set_street(const char* value, size_t size);
  inline ::std::string* mutable_street();
  inline ::std::string* release_street();
  inline void set_allocated_street(::std::string* street);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_district();
  inline void clear_has_district();
  inline void set_has_street();
  inline void clear_has_street();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lat_;
  double lon_;
  ::std::string* province_;
  ::std::string* city_;
  ::std::string* district_;
  ::std::string* street_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Geo* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest : public ::google::protobuf::Message {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest& default_instance();

  void Swap(BidRequest* other);

  // implements Message ----------------------------------------------

  BidRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp Imp;
  typedef BidRequest_Device Device;
  typedef BidRequest_App App;
  typedef BidRequest_User User;
  typedef BidRequest_Geo Geo;

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional bool is_test = 3 [default = false];
  inline bool has_is_test() const;
  inline void clear_is_test();
  static const int kIsTestFieldNumber = 3;
  inline bool is_test() const;
  inline void set_is_test(bool value);

  // optional bool is_ping = 4 [default = false];
  inline bool has_is_ping() const;
  inline void clear_is_ping();
  static const int kIsPingFieldNumber = 4;
  inline bool is_ping() const;
  inline void set_is_ping(bool value);

  // repeated .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp imp = 5;
  inline int imp_size() const;
  inline void clear_imp();
  static const int kImpFieldNumber = 5;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp& imp(int index) const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp* mutable_imp(int index);
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp* add_imp();
  inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp >&
      imp() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp >*
      mutable_imp();

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device device = 6;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 6;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device& device() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device* mutable_device();
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device* release_device();
  inline void set_allocated_device(::com::immomo::moaservice::third::rtb::v12::BidRequest_Device* device);

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.App app = 7;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 7;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_App& app() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_App* mutable_app();
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_App* release_app();
  inline void set_allocated_app(::com::immomo::moaservice::third::rtb::v12::BidRequest_App* app);

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User user = 8;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 8;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_User& user() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_User* mutable_user();
  inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_User* release_user();
  inline void set_allocated_user(::com::immomo::moaservice::third::rtb::v12::BidRequest_User* user);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_is_test();
  inline void clear_has_is_test();
  inline void set_has_is_ping();
  inline void clear_has_is_ping();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_app();
  inline void clear_has_app();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* version_;
  ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp > imp_;
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device* device_;
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_App* app_;
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_User* user_;
  bool is_test_;
  bool is_ping_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidRequest* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .com.immomo.moaservice.third.rtb.v12.Segment segment = 3;
  inline int segment_size() const;
  inline void clear_segment();
  static const int kSegmentFieldNumber = 3;
  inline const ::com::immomo::moaservice::third::rtb::v12::Segment& segment(int index) const;
  inline ::com::immomo::moaservice::third::rtb::v12::Segment* mutable_segment(int index);
  inline ::com::immomo::moaservice::third::rtb::v12::Segment* add_segment();
  inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment >&
      segment() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment >*
      mutable_segment();

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.Data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment > segment_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class Segment : public ::google::protobuf::Message {
 public:
  Segment();
  virtual ~Segment();

  Segment(const Segment& from);

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Segment& default_instance();

  void Swap(Segment* other);

  // implements Message ----------------------------------------------

  Segment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.Segment)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static Segment* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid_Bid_NativeCreative_Image : public ::google::protobuf::Message {
 public:
  BidResponse_SeatBid_Bid_NativeCreative_Image();
  virtual ~BidResponse_SeatBid_Bid_NativeCreative_Image();

  BidResponse_SeatBid_Bid_NativeCreative_Image(const BidResponse_SeatBid_Bid_NativeCreative_Image& from);

  inline BidResponse_SeatBid_Bid_NativeCreative_Image& operator=(const BidResponse_SeatBid_Bid_NativeCreative_Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid_Bid_NativeCreative_Image& default_instance();

  void Swap(BidResponse_SeatBid_Bid_NativeCreative_Image* other);

  // implements Message ----------------------------------------------

  BidResponse_SeatBid_Bid_NativeCreative_Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid_Bid_NativeCreative_Image& from);
  void MergeFrom(const BidResponse_SeatBid_Bid_NativeCreative_Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link link = 4;
  inline bool has_link() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 4;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link& link() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* mutable_link();
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* release_link();
  inline void set_allocated_link(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* link);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_link();
  inline void clear_has_link();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* link_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid_Bid_NativeCreative_Image* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid_Bid_NativeCreative : public ::google::protobuf::Message {
 public:
  BidResponse_SeatBid_Bid_NativeCreative();
  virtual ~BidResponse_SeatBid_Bid_NativeCreative();

  BidResponse_SeatBid_Bid_NativeCreative(const BidResponse_SeatBid_Bid_NativeCreative& from);

  inline BidResponse_SeatBid_Bid_NativeCreative& operator=(const BidResponse_SeatBid_Bid_NativeCreative& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid_Bid_NativeCreative& default_instance();

  void Swap(BidResponse_SeatBid_Bid_NativeCreative* other);

  // implements Message ----------------------------------------------

  BidResponse_SeatBid_Bid_NativeCreative* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid_Bid_NativeCreative& from);
  void MergeFrom(const BidResponse_SeatBid_Bid_NativeCreative& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid_Bid_NativeCreative_Image Image;

  // accessors -------------------------------------------------------

  // required .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
  inline bool has_native_format() const;
  inline void clear_native_format();
  static const int kNativeFormatFieldNumber = 1;
  inline ::com::immomo::moaservice::third::rtb::v12::NativeFormat native_format() const;
  inline void set_native_format(::com::immomo::moaservice::third::rtb::v12::NativeFormat value);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image logo = 4;
  inline bool has_logo() const;
  inline void clear_logo();
  static const int kLogoFieldNumber = 4;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image& logo() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* mutable_logo();
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* release_logo();
  inline void set_allocated_logo(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* logo);

  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image image = 5;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 5;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image& image(int index) const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* mutable_image(int index);
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* add_image();
  inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image >&
      image() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image >*
      mutable_image();

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link landingpage_url = 6;
  inline bool has_landingpage_url() const;
  inline void clear_landingpage_url();
  static const int kLandingpageUrlFieldNumber = 6;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link& landingpage_url() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* mutable_landingpage_url();
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* release_landingpage_url();
  inline void set_allocated_landingpage_url(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* landingpage_url);

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_download_url = 7;
  inline bool has_app_download_url() const;
  inline void clear_app_download_url();
  static const int kAppDownloadUrlFieldNumber = 7;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link& app_download_url() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* mutable_app_download_url();
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* release_app_download_url();
  inline void set_allocated_app_download_url(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* app_download_url);

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_intro_url = 8;
  inline bool has_app_intro_url() const;
  inline void clear_app_intro_url();
  static const int kAppIntroUrlFieldNumber = 8;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link& app_intro_url() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* mutable_app_intro_url();
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* release_app_intro_url();
  inline void set_allocated_app_intro_url(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* app_intro_url);

  // optional string app_ver = 9;
  inline bool has_app_ver() const;
  inline void clear_app_ver();
  static const int kAppVerFieldNumber = 9;
  inline const ::std::string& app_ver() const;
  inline void set_app_ver(const ::std::string& value);
  inline void set_app_ver(const char* value);
  inline void set_app_ver(const char* value, size_t size);
  inline ::std::string* mutable_app_ver();
  inline ::std::string* release_app_ver();
  inline void set_allocated_app_ver(::std::string* app_ver);

  // optional double app_size = 10;
  inline bool has_app_size() const;
  inline void clear_app_size();
  static const int kAppSizeFieldNumber = 10;
  inline double app_size() const;
  inline void set_app_size(double value);

  // repeated string display_labels = 11;
  inline int display_labels_size() const;
  inline void clear_display_labels();
  static const int kDisplayLabelsFieldNumber = 11;
  inline const ::std::string& display_labels(int index) const;
  inline ::std::string* mutable_display_labels(int index);
  inline void set_display_labels(int index, const ::std::string& value);
  inline void set_display_labels(int index, const char* value);
  inline void set_display_labels(int index, const char* value, size_t size);
  inline ::std::string* add_display_labels();
  inline void add_display_labels(const ::std::string& value);
  inline void add_display_labels(const char* value);
  inline void add_display_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& display_labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_display_labels();

  // repeated .com.immomo.moaservice.third.rtb.v12.Segment ext_data = 12;
  inline int ext_data_size() const;
  inline void clear_ext_data();
  static const int kExtDataFieldNumber = 12;
  inline const ::com::immomo::moaservice::third::rtb::v12::Segment& ext_data(int index) const;
  inline ::com::immomo::moaservice::third::rtb::v12::Segment* mutable_ext_data(int index);
  inline ::com::immomo::moaservice::third::rtb::v12::Segment* add_ext_data();
  inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment >&
      ext_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment >*
      mutable_ext_data();

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
 private:
  inline void set_has_native_format();
  inline void clear_has_native_format();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_logo();
  inline void clear_has_logo();
  inline void set_has_landingpage_url();
  inline void clear_has_landingpage_url();
  inline void set_has_app_download_url();
  inline void clear_has_app_download_url();
  inline void set_has_app_intro_url();
  inline void clear_has_app_intro_url();
  inline void set_has_app_ver();
  inline void clear_has_app_ver();
  inline void set_has_app_size();
  inline void clear_has_app_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::std::string* desc_;
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* logo_;
  ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image > image_;
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* landingpage_url_;
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* app_download_url_;
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* app_intro_url_;
  ::std::string* app_ver_;
  double app_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> display_labels_;
  ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment > ext_data_;
  int native_format_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid_Bid_NativeCreative* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid_Bid_Link : public ::google::protobuf::Message {
 public:
  BidResponse_SeatBid_Bid_Link();
  virtual ~BidResponse_SeatBid_Bid_Link();

  BidResponse_SeatBid_Bid_Link(const BidResponse_SeatBid_Bid_Link& from);

  inline BidResponse_SeatBid_Bid_Link& operator=(const BidResponse_SeatBid_Bid_Link& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid_Bid_Link& default_instance();

  void Swap(BidResponse_SeatBid_Bid_Link* other);

  // implements Message ----------------------------------------------

  BidResponse_SeatBid_Bid_Link* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid_Bid_Link& from);
  void MergeFrom(const BidResponse_SeatBid_Bid_Link& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string deeplink_url = 2;
  inline bool has_deeplink_url() const;
  inline void clear_deeplink_url();
  static const int kDeeplinkUrlFieldNumber = 2;
  inline const ::std::string& deeplink_url() const;
  inline void set_deeplink_url(const ::std::string& value);
  inline void set_deeplink_url(const char* value);
  inline void set_deeplink_url(const char* value, size_t size);
  inline ::std::string* mutable_deeplink_url();
  inline ::std::string* release_deeplink_url();
  inline void set_allocated_deeplink_url(::std::string* deeplink_url);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_deeplink_url();
  inline void clear_has_deeplink_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::std::string* deeplink_url_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid_Bid_Link* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid_Bid : public ::google::protobuf::Message {
 public:
  BidResponse_SeatBid_Bid();
  virtual ~BidResponse_SeatBid_Bid();

  BidResponse_SeatBid_Bid(const BidResponse_SeatBid_Bid& from);

  inline BidResponse_SeatBid_Bid& operator=(const BidResponse_SeatBid_Bid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid_Bid& default_instance();

  void Swap(BidResponse_SeatBid_Bid* other);

  // implements Message ----------------------------------------------

  BidResponse_SeatBid_Bid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid_Bid& from);
  void MergeFrom(const BidResponse_SeatBid_Bid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid_Bid_NativeCreative NativeCreative;
  typedef BidResponse_SeatBid_Bid_Link Link;

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string impid = 2;
  inline bool has_impid() const;
  inline void clear_impid();
  static const int kImpidFieldNumber = 2;
  inline const ::std::string& impid() const;
  inline void set_impid(const ::std::string& value);
  inline void set_impid(const char* value);
  inline void set_impid(const char* value, size_t size);
  inline ::std::string* mutable_impid();
  inline ::std::string* release_impid();
  inline void set_allocated_impid(::std::string* impid);

  // required double price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline double price() const;
  inline void set_price(double value);

  // optional string cid = 4;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 4;
  inline const ::std::string& cid() const;
  inline void set_cid(const ::std::string& value);
  inline void set_cid(const char* value);
  inline void set_cid(const char* value, size_t size);
  inline ::std::string* mutable_cid();
  inline ::std::string* release_cid();
  inline void set_allocated_cid(::std::string* cid);

  // optional string adid = 5;
  inline bool has_adid() const;
  inline void clear_adid();
  static const int kAdidFieldNumber = 5;
  inline const ::std::string& adid() const;
  inline void set_adid(const ::std::string& value);
  inline void set_adid(const char* value);
  inline void set_adid(const char* value, size_t size);
  inline ::std::string* mutable_adid();
  inline ::std::string* release_adid();
  inline void set_allocated_adid(::std::string* adid);

  // required string crid = 6;
  inline bool has_crid() const;
  inline void clear_crid();
  static const int kCridFieldNumber = 6;
  inline const ::std::string& crid() const;
  inline void set_crid(const ::std::string& value);
  inline void set_crid(const char* value);
  inline void set_crid(const char* value, size_t size);
  inline ::std::string* mutable_crid();
  inline ::std::string* release_crid();
  inline void set_allocated_crid(::std::string* crid);

  // repeated string cat = 7;
  inline int cat_size() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 7;
  inline const ::std::string& cat(int index) const;
  inline ::std::string* mutable_cat(int index);
  inline void set_cat(int index, const ::std::string& value);
  inline void set_cat(int index, const char* value);
  inline void set_cat(int index, const char* value, size_t size);
  inline ::std::string* add_cat();
  inline void add_cat(const ::std::string& value);
  inline void add_cat(const char* value);
  inline void add_cat(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cat() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cat();

  // repeated string adomain = 8;
  inline int adomain_size() const;
  inline void clear_adomain();
  static const int kAdomainFieldNumber = 8;
  inline const ::std::string& adomain(int index) const;
  inline ::std::string* mutable_adomain(int index);
  inline void set_adomain(int index, const ::std::string& value);
  inline void set_adomain(int index, const char* value);
  inline void set_adomain(int index, const char* value, size_t size);
  inline ::std::string* add_adomain();
  inline void add_adomain(const ::std::string& value);
  inline void add_adomain(const char* value);
  inline void add_adomain(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& adomain() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_adomain();

  // optional string nurl = 9;
  inline bool has_nurl() const;
  inline void clear_nurl();
  static const int kNurlFieldNumber = 9;
  inline const ::std::string& nurl() const;
  inline void set_nurl(const ::std::string& value);
  inline void set_nurl(const char* value);
  inline void set_nurl(const char* value, size_t size);
  inline ::std::string* mutable_nurl();
  inline ::std::string* release_nurl();
  inline void set_allocated_nurl(::std::string* nurl);

  // optional string bundle = 10;
  inline bool has_bundle() const;
  inline void clear_bundle();
  static const int kBundleFieldNumber = 10;
  inline const ::std::string& bundle() const;
  inline void set_bundle(const ::std::string& value);
  inline void set_bundle(const char* value);
  inline void set_bundle(const char* value, size_t size);
  inline ::std::string* mutable_bundle();
  inline ::std::string* release_bundle();
  inline void set_allocated_bundle(::std::string* bundle);

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative native_creative = 11;
  inline bool has_native_creative() const;
  inline void clear_native_creative();
  static const int kNativeCreativeFieldNumber = 11;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative& native_creative() const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative* mutable_native_creative();
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative* release_native_creative();
  inline void set_allocated_native_creative(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative* native_creative);

  // repeated string imptrackers = 12;
  inline int imptrackers_size() const;
  inline void clear_imptrackers();
  static const int kImptrackersFieldNumber = 12;
  inline const ::std::string& imptrackers(int index) const;
  inline ::std::string* mutable_imptrackers(int index);
  inline void set_imptrackers(int index, const ::std::string& value);
  inline void set_imptrackers(int index, const char* value);
  inline void set_imptrackers(int index, const char* value, size_t size);
  inline ::std::string* add_imptrackers();
  inline void add_imptrackers(const ::std::string& value);
  inline void add_imptrackers(const char* value);
  inline void add_imptrackers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& imptrackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_imptrackers();

  // repeated string clicktrackers = 13;
  inline int clicktrackers_size() const;
  inline void clear_clicktrackers();
  static const int kClicktrackersFieldNumber = 13;
  inline const ::std::string& clicktrackers(int index) const;
  inline ::std::string* mutable_clicktrackers(int index);
  inline void set_clicktrackers(int index, const ::std::string& value);
  inline void set_clicktrackers(int index, const char* value);
  inline void set_clicktrackers(int index, const char* value, size_t size);
  inline ::std::string* add_clicktrackers();
  inline void add_clicktrackers(const ::std::string& value);
  inline void add_clicktrackers(const char* value);
  inline void add_clicktrackers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& clicktrackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_clicktrackers();

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_impid();
  inline void clear_has_impid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_adid();
  inline void clear_has_adid();
  inline void set_has_crid();
  inline void clear_has_crid();
  inline void set_has_nurl();
  inline void clear_has_nurl();
  inline void set_has_bundle();
  inline void clear_has_bundle();
  inline void set_has_native_creative();
  inline void clear_has_native_creative();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* impid_;
  double price_;
  ::std::string* cid_;
  ::std::string* adid_;
  ::std::string* crid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> adomain_;
  ::std::string* nurl_;
  ::std::string* bundle_;
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative* native_creative_;
  ::google::protobuf::RepeatedPtrField< ::std::string> imptrackers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> clicktrackers_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid_Bid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid : public ::google::protobuf::Message {
 public:
  BidResponse_SeatBid();
  virtual ~BidResponse_SeatBid();

  BidResponse_SeatBid(const BidResponse_SeatBid& from);

  inline BidResponse_SeatBid& operator=(const BidResponse_SeatBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid& default_instance();

  void Swap(BidResponse_SeatBid* other);

  // implements Message ----------------------------------------------

  BidResponse_SeatBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid& from);
  void MergeFrom(const BidResponse_SeatBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid_Bid Bid;

  // accessors -------------------------------------------------------

  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid bid = 1;
  inline int bid_size() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid& bid(int index) const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid* mutable_bid(int index);
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid* add_bid();
  inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid >&
      bid() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid >*
      mutable_bid();

  // required string seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline const ::std::string& seat() const;
  inline void set_seat(const ::std::string& value);
  inline void set_seat(const char* value);
  inline void set_seat(const char* value, size_t size);
  inline ::std::string* mutable_seat();
  inline ::std::string* release_seat();
  inline void set_allocated_seat(::std::string* seat);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid > bid_;
  ::std::string* seat_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse : public ::google::protobuf::Message {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();

  void Swap(BidResponse* other);

  // implements Message ----------------------------------------------

  BidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid SeatBid;

  typedef BidResponse_NoBidReason NoBidReason;
  static const NoBidReason UNKNOWN_ERROR = BidResponse_NoBidReason_UNKNOWN_ERROR;
  static const NoBidReason TECHNICAL_ERROR = BidResponse_NoBidReason_TECHNICAL_ERROR;
  static const NoBidReason INVALID_REQUEST = BidResponse_NoBidReason_INVALID_REQUEST;
  static const NoBidReason KNOWN_WEB_SPIDER = BidResponse_NoBidReason_KNOWN_WEB_SPIDER;
  static const NoBidReason SUSPECTED_NONHUMAN_TRAFFIC = BidResponse_NoBidReason_SUSPECTED_NONHUMAN_TRAFFIC;
  static const NoBidReason CLOUD_DATACENTER_PROXYIP = BidResponse_NoBidReason_CLOUD_DATACENTER_PROXYIP;
  static const NoBidReason UNSUPPORTED_DEVICE = BidResponse_NoBidReason_UNSUPPORTED_DEVICE;
  static const NoBidReason BLOCKED_PUBLISHER = BidResponse_NoBidReason_BLOCKED_PUBLISHER;
  static const NoBidReason UNMATCHED_USER = BidResponse_NoBidReason_UNMATCHED_USER;
  static inline bool NoBidReason_IsValid(int value) {
    return BidResponse_NoBidReason_IsValid(value);
  }
  static const NoBidReason NoBidReason_MIN =
    BidResponse_NoBidReason_NoBidReason_MIN;
  static const NoBidReason NoBidReason_MAX =
    BidResponse_NoBidReason_NoBidReason_MAX;
  static const int NoBidReason_ARRAYSIZE =
    BidResponse_NoBidReason_NoBidReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NoBidReason_descriptor() {
    return BidResponse_NoBidReason_descriptor();
  }
  static inline const ::std::string& NoBidReason_Name(NoBidReason value) {
    return BidResponse_NoBidReason_Name(value);
  }
  static inline bool NoBidReason_Parse(const ::std::string& name,
      NoBidReason* value) {
    return BidResponse_NoBidReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.NoBidReason nbr = 2;
  inline bool has_nbr() const;
  inline void clear_nbr();
  static const int kNbrFieldNumber = 2;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason nbr() const;
  inline void set_nbr(::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason value);

  // optional string em = 3;
  inline bool has_em() const;
  inline void clear_em();
  static const int kEmFieldNumber = 3;
  inline const ::std::string& em() const;
  inline void set_em(const ::std::string& value);
  inline void set_em(const char* value);
  inline void set_em(const char* value, size_t size);
  inline ::std::string* mutable_em();
  inline ::std::string* release_em();
  inline void set_allocated_em(::std::string* em);

  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid seatbid = 4;
  inline int seatbid_size() const;
  inline void clear_seatbid();
  static const int kSeatbidFieldNumber = 4;
  inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid& seatbid(int index) const;
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid* mutable_seatbid(int index);
  inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid* add_seatbid();
  inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid >&
      seatbid() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid >*
      mutable_seatbid();

  // optional string bidid = 5;
  inline bool has_bidid() const;
  inline void clear_bidid();
  static const int kBididFieldNumber = 5;
  inline const ::std::string& bidid() const;
  inline void set_bidid(const ::std::string& value);
  inline void set_bidid(const char* value);
  inline void set_bidid(const char* value, size_t size);
  inline ::std::string* mutable_bidid();
  inline ::std::string* release_bidid();
  inline void set_allocated_bidid(::std::string* bidid);

  // @@protoc_insertion_point(class_scope:com.immomo.moaservice.third.rtb.v12.BidResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nbr();
  inline void clear_has_nbr();
  inline void set_has_em();
  inline void clear_has_em();
  inline void set_has_bidid();
  inline void clear_has_bidid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* em_;
  ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid > seatbid_;
  ::std::string* bidid_;
  int nbr_;
  friend void  protobuf_AddDesc_momortb12_2eproto();
  friend void protobuf_AssignDesc_momortb12_2eproto();
  friend void protobuf_ShutdownFile_momortb12_2eproto();

  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BidRequest_Imp_Native

// repeated .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
inline int BidRequest_Imp_Native::native_format_size() const {
  return native_format_.size();
}
inline void BidRequest_Imp_Native::clear_native_format() {
  native_format_.Clear();
}
inline ::com::immomo::moaservice::third::rtb::v12::NativeFormat BidRequest_Imp_Native::native_format(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native.native_format)
  return static_cast< ::com::immomo::moaservice::third::rtb::v12::NativeFormat >(native_format_.Get(index));
}
inline void BidRequest_Imp_Native::set_native_format(int index, ::com::immomo::moaservice::third::rtb::v12::NativeFormat value) {
  assert(::com::immomo::moaservice::third::rtb::v12::NativeFormat_IsValid(value));
  native_format_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native.native_format)
}
inline void BidRequest_Imp_Native::add_native_format(::com::immomo::moaservice::third::rtb::v12::NativeFormat value) {
  assert(::com::immomo::moaservice::third::rtb::v12::NativeFormat_IsValid(value));
  native_format_.Add(value);
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native.native_format)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Native::native_format() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native.native_format)
  return native_format_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Native::mutable_native_format() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native.native_format)
  return &native_format_;
}

// -------------------------------------------------------------------

// BidRequest_Imp

// required string id = 1;
inline bool BidRequest_Imp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Imp::id() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.id)
  return *id_;
}
inline void BidRequest_Imp::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.id)
}
inline void BidRequest_Imp::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.id)
}
inline void BidRequest_Imp::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.id)
}
inline ::std::string* BidRequest_Imp::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.id)
  return id_;
}
inline ::std::string* BidRequest_Imp::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Imp::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.id)
}

// required string slotid = 2;
inline bool BidRequest_Imp::has_slotid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp::set_has_slotid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp::clear_has_slotid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp::clear_slotid() {
  if (slotid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotid_->clear();
  }
  clear_has_slotid();
}
inline const ::std::string& BidRequest_Imp::slotid() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.slotid)
  return *slotid_;
}
inline void BidRequest_Imp::set_slotid(const ::std::string& value) {
  set_has_slotid();
  if (slotid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotid_ = new ::std::string;
  }
  slotid_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.slotid)
}
inline void BidRequest_Imp::set_slotid(const char* value) {
  set_has_slotid();
  if (slotid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotid_ = new ::std::string;
  }
  slotid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.slotid)
}
inline void BidRequest_Imp::set_slotid(const char* value, size_t size) {
  set_has_slotid();
  if (slotid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotid_ = new ::std::string;
  }
  slotid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.slotid)
}
inline ::std::string* BidRequest_Imp::mutable_slotid() {
  set_has_slotid();
  if (slotid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.slotid)
  return slotid_;
}
inline ::std::string* BidRequest_Imp::release_slotid() {
  clear_has_slotid();
  if (slotid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = slotid_;
    slotid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Imp::set_allocated_slotid(::std::string* slotid) {
  if (slotid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slotid_;
  }
  if (slotid) {
    set_has_slotid();
    slotid_ = slotid;
  } else {
    clear_has_slotid();
    slotid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.slotid)
}

// optional double bidfloor = 3;
inline bool BidRequest_Imp::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Imp::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Imp::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Imp::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
inline double BidRequest_Imp::bidfloor() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bidfloor)
  return bidfloor_;
}
inline void BidRequest_Imp::set_bidfloor(double value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bidfloor)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native native = 4;
inline bool BidRequest_Imp::has_native() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Imp::set_has_native() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Imp::clear_has_native() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Imp::clear_native() {
  if (native_ != NULL) native_->::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native::Clear();
  clear_has_native();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native& BidRequest_Imp::native() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.native)
  return native_ != NULL ? *native_ : *default_instance_->native_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native* BidRequest_Imp::mutable_native() {
  set_has_native();
  if (native_ == NULL) native_ = new ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.native)
  return native_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native* BidRequest_Imp::release_native() {
  clear_has_native();
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native* temp = native_;
  native_ = NULL;
  return temp;
}
inline void BidRequest_Imp::set_allocated_native(::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native* native) {
  delete native_;
  native_ = native;
  if (native) {
    set_has_native();
  } else {
    clear_has_native();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.native)
}

// repeated string bcat = 5;
inline int BidRequest_Imp::bcat_size() const {
  return bcat_.size();
}
inline void BidRequest_Imp::clear_bcat() {
  bcat_.Clear();
}
inline const ::std::string& BidRequest_Imp::bcat(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
  return bcat_.Get(index);
}
inline ::std::string* BidRequest_Imp::mutable_bcat(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
  return bcat_.Mutable(index);
}
inline void BidRequest_Imp::set_bcat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
  bcat_.Mutable(index)->assign(value);
}
inline void BidRequest_Imp::set_bcat(int index, const char* value) {
  bcat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
}
inline void BidRequest_Imp::set_bcat(int index, const char* value, size_t size) {
  bcat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
}
inline ::std::string* BidRequest_Imp::add_bcat() {
  return bcat_.Add();
}
inline void BidRequest_Imp::add_bcat(const ::std::string& value) {
  bcat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
}
inline void BidRequest_Imp::add_bcat(const char* value) {
  bcat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
}
inline void BidRequest_Imp::add_bcat(const char* value, size_t size) {
  bcat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp::bcat() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
  return bcat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp::mutable_bcat() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.bcat)
  return &bcat_;
}

// repeated string badv = 6;
inline int BidRequest_Imp::badv_size() const {
  return badv_.size();
}
inline void BidRequest_Imp::clear_badv() {
  badv_.Clear();
}
inline const ::std::string& BidRequest_Imp::badv(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
  return badv_.Get(index);
}
inline ::std::string* BidRequest_Imp::mutable_badv(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
  return badv_.Mutable(index);
}
inline void BidRequest_Imp::set_badv(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
  badv_.Mutable(index)->assign(value);
}
inline void BidRequest_Imp::set_badv(int index, const char* value) {
  badv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
}
inline void BidRequest_Imp::set_badv(int index, const char* value, size_t size) {
  badv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
}
inline ::std::string* BidRequest_Imp::add_badv() {
  return badv_.Add();
}
inline void BidRequest_Imp::add_badv(const ::std::string& value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
}
inline void BidRequest_Imp::add_badv(const char* value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
}
inline void BidRequest_Imp::add_badv(const char* value, size_t size) {
  badv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp::badv() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
  return badv_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp::mutable_badv() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.badv)
  return &badv_;
}

// -------------------------------------------------------------------

// BidRequest_Device

// optional string os = 1;
inline bool BidRequest_Device::has_os() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Device::set_has_os() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Device::clear_os() {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& BidRequest_Device::os() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.os)
  return *os_;
}
inline void BidRequest_Device::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.os)
}
inline void BidRequest_Device::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.os)
}
inline void BidRequest_Device::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.os)
}
inline ::std::string* BidRequest_Device::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.os)
  return os_;
}
inline ::std::string* BidRequest_Device::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.os)
}

// optional string osv = 2;
inline bool BidRequest_Device::has_osv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Device::set_has_osv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Device::clear_has_osv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Device::clear_osv() {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_->clear();
  }
  clear_has_osv();
}
inline const ::std::string& BidRequest_Device::osv() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.osv)
  return *osv_;
}
inline void BidRequest_Device::set_osv(const ::std::string& value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.osv)
}
inline void BidRequest_Device::set_osv(const char* value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.osv)
}
inline void BidRequest_Device::set_osv(const char* value, size_t size) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.osv)
}
inline ::std::string* BidRequest_Device::mutable_osv() {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.osv)
  return osv_;
}
inline ::std::string* BidRequest_Device::release_osv() {
  clear_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = osv_;
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_osv(::std::string* osv) {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (osv) {
    set_has_osv();
    osv_ = osv;
  } else {
    clear_has_osv();
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.osv)
}

// optional string model = 3;
inline bool BidRequest_Device::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Device::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Device::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Device::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& BidRequest_Device::model() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.model)
  return *model_;
}
inline void BidRequest_Device::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.model)
}
inline void BidRequest_Device::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.model)
}
inline void BidRequest_Device::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.model)
}
inline ::std::string* BidRequest_Device::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.model)
  return model_;
}
inline ::std::string* BidRequest_Device::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.model)
}

// optional string make = 4;
inline bool BidRequest_Device::has_make() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Device::set_has_make() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Device::clear_has_make() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Device::clear_make() {
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_->clear();
  }
  clear_has_make();
}
inline const ::std::string& BidRequest_Device::make() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.make)
  return *make_;
}
inline void BidRequest_Device::set_make(const ::std::string& value) {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  make_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.make)
}
inline void BidRequest_Device::set_make(const char* value) {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  make_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.make)
}
inline void BidRequest_Device::set_make(const char* value, size_t size) {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  make_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.make)
}
inline ::std::string* BidRequest_Device::mutable_make() {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.make)
  return make_;
}
inline ::std::string* BidRequest_Device::release_make() {
  clear_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = make_;
    make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_make(::std::string* make) {
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete make_;
  }
  if (make) {
    set_has_make();
    make_ = make;
  } else {
    clear_has_make();
    make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.make)
}

// optional string ip = 5;
inline bool BidRequest_Device::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Device::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Device::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Device::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BidRequest_Device::ip() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ip)
  return *ip_;
}
inline void BidRequest_Device::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ip)
}
inline void BidRequest_Device::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ip)
}
inline void BidRequest_Device::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ip)
}
inline ::std::string* BidRequest_Device::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ip)
  return ip_;
}
inline ::std::string* BidRequest_Device::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ip)
}

// optional string macmd5 = 6;
inline bool BidRequest_Device::has_macmd5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Device::set_has_macmd5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Device::clear_has_macmd5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Device::clear_macmd5() {
  if (macmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_->clear();
  }
  clear_has_macmd5();
}
inline const ::std::string& BidRequest_Device::macmd5() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.macmd5)
  return *macmd5_;
}
inline void BidRequest_Device::set_macmd5(const ::std::string& value) {
  set_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_ = new ::std::string;
  }
  macmd5_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.macmd5)
}
inline void BidRequest_Device::set_macmd5(const char* value) {
  set_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_ = new ::std::string;
  }
  macmd5_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.macmd5)
}
inline void BidRequest_Device::set_macmd5(const char* value, size_t size) {
  set_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_ = new ::std::string;
  }
  macmd5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.macmd5)
}
inline ::std::string* BidRequest_Device::mutable_macmd5() {
  set_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macmd5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.macmd5)
  return macmd5_;
}
inline ::std::string* BidRequest_Device::release_macmd5() {
  clear_has_macmd5();
  if (macmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = macmd5_;
    macmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_macmd5(::std::string* macmd5) {
  if (macmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete macmd5_;
  }
  if (macmd5) {
    set_has_macmd5();
    macmd5_ = macmd5;
  } else {
    clear_has_macmd5();
    macmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.macmd5)
}

// optional string did = 7;
inline bool BidRequest_Device::has_did() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Device::set_has_did() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Device::clear_has_did() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Device::clear_did() {
  if (did_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_->clear();
  }
  clear_has_did();
}
inline const ::std::string& BidRequest_Device::did() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.did)
  return *did_;
}
inline void BidRequest_Device::set_did(const ::std::string& value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_ = new ::std::string;
  }
  did_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.did)
}
inline void BidRequest_Device::set_did(const char* value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_ = new ::std::string;
  }
  did_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.did)
}
inline void BidRequest_Device::set_did(const char* value, size_t size) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_ = new ::std::string;
  }
  did_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.did)
}
inline ::std::string* BidRequest_Device::mutable_did() {
  set_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.did)
  return did_;
}
inline ::std::string* BidRequest_Device::release_did() {
  clear_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = did_;
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_did(::std::string* did) {
  if (did_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete did_;
  }
  if (did) {
    set_has_did();
    did_ = did;
  } else {
    clear_has_did();
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.did)
}

// optional string didmd5 = 8;
inline bool BidRequest_Device::has_didmd5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Device::set_has_didmd5() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Device::clear_has_didmd5() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Device::clear_didmd5() {
  if (didmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_->clear();
  }
  clear_has_didmd5();
}
inline const ::std::string& BidRequest_Device::didmd5() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.didmd5)
  return *didmd5_;
}
inline void BidRequest_Device::set_didmd5(const ::std::string& value) {
  set_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_ = new ::std::string;
  }
  didmd5_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.didmd5)
}
inline void BidRequest_Device::set_didmd5(const char* value) {
  set_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_ = new ::std::string;
  }
  didmd5_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.didmd5)
}
inline void BidRequest_Device::set_didmd5(const char* value, size_t size) {
  set_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_ = new ::std::string;
  }
  didmd5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.didmd5)
}
inline ::std::string* BidRequest_Device::mutable_didmd5() {
  set_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    didmd5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.didmd5)
  return didmd5_;
}
inline ::std::string* BidRequest_Device::release_didmd5() {
  clear_has_didmd5();
  if (didmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = didmd5_;
    didmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_didmd5(::std::string* didmd5) {
  if (didmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete didmd5_;
  }
  if (didmd5) {
    set_has_didmd5();
    didmd5_ = didmd5;
  } else {
    clear_has_didmd5();
    didmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.didmd5)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ConnectionType connectiontype = 9;
inline bool BidRequest_Device::has_connectiontype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Device::set_has_connectiontype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Device::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Device::clear_connectiontype() {
  connectiontype_ = 0;
  clear_has_connectiontype();
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType BidRequest_Device::connectiontype() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.connectiontype)
  return static_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType >(connectiontype_);
}
inline void BidRequest_Device::set_connectiontype(::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType value) {
  assert(::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType_IsValid(value));
  set_has_connectiontype();
  connectiontype_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.connectiontype)
}

// optional string ua = 10;
inline bool BidRequest_Device::has_ua() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Device::set_has_ua() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Device::clear_ua() {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_->clear();
  }
  clear_has_ua();
}
inline const ::std::string& BidRequest_Device::ua() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ua)
  return *ua_;
}
inline void BidRequest_Device::set_ua(const ::std::string& value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ua)
}
inline void BidRequest_Device::set_ua(const char* value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ua)
}
inline void BidRequest_Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ua)
}
inline ::std::string* BidRequest_Device::mutable_ua() {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ua)
  return ua_;
}
inline ::std::string* BidRequest_Device::release_ua() {
  clear_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_;
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_ua(::std::string* ua) {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (ua) {
    set_has_ua();
    ua_ = ua;
  } else {
    clear_has_ua();
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ua)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 11;
inline bool BidRequest_Device::has_geo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Device::set_has_geo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Device::clear_has_geo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Device::clear_geo() {
  if (geo_ != NULL) geo_->::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo::Clear();
  clear_has_geo();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo& BidRequest_Device::geo() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* BidRequest_Device::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.geo)
  return geo_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* BidRequest_Device::release_geo() {
  clear_has_geo();
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void BidRequest_Device::set_allocated_geo(::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Device.geo)
}

// -------------------------------------------------------------------

// BidRequest_App

// optional string id = 1;
inline bool BidRequest_App::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_App::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_App::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_App::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_App::id() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.App.id)
  return *id_;
}
inline void BidRequest_App::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.App.id)
}
inline void BidRequest_App::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.App.id)
}
inline void BidRequest_App::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.App.id)
}
inline ::std::string* BidRequest_App::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.App.id)
  return id_;
}
inline ::std::string* BidRequest_App::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.App.id)
}

// optional string name = 2;
inline bool BidRequest_App::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_App::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_App::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_App::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BidRequest_App::name() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.App.name)
  return *name_;
}
inline void BidRequest_App::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.App.name)
}
inline void BidRequest_App::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.App.name)
}
inline void BidRequest_App::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.App.name)
}
inline ::std::string* BidRequest_App::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.App.name)
  return name_;
}
inline ::std::string* BidRequest_App::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.App.name)
}

// optional string ver = 3;
inline bool BidRequest_App::has_ver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_App::set_has_ver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_App::clear_has_ver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_App::clear_ver() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& BidRequest_App::ver() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.App.ver)
  return *ver_;
}
inline void BidRequest_App::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.App.ver)
}
inline void BidRequest_App::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.App.ver)
}
inline void BidRequest_App::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.App.ver)
}
inline ::std::string* BidRequest_App::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.App.ver)
  return ver_;
}
inline ::std::string* BidRequest_App::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.App.ver)
}

// optional string bundle = 4;
inline bool BidRequest_App::has_bundle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_App::set_has_bundle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_App::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_App::clear_bundle() {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_->clear();
  }
  clear_has_bundle();
}
inline const ::std::string& BidRequest_App::bundle() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.App.bundle)
  return *bundle_;
}
inline void BidRequest_App::set_bundle(const ::std::string& value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.App.bundle)
}
inline void BidRequest_App::set_bundle(const char* value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.App.bundle)
}
inline void BidRequest_App::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.App.bundle)
}
inline ::std::string* BidRequest_App::mutable_bundle() {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.App.bundle)
  return bundle_;
}
inline ::std::string* BidRequest_App::release_bundle() {
  clear_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bundle_;
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_App::set_allocated_bundle(::std::string* bundle) {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (bundle) {
    set_has_bundle();
    bundle_ = bundle;
  } else {
    clear_has_bundle();
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.App.bundle)
}

// -------------------------------------------------------------------

// BidRequest_User

// optional string id = 1;
inline bool BidRequest_User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_User::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_User::id() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.User.id)
  return *id_;
}
inline void BidRequest_User::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.User.id)
}
inline void BidRequest_User::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.User.id)
}
inline void BidRequest_User::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.User.id)
}
inline ::std::string* BidRequest_User::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.User.id)
  return id_;
}
inline ::std::string* BidRequest_User::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_User::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.User.id)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User.Gender gender = 2;
inline bool BidRequest_User::has_gender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_User::set_has_gender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_User::clear_has_gender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_User::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender BidRequest_User::gender() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.User.gender)
  return static_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender >(gender_);
}
inline void BidRequest_User::set_gender(::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender value) {
  assert(::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.User.gender)
}

// optional int32 age_low = 3 [default = 0];
inline bool BidRequest_User::has_age_low() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_User::set_has_age_low() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_User::clear_has_age_low() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_User::clear_age_low() {
  age_low_ = 0;
  clear_has_age_low();
}
inline ::google::protobuf::int32 BidRequest_User::age_low() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.User.age_low)
  return age_low_;
}
inline void BidRequest_User::set_age_low(::google::protobuf::int32 value) {
  set_has_age_low();
  age_low_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.User.age_low)
}

// optional int32 age_high = 4 [default = 999];
inline bool BidRequest_User::has_age_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_User::set_has_age_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_User::clear_has_age_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_User::clear_age_high() {
  age_high_ = 999;
  clear_has_age_high();
}
inline ::google::protobuf::int32 BidRequest_User::age_high() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.User.age_high)
  return age_high_;
}
inline void BidRequest_User::set_age_high(::google::protobuf::int32 value) {
  set_has_age_high();
  age_high_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.User.age_high)
}

// repeated .com.immomo.moaservice.third.rtb.v12.Data data = 8;
inline int BidRequest_User::data_size() const {
  return data_.size();
}
inline void BidRequest_User::clear_data() {
  data_.Clear();
}
inline const ::com::immomo::moaservice::third::rtb::v12::Data& BidRequest_User::data(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.User.data)
  return data_.Get(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::Data* BidRequest_User::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.User.data)
  return data_.Mutable(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::Data* BidRequest_User::add_data() {
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidRequest.User.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Data >&
BidRequest_User::data() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidRequest.User.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Data >*
BidRequest_User::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidRequest.User.data)
  return &data_;
}

// optional string keywords = 6;
inline bool BidRequest_User::has_keywords() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_User::set_has_keywords() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_User::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_User::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& BidRequest_User::keywords() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.User.keywords)
  return *keywords_;
}
inline void BidRequest_User::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.User.keywords)
}
inline void BidRequest_User::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.User.keywords)
}
inline void BidRequest_User::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.User.keywords)
}
inline ::std::string* BidRequest_User::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.User.keywords)
  return keywords_;
}
inline ::std::string* BidRequest_User::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_User::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.User.keywords)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 7;
inline bool BidRequest_User::has_geo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_User::set_has_geo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_User::clear_has_geo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_User::clear_geo() {
  if (geo_ != NULL) geo_->::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo::Clear();
  clear_has_geo();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo& BidRequest_User::geo() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.User.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* BidRequest_User::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.User.geo)
  return geo_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* BidRequest_User::release_geo() {
  clear_has_geo();
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void BidRequest_User::set_allocated_geo(::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.User.geo)
}

// -------------------------------------------------------------------

// BidRequest_Geo

// optional double lat = 1;
inline bool BidRequest_Geo::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Geo::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Geo::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Geo::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double BidRequest_Geo::lat() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.lat)
  return lat_;
}
inline void BidRequest_Geo::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.lat)
}

// optional double lon = 2;
inline bool BidRequest_Geo::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Geo::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Geo::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Geo::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double BidRequest_Geo::lon() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.lon)
  return lon_;
}
inline void BidRequest_Geo::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.lon)
}

// optional string province = 4;
inline bool BidRequest_Geo::has_province() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Geo::set_has_province() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Geo::clear_has_province() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Geo::clear_province() {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_->clear();
  }
  clear_has_province();
}
inline const ::std::string& BidRequest_Geo::province() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.province)
  return *province_;
}
inline void BidRequest_Geo::set_province(const ::std::string& value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.province)
}
inline void BidRequest_Geo::set_province(const char* value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.province)
}
inline void BidRequest_Geo::set_province(const char* value, size_t size) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.province)
}
inline ::std::string* BidRequest_Geo::mutable_province() {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.province)
  return province_;
}
inline ::std::string* BidRequest_Geo::release_province() {
  clear_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = province_;
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_province(::std::string* province) {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (province) {
    set_has_province();
    province_ = province;
  } else {
    clear_has_province();
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.province)
}

// optional string city = 5;
inline bool BidRequest_Geo::has_city() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Geo::set_has_city() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Geo::clear_has_city() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Geo::clear_city() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& BidRequest_Geo::city() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.city)
  return *city_;
}
inline void BidRequest_Geo::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.city)
}
inline void BidRequest_Geo::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.city)
}
inline void BidRequest_Geo::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.city)
}
inline ::std::string* BidRequest_Geo::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.city)
  return city_;
}
inline ::std::string* BidRequest_Geo::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.city)
}

// optional string district = 6;
inline bool BidRequest_Geo::has_district() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Geo::set_has_district() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Geo::clear_has_district() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Geo::clear_district() {
  if (district_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    district_->clear();
  }
  clear_has_district();
}
inline const ::std::string& BidRequest_Geo::district() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.district)
  return *district_;
}
inline void BidRequest_Geo::set_district(const ::std::string& value) {
  set_has_district();
  if (district_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    district_ = new ::std::string;
  }
  district_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.district)
}
inline void BidRequest_Geo::set_district(const char* value) {
  set_has_district();
  if (district_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    district_ = new ::std::string;
  }
  district_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.district)
}
inline void BidRequest_Geo::set_district(const char* value, size_t size) {
  set_has_district();
  if (district_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    district_ = new ::std::string;
  }
  district_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.district)
}
inline ::std::string* BidRequest_Geo::mutable_district() {
  set_has_district();
  if (district_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    district_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.district)
  return district_;
}
inline ::std::string* BidRequest_Geo::release_district() {
  clear_has_district();
  if (district_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = district_;
    district_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_district(::std::string* district) {
  if (district_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete district_;
  }
  if (district) {
    set_has_district();
    district_ = district;
  } else {
    clear_has_district();
    district_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.district)
}

// optional string street = 7;
inline bool BidRequest_Geo::has_street() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Geo::set_has_street() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Geo::clear_has_street() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Geo::clear_street() {
  if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    street_->clear();
  }
  clear_has_street();
}
inline const ::std::string& BidRequest_Geo::street() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.street)
  return *street_;
}
inline void BidRequest_Geo::set_street(const ::std::string& value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    street_ = new ::std::string;
  }
  street_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.street)
}
inline void BidRequest_Geo::set_street(const char* value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    street_ = new ::std::string;
  }
  street_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.street)
}
inline void BidRequest_Geo::set_street(const char* value, size_t size) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    street_ = new ::std::string;
  }
  street_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.street)
}
inline ::std::string* BidRequest_Geo::mutable_street() {
  set_has_street();
  if (street_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    street_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.street)
  return street_;
}
inline ::std::string* BidRequest_Geo::release_street() {
  clear_has_street();
  if (street_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = street_;
    street_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Geo::set_allocated_street(::std::string* street) {
  if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete street_;
  }
  if (street) {
    set_has_street();
    street_ = street;
  } else {
    clear_has_street();
    street_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo.street)
}

// -------------------------------------------------------------------

// BidRequest

// required string id = 1;
inline bool BidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest::id() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.id)
  return *id_;
}
inline void BidRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.id)
}
inline void BidRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.id)
}
inline void BidRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.id)
}
inline ::std::string* BidRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.id)
  return id_;
}
inline ::std::string* BidRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.id)
}

// required string version = 2;
inline bool BidRequest::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& BidRequest::version() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.version)
  return *version_;
}
inline void BidRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.version)
}
inline void BidRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidRequest.version)
}
inline void BidRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidRequest.version)
}
inline ::std::string* BidRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.version)
  return version_;
}
inline ::std::string* BidRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.version)
}

// optional bool is_test = 3 [default = false];
inline bool BidRequest::has_is_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest::set_has_is_test() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest::clear_has_is_test() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest::clear_is_test() {
  is_test_ = false;
  clear_has_is_test();
}
inline bool BidRequest::is_test() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.is_test)
  return is_test_;
}
inline void BidRequest::set_is_test(bool value) {
  set_has_is_test();
  is_test_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.is_test)
}

// optional bool is_ping = 4 [default = false];
inline bool BidRequest::has_is_ping() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest::set_has_is_ping() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest::clear_has_is_ping() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest::clear_is_ping() {
  is_ping_ = false;
  clear_has_is_ping();
}
inline bool BidRequest::is_ping() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.is_ping)
  return is_ping_;
}
inline void BidRequest::set_is_ping(bool value) {
  set_has_is_ping();
  is_ping_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidRequest.is_ping)
}

// repeated .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp imp = 5;
inline int BidRequest::imp_size() const {
  return imp_.size();
}
inline void BidRequest::clear_imp() {
  imp_.Clear();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp& BidRequest::imp(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.imp)
  return imp_.Get(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp* BidRequest::mutable_imp(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.imp)
  return imp_.Mutable(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp* BidRequest::add_imp() {
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidRequest.imp)
  return imp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp >&
BidRequest::imp() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidRequest.imp)
  return imp_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp >*
BidRequest::mutable_imp() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidRequest.imp)
  return &imp_;
}

// optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device device = 6;
inline bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest::clear_device() {
  if (device_ != NULL) device_->::com::immomo::moaservice::third::rtb::v12::BidRequest_Device::Clear();
  clear_has_device();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device& BidRequest::device() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.device)
  return device_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device* BidRequest::release_device() {
  clear_has_device();
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_device(::com::immomo::moaservice::third::rtb::v12::BidRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.device)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidRequest.App app = 7;
inline bool BidRequest::has_app() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest::set_has_app() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest::clear_has_app() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest::clear_app() {
  if (app_ != NULL) app_->::com::immomo::moaservice::third::rtb::v12::BidRequest_App::Clear();
  clear_has_app();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_App& BidRequest::app() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.app)
  return app_ != NULL ? *app_ : *default_instance_->app_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_App* BidRequest::mutable_app() {
  set_has_app();
  if (app_ == NULL) app_ = new ::com::immomo::moaservice::third::rtb::v12::BidRequest_App;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.app)
  return app_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_App* BidRequest::release_app() {
  clear_has_app();
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_App* temp = app_;
  app_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_app(::com::immomo::moaservice::third::rtb::v12::BidRequest_App* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.app)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User user = 8;
inline bool BidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest::clear_user() {
  if (user_ != NULL) user_->::com::immomo::moaservice::third::rtb::v12::BidRequest_User::Clear();
  clear_has_user();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidRequest_User& BidRequest::user() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidRequest.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_User* BidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::com::immomo::moaservice::third::rtb::v12::BidRequest_User;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidRequest.user)
  return user_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidRequest_User* BidRequest::release_user() {
  clear_has_user();
  ::com::immomo::moaservice::third::rtb::v12::BidRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_user(::com::immomo::moaservice::third::rtb::v12::BidRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidRequest.user)
}

// -------------------------------------------------------------------

// Data

// optional string id = 1;
inline bool Data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Data::id() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.Data.id)
  return *id_;
}
inline void Data::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.Data.id)
}
inline void Data::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.Data.id)
}
inline void Data::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.Data.id)
}
inline ::std::string* Data::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.Data.id)
  return id_;
}
inline ::std::string* Data::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.Data.id)
}

// optional string name = 2;
inline bool Data::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Data::name() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.Data.name)
  return *name_;
}
inline void Data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.Data.name)
}
inline void Data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.Data.name)
}
inline void Data::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.Data.name)
}
inline ::std::string* Data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.Data.name)
  return name_;
}
inline ::std::string* Data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.Data.name)
}

// repeated .com.immomo.moaservice.third.rtb.v12.Segment segment = 3;
inline int Data::segment_size() const {
  return segment_.size();
}
inline void Data::clear_segment() {
  segment_.Clear();
}
inline const ::com::immomo::moaservice::third::rtb::v12::Segment& Data::segment(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.Data.segment)
  return segment_.Get(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::Segment* Data::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.Data.segment)
  return segment_.Mutable(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::Segment* Data::add_segment() {
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.Data.segment)
  return segment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment >&
Data::segment() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.Data.segment)
  return segment_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment >*
Data::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.Data.segment)
  return &segment_;
}

// -------------------------------------------------------------------

// Segment

// optional string id = 1;
inline bool Segment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Segment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Segment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Segment::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Segment::id() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.Segment.id)
  return *id_;
}
inline void Segment::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.Segment.id)
}
inline void Segment::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.Segment.id)
}
inline void Segment::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.Segment.id)
}
inline ::std::string* Segment::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.Segment.id)
  return id_;
}
inline ::std::string* Segment::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Segment::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.Segment.id)
}

// optional string name = 2;
inline bool Segment::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Segment::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Segment::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Segment::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Segment::name() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.Segment.name)
  return *name_;
}
inline void Segment::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.Segment.name)
}
inline void Segment::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.Segment.name)
}
inline void Segment::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.Segment.name)
}
inline ::std::string* Segment::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.Segment.name)
  return name_;
}
inline ::std::string* Segment::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Segment::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.Segment.name)
}

// optional string value = 3;
inline bool Segment::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Segment::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Segment::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Segment::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Segment::value() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.Segment.value)
  return *value_;
}
inline void Segment::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.Segment.value)
}
inline void Segment::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.Segment.value)
}
inline void Segment::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.Segment.value)
}
inline ::std::string* Segment::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.Segment.value)
  return value_;
}
inline ::std::string* Segment::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Segment::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.Segment.value)
}

// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid_NativeCreative_Image

// optional string url = 1;
inline bool BidResponse_SeatBid_Bid_NativeCreative_Image::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidResponse_SeatBid_Bid_NativeCreative_Image::url() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.url)
  return *url_;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.url)
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.url)
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.url)
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative_Image::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.url)
  return url_;
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative_Image::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.url)
}

// optional int32 width = 2;
inline bool BidResponse_SeatBid_Bid_NativeCreative_Image::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BidResponse_SeatBid_Bid_NativeCreative_Image::width() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.width)
  return width_;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.width)
}

// optional int32 height = 3;
inline bool BidResponse_SeatBid_Bid_NativeCreative_Image::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BidResponse_SeatBid_Bid_NativeCreative_Image::height() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.height)
  return height_;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.height)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link link = 4;
inline bool BidResponse_SeatBid_Bid_NativeCreative_Image::has_link() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_has_link() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::clear_has_link() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::clear_link() {
  if (link_ != NULL) link_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::Clear();
  clear_has_link();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link& BidResponse_SeatBid_Bid_NativeCreative_Image::link() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.link)
  return link_ != NULL ? *link_ : *default_instance_->link_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_NativeCreative_Image::mutable_link() {
  set_has_link();
  if (link_ == NULL) link_ = new ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.link)
  return link_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_NativeCreative_Image::release_link() {
  clear_has_link();
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* temp = link_;
  link_ = NULL;
  return temp;
}
inline void BidResponse_SeatBid_Bid_NativeCreative_Image::set_allocated_link(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* link) {
  delete link_;
  link_ = link;
  if (link) {
    set_has_link();
  } else {
    clear_has_link();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image.link)
}

// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid_NativeCreative

// required .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
inline bool BidResponse_SeatBid_Bid_NativeCreative::has_native_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_has_native_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_has_native_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_native_format() {
  native_format_ = 1;
  clear_has_native_format();
}
inline ::com::immomo::moaservice::third::rtb::v12::NativeFormat BidResponse_SeatBid_Bid_NativeCreative::native_format() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.native_format)
  return static_cast< ::com::immomo::moaservice::third::rtb::v12::NativeFormat >(native_format_);
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_native_format(::com::immomo::moaservice::third::rtb::v12::NativeFormat value) {
  assert(::com::immomo::moaservice::third::rtb::v12::NativeFormat_IsValid(value));
  set_has_native_format();
  native_format_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.native_format)
}

// required string title = 2;
inline bool BidResponse_SeatBid_Bid_NativeCreative::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& BidResponse_SeatBid_Bid_NativeCreative::title() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.title)
  return *title_;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.title)
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.title)
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.title)
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.title)
  return title_;
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.title)
}

// required string desc = 3;
inline bool BidResponse_SeatBid_Bid_NativeCreative::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& BidResponse_SeatBid_Bid_NativeCreative::desc() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.desc)
  return *desc_;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.desc)
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.desc)
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.desc)
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.desc)
  return desc_;
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.desc)
}

// required .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image logo = 4;
inline bool BidResponse_SeatBid_Bid_NativeCreative::has_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_has_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_has_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_logo() {
  if (logo_ != NULL) logo_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image::Clear();
  clear_has_logo();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image& BidResponse_SeatBid_Bid_NativeCreative::logo() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.logo)
  return logo_ != NULL ? *logo_ : *default_instance_->logo_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* BidResponse_SeatBid_Bid_NativeCreative::mutable_logo() {
  set_has_logo();
  if (logo_ == NULL) logo_ = new ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.logo)
  return logo_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* BidResponse_SeatBid_Bid_NativeCreative::release_logo() {
  clear_has_logo();
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* temp = logo_;
  logo_ = NULL;
  return temp;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_allocated_logo(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* logo) {
  delete logo_;
  logo_ = logo;
  if (logo) {
    set_has_logo();
  } else {
    clear_has_logo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.logo)
}

// repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image image = 5;
inline int BidResponse_SeatBid_Bid_NativeCreative::image_size() const {
  return image_.size();
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_image() {
  image_.Clear();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image& BidResponse_SeatBid_Bid_NativeCreative::image(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.image)
  return image_.Get(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* BidResponse_SeatBid_Bid_NativeCreative::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.image)
  return image_.Mutable(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image* BidResponse_SeatBid_Bid_NativeCreative::add_image() {
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.image)
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image >&
BidResponse_SeatBid_Bid_NativeCreative::image() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image >*
BidResponse_SeatBid_Bid_NativeCreative::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.image)
  return &image_;
}

// optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link landingpage_url = 6;
inline bool BidResponse_SeatBid_Bid_NativeCreative::has_landingpage_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_has_landingpage_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_has_landingpage_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_landingpage_url() {
  if (landingpage_url_ != NULL) landingpage_url_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::Clear();
  clear_has_landingpage_url();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link& BidResponse_SeatBid_Bid_NativeCreative::landingpage_url() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.landingpage_url)
  return landingpage_url_ != NULL ? *landingpage_url_ : *default_instance_->landingpage_url_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_NativeCreative::mutable_landingpage_url() {
  set_has_landingpage_url();
  if (landingpage_url_ == NULL) landingpage_url_ = new ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.landingpage_url)
  return landingpage_url_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_NativeCreative::release_landingpage_url() {
  clear_has_landingpage_url();
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* temp = landingpage_url_;
  landingpage_url_ = NULL;
  return temp;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_allocated_landingpage_url(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* landingpage_url) {
  delete landingpage_url_;
  landingpage_url_ = landingpage_url;
  if (landingpage_url) {
    set_has_landingpage_url();
  } else {
    clear_has_landingpage_url();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.landingpage_url)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_download_url = 7;
inline bool BidResponse_SeatBid_Bid_NativeCreative::has_app_download_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_has_app_download_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_has_app_download_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_app_download_url() {
  if (app_download_url_ != NULL) app_download_url_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::Clear();
  clear_has_app_download_url();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link& BidResponse_SeatBid_Bid_NativeCreative::app_download_url() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_download_url)
  return app_download_url_ != NULL ? *app_download_url_ : *default_instance_->app_download_url_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_NativeCreative::mutable_app_download_url() {
  set_has_app_download_url();
  if (app_download_url_ == NULL) app_download_url_ = new ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_download_url)
  return app_download_url_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_NativeCreative::release_app_download_url() {
  clear_has_app_download_url();
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* temp = app_download_url_;
  app_download_url_ = NULL;
  return temp;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_allocated_app_download_url(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* app_download_url) {
  delete app_download_url_;
  app_download_url_ = app_download_url;
  if (app_download_url) {
    set_has_app_download_url();
  } else {
    clear_has_app_download_url();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_download_url)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_intro_url = 8;
inline bool BidResponse_SeatBid_Bid_NativeCreative::has_app_intro_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_has_app_intro_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_has_app_intro_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_app_intro_url() {
  if (app_intro_url_ != NULL) app_intro_url_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::Clear();
  clear_has_app_intro_url();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link& BidResponse_SeatBid_Bid_NativeCreative::app_intro_url() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_intro_url)
  return app_intro_url_ != NULL ? *app_intro_url_ : *default_instance_->app_intro_url_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_NativeCreative::mutable_app_intro_url() {
  set_has_app_intro_url();
  if (app_intro_url_ == NULL) app_intro_url_ = new ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_intro_url)
  return app_intro_url_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_NativeCreative::release_app_intro_url() {
  clear_has_app_intro_url();
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* temp = app_intro_url_;
  app_intro_url_ = NULL;
  return temp;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_allocated_app_intro_url(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link* app_intro_url) {
  delete app_intro_url_;
  app_intro_url_ = app_intro_url;
  if (app_intro_url) {
    set_has_app_intro_url();
  } else {
    clear_has_app_intro_url();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_intro_url)
}

// optional string app_ver = 9;
inline bool BidResponse_SeatBid_Bid_NativeCreative::has_app_ver() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_has_app_ver() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_has_app_ver() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_app_ver() {
  if (app_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ver_->clear();
  }
  clear_has_app_ver();
}
inline const ::std::string& BidResponse_SeatBid_Bid_NativeCreative::app_ver() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_ver)
  return *app_ver_;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_app_ver(const ::std::string& value) {
  set_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ver_ = new ::std::string;
  }
  app_ver_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_ver)
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_app_ver(const char* value) {
  set_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ver_ = new ::std::string;
  }
  app_ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_ver)
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_app_ver(const char* value, size_t size) {
  set_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ver_ = new ::std::string;
  }
  app_ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_ver)
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative::mutable_app_ver() {
  set_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_ver)
  return app_ver_;
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative::release_app_ver() {
  clear_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_ver_;
    app_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_allocated_app_ver(::std::string* app_ver) {
  if (app_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_ver_;
  }
  if (app_ver) {
    set_has_app_ver();
    app_ver_ = app_ver;
  } else {
    clear_has_app_ver();
    app_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_ver)
}

// optional double app_size = 10;
inline bool BidResponse_SeatBid_Bid_NativeCreative::has_app_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_has_app_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_has_app_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_app_size() {
  app_size_ = 0;
  clear_has_app_size();
}
inline double BidResponse_SeatBid_Bid_NativeCreative::app_size() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_size)
  return app_size_;
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_app_size(double value) {
  set_has_app_size();
  app_size_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.app_size)
}

// repeated string display_labels = 11;
inline int BidResponse_SeatBid_Bid_NativeCreative::display_labels_size() const {
  return display_labels_.size();
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_display_labels() {
  display_labels_.Clear();
}
inline const ::std::string& BidResponse_SeatBid_Bid_NativeCreative::display_labels(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
  return display_labels_.Get(index);
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative::mutable_display_labels(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
  return display_labels_.Mutable(index);
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_display_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
  display_labels_.Mutable(index)->assign(value);
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_display_labels(int index, const char* value) {
  display_labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
}
inline void BidResponse_SeatBid_Bid_NativeCreative::set_display_labels(int index, const char* value, size_t size) {
  display_labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
}
inline ::std::string* BidResponse_SeatBid_Bid_NativeCreative::add_display_labels() {
  return display_labels_.Add();
}
inline void BidResponse_SeatBid_Bid_NativeCreative::add_display_labels(const ::std::string& value) {
  display_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
}
inline void BidResponse_SeatBid_Bid_NativeCreative::add_display_labels(const char* value) {
  display_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
}
inline void BidResponse_SeatBid_Bid_NativeCreative::add_display_labels(const char* value, size_t size) {
  display_labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid_NativeCreative::display_labels() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
  return display_labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid_NativeCreative::mutable_display_labels() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.display_labels)
  return &display_labels_;
}

// repeated .com.immomo.moaservice.third.rtb.v12.Segment ext_data = 12;
inline int BidResponse_SeatBid_Bid_NativeCreative::ext_data_size() const {
  return ext_data_.size();
}
inline void BidResponse_SeatBid_Bid_NativeCreative::clear_ext_data() {
  ext_data_.Clear();
}
inline const ::com::immomo::moaservice::third::rtb::v12::Segment& BidResponse_SeatBid_Bid_NativeCreative::ext_data(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.ext_data)
  return ext_data_.Get(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::Segment* BidResponse_SeatBid_Bid_NativeCreative::mutable_ext_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.ext_data)
  return ext_data_.Mutable(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::Segment* BidResponse_SeatBid_Bid_NativeCreative::add_ext_data() {
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.ext_data)
  return ext_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment >&
BidResponse_SeatBid_Bid_NativeCreative::ext_data() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.ext_data)
  return ext_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::Segment >*
BidResponse_SeatBid_Bid_NativeCreative::mutable_ext_data() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.ext_data)
  return &ext_data_;
}

// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid_Link

// required string url = 1;
inline bool BidResponse_SeatBid_Bid_Link::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_SeatBid_Bid_Link::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_SeatBid_Bid_Link::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_SeatBid_Bid_Link::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidResponse_SeatBid_Bid_Link::url() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.url)
  return *url_;
}
inline void BidResponse_SeatBid_Bid_Link::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.url)
}
inline void BidResponse_SeatBid_Bid_Link::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.url)
}
inline void BidResponse_SeatBid_Bid_Link::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.url)
}
inline ::std::string* BidResponse_SeatBid_Bid_Link::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.url)
  return url_;
}
inline ::std::string* BidResponse_SeatBid_Bid_Link::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid_Link::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.url)
}

// optional string deeplink_url = 2;
inline bool BidResponse_SeatBid_Bid_Link::has_deeplink_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_SeatBid_Bid_Link::set_has_deeplink_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_SeatBid_Bid_Link::clear_has_deeplink_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_SeatBid_Bid_Link::clear_deeplink_url() {
  if (deeplink_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deeplink_url_->clear();
  }
  clear_has_deeplink_url();
}
inline const ::std::string& BidResponse_SeatBid_Bid_Link::deeplink_url() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.deeplink_url)
  return *deeplink_url_;
}
inline void BidResponse_SeatBid_Bid_Link::set_deeplink_url(const ::std::string& value) {
  set_has_deeplink_url();
  if (deeplink_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deeplink_url_ = new ::std::string;
  }
  deeplink_url_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.deeplink_url)
}
inline void BidResponse_SeatBid_Bid_Link::set_deeplink_url(const char* value) {
  set_has_deeplink_url();
  if (deeplink_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deeplink_url_ = new ::std::string;
  }
  deeplink_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.deeplink_url)
}
inline void BidResponse_SeatBid_Bid_Link::set_deeplink_url(const char* value, size_t size) {
  set_has_deeplink_url();
  if (deeplink_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deeplink_url_ = new ::std::string;
  }
  deeplink_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.deeplink_url)
}
inline ::std::string* BidResponse_SeatBid_Bid_Link::mutable_deeplink_url() {
  set_has_deeplink_url();
  if (deeplink_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deeplink_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.deeplink_url)
  return deeplink_url_;
}
inline ::std::string* BidResponse_SeatBid_Bid_Link::release_deeplink_url() {
  clear_has_deeplink_url();
  if (deeplink_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deeplink_url_;
    deeplink_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid_Link::set_allocated_deeplink_url(::std::string* deeplink_url) {
  if (deeplink_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deeplink_url_;
  }
  if (deeplink_url) {
    set_has_deeplink_url();
    deeplink_url_ = deeplink_url;
  } else {
    clear_has_deeplink_url();
    deeplink_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link.deeplink_url)
}

// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid

// required string id = 1;
inline bool BidResponse_SeatBid_Bid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_SeatBid_Bid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_SeatBid_Bid::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidResponse_SeatBid_Bid::id() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.id)
  return *id_;
}
inline void BidResponse_SeatBid_Bid::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.id)
}
inline void BidResponse_SeatBid_Bid::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.id)
}
inline void BidResponse_SeatBid_Bid::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.id)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.id)
  return id_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.id)
}

// required string impid = 2;
inline bool BidResponse_SeatBid_Bid::has_impid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_impid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_SeatBid_Bid::clear_has_impid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_SeatBid_Bid::clear_impid() {
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_->clear();
  }
  clear_has_impid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::impid() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.impid)
  return *impid_;
}
inline void BidResponse_SeatBid_Bid::set_impid(const ::std::string& value) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.impid)
}
inline void BidResponse_SeatBid_Bid::set_impid(const char* value) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.impid)
}
inline void BidResponse_SeatBid_Bid::set_impid(const char* value, size_t size) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.impid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_impid() {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.impid)
  return impid_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_impid() {
  clear_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = impid_;
    impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_impid(::std::string* impid) {
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impid_;
  }
  if (impid) {
    set_has_impid();
    impid_ = impid;
  } else {
    clear_has_impid();
    impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.impid)
}

// required double price = 3;
inline bool BidResponse_SeatBid_Bid::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_SeatBid_Bid::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_SeatBid_Bid::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double BidResponse_SeatBid_Bid::price() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.price)
  return price_;
}
inline void BidResponse_SeatBid_Bid::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.price)
}

// optional string cid = 4;
inline bool BidResponse_SeatBid_Bid::has_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_SeatBid_Bid::clear_has_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_SeatBid_Bid::clear_cid() {
  if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_->clear();
  }
  clear_has_cid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::cid() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cid)
  return *cid_;
}
inline void BidResponse_SeatBid_Bid::set_cid(const ::std::string& value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cid)
}
inline void BidResponse_SeatBid_Bid::set_cid(const char* value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cid)
}
inline void BidResponse_SeatBid_Bid::set_cid(const char* value, size_t size) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_ = new ::std::string;
  }
  cid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_cid() {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cid)
  return cid_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_cid() {
  clear_has_cid();
  if (cid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cid_;
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_cid(::std::string* cid) {
  if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cid_;
  }
  if (cid) {
    set_has_cid();
    cid_ = cid;
  } else {
    clear_has_cid();
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cid)
}

// optional string adid = 5;
inline bool BidResponse_SeatBid_Bid::has_adid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_adid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResponse_SeatBid_Bid::clear_has_adid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResponse_SeatBid_Bid::clear_adid() {
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_->clear();
  }
  clear_has_adid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::adid() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adid)
  return *adid_;
}
inline void BidResponse_SeatBid_Bid::set_adid(const ::std::string& value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adid)
}
inline void BidResponse_SeatBid_Bid::set_adid(const char* value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adid)
}
inline void BidResponse_SeatBid_Bid::set_adid(const char* value, size_t size) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  adid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_adid() {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adid)
  return adid_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_adid() {
  clear_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adid_;
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_adid(::std::string* adid) {
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adid_;
  }
  if (adid) {
    set_has_adid();
    adid_ = adid;
  } else {
    clear_has_adid();
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adid)
}

// required string crid = 6;
inline bool BidResponse_SeatBid_Bid::has_crid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_crid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidResponse_SeatBid_Bid::clear_has_crid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidResponse_SeatBid_Bid::clear_crid() {
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_->clear();
  }
  clear_has_crid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::crid() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.crid)
  return *crid_;
}
inline void BidResponse_SeatBid_Bid::set_crid(const ::std::string& value) {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  crid_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.crid)
}
inline void BidResponse_SeatBid_Bid::set_crid(const char* value) {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  crid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.crid)
}
inline void BidResponse_SeatBid_Bid::set_crid(const char* value, size_t size) {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  crid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.crid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_crid() {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.crid)
  return crid_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_crid() {
  clear_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = crid_;
    crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_crid(::std::string* crid) {
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crid_;
  }
  if (crid) {
    set_has_crid();
    crid_ = crid;
  } else {
    clear_has_crid();
    crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.crid)
}

// repeated string cat = 7;
inline int BidResponse_SeatBid_Bid::cat_size() const {
  return cat_.size();
}
inline void BidResponse_SeatBid_Bid::clear_cat() {
  cat_.Clear();
}
inline const ::std::string& BidResponse_SeatBid_Bid::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
  return cat_.Get(index);
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
  return cat_.Mutable(index);
}
inline void BidResponse_SeatBid_Bid::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
  cat_.Mutable(index)->assign(value);
}
inline void BidResponse_SeatBid_Bid::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
}
inline void BidResponse_SeatBid_Bid::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
}
inline ::std::string* BidResponse_SeatBid_Bid::add_cat() {
  return cat_.Add();
}
inline void BidResponse_SeatBid_Bid::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
}
inline void BidResponse_SeatBid_Bid::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
}
inline void BidResponse_SeatBid_Bid::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::cat() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
  return cat_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.cat)
  return &cat_;
}

// repeated string adomain = 8;
inline int BidResponse_SeatBid_Bid::adomain_size() const {
  return adomain_.size();
}
inline void BidResponse_SeatBid_Bid::clear_adomain() {
  adomain_.Clear();
}
inline const ::std::string& BidResponse_SeatBid_Bid::adomain(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
  return adomain_.Get(index);
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_adomain(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
  return adomain_.Mutable(index);
}
inline void BidResponse_SeatBid_Bid::set_adomain(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
  adomain_.Mutable(index)->assign(value);
}
inline void BidResponse_SeatBid_Bid::set_adomain(int index, const char* value) {
  adomain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
}
inline void BidResponse_SeatBid_Bid::set_adomain(int index, const char* value, size_t size) {
  adomain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
}
inline ::std::string* BidResponse_SeatBid_Bid::add_adomain() {
  return adomain_.Add();
}
inline void BidResponse_SeatBid_Bid::add_adomain(const ::std::string& value) {
  adomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
}
inline void BidResponse_SeatBid_Bid::add_adomain(const char* value) {
  adomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
}
inline void BidResponse_SeatBid_Bid::add_adomain(const char* value, size_t size) {
  adomain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::adomain() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
  return adomain_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_adomain() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.adomain)
  return &adomain_;
}

// optional string nurl = 9;
inline bool BidResponse_SeatBid_Bid::has_nurl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_nurl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidResponse_SeatBid_Bid::clear_has_nurl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidResponse_SeatBid_Bid::clear_nurl() {
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_->clear();
  }
  clear_has_nurl();
}
inline const ::std::string& BidResponse_SeatBid_Bid::nurl() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.nurl)
  return *nurl_;
}
inline void BidResponse_SeatBid_Bid::set_nurl(const ::std::string& value) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.nurl)
}
inline void BidResponse_SeatBid_Bid::set_nurl(const char* value) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.nurl)
}
inline void BidResponse_SeatBid_Bid::set_nurl(const char* value, size_t size) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.nurl)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_nurl() {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.nurl)
  return nurl_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_nurl() {
  clear_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nurl_;
    nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_nurl(::std::string* nurl) {
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nurl_;
  }
  if (nurl) {
    set_has_nurl();
    nurl_ = nurl;
  } else {
    clear_has_nurl();
    nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.nurl)
}

// optional string bundle = 10;
inline bool BidResponse_SeatBid_Bid::has_bundle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_bundle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidResponse_SeatBid_Bid::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidResponse_SeatBid_Bid::clear_bundle() {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_->clear();
  }
  clear_has_bundle();
}
inline const ::std::string& BidResponse_SeatBid_Bid::bundle() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.bundle)
  return *bundle_;
}
inline void BidResponse_SeatBid_Bid::set_bundle(const ::std::string& value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.bundle)
}
inline void BidResponse_SeatBid_Bid::set_bundle(const char* value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.bundle)
}
inline void BidResponse_SeatBid_Bid::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.bundle)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_bundle() {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.bundle)
  return bundle_;
}
inline ::std::string* BidResponse_SeatBid_Bid::release_bundle() {
  clear_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bundle_;
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid_Bid::set_allocated_bundle(::std::string* bundle) {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (bundle) {
    set_has_bundle();
    bundle_ = bundle;
  } else {
    clear_has_bundle();
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.bundle)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative native_creative = 11;
inline bool BidResponse_SeatBid_Bid::has_native_creative() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_native_creative() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidResponse_SeatBid_Bid::clear_has_native_creative() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidResponse_SeatBid_Bid::clear_native_creative() {
  if (native_creative_ != NULL) native_creative_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative::Clear();
  clear_has_native_creative();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative& BidResponse_SeatBid_Bid::native_creative() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.native_creative)
  return native_creative_ != NULL ? *native_creative_ : *default_instance_->native_creative_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative* BidResponse_SeatBid_Bid::mutable_native_creative() {
  set_has_native_creative();
  if (native_creative_ == NULL) native_creative_ = new ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative;
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.native_creative)
  return native_creative_;
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative* BidResponse_SeatBid_Bid::release_native_creative() {
  clear_has_native_creative();
  ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative* temp = native_creative_;
  native_creative_ = NULL;
  return temp;
}
inline void BidResponse_SeatBid_Bid::set_allocated_native_creative(::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative* native_creative) {
  delete native_creative_;
  native_creative_ = native_creative;
  if (native_creative) {
    set_has_native_creative();
  } else {
    clear_has_native_creative();
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.native_creative)
}

// repeated string imptrackers = 12;
inline int BidResponse_SeatBid_Bid::imptrackers_size() const {
  return imptrackers_.size();
}
inline void BidResponse_SeatBid_Bid::clear_imptrackers() {
  imptrackers_.Clear();
}
inline const ::std::string& BidResponse_SeatBid_Bid::imptrackers(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
  return imptrackers_.Get(index);
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_imptrackers(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
  return imptrackers_.Mutable(index);
}
inline void BidResponse_SeatBid_Bid::set_imptrackers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
  imptrackers_.Mutable(index)->assign(value);
}
inline void BidResponse_SeatBid_Bid::set_imptrackers(int index, const char* value) {
  imptrackers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
}
inline void BidResponse_SeatBid_Bid::set_imptrackers(int index, const char* value, size_t size) {
  imptrackers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
}
inline ::std::string* BidResponse_SeatBid_Bid::add_imptrackers() {
  return imptrackers_.Add();
}
inline void BidResponse_SeatBid_Bid::add_imptrackers(const ::std::string& value) {
  imptrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
}
inline void BidResponse_SeatBid_Bid::add_imptrackers(const char* value) {
  imptrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
}
inline void BidResponse_SeatBid_Bid::add_imptrackers(const char* value, size_t size) {
  imptrackers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::imptrackers() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
  return imptrackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_imptrackers() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.imptrackers)
  return &imptrackers_;
}

// repeated string clicktrackers = 13;
inline int BidResponse_SeatBid_Bid::clicktrackers_size() const {
  return clicktrackers_.size();
}
inline void BidResponse_SeatBid_Bid::clear_clicktrackers() {
  clicktrackers_.Clear();
}
inline const ::std::string& BidResponse_SeatBid_Bid::clicktrackers(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
  return clicktrackers_.Get(index);
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_clicktrackers(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
  return clicktrackers_.Mutable(index);
}
inline void BidResponse_SeatBid_Bid::set_clicktrackers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
  clicktrackers_.Mutable(index)->assign(value);
}
inline void BidResponse_SeatBid_Bid::set_clicktrackers(int index, const char* value) {
  clicktrackers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
}
inline void BidResponse_SeatBid_Bid::set_clicktrackers(int index, const char* value, size_t size) {
  clicktrackers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
}
inline ::std::string* BidResponse_SeatBid_Bid::add_clicktrackers() {
  return clicktrackers_.Add();
}
inline void BidResponse_SeatBid_Bid::add_clicktrackers(const ::std::string& value) {
  clicktrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
}
inline void BidResponse_SeatBid_Bid::add_clicktrackers(const char* value) {
  clicktrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
}
inline void BidResponse_SeatBid_Bid::add_clicktrackers(const char* value, size_t size) {
  clicktrackers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::clicktrackers() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
  return clicktrackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_clicktrackers() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.clicktrackers)
  return &clicktrackers_;
}

// -------------------------------------------------------------------

// BidResponse_SeatBid

// repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid bid = 1;
inline int BidResponse_SeatBid::bid_size() const {
  return bid_.size();
}
inline void BidResponse_SeatBid::clear_bid() {
  bid_.Clear();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid& BidResponse_SeatBid::bid(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.bid)
  return bid_.Get(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid* BidResponse_SeatBid::mutable_bid(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.bid)
  return bid_.Mutable(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid* BidResponse_SeatBid::add_bid() {
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.bid)
  return bid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid >&
BidResponse_SeatBid::bid() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.bid)
  return bid_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid >*
BidResponse_SeatBid::mutable_bid() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.bid)
  return &bid_;
}

// required string seat = 2;
inline bool BidResponse_SeatBid::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_SeatBid::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_SeatBid::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_SeatBid::clear_seat() {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_->clear();
  }
  clear_has_seat();
}
inline const ::std::string& BidResponse_SeatBid::seat() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.seat)
  return *seat_;
}
inline void BidResponse_SeatBid::set_seat(const ::std::string& value) {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  seat_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.seat)
}
inline void BidResponse_SeatBid::set_seat(const char* value) {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  seat_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.seat)
}
inline void BidResponse_SeatBid::set_seat(const char* value, size_t size) {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  seat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.seat)
}
inline ::std::string* BidResponse_SeatBid::mutable_seat() {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.seat)
  return seat_;
}
inline ::std::string* BidResponse_SeatBid::release_seat() {
  clear_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = seat_;
    seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_SeatBid::set_allocated_seat(::std::string* seat) {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seat_;
  }
  if (seat) {
    set_has_seat();
    seat_ = seat;
  } else {
    clear_has_seat();
    seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.seat)
}

// -------------------------------------------------------------------

// BidResponse

// required string id = 1;
inline bool BidResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidResponse::id() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.id)
  return *id_;
}
inline void BidResponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.id)
}
inline void BidResponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.id)
}
inline void BidResponse::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.id)
}
inline ::std::string* BidResponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.id)
  return id_;
}
inline ::std::string* BidResponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.id)
}

// optional .com.immomo.moaservice.third.rtb.v12.BidResponse.NoBidReason nbr = 2;
inline bool BidResponse::has_nbr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse::set_has_nbr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse::clear_has_nbr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse::clear_nbr() {
  nbr_ = 0;
  clear_has_nbr();
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason BidResponse::nbr() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.nbr)
  return static_cast< ::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason >(nbr_);
}
inline void BidResponse::set_nbr(::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason value) {
  assert(::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason_IsValid(value));
  set_has_nbr();
  nbr_ = value;
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.nbr)
}

// optional string em = 3;
inline bool BidResponse::has_em() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse::set_has_em() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse::clear_has_em() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse::clear_em() {
  if (em_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    em_->clear();
  }
  clear_has_em();
}
inline const ::std::string& BidResponse::em() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.em)
  return *em_;
}
inline void BidResponse::set_em(const ::std::string& value) {
  set_has_em();
  if (em_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    em_ = new ::std::string;
  }
  em_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.em)
}
inline void BidResponse::set_em(const char* value) {
  set_has_em();
  if (em_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    em_ = new ::std::string;
  }
  em_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.em)
}
inline void BidResponse::set_em(const char* value, size_t size) {
  set_has_em();
  if (em_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    em_ = new ::std::string;
  }
  em_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.em)
}
inline ::std::string* BidResponse::mutable_em() {
  set_has_em();
  if (em_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    em_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.em)
  return em_;
}
inline ::std::string* BidResponse::release_em() {
  clear_has_em();
  if (em_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = em_;
    em_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_em(::std::string* em) {
  if (em_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete em_;
  }
  if (em) {
    set_has_em();
    em_ = em;
  } else {
    clear_has_em();
    em_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.em)
}

// repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid seatbid = 4;
inline int BidResponse::seatbid_size() const {
  return seatbid_.size();
}
inline void BidResponse::clear_seatbid() {
  seatbid_.Clear();
}
inline const ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid& BidResponse::seatbid(int index) const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.seatbid)
  return seatbid_.Get(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid* BidResponse::mutable_seatbid(int index) {
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.seatbid)
  return seatbid_.Mutable(index);
}
inline ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid* BidResponse::add_seatbid() {
  // @@protoc_insertion_point(field_add:com.immomo.moaservice.third.rtb.v12.BidResponse.seatbid)
  return seatbid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid >&
BidResponse::seatbid() const {
  // @@protoc_insertion_point(field_list:com.immomo.moaservice.third.rtb.v12.BidResponse.seatbid)
  return seatbid_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid >*
BidResponse::mutable_seatbid() {
  // @@protoc_insertion_point(field_mutable_list:com.immomo.moaservice.third.rtb.v12.BidResponse.seatbid)
  return &seatbid_;
}

// optional string bidid = 5;
inline bool BidResponse::has_bidid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResponse::set_has_bidid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResponse::clear_has_bidid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResponse::clear_bidid() {
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_->clear();
  }
  clear_has_bidid();
}
inline const ::std::string& BidResponse::bidid() const {
  // @@protoc_insertion_point(field_get:com.immomo.moaservice.third.rtb.v12.BidResponse.bidid)
  return *bidid_;
}
inline void BidResponse::set_bidid(const ::std::string& value) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
  // @@protoc_insertion_point(field_set:com.immomo.moaservice.third.rtb.v12.BidResponse.bidid)
}
inline void BidResponse::set_bidid(const char* value) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.immomo.moaservice.third.rtb.v12.BidResponse.bidid)
}
inline void BidResponse::set_bidid(const char* value, size_t size) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.immomo.moaservice.third.rtb.v12.BidResponse.bidid)
}
inline ::std::string* BidResponse::mutable_bidid() {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.immomo.moaservice.third.rtb.v12.BidResponse.bidid)
  return bidid_;
}
inline ::std::string* BidResponse::release_bidid() {
  clear_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bidid_;
    bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_bidid(::std::string* bidid) {
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidid_;
  }
  if (bidid) {
    set_has_bidid();
    bidid_ = bidid;
  } else {
    clear_has_bidid();
    bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.immomo.moaservice.third.rtb.v12.BidResponse.bidid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v12
}  // namespace rtb
}  // namespace third
}  // namespace moaservice
}  // namespace immomo
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType>() {
  return ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType_descriptor();
}
template <> struct is_proto_enum< ::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender>() {
  return ::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender_descriptor();
}
template <> struct is_proto_enum< ::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason>() {
  return ::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason_descriptor();
}
template <> struct is_proto_enum< ::com::immomo::moaservice::third::rtb::v12::NativeFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::immomo::moaservice::third::rtb::v12::NativeFormat>() {
  return ::com::immomo::moaservice::third::rtb::v12::NativeFormat_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_momortb12_2eproto__INCLUDED

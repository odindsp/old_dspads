// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: realtime-bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "realtime-bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Hyperlocal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Hyperlocal_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Hyperlocal_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Hyperlocal_Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_HyperlocalSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_HyperlocalSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_UserDemographic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_UserDemographic_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_UserDemographic_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_UserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_UserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Vertical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Vertical_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Device_OsVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Device_OsVersion_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Device_ScreenOrientation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_DeviceOsVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_DeviceOsVersion_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileDeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_ScreenOrientation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_CompanionSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_CompanionSlot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_CompanionSlot_CreativeFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_ContentAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_ContentAttributes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_Placement_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoPlaybackMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_SkippableBidRequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_EndCapSupport_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_InventoryType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_MatchingAdData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_MatchingAdData_DirectDeal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_ExchangeBidding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_ExchangeBidding_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_NativeAdTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_NativeAdTemplate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_NativeAdTemplate_Fields_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_AutoRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_AutoRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_SlotVisibility_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_IFramingState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_IFramingDepth_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_MediationStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_Stickiness_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_Renderer_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_AmpAdRequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_BidResponseFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_BidResponseFeedback_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_MatchingNetwork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_MatchingNetwork_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_UserDataTreatment_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_PublisherType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_NativeAd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_NativeAd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_NativeAd_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_NativeAd_Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_AdSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_AdSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_TemplateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_TemplateParameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_realtime_2dbidding_2eproto() {
  protobuf_AddDesc_realtime_2dbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "realtime-bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[52] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_data_treatment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, google_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, constrained_usage_google_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, cookie_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, cookie_age_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, hosted_match_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, constrained_usage_hosted_match_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, geo_criteria_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, postal_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, postal_code_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, encrypted_hyperlocal_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, hyperlocal_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, timezone_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_demographic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, seller_network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, anonymous_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_content_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, key_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, publisher_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, bid_response_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_predicted_to_be_ignored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_click_tracking_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_metro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_hashed_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_excluded_click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_seller_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_matching_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_experimental_deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_site_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_vertical_dictionary_version_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  BidRequest_Hyperlocal_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_Hyperlocal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal, corners_),
  };
  BidRequest_Hyperlocal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Hyperlocal_descriptor_,
      BidRequest_Hyperlocal::default_instance_,
      BidRequest_Hyperlocal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Hyperlocal));
  BidRequest_Hyperlocal_Point_descriptor_ = BidRequest_Hyperlocal_descriptor_->nested_type(0);
  static const int BidRequest_Hyperlocal_Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal_Point, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal_Point, longitude_),
  };
  BidRequest_Hyperlocal_Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Hyperlocal_Point_descriptor_,
      BidRequest_Hyperlocal_Point::default_instance_,
      BidRequest_Hyperlocal_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal_Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal_Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Hyperlocal_Point));
  BidRequest_HyperlocalSet_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_HyperlocalSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_HyperlocalSet, hyperlocal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_HyperlocalSet, center_point_),
  };
  BidRequest_HyperlocalSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_HyperlocalSet_descriptor_,
      BidRequest_HyperlocalSet::default_instance_,
      BidRequest_HyperlocalSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_HyperlocalSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_HyperlocalSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_HyperlocalSet));
  BidRequest_UserDemographic_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_UserDemographic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserDemographic, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserDemographic, age_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserDemographic, age_high_),
  };
  BidRequest_UserDemographic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_UserDemographic_descriptor_,
      BidRequest_UserDemographic::default_instance_,
      BidRequest_UserDemographic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserDemographic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserDemographic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_UserDemographic));
  BidRequest_UserDemographic_Gender_descriptor_ = BidRequest_UserDemographic_descriptor_->enum_type(0);
  BidRequest_UserList_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_UserList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserList, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserList, age_seconds_),
  };
  BidRequest_UserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_UserList_descriptor_,
      BidRequest_UserList::default_instance_,
      BidRequest_UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_UserList));
  BidRequest_Vertical_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_Vertical_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Vertical, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Vertical, weight_),
  };
  BidRequest_Vertical_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Vertical_descriptor_,
      BidRequest_Vertical::default_instance_,
      BidRequest_Vertical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Vertical, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Vertical, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Vertical));
  BidRequest_Device_descriptor_ = BidRequest_descriptor_->nested_type(5);
  static const int BidRequest_Device_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, carrier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, screen_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, screen_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, screen_pixel_ratio_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, screen_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, hardware_version_),
  };
  BidRequest_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Device_descriptor_,
      BidRequest_Device::default_instance_,
      BidRequest_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Device));
  BidRequest_Device_OsVersion_descriptor_ = BidRequest_Device_descriptor_->nested_type(0);
  static const int BidRequest_Device_OsVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device_OsVersion, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device_OsVersion, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device_OsVersion, micro_),
  };
  BidRequest_Device_OsVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Device_OsVersion_descriptor_,
      BidRequest_Device_OsVersion::default_instance_,
      BidRequest_Device_OsVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device_OsVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device_OsVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Device_OsVersion));
  BidRequest_Device_DeviceType_descriptor_ = BidRequest_Device_descriptor_->enum_type(0);
  BidRequest_Device_ScreenOrientation_descriptor_ = BidRequest_Device_descriptor_->enum_type(1);
  BidRequest_KeyValue_descriptor_ = BidRequest_descriptor_->nested_type(6);
  static const int BidRequest_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_KeyValue, value_),
  };
  BidRequest_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_KeyValue_descriptor_,
      BidRequest_KeyValue::default_instance_,
      BidRequest_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_KeyValue));
  BidRequest_Mobile_descriptor_ = BidRequest_descriptor_->nested_type(7);
  static const int BidRequest_Mobile_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_interstitial_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_category_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_mobile_web_optimized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, encrypted_advertising_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, advertising_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, encrypted_hashed_idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, hashed_idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, constrained_usage_encrypted_advertising_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, constrained_usage_advertising_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, constrained_usage_encrypted_hashed_idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, constrained_usage_hashed_idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_company_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_carrier_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_carrier_country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_mobile_device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_screen_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_screen_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_screen_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_carrier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_device_pixel_ratio_millis_),
  };
  BidRequest_Mobile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_descriptor_,
      BidRequest_Mobile::default_instance_,
      BidRequest_Mobile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile));
  BidRequest_Mobile_DeviceOsVersion_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_DeviceOsVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_micro_),
  };
  BidRequest_Mobile_DeviceOsVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_DeviceOsVersion_descriptor_,
      BidRequest_Mobile_DeviceOsVersion::default_instance_,
      BidRequest_Mobile_DeviceOsVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_DeviceOsVersion));
  BidRequest_Mobile_MobileDeviceType_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(0);
  BidRequest_Mobile_ScreenOrientation_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(1);
  BidRequest_Video_descriptor_ = BidRequest_descriptor_->nested_type(8);
  static const int BidRequest_Video_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, description_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, is_embedded_offsite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, playback_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, is_clickable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, videoad_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, max_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, min_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, max_ads_in_pod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, video_ad_skippable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, skippable_max_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, allowed_video_formats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, companion_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, end_cap_support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, content_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, deprecated_inventory_type_),
  };
  BidRequest_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Video_descriptor_,
      BidRequest_Video::default_instance_,
      BidRequest_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Video));
  BidRequest_Video_CompanionSlot_descriptor_ = BidRequest_Video_descriptor_->nested_type(0);
  static const int BidRequest_Video_CompanionSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, creative_format_),
  };
  BidRequest_Video_CompanionSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Video_CompanionSlot_descriptor_,
      BidRequest_Video_CompanionSlot::default_instance_,
      BidRequest_Video_CompanionSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Video_CompanionSlot));
  BidRequest_Video_CompanionSlot_CreativeFormat_descriptor_ = BidRequest_Video_CompanionSlot_descriptor_->enum_type(0);
  BidRequest_Video_ContentAttributes_descriptor_ = BidRequest_Video_descriptor_->nested_type(1);
  static const int BidRequest_Video_ContentAttributes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_ContentAttributes, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_ContentAttributes, duration_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_ContentAttributes, keywords_),
  };
  BidRequest_Video_ContentAttributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Video_ContentAttributes_descriptor_,
      BidRequest_Video_ContentAttributes::default_instance_,
      BidRequest_Video_ContentAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_ContentAttributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_ContentAttributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Video_ContentAttributes));
  BidRequest_Video_Placement_descriptor_ = BidRequest_Video_descriptor_->enum_type(0);
  BidRequest_Video_VideoPlaybackMethod_descriptor_ = BidRequest_Video_descriptor_->enum_type(1);
  BidRequest_Video_SkippableBidRequestType_descriptor_ = BidRequest_Video_descriptor_->enum_type(2);
  BidRequest_Video_VideoFormat_descriptor_ = BidRequest_Video_descriptor_->enum_type(3);
  BidRequest_Video_EndCapSupport_descriptor_ = BidRequest_Video_descriptor_->enum_type(4);
  BidRequest_Video_InventoryType_descriptor_ = BidRequest_Video_descriptor_->enum_type(5);
  BidRequest_AdSlot_descriptor_ = BidRequest_descriptor_->nested_type(9);
  static const int BidRequest_AdSlot_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, ad_block_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, targetable_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, excluded_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, allowed_vendor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, excluded_sensitive_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, allowed_restricted_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, allowed_restricted_category_for_deals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, allowed_languages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, excluded_product_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, matching_ad_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, exchange_bidding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, slot_visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, viewability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, click_through_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, iframing_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, iframing_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, native_ad_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, mediation_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, auto_refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, stickiness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, renderer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, amp_ad_request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, deprecated_allowed_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, deprecated_publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, deprecated_excluded_click_through_url_),
  };
  BidRequest_AdSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_descriptor_,
      BidRequest_AdSlot::default_instance_,
      BidRequest_AdSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot));
  BidRequest_AdSlot_MatchingAdData_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_MatchingAdData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, billing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, minimum_cpm_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, pricing_rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, direct_deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, deprecated_campaign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, deprecated_per_buyer_minimum_cpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, deprecated_fixed_cpm_micros_),
  };
  BidRequest_AdSlot_MatchingAdData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_MatchingAdData_descriptor_,
      BidRequest_AdSlot_MatchingAdData::default_instance_,
      BidRequest_AdSlot_MatchingAdData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_MatchingAdData));
  BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_descriptor_ = BidRequest_AdSlot_MatchingAdData_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule, included_advertisers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule, excluded_advertisers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule, included_agencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule, excluded_agencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule, blocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule, minimum_cpm_micros_),
  };
  BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_descriptor_,
      BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::default_instance_,
      BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule));
  BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_ = BidRequest_AdSlot_MatchingAdData_descriptor_->nested_type(1);
  static const int BidRequest_AdSlot_MatchingAdData_DirectDeal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, direct_deal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, fixed_cpm_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, deal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, publisher_blocks_overridden_),
  };
  BidRequest_AdSlot_MatchingAdData_DirectDeal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_,
      BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_,
      BidRequest_AdSlot_MatchingAdData_DirectDeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_MatchingAdData_DirectDeal));
  BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_descriptor_ = BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_->enum_type(0);
  BidRequest_AdSlot_ExchangeBidding_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(1);
  static const int BidRequest_AdSlot_ExchangeBidding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExchangeBidding, publisher_parameter_),
  };
  BidRequest_AdSlot_ExchangeBidding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_ExchangeBidding_descriptor_,
      BidRequest_AdSlot_ExchangeBidding::default_instance_,
      BidRequest_AdSlot_ExchangeBidding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExchangeBidding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExchangeBidding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_ExchangeBidding));
  BidRequest_AdSlot_NativeAdTemplate_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(2);
  static const int BidRequest_AdSlot_NativeAdTemplate_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, required_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, recommended_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, headline_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, body_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, call_to_action_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, advertiser_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, store_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, price_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, image_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, logo_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, logo_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, app_icon_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, app_icon_height_),
  };
  BidRequest_AdSlot_NativeAdTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_NativeAdTemplate_descriptor_,
      BidRequest_AdSlot_NativeAdTemplate::default_instance_,
      BidRequest_AdSlot_NativeAdTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_NativeAdTemplate));
  BidRequest_AdSlot_NativeAdTemplate_Fields_descriptor_ = BidRequest_AdSlot_NativeAdTemplate_descriptor_->enum_type(0);
  BidRequest_AdSlot_AutoRefresh_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(3);
  static const int BidRequest_AdSlot_AutoRefresh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_AutoRefresh, refresh_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_AutoRefresh, refresh_count_),
  };
  BidRequest_AdSlot_AutoRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_AutoRefresh_descriptor_,
      BidRequest_AdSlot_AutoRefresh::default_instance_,
      BidRequest_AdSlot_AutoRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_AutoRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_AutoRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_AutoRefresh));
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_descriptor_ = BidRequest_AdSlot_AutoRefresh_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings, refresh_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings, min_refresh_interval_seconds_),
  };
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_descriptor_,
      BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::default_instance_,
      BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings));
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_descriptor_ = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_descriptor_->enum_type(0);
  BidRequest_AdSlot_SlotVisibility_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(0);
  BidRequest_AdSlot_IFramingState_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(1);
  BidRequest_AdSlot_IFramingDepth_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(2);
  BidRequest_AdSlot_MediationStatus_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(3);
  BidRequest_AdSlot_Stickiness_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(4);
  BidRequest_AdSlot_Renderer_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(5);
  BidRequest_AdSlot_AmpAdRequestType_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(6);
  BidRequest_BidResponseFeedback_descriptor_ = BidRequest_descriptor_->nested_type(10);
  static const int BidRequest_BidResponseFeedback_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, creative_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, creative_status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, cpm_micros_),
  };
  BidRequest_BidResponseFeedback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_BidResponseFeedback_descriptor_,
      BidRequest_BidResponseFeedback::default_instance_,
      BidRequest_BidResponseFeedback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_BidResponseFeedback));
  BidRequest_MatchingNetwork_descriptor_ = BidRequest_descriptor_->nested_type(11);
  static const int BidRequest_MatchingNetwork_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_MatchingNetwork, deprecated_network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_MatchingNetwork, deprecated_google_user_id_),
  };
  BidRequest_MatchingNetwork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_MatchingNetwork_descriptor_,
      BidRequest_MatchingNetwork::default_instance_,
      BidRequest_MatchingNetwork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_MatchingNetwork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_MatchingNetwork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_MatchingNetwork));
  BidRequest_UserDataTreatment_descriptor_ = BidRequest_descriptor_->enum_type(0);
  BidRequest_PublisherType_descriptor_ = BidRequest_descriptor_->enum_type(1);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, ad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, debug_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, processing_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, deprecated_protocol_version_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  BidResponse_Ad_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Ad_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, buyer_creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, html_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, video_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, native_ad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, vendor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, restricted_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, advertiser_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, bidder_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, agency_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, adslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, impression_tracking_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, ad_choices_destination_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, deprecated_creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, deprecated_click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, deprecated_snippet_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, deprecated_template_parameter_),
  };
  BidResponse_Ad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ad_descriptor_,
      BidResponse_Ad::default_instance_,
      BidResponse_Ad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ad));
  BidResponse_Ad_NativeAd_descriptor_ = BidResponse_Ad_descriptor_->nested_type(0);
  static const int BidResponse_Ad_NativeAd_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, headline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, call_to_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, advertiser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, app_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, star_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, click_tracking_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, deprecated_impression_tracking_url_),
  };
  BidResponse_Ad_NativeAd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ad_NativeAd_descriptor_,
      BidResponse_Ad_NativeAd::default_instance_,
      BidResponse_Ad_NativeAd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ad_NativeAd));
  BidResponse_Ad_NativeAd_Image_descriptor_ = BidResponse_Ad_NativeAd_descriptor_->nested_type(0);
  static const int BidResponse_Ad_NativeAd_Image_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, height_),
  };
  BidResponse_Ad_NativeAd_Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ad_NativeAd_Image_descriptor_,
      BidResponse_Ad_NativeAd_Image::default_instance_,
      BidResponse_Ad_NativeAd_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ad_NativeAd_Image));
  BidResponse_Ad_AdSlot_descriptor_ = BidResponse_Ad_descriptor_->nested_type(1);
  static const int BidResponse_Ad_AdSlot_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, max_cpm_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, min_cpm_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, billing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, deal_id_),
  };
  BidResponse_Ad_AdSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ad_AdSlot_descriptor_,
      BidResponse_Ad_AdSlot::default_instance_,
      BidResponse_Ad_AdSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ad_AdSlot));
  BidResponse_Ad_TemplateParameter_descriptor_ = BidResponse_Ad_descriptor_->nested_type(2);
  static const int BidResponse_Ad_TemplateParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, parameter_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, blank_ad_parameter_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, buyer_creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, backup_index_),
  };
  BidResponse_Ad_TemplateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ad_TemplateParameter_descriptor_,
      BidResponse_Ad_TemplateParameter::default_instance_,
      BidResponse_Ad_TemplateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ad_TemplateParameter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_realtime_2dbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Hyperlocal_descriptor_, &BidRequest_Hyperlocal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Hyperlocal_Point_descriptor_, &BidRequest_Hyperlocal_Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_HyperlocalSet_descriptor_, &BidRequest_HyperlocalSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_UserDemographic_descriptor_, &BidRequest_UserDemographic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_UserList_descriptor_, &BidRequest_UserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Vertical_descriptor_, &BidRequest_Vertical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Device_descriptor_, &BidRequest_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Device_OsVersion_descriptor_, &BidRequest_Device_OsVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_KeyValue_descriptor_, &BidRequest_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_descriptor_, &BidRequest_Mobile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_DeviceOsVersion_descriptor_, &BidRequest_Mobile_DeviceOsVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Video_descriptor_, &BidRequest_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Video_CompanionSlot_descriptor_, &BidRequest_Video_CompanionSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Video_ContentAttributes_descriptor_, &BidRequest_Video_ContentAttributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_descriptor_, &BidRequest_AdSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_MatchingAdData_descriptor_, &BidRequest_AdSlot_MatchingAdData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_descriptor_, &BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_, &BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_ExchangeBidding_descriptor_, &BidRequest_AdSlot_ExchangeBidding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_NativeAdTemplate_descriptor_, &BidRequest_AdSlot_NativeAdTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_AutoRefresh_descriptor_, &BidRequest_AdSlot_AutoRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_descriptor_, &BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_BidResponseFeedback_descriptor_, &BidRequest_BidResponseFeedback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_MatchingNetwork_descriptor_, &BidRequest_MatchingNetwork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ad_descriptor_, &BidResponse_Ad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ad_NativeAd_descriptor_, &BidResponse_Ad_NativeAd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ad_NativeAd_Image_descriptor_, &BidResponse_Ad_NativeAd_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ad_AdSlot_descriptor_, &BidResponse_Ad_AdSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ad_TemplateParameter_descriptor_, &BidResponse_Ad_TemplateParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_realtime_2dbidding_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_Hyperlocal::default_instance_;
  delete BidRequest_Hyperlocal_reflection_;
  delete BidRequest_Hyperlocal_Point::default_instance_;
  delete BidRequest_Hyperlocal_Point_reflection_;
  delete BidRequest_HyperlocalSet::default_instance_;
  delete BidRequest_HyperlocalSet_reflection_;
  delete BidRequest_UserDemographic::default_instance_;
  delete BidRequest_UserDemographic_reflection_;
  delete BidRequest_UserList::default_instance_;
  delete BidRequest_UserList_reflection_;
  delete BidRequest_Vertical::default_instance_;
  delete BidRequest_Vertical_reflection_;
  delete BidRequest_Device::default_instance_;
  delete BidRequest_Device_reflection_;
  delete BidRequest_Device_OsVersion::default_instance_;
  delete BidRequest_Device_OsVersion_reflection_;
  delete BidRequest_KeyValue::default_instance_;
  delete BidRequest_KeyValue_reflection_;
  delete BidRequest_Mobile::default_instance_;
  delete BidRequest_Mobile_reflection_;
  delete BidRequest_Mobile_DeviceOsVersion::default_instance_;
  delete BidRequest_Mobile_DeviceOsVersion_reflection_;
  delete BidRequest_Video::default_instance_;
  delete BidRequest_Video_reflection_;
  delete BidRequest_Video_CompanionSlot::default_instance_;
  delete BidRequest_Video_CompanionSlot_reflection_;
  delete BidRequest_Video_ContentAttributes::default_instance_;
  delete BidRequest_Video_ContentAttributes_reflection_;
  delete BidRequest_AdSlot::default_instance_;
  delete BidRequest_AdSlot_reflection_;
  delete BidRequest_AdSlot_MatchingAdData::default_instance_;
  delete BidRequest_AdSlot_MatchingAdData_reflection_;
  delete BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::default_instance_;
  delete BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_reflection_;
  delete BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_;
  delete BidRequest_AdSlot_MatchingAdData_DirectDeal_reflection_;
  delete BidRequest_AdSlot_ExchangeBidding::default_instance_;
  delete BidRequest_AdSlot_ExchangeBidding_reflection_;
  delete BidRequest_AdSlot_NativeAdTemplate::default_instance_;
  delete BidRequest_AdSlot_NativeAdTemplate_reflection_;
  delete BidRequest_AdSlot_AutoRefresh::default_instance_;
  delete BidRequest_AdSlot_AutoRefresh_reflection_;
  delete BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::default_instance_;
  delete BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_reflection_;
  delete BidRequest_BidResponseFeedback::default_instance_;
  delete BidRequest_BidResponseFeedback_reflection_;
  delete BidRequest_MatchingNetwork::default_instance_;
  delete BidRequest_MatchingNetwork_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Ad::default_instance_;
  delete BidResponse_Ad_reflection_;
  delete BidResponse_Ad_NativeAd::default_instance_;
  delete BidResponse_Ad_NativeAd_reflection_;
  delete BidResponse_Ad_NativeAd_Image::default_instance_;
  delete BidResponse_Ad_NativeAd_Image_reflection_;
  delete BidResponse_Ad_AdSlot::default_instance_;
  delete BidResponse_Ad_AdSlot_reflection_;
  delete BidResponse_Ad_TemplateParameter::default_instance_;
  delete BidResponse_Ad_TemplateParameter_reflection_;
}

void protobuf_AddDesc_realtime_2dbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026realtime-bidding.proto\"\302N\n\nBidRequest\022"
    "\n\n\002id\030\002 \002(\014\022\n\n\002ip\030\004 \001(\014\022:\n\023user_data_tre"
    "atment\0301 \003(\0162\035.BidRequest.UserDataTreatm"
    "ent\022\026\n\016google_user_id\030\025 \001(\t\022(\n constrain"
    "ed_usage_google_user_id\030/ \001(\t\022\026\n\016cookie_"
    "version\030\024 \001(\r\022\032\n\022cookie_age_seconds\030\037 \001("
    "\005\022\031\n\021hosted_match_data\030% \001(\014\022+\n#constrai"
    "ned_usage_hosted_match_data\0300 \001(\014\022\022\n\nuse"
    "r_agent\030\006 \001(\t\022\027\n\017geo_criteria_id\030\' \001(\005\022\023"
    "\n\013postal_code\030! \001(\t\022\032\n\022postal_code_prefi"
    "x\030\" \001(\t\022 \n\030encrypted_hyperlocal_set\030( \001("
    "\014\0221\n\016hyperlocal_set\0305 \001(\0132\031.BidRequest.H"
    "yperlocalSet\022\027\n\017timezone_offset\030\031 \001(\005\022\031\n"
    "\ruser_vertical\030\036 \003(\005B\002\020\001\0225\n\020user_demogra"
    "phic\0302 \001(\0132\033.BidRequest.UserDemographic\022"
    "\'\n\tuser_list\030  \003(\0132\024.BidRequest.UserList"
    "\022\031\n\021seller_network_id\030) \001(\005\022\022\n\npartner_i"
    "d\0304 \001(\006\022\013\n\003url\030\013 \001(\t\022\024\n\014anonymous_id\030\023 \001"
    "(\t\022\031\n\021detected_language\030\014 \003(\t\022/\n\021detecte"
    "d_vertical\030\r \003(\0132\024.BidRequest.Vertical\022\""
    "\n\026detected_content_label\030\032 \003(\005B\002\020\001\022\"\n\006de"
    "vice\0306 \001(\0132\022.BidRequest.Device\022\'\n\tkey_va"
    "lue\030& \003(\0132\024.BidRequest.KeyValue\022\"\n\006mobil"
    "e\030\034 \001(\0132\022.BidRequest.Mobile\022 \n\005video\030\035 \001"
    "(\0132\021.BidRequest.Video\022\"\n\032publisher_setti"
    "ngs_list_id\030* \001(\006\022I\n\016publisher_type\0303 \001("
    "\0162\031.BidRequest.PublisherType:\026UNKNOWN_PU"
    "BLISHER_TYPE\022\"\n\006adslot\030\016 \003(\0132\022.BidReques"
    "t.AdSlot\022>\n\025bid_response_feedback\030, \003(\0132"
    "\037.BidRequest.BidResponseFeedback\022\026\n\007is_t"
    "est\030\017 \001(\010:\005false\022\026\n\007is_ping\030\021 \001(\010:\005false"
    "\022)\n\032is_predicted_to_be_ignored\030- \001(\010:\005fa"
    "lse\022#\n\033DEPRECATED_protocol_version\030\001 \001(\005"
    "\022%\n\035DEPRECATED_click_tracking_url\030\003 \001(\t\022"
    "\031\n\021DEPRECATED_cookie\030\005 \001(\004\022\032\n\022DEPRECATED"
    "_country\030\007 \001(\t\022\031\n\021DEPRECATED_region\030\010 \001("
    "\t\022\027\n\017DEPRECATED_city\030\t \001(\t\022\030\n\020DEPRECATED"
    "_metro\030\n \001(\005\022 \n\030DEPRECATED_hashed_cookie"
    "\030\020 \001(\014\022-\n%DEPRECATED_excluded_click_thro"
    "ugh_url\030\022 \003(\t\022!\n\031DEPRECATED_seller_netwo"
    "rk\030\026 \001(\t\022-\n%DEPRECATED_publisher_setting"
    "s_list_id\030\027 \001(\014\022@\n\033DEPRECATED_matching_n"
    "etwork\030\033 \003(\0132\033.BidRequest.MatchingNetwor"
    "k\022/\n DEPRECATED_experimental_deadline\030# "
    "\001(\010:\005false\022\037\n\027DEPRECATED_site_list_id\030$ "
    "\003(\005\022.\n&DEPRECATED_vertical_dictionary_ve"
    "rsion\030\030 \001(\005\032i\n\nHyperlocal\022-\n\007corners\030\001 \003"
    "(\0132\034.BidRequest.Hyperlocal.Point\032,\n\005Poin"
    "t\022\020\n\010latitude\030\001 \001(\002\022\021\n\tlongitude\030\002 \001(\002\032o"
    "\n\rHyperlocalSet\022*\n\nhyperlocal\030\001 \003(\0132\026.Bi"
    "dRequest.Hyperlocal\0222\n\014center_point\030\002 \001("
    "\0132\034.BidRequest.Hyperlocal.Point\032\246\001\n\017User"
    "Demographic\022;\n\006gender\030\001 \001(\0162\".BidRequest"
    ".UserDemographic.Gender:\007UNKNOWN\022\022\n\007age_"
    "low\030\002 \001(\005:\0010\022\025\n\010age_high\030\003 \001(\005:\003999\"+\n\006G"
    "ender\022\013\n\007UNKNOWN\020\000\022\010\n\004MALE\020\001\022\n\n\006FEMALE\020\002"
    "\032+\n\010UserList\022\n\n\002id\030\001 \001(\003\022\023\n\013age_seconds\030"
    "\002 \001(\005\032&\n\010Vertical\022\n\n\002id\030\001 \002(\005\022\016\n\006weight\030"
    "\002 \002(\002\032\221\005\n\006Device\022B\n\013device_type\030\001 \001(\0162\035."
    "BidRequest.Device.DeviceType:\016UNKNOWN_DE"
    "VICE\022\020\n\010platform\030\002 \001(\t\022\017\n\005brand\030\003 \001(\t:\000\022"
    "\017\n\005model\030\004 \001(\t:\000\0220\n\nos_version\030\005 \001(\0132\034.B"
    "idRequest.Device.OsVersion\022\022\n\ncarrier_id"
    "\030\006 \001(\003\022\027\n\014screen_width\030\007 \001(\005:\0010\022\030\n\rscree"
    "n_height\030\010 \001(\005:\0010\022$\n\031screen_pixel_ratio_"
    "millis\030\t \001(\005:\0010\022U\n\022screen_orientation\030\n "
    "\001(\0162$.BidRequest.Device.ScreenOrientatio"
    "n:\023UNKNOWN_ORIENTATION\022\030\n\020hardware_versi"
    "on\030\013 \001(\t\0328\n\tOsVersion\022\r\n\005major\030\001 \001(\005\022\r\n\005"
    "minor\030\002 \001(\005\022\r\n\005micro\030\003 \001(\005\"z\n\nDeviceType"
    "\022\022\n\016UNKNOWN_DEVICE\020\000\022\021\n\rHIGHEND_PHONE\020\001\022"
    "\n\n\006TABLET\020\002\022\025\n\021PERSONAL_COMPUTER\020\003\022\020\n\014CO"
    "NNECTED_TV\020\004\022\020\n\014GAME_CONSOLE\020\005\"I\n\021Screen"
    "Orientation\022\027\n\023UNKNOWN_ORIENTATION\020\000\022\014\n\010"
    "PORTRAIT\020\001\022\r\n\tLANDSCAPE\020\002\032&\n\010KeyValue\022\013\n"
    "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032\250\n\n\006Mobile\022\025\n\006"
    "is_app\030\007 \001(\010:\005false\022\016\n\006app_id\030\006 \001(\t\022&\n\027i"
    "s_interstitial_request\030\n \001(\010:\005false\022\030\n\020a"
    "pp_category_ids\030\013 \003(\005\022&\n\027is_mobile_web_o"
    "ptimized\030\021 \001(\010:\005false\022 \n\030encrypted_adver"
    "tising_id\030\024 \001(\014\022\026\n\016advertising_id\030\033 \001(\014\022"
    "\035\n\025encrypted_hashed_idfa\030\025 \001(\014\022\023\n\013hashed"
    "_idfa\030\034 \001(\014\0222\n*constrained_usage_encrypt"
    "ed_advertising_id\030\026 \001(\014\022(\n constrained_u"
    "sage_advertising_id\030\035 \001(\014\022/\n\'constrained"
    "_usage_encrypted_hashed_idfa\030\027 \001(\014\022%\n\035co"
    "nstrained_usage_hashed_idfa\030\036 \001(\014\022\020\n\010app"
    "_name\030\030 \001(\t\022\022\n\napp_rating\030\031 \001(\002\022\033\n\023DEPRE"
    "CATED_app_name\030\001 \001(\t\022\037\n\027DEPRECATED_compa"
    "ny_name\030\002 \001(\t\022\033\n\023DEPRECATED_platform\030\003 \001"
    "(\t\022\037\n\027DEPRECATED_carrier_name\030\004 \001(\t\022\"\n\032D"
    "EPRECATED_carrier_country\030\005 \001(\t\022S\n\035DEPRE"
    "CATED_mobile_device_type\030\010 \001(\0162#.BidRequ"
    "est.Mobile.MobileDeviceType:\007UNKNOWN\022(\n\035"
    "DEPRECATED_screen_orientation\030\t \001(\005:\0010\022\030"
    "\n\020DEPRECATED_brand\030\014 \001(\t\022\030\n\020DEPRECATED_m"
    "odel\030\r \001(\t\022A\n\025DEPRECATED_os_version\030\016 \001("
    "\0132\".BidRequest.Mobile.DeviceOsVersion\022\037\n"
    "\027DEPRECATED_screen_width\030\017 \001(\005\022 \n\030DEPREC"
    "ATED_screen_height\030\020 \001(\005\022\035\n\025DEPRECATED_c"
    "arrier_id\030\022 \001(\003\0222\n$DEPRECATED_device_pix"
    "el_ratio_millis\030\023 \001(\005:\0041000\032_\n\017DeviceOsV"
    "ersion\022\030\n\020os_version_major\030\001 \001(\005\022\030\n\020os_v"
    "ersion_minor\030\002 \001(\005\022\030\n\020os_version_micro\030\003"
    " \001(\005\">\n\020MobileDeviceType\022\013\n\007UNKNOWN\020\000\022\021\n"
    "\rHIGHEND_PHONE\020\001\022\n\n\006TABLET\020\002\"v\n\021ScreenOr"
    "ientation\022\036\n\032SCREEN_ORIENTATION_UNKNOWN\020"
    "\000\022\037\n\033SCREEN_ORIENTATION_PORTRAIT\020\001\022 \n\034SC"
    "REEN_ORIENTATION_LANDSCAPE\020\002\032\365\014\n\005Video\022A"
    "\n\tplacement\030\020 \001(\0162\033.BidRequest.Video.Pla"
    "cement:\021UNKNOWN_PLACEMENT\022\027\n\017description"
    "_url\030\n \001(\t\022\"\n\023is_embedded_offsite\030\013 \001(\010:"
    "\005false\022N\n\017playback_method\030\016 \001(\0162%.BidReq"
    "uest.Video.VideoPlaybackMethod:\016METHOD_U"
    "NKNOWN\022\024\n\014is_clickable\030\017 \001(\010\022\033\n\023videoad_"
    "start_delay\030\001 \001(\005\022\027\n\017max_ad_duration\030\002 \001"
    "(\005\022\027\n\017min_ad_duration\030\010 \001(\005\022\026\n\016max_ads_i"
    "n_pod\030\014 \001(\005\022V\n\022video_ad_skippable\030\004 \001(\0162"
    ").BidRequest.Video.SkippableBidRequestTy"
    "pe:\017ALLOW_SKIPPABLE\022!\n\031skippable_max_ad_"
    "duration\030\005 \001(\005\022<\n\025allowed_video_formats\030"
    "\006 \003(\0162\035.BidRequest.Video.VideoFormat\0227\n\016"
    "companion_slot\030\007 \003(\0132\037.BidRequest.Video."
    "CompanionSlot\022M\n\017end_cap_support\030\r \001(\0162\037"
    ".BidRequest.Video.EndCapSupport:\023END_CAP"
    "_NOT_ENABLED\022\?\n\022content_attributes\030\t \001(\013"
    "2#.BidRequest.Video.ContentAttributes\022M\n"
    "\031DEPRECATED_inventory_type\030\003 \001(\0162\037.BidRe"
    "quest.Video.InventoryType:\tWEB_VIDEO\032\314\001\n"
    "\rCompanionSlot\022\022\n\006height\030\001 \003(\005B\002\020\001\022\021\n\005wi"
    "dth\030\002 \003(\005B\002\020\001\022G\n\017creative_format\030\003 \003(\0162."
    ".BidRequest.Video.CompanionSlot.Creative"
    "Format\"K\n\016CreativeFormat\022\022\n\016IMAGE_CREATI"
    "VE\020\000\022\022\n\016FLASH_CREATIVE\020\001\022\021\n\rHTML_CREATIV"
    "E\020\002\032N\n\021ContentAttributes\022\r\n\005title\030\001 \001(\t\022"
    "\030\n\020duration_seconds\030\002 \001(\005\022\020\n\010keywords\030\003 "
    "\003(\t\"B\n\tPlacement\022\025\n\021UNKNOWN_PLACEMENT\020\000\022"
    "\014\n\010INSTREAM\020\001\022\020\n\014INTERSTITIAL\020\002\"m\n\023Video"
    "PlaybackMethod\022\022\n\016METHOD_UNKNOWN\020\000\022\026\n\022AU"
    "TO_PLAY_SOUND_ON\020\001\022\027\n\023AUTO_PLAY_SOUND_OF"
    "F\020\002\022\021\n\rCLICK_TO_PLAY\020\003\"Z\n\027SkippableBidRe"
    "questType\022\023\n\017ALLOW_SKIPPABLE\020\000\022\025\n\021REQUIR"
    "E_SKIPPABLE\020\001\022\023\n\017BLOCK_SKIPPABLE\020\002\"Y\n\013Vi"
    "deoFormat\022\r\n\tVIDEO_FLV\020\000\022\r\n\tVIDEO_MP4\020\001\022"
    "\r\n\tYT_HOSTED\020\002\022\017\n\013VPAID_FLASH\020\003\022\014\n\010VPAID"
    "_JS\020\004\"k\n\rEndCapSupport\022\027\n\023END_CAP_NOT_EN"
    "ABLED\020\000\022\024\n\020END_CAP_OPTIONAL\020\001\022\025\n\021END_CAP"
    "_FORBIDDEN\020\002\022\024\n\020END_CAP_REQUIRED\020\003\"X\n\rIn"
    "ventoryType\022\r\n\tWEB_VIDEO\020\000\022\t\n\005GAMES\020\001\022\027\n"
    "\023MOBILE_INTERSTITIAL\020\002\022\024\n\020MOBILE_APP_VID"
    "EO\020\003\032\326\034\n\006AdSlot\022\n\n\002id\030\001 \002(\005\022\024\n\014ad_block_"
    "key\030\016 \001(\004\022\032\n\022targetable_channel\030\n \003(\t\022\r\n"
    "\005width\030\002 \003(\005\022\016\n\006height\030\003 \003(\005\022\036\n\022excluded"
    "_attribute\030\004 \003(\005B\002\020\001\022\037\n\023allowed_vendor_t"
    "ype\030\006 \003(\005B\002\020\001\022\'\n\033excluded_sensitive_cate"
    "gory\030\007 \003(\005B\002\020\001\022\'\n\033allowed_restricted_cat"
    "egory\030\020 \003(\005B\002\020\001\0221\n%allowed_restricted_ca"
    "tegory_for_deals\030\026 \003(\005B\002\020\001\022\031\n\021allowed_la"
    "nguages\030\033 \003(\t\022%\n\031excluded_product_catego"
    "ry\030\r \003(\005B\002\020\001\022;\n\020matching_ad_data\030\t \003(\0132!"
    ".BidRequest.AdSlot.MatchingAdData\022\"\n\032pub"
    "lisher_settings_list_id\030\017 \003(\006\022<\n\020exchang"
    "e_bidding\030\034 \001(\0132\".BidRequest.AdSlot.Exch"
    "angeBidding\022H\n\017slot_visibility\030\014 \001(\0162!.B"
    "idRequest.AdSlot.SlotVisibility:\014NO_DETE"
    "CTION\022\027\n\013viewability\030\025 \001(\005:\002-1\022\036\n\022click_"
    "through_rate\030\031 \001(\002:\002-1\022N\n\016iframing_state"
    "\030\023 \001(\0162 .BidRequest.AdSlot.IFramingState"
    ":\024UNKNOWN_IFRAME_STATE\022N\n\016iframing_depth"
    "\030\024 \001(\0162 .BidRequest.AdSlot.IFramingDepth"
    ":\024UNKNOWN_IFRAME_DEPTH\022\?\n\022native_ad_temp"
    "late\0303 \003(\0132#.BidRequest.AdSlot.NativeAdT"
    "emplate\022E\n\020mediation_status\0304 \001(\0162\".BidR"
    "equest.AdSlot.MediationStatus:\007UNKNOWN\0224"
    "\n\014auto_refresh\030\027 \001(\0132\036.BidRequest.AdSlot"
    ".AutoRefresh\022E\n\nstickiness\030\030 \001(\0162\035.BidRe"
    "quest.AdSlot.Stickiness:\022UNKNOWN_STICKIN"
    "ESS\022\?\n\010renderer\030\032 \001(\0162\033.BidRequest.AdSlo"
    "t.Renderer:\020UNKNOWN_RENDERER\022N\n\023amp_ad_r"
    "equest_type\030\035 \001(\0162#.BidRequest.AdSlot.Am"
    "pAdRequestType:\014NON_AMP_PAGE\022$\n\034DEPRECAT"
    "ED_allowed_attribute\030\005 \003(\005\022-\n%DEPRECATED"
    "_publisher_settings_list_id\030\013 \003(\014\022-\n%DEP"
    "RECATED_excluded_click_through_url\030\010 \003(\t"
    "\032\212\006\n\016MatchingAdData\022\026\n\nbilling_id\030\002 \003(\003B"
    "\002\020\000\022\032\n\022minimum_cpm_micros\030\005 \001(\003\022H\n\014prici"
    "ng_rule\030\007 \003(\01322.BidRequest.AdSlot.Matchi"
    "ngAdData.BuyerPricingRule\022A\n\013direct_deal"
    "\030\006 \003(\0132,.BidRequest.AdSlot.MatchingAdDat"
    "a.DirectDeal\022\036\n\026DEPRECATED_campaign_id\030\001"
    " \001(\003\022(\n DEPRECATED_per_buyer_minimum_cpm"
    "\030\003 \001(\010\022#\n\033DEPRECATED_fixed_cpm_micros\030\004 "
    "\001(\003\032\261\001\n\020BuyerPricingRule\022\034\n\024included_adv"
    "ertisers\030\001 \003(\003\022\034\n\024excluded_advertisers\030\002"
    " \003(\003\022\031\n\021included_agencies\030\003 \003(\003\022\031\n\021exclu"
    "ded_agencies\030\004 \003(\003\022\017\n\007blocked\030\005 \001(\010\022\032\n\022m"
    "inimum_cpm_micros\030\006 \001(\003\032\223\002\n\nDirectDeal\022\026"
    "\n\016direct_deal_id\030\001 \001(\003\022\030\n\020fixed_cpm_micr"
    "os\030\002 \001(\003\022[\n\tdeal_type\030\003 \001(\01625.BidRequest"
    ".AdSlot.MatchingAdData.DirectDeal.DealTy"
    "pe:\021UNKNOWN_DEAL_TYPE\022*\n\033publisher_block"
    "s_overridden\030\004 \001(\010:\005false\"J\n\010DealType\022\025\n"
    "\021UNKNOWN_DEAL_TYPE\020\000\022\022\n\016PREFERRED_DEAL\020\001"
    "\022\023\n\017PRIVATE_AUCTION\020\002\032.\n\017ExchangeBidding"
    "\022\033\n\023publisher_parameter\030\001 \003(\t\032\252\004\n\020Native"
    "AdTemplate\022\027\n\017required_fields\030\001 \001(\003\022\032\n\022r"
    "ecommended_fields\030\002 \001(\003\022 \n\030headline_max_"
    "safe_length\030\003 \001(\005\022\034\n\024body_max_safe_lengt"
    "h\030\004 \001(\005\022&\n\036call_to_action_max_safe_lengt"
    "h\030\005 \001(\005\022\"\n\032advertiser_max_safe_length\030\006 "
    "\001(\005\022\035\n\025store_max_safe_length\030\016 \001(\005\022\035\n\025pr"
    "ice_max_safe_length\030\017 \001(\005\022\023\n\013image_width"
    "\030\007 \001(\005\022\024\n\014image_height\030\010 \001(\005\022\022\n\nlogo_wid"
    "th\030\t \001(\005\022\023\n\013logo_height\030\n \001(\005\022\026\n\016app_ico"
    "n_width\030\013 \001(\005\022\027\n\017app_icon_height\030\014 \001(\005\"\221"
    "\001\n\006Fields\022\014\n\010HEADLINE\020\001\022\010\n\004BODY\020\002\022\022\n\016CAL"
    "L_TO_ACTION\020\004\022\016\n\nADVERTISER\020\010\022\t\n\005IMAGE\020\020"
    "\022\010\n\004LOGO\020 \022\014\n\010APP_ICON\020@\022\020\n\013STAR_RATING\020"
    "\200\001\022\n\n\005PRICE\020\200\002\022\n\n\005STORE\020\200\004\032\200\003\n\013AutoRefre"
    "sh\022L\n\020refresh_settings\030\001 \003(\01322.BidReques"
    "t.AdSlot.AutoRefresh.AutoRefreshSettings"
    "\022\030\n\rrefresh_count\030\002 \001(\005:\0010\032\210\002\n\023AutoRefre"
    "shSettings\022s\n\014refresh_type\030\001 \001(\0162B.BidRe"
    "quest.AdSlot.AutoRefresh.AutoRefreshSett"
    "ings.AutoRefreshType:\031UNKNOWN_AUTO_REFRE"
    "SH_TYPE\022$\n\034min_refresh_interval_seconds\030"
    "\002 \001(\005\"V\n\017AutoRefreshType\022\035\n\031UNKNOWN_AUTO"
    "_REFRESH_TYPE\020\000\022\017\n\013USER_ACTION\020\001\022\t\n\005EVEN"
    "T\020\002\022\010\n\004TIME\020\003\"J\n\016SlotVisibility\022\020\n\014NO_DE"
    "TECTION\020\000\022\022\n\016ABOVE_THE_FOLD\020\001\022\022\n\016BELOW_T"
    "HE_FOLD\020\002\"i\n\rIFramingState\022\030\n\024UNKNOWN_IF"
    "RAME_STATE\020\000\022\r\n\tNO_IFRAME\020\001\022\026\n\022SAME_DOMA"
    "IN_IFRAME\020\002\022\027\n\023CROSS_DOMAIN_IFRAME\020\003\"a\n\r"
    "IFramingDepth\022\030\n\024UNKNOWN_IFRAME_DEPTH\020\000\022"
    "\021\n\rNOT_IN_IFRAME\020\001\022\016\n\nONE_IFRAME\020\002\022\023\n\017MU"
    "LTIPLE_IFRAME\020\003\"@\n\017MediationStatus\022\013\n\007UN"
    "KNOWN\020\000\022\022\n\016DIRECT_REQUEST\020\001\022\014\n\010MEDIATED\020"
    "\002\"3\n\nStickiness\022\026\n\022UNKNOWN_STICKINESS\020\000\022"
    "\r\n\tIS_STICKY\020\001\";\n\010Renderer\022\024\n\020UNKNOWN_RE"
    "NDERER\020\000\022\n\n\006GOOGLE\020\001\022\r\n\tPUBLISHER\020\002\"P\n\020A"
    "mpAdRequestType\022\017\n\013UNKNOWN_AMP\020\000\022\020\n\014NON_"
    "AMP_PAGE\020\001\022\031\n\025AMP_PAGE_LATE_REQUEST\020\002\032s\n"
    "\023BidResponseFeedback\022\022\n\nrequest_id\030\001 \001(\014"
    "\022\026\n\016creative_index\030\002 \001(\005\022\034\n\024creative_sta"
    "tus_code\030\003 \001(\005\022\022\n\ncpm_micros\030\004 \001(\003\032S\n\017Ma"
    "tchingNetwork\022\035\n\025DEPRECATED_network_id\030\001"
    " \001(\t\022!\n\031DEPRECATED_google_user_id\030\002 \001(\t\""
    "9\n\021UserDataTreatment\022$\n TAG_FOR_CHILD_DI"
    "RECTED_TREATMENT\020\000\"\210\001\n\rPublisherType\022\032\n\026"
    "UNKNOWN_PUBLISHER_TYPE\020\000\022$\n ADX_PUBLISHE"
    "R_OWNED_AND_OPERATED\020\001\022\035\n\031ADX_PUBLISHER_"
    "REPRESENTED\020\002\022\026\n\022GOOGLE_REPRESENTED\020\003\"\312\013"
    "\n\013BidResponse\022\033\n\002ad\030\002 \003(\0132\017.BidResponse."
    "Ad\022\024\n\014debug_string\030\005 \001(\t\022\032\n\022processing_t"
    "ime_ms\030\004 \001(\005\022#\n\033DEPRECATED_protocol_vers"
    "ion\030\001 \001(\005\032\306\n\n\002Ad\022\031\n\021buyer_creative_id\030\n "
    "\001(\t\022\024\n\014html_snippet\030\001 \001(\t\022\021\n\tvideo_url\030\t"
    " \001(\t\022+\n\tnative_ad\030\022 \001(\0132\030.BidResponse.Ad"
    ".NativeAd\022\031\n\021click_through_url\030\004 \003(\t\022\023\n\013"
    "vendor_type\030\005 \003(\005\022\021\n\tattribute\030\006 \003(\005\022\020\n\010"
    "category\030\007 \003(\005\022\033\n\023restricted_category\030\021 "
    "\003(\005\022\027\n\017advertiser_name\030\013 \003(\t\022\023\n\013bidder_n"
    "ame\030\026 \001(\t\022\r\n\005width\030\016 \001(\005\022\016\n\006height\030\017 \001(\005"
    "\022\021\n\tagency_id\030\020 \001(\003\022&\n\006adslot\030\003 \003(\0132\026.Bi"
    "dResponse.Ad.AdSlot\022\037\n\027impression_tracki"
    "ng_url\030\023 \003(\t\022\"\n\032ad_choices_destination_u"
    "rl\030\025 \001(\t\022\036\n\026DEPRECATED_creative_id\030\010 \001(\003"
    "\022$\n\034DEPRECATED_click_through_url\030\002 \001(\t\022#"
    "\n\033DEPRECATED_snippet_template\030\014 \001(\t\022H\n\035D"
    "EPRECATED_template_parameter\030\r \003(\0132!.Bid"
    "Response.Ad.TemplateParameter\032\225\003\n\010Native"
    "Ad\022\020\n\010headline\030\001 \001(\t\022\014\n\004body\030\002 \001(\t\022\026\n\016ca"
    "ll_to_action\030\003 \001(\t\022\022\n\nadvertiser\030\004 \001(\t\022-"
    "\n\005image\030\005 \001(\0132\036.BidResponse.Ad.NativeAd."
    "Image\022,\n\004logo\030\006 \001(\0132\036.BidResponse.Ad.Nat"
    "iveAd.Image\0220\n\010app_icon\030\007 \001(\0132\036.BidRespo"
    "nse.Ad.NativeAd.Image\022\023\n\013star_rating\030\010 \001"
    "(\001\022\032\n\022click_tracking_url\030\013 \001(\t\022\r\n\005price\030"
    "\n \001(\t\022\r\n\005store\030\014 \001(\t\022*\n\"DEPRECATED_impre"
    "ssion_tracking_url\030\t \003(\t\0323\n\005Image\022\013\n\003url"
    "\030\001 \001(\t\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\032l\n"
    "\006AdSlot\022\n\n\002id\030\001 \002(\005\022\026\n\016max_cpm_micros\030\002 "
    "\002(\003\022\026\n\016min_cpm_micros\030\003 \001(\003\022\022\n\nbilling_i"
    "d\030\004 \001(\003\022\022\n\007deal_id\030\005 \001(\003:\0010\032\324\001\n\021Template"
    "Parameter\022\027\n\017parameter_value\030\001 \001(\t\022 \n\030bl"
    "ank_ad_parameter_value\030\010 \001(\t\022\031\n\021buyer_cr"
    "eative_id\030\002 \001(\t\022\031\n\021click_through_url\030\003 \001"
    "(\t\022\014\n\004left\030\004 \001(\005\022\r\n\005right\030\005 \001(\005\022\013\n\003top\030\006"
    " \001(\005\022\016\n\006bottom\030\007 \001(\005\022\024\n\014backup_index\030\t \001"
    "(\005", 11562);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "realtime-bidding.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_Hyperlocal::default_instance_ = new BidRequest_Hyperlocal();
  BidRequest_Hyperlocal_Point::default_instance_ = new BidRequest_Hyperlocal_Point();
  BidRequest_HyperlocalSet::default_instance_ = new BidRequest_HyperlocalSet();
  BidRequest_UserDemographic::default_instance_ = new BidRequest_UserDemographic();
  BidRequest_UserList::default_instance_ = new BidRequest_UserList();
  BidRequest_Vertical::default_instance_ = new BidRequest_Vertical();
  BidRequest_Device::default_instance_ = new BidRequest_Device();
  BidRequest_Device_OsVersion::default_instance_ = new BidRequest_Device_OsVersion();
  BidRequest_KeyValue::default_instance_ = new BidRequest_KeyValue();
  BidRequest_Mobile::default_instance_ = new BidRequest_Mobile();
  BidRequest_Mobile_DeviceOsVersion::default_instance_ = new BidRequest_Mobile_DeviceOsVersion();
  BidRequest_Video::default_instance_ = new BidRequest_Video();
  BidRequest_Video_CompanionSlot::default_instance_ = new BidRequest_Video_CompanionSlot();
  BidRequest_Video_ContentAttributes::default_instance_ = new BidRequest_Video_ContentAttributes();
  BidRequest_AdSlot::default_instance_ = new BidRequest_AdSlot();
  BidRequest_AdSlot_MatchingAdData::default_instance_ = new BidRequest_AdSlot_MatchingAdData();
  BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::default_instance_ = new BidRequest_AdSlot_MatchingAdData_BuyerPricingRule();
  BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_ = new BidRequest_AdSlot_MatchingAdData_DirectDeal();
  BidRequest_AdSlot_ExchangeBidding::default_instance_ = new BidRequest_AdSlot_ExchangeBidding();
  BidRequest_AdSlot_NativeAdTemplate::default_instance_ = new BidRequest_AdSlot_NativeAdTemplate();
  BidRequest_AdSlot_AutoRefresh::default_instance_ = new BidRequest_AdSlot_AutoRefresh();
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::default_instance_ = new BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings();
  BidRequest_BidResponseFeedback::default_instance_ = new BidRequest_BidResponseFeedback();
  BidRequest_MatchingNetwork::default_instance_ = new BidRequest_MatchingNetwork();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Ad::default_instance_ = new BidResponse_Ad();
  BidResponse_Ad_NativeAd::default_instance_ = new BidResponse_Ad_NativeAd();
  BidResponse_Ad_NativeAd_Image::default_instance_ = new BidResponse_Ad_NativeAd_Image();
  BidResponse_Ad_AdSlot::default_instance_ = new BidResponse_Ad_AdSlot();
  BidResponse_Ad_TemplateParameter::default_instance_ = new BidResponse_Ad_TemplateParameter();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_Hyperlocal::default_instance_->InitAsDefaultInstance();
  BidRequest_Hyperlocal_Point::default_instance_->InitAsDefaultInstance();
  BidRequest_HyperlocalSet::default_instance_->InitAsDefaultInstance();
  BidRequest_UserDemographic::default_instance_->InitAsDefaultInstance();
  BidRequest_UserList::default_instance_->InitAsDefaultInstance();
  BidRequest_Vertical::default_instance_->InitAsDefaultInstance();
  BidRequest_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_Device_OsVersion::default_instance_->InitAsDefaultInstance();
  BidRequest_KeyValue::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_DeviceOsVersion::default_instance_->InitAsDefaultInstance();
  BidRequest_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_Video_CompanionSlot::default_instance_->InitAsDefaultInstance();
  BidRequest_Video_ContentAttributes::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_MatchingAdData::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_ExchangeBidding::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_NativeAdTemplate::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_AutoRefresh::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::default_instance_->InitAsDefaultInstance();
  BidRequest_BidResponseFeedback::default_instance_->InitAsDefaultInstance();
  BidRequest_MatchingNetwork::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_NativeAd::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_NativeAd_Image::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_AdSlot::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_TemplateParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_realtime_2dbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_realtime_2dbidding_2eproto {
  StaticDescriptorInitializer_realtime_2dbidding_2eproto() {
    protobuf_AddDesc_realtime_2dbidding_2eproto();
  }
} static_descriptor_initializer_realtime_2dbidding_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BidRequest_UserDataTreatment_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_UserDataTreatment_descriptor_;
}
bool BidRequest_UserDataTreatment_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_UserDataTreatment BidRequest::TAG_FOR_CHILD_DIRECTED_TREATMENT;
const BidRequest_UserDataTreatment BidRequest::UserDataTreatment_MIN;
const BidRequest_UserDataTreatment BidRequest::UserDataTreatment_MAX;
const int BidRequest::UserDataTreatment_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_PublisherType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_PublisherType_descriptor_;
}
bool BidRequest_PublisherType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_PublisherType BidRequest::UNKNOWN_PUBLISHER_TYPE;
const BidRequest_PublisherType BidRequest::ADX_PUBLISHER_OWNED_AND_OPERATED;
const BidRequest_PublisherType BidRequest::ADX_PUBLISHER_REPRESENTED;
const BidRequest_PublisherType BidRequest::GOOGLE_REPRESENTED;
const BidRequest_PublisherType BidRequest::PublisherType_MIN;
const BidRequest_PublisherType BidRequest::PublisherType_MAX;
const int BidRequest::PublisherType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Hyperlocal_Point::kLatitudeFieldNumber;
const int BidRequest_Hyperlocal_Point::kLongitudeFieldNumber;
#endif  // !_MSC_VER

BidRequest_Hyperlocal_Point::BidRequest_Hyperlocal_Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Hyperlocal.Point)
}

void BidRequest_Hyperlocal_Point::InitAsDefaultInstance() {
}

BidRequest_Hyperlocal_Point::BidRequest_Hyperlocal_Point(const BidRequest_Hyperlocal_Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Hyperlocal.Point)
}

void BidRequest_Hyperlocal_Point::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Hyperlocal_Point::~BidRequest_Hyperlocal_Point() {
  // @@protoc_insertion_point(destructor:BidRequest.Hyperlocal.Point)
  SharedDtor();
}

void BidRequest_Hyperlocal_Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Hyperlocal_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Hyperlocal_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Hyperlocal_Point_descriptor_;
}

const BidRequest_Hyperlocal_Point& BidRequest_Hyperlocal_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Hyperlocal_Point* BidRequest_Hyperlocal_Point::default_instance_ = NULL;

BidRequest_Hyperlocal_Point* BidRequest_Hyperlocal_Point::New() const {
  return new BidRequest_Hyperlocal_Point;
}

void BidRequest_Hyperlocal_Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Hyperlocal_Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(latitude_, longitude_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Hyperlocal_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Hyperlocal.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float latitude = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // optional float longitude = 2;
      case 2: {
        if (tag == 21) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Hyperlocal.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Hyperlocal.Point)
  return false;
#undef DO_
}

void BidRequest_Hyperlocal_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Hyperlocal.Point)
  // optional float latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Hyperlocal.Point)
}

::google::protobuf::uint8* BidRequest_Hyperlocal_Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Hyperlocal.Point)
  // optional float latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Hyperlocal.Point)
  return target;
}

int BidRequest_Hyperlocal_Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Hyperlocal_Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Hyperlocal_Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Hyperlocal_Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Hyperlocal_Point::MergeFrom(const BidRequest_Hyperlocal_Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Hyperlocal_Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Hyperlocal_Point::CopyFrom(const BidRequest_Hyperlocal_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Hyperlocal_Point::IsInitialized() const {

  return true;
}

void BidRequest_Hyperlocal_Point::Swap(BidRequest_Hyperlocal_Point* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Hyperlocal_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Hyperlocal_Point_descriptor_;
  metadata.reflection = BidRequest_Hyperlocal_Point_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Hyperlocal::kCornersFieldNumber;
#endif  // !_MSC_VER

BidRequest_Hyperlocal::BidRequest_Hyperlocal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Hyperlocal)
}

void BidRequest_Hyperlocal::InitAsDefaultInstance() {
}

BidRequest_Hyperlocal::BidRequest_Hyperlocal(const BidRequest_Hyperlocal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Hyperlocal)
}

void BidRequest_Hyperlocal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Hyperlocal::~BidRequest_Hyperlocal() {
  // @@protoc_insertion_point(destructor:BidRequest.Hyperlocal)
  SharedDtor();
}

void BidRequest_Hyperlocal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Hyperlocal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Hyperlocal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Hyperlocal_descriptor_;
}

const BidRequest_Hyperlocal& BidRequest_Hyperlocal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Hyperlocal* BidRequest_Hyperlocal::default_instance_ = NULL;

BidRequest_Hyperlocal* BidRequest_Hyperlocal::New() const {
  return new BidRequest_Hyperlocal;
}

void BidRequest_Hyperlocal::Clear() {
  corners_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Hyperlocal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Hyperlocal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BidRequest.Hyperlocal.Point corners = 1;
      case 1: {
        if (tag == 10) {
         parse_corners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_corners()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_corners;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Hyperlocal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Hyperlocal)
  return false;
#undef DO_
}

void BidRequest_Hyperlocal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Hyperlocal)
  // repeated .BidRequest.Hyperlocal.Point corners = 1;
  for (int i = 0; i < this->corners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->corners(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Hyperlocal)
}

::google::protobuf::uint8* BidRequest_Hyperlocal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Hyperlocal)
  // repeated .BidRequest.Hyperlocal.Point corners = 1;
  for (int i = 0; i < this->corners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->corners(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Hyperlocal)
  return target;
}

int BidRequest_Hyperlocal::ByteSize() const {
  int total_size = 0;

  // repeated .BidRequest.Hyperlocal.Point corners = 1;
  total_size += 1 * this->corners_size();
  for (int i = 0; i < this->corners_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->corners(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Hyperlocal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Hyperlocal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Hyperlocal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Hyperlocal::MergeFrom(const BidRequest_Hyperlocal& from) {
  GOOGLE_CHECK_NE(&from, this);
  corners_.MergeFrom(from.corners_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Hyperlocal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Hyperlocal::CopyFrom(const BidRequest_Hyperlocal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Hyperlocal::IsInitialized() const {

  return true;
}

void BidRequest_Hyperlocal::Swap(BidRequest_Hyperlocal* other) {
  if (other != this) {
    corners_.Swap(&other->corners_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Hyperlocal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Hyperlocal_descriptor_;
  metadata.reflection = BidRequest_Hyperlocal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_HyperlocalSet::kHyperlocalFieldNumber;
const int BidRequest_HyperlocalSet::kCenterPointFieldNumber;
#endif  // !_MSC_VER

BidRequest_HyperlocalSet::BidRequest_HyperlocalSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.HyperlocalSet)
}

void BidRequest_HyperlocalSet::InitAsDefaultInstance() {
  center_point_ = const_cast< ::BidRequest_Hyperlocal_Point*>(&::BidRequest_Hyperlocal_Point::default_instance());
}

BidRequest_HyperlocalSet::BidRequest_HyperlocalSet(const BidRequest_HyperlocalSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.HyperlocalSet)
}

void BidRequest_HyperlocalSet::SharedCtor() {
  _cached_size_ = 0;
  center_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_HyperlocalSet::~BidRequest_HyperlocalSet() {
  // @@protoc_insertion_point(destructor:BidRequest.HyperlocalSet)
  SharedDtor();
}

void BidRequest_HyperlocalSet::SharedDtor() {
  if (this != default_instance_) {
    delete center_point_;
  }
}

void BidRequest_HyperlocalSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_HyperlocalSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_HyperlocalSet_descriptor_;
}

const BidRequest_HyperlocalSet& BidRequest_HyperlocalSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_HyperlocalSet* BidRequest_HyperlocalSet::default_instance_ = NULL;

BidRequest_HyperlocalSet* BidRequest_HyperlocalSet::New() const {
  return new BidRequest_HyperlocalSet;
}

void BidRequest_HyperlocalSet::Clear() {
  if (has_center_point()) {
    if (center_point_ != NULL) center_point_->::BidRequest_Hyperlocal_Point::Clear();
  }
  hyperlocal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_HyperlocalSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.HyperlocalSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BidRequest.Hyperlocal hyperlocal = 1;
      case 1: {
        if (tag == 10) {
         parse_hyperlocal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hyperlocal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hyperlocal;
        if (input->ExpectTag(18)) goto parse_center_point;
        break;
      }

      // optional .BidRequest.Hyperlocal.Point center_point = 2;
      case 2: {
        if (tag == 18) {
         parse_center_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.HyperlocalSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.HyperlocalSet)
  return false;
#undef DO_
}

void BidRequest_HyperlocalSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.HyperlocalSet)
  // repeated .BidRequest.Hyperlocal hyperlocal = 1;
  for (int i = 0; i < this->hyperlocal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hyperlocal(i), output);
  }

  // optional .BidRequest.Hyperlocal.Point center_point = 2;
  if (has_center_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->center_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.HyperlocalSet)
}

::google::protobuf::uint8* BidRequest_HyperlocalSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.HyperlocalSet)
  // repeated .BidRequest.Hyperlocal hyperlocal = 1;
  for (int i = 0; i < this->hyperlocal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hyperlocal(i), target);
  }

  // optional .BidRequest.Hyperlocal.Point center_point = 2;
  if (has_center_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->center_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.HyperlocalSet)
  return target;
}

int BidRequest_HyperlocalSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .BidRequest.Hyperlocal.Point center_point = 2;
    if (has_center_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center_point());
    }

  }
  // repeated .BidRequest.Hyperlocal hyperlocal = 1;
  total_size += 1 * this->hyperlocal_size();
  for (int i = 0; i < this->hyperlocal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hyperlocal(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_HyperlocalSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_HyperlocalSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_HyperlocalSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_HyperlocalSet::MergeFrom(const BidRequest_HyperlocalSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  hyperlocal_.MergeFrom(from.hyperlocal_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_center_point()) {
      mutable_center_point()->::BidRequest_Hyperlocal_Point::MergeFrom(from.center_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_HyperlocalSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_HyperlocalSet::CopyFrom(const BidRequest_HyperlocalSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_HyperlocalSet::IsInitialized() const {

  return true;
}

void BidRequest_HyperlocalSet::Swap(BidRequest_HyperlocalSet* other) {
  if (other != this) {
    hyperlocal_.Swap(&other->hyperlocal_);
    std::swap(center_point_, other->center_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_HyperlocalSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_HyperlocalSet_descriptor_;
  metadata.reflection = BidRequest_HyperlocalSet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_UserDemographic_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_UserDemographic_Gender_descriptor_;
}
bool BidRequest_UserDemographic_Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_UserDemographic_Gender BidRequest_UserDemographic::UNKNOWN;
const BidRequest_UserDemographic_Gender BidRequest_UserDemographic::MALE;
const BidRequest_UserDemographic_Gender BidRequest_UserDemographic::FEMALE;
const BidRequest_UserDemographic_Gender BidRequest_UserDemographic::Gender_MIN;
const BidRequest_UserDemographic_Gender BidRequest_UserDemographic::Gender_MAX;
const int BidRequest_UserDemographic::Gender_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_UserDemographic::kGenderFieldNumber;
const int BidRequest_UserDemographic::kAgeLowFieldNumber;
const int BidRequest_UserDemographic::kAgeHighFieldNumber;
#endif  // !_MSC_VER

BidRequest_UserDemographic::BidRequest_UserDemographic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.UserDemographic)
}

void BidRequest_UserDemographic::InitAsDefaultInstance() {
}

BidRequest_UserDemographic::BidRequest_UserDemographic(const BidRequest_UserDemographic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.UserDemographic)
}

void BidRequest_UserDemographic::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 0;
  age_low_ = 0;
  age_high_ = 999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_UserDemographic::~BidRequest_UserDemographic() {
  // @@protoc_insertion_point(destructor:BidRequest.UserDemographic)
  SharedDtor();
}

void BidRequest_UserDemographic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_UserDemographic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_UserDemographic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_UserDemographic_descriptor_;
}

const BidRequest_UserDemographic& BidRequest_UserDemographic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_UserDemographic* BidRequest_UserDemographic::default_instance_ = NULL;

BidRequest_UserDemographic* BidRequest_UserDemographic::New() const {
  return new BidRequest_UserDemographic;
}

void BidRequest_UserDemographic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_UserDemographic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gender_, age_low_);
    age_high_ = 999;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_UserDemographic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.UserDemographic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BidRequest.UserDemographic.Gender gender = 1 [default = UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_UserDemographic_Gender_IsValid(value)) {
            set_gender(static_cast< ::BidRequest_UserDemographic_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_age_low;
        break;
      }

      // optional int32 age_low = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_age_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_low_)));
          set_has_age_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_age_high;
        break;
      }

      // optional int32 age_high = 3 [default = 999];
      case 3: {
        if (tag == 24) {
         parse_age_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_high_)));
          set_has_age_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.UserDemographic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.UserDemographic)
  return false;
#undef DO_
}

void BidRequest_UserDemographic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.UserDemographic)
  // optional .BidRequest.UserDemographic.Gender gender = 1 [default = UNKNOWN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gender(), output);
  }

  // optional int32 age_low = 2 [default = 0];
  if (has_age_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age_low(), output);
  }

  // optional int32 age_high = 3 [default = 999];
  if (has_age_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age_high(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.UserDemographic)
}

::google::protobuf::uint8* BidRequest_UserDemographic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.UserDemographic)
  // optional .BidRequest.UserDemographic.Gender gender = 1 [default = UNKNOWN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gender(), target);
  }

  // optional int32 age_low = 2 [default = 0];
  if (has_age_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age_low(), target);
  }

  // optional int32 age_high = 3 [default = 999];
  if (has_age_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age_high(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.UserDemographic)
  return target;
}

int BidRequest_UserDemographic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BidRequest.UserDemographic.Gender gender = 1 [default = UNKNOWN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional int32 age_low = 2 [default = 0];
    if (has_age_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_low());
    }

    // optional int32 age_high = 3 [default = 999];
    if (has_age_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_high());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_UserDemographic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_UserDemographic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_UserDemographic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_UserDemographic::MergeFrom(const BidRequest_UserDemographic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age_low()) {
      set_age_low(from.age_low());
    }
    if (from.has_age_high()) {
      set_age_high(from.age_high());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_UserDemographic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_UserDemographic::CopyFrom(const BidRequest_UserDemographic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_UserDemographic::IsInitialized() const {

  return true;
}

void BidRequest_UserDemographic::Swap(BidRequest_UserDemographic* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(age_low_, other->age_low_);
    std::swap(age_high_, other->age_high_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_UserDemographic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_UserDemographic_descriptor_;
  metadata.reflection = BidRequest_UserDemographic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_UserList::kIdFieldNumber;
const int BidRequest_UserList::kAgeSecondsFieldNumber;
#endif  // !_MSC_VER

BidRequest_UserList::BidRequest_UserList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.UserList)
}

void BidRequest_UserList::InitAsDefaultInstance() {
}

BidRequest_UserList::BidRequest_UserList(const BidRequest_UserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.UserList)
}

void BidRequest_UserList::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  age_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_UserList::~BidRequest_UserList() {
  // @@protoc_insertion_point(destructor:BidRequest.UserList)
  SharedDtor();
}

void BidRequest_UserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_UserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_UserList_descriptor_;
}

const BidRequest_UserList& BidRequest_UserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_UserList* BidRequest_UserList::default_instance_ = NULL;

BidRequest_UserList* BidRequest_UserList::New() const {
  return new BidRequest_UserList;
}

void BidRequest_UserList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_UserList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, age_seconds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.UserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_age_seconds;
        break;
      }

      // optional int32 age_seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_age_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_seconds_)));
          set_has_age_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.UserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.UserList)
  return false;
#undef DO_
}

void BidRequest_UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.UserList)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 age_seconds = 2;
  if (has_age_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.UserList)
}

::google::protobuf::uint8* BidRequest_UserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.UserList)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 age_seconds = 2;
  if (has_age_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.UserList)
  return target;
}

int BidRequest_UserList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 age_seconds = 2;
    if (has_age_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_UserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_UserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_UserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_UserList::MergeFrom(const BidRequest_UserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_age_seconds()) {
      set_age_seconds(from.age_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_UserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_UserList::CopyFrom(const BidRequest_UserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_UserList::IsInitialized() const {

  return true;
}

void BidRequest_UserList::Swap(BidRequest_UserList* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(age_seconds_, other->age_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_UserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_UserList_descriptor_;
  metadata.reflection = BidRequest_UserList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Vertical::kIdFieldNumber;
const int BidRequest_Vertical::kWeightFieldNumber;
#endif  // !_MSC_VER

BidRequest_Vertical::BidRequest_Vertical()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Vertical)
}

void BidRequest_Vertical::InitAsDefaultInstance() {
}

BidRequest_Vertical::BidRequest_Vertical(const BidRequest_Vertical& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Vertical)
}

void BidRequest_Vertical::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Vertical::~BidRequest_Vertical() {
  // @@protoc_insertion_point(destructor:BidRequest.Vertical)
  SharedDtor();
}

void BidRequest_Vertical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Vertical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Vertical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Vertical_descriptor_;
}

const BidRequest_Vertical& BidRequest_Vertical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Vertical* BidRequest_Vertical::default_instance_ = NULL;

BidRequest_Vertical* BidRequest_Vertical::New() const {
  return new BidRequest_Vertical;
}

void BidRequest_Vertical::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Vertical*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, weight_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Vertical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Vertical)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_weight;
        break;
      }

      // required float weight = 2;
      case 2: {
        if (tag == 21) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Vertical)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Vertical)
  return false;
#undef DO_
}

void BidRequest_Vertical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Vertical)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Vertical)
}

::google::protobuf::uint8* BidRequest_Vertical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Vertical)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Vertical)
  return target;
}

int BidRequest_Vertical::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float weight = 2;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Vertical::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Vertical* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Vertical*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Vertical::MergeFrom(const BidRequest_Vertical& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Vertical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Vertical::CopyFrom(const BidRequest_Vertical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Vertical::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_Vertical::Swap(BidRequest_Vertical* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Vertical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Vertical_descriptor_;
  metadata.reflection = BidRequest_Vertical_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_DeviceType_descriptor_;
}
bool BidRequest_Device_DeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Device_DeviceType BidRequest_Device::UNKNOWN_DEVICE;
const BidRequest_Device_DeviceType BidRequest_Device::HIGHEND_PHONE;
const BidRequest_Device_DeviceType BidRequest_Device::TABLET;
const BidRequest_Device_DeviceType BidRequest_Device::PERSONAL_COMPUTER;
const BidRequest_Device_DeviceType BidRequest_Device::CONNECTED_TV;
const BidRequest_Device_DeviceType BidRequest_Device::GAME_CONSOLE;
const BidRequest_Device_DeviceType BidRequest_Device::DeviceType_MIN;
const BidRequest_Device_DeviceType BidRequest_Device::DeviceType_MAX;
const int BidRequest_Device::DeviceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Device_ScreenOrientation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_ScreenOrientation_descriptor_;
}
bool BidRequest_Device_ScreenOrientation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Device_ScreenOrientation BidRequest_Device::UNKNOWN_ORIENTATION;
const BidRequest_Device_ScreenOrientation BidRequest_Device::PORTRAIT;
const BidRequest_Device_ScreenOrientation BidRequest_Device::LANDSCAPE;
const BidRequest_Device_ScreenOrientation BidRequest_Device::ScreenOrientation_MIN;
const BidRequest_Device_ScreenOrientation BidRequest_Device::ScreenOrientation_MAX;
const int BidRequest_Device::ScreenOrientation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Device_OsVersion::kMajorFieldNumber;
const int BidRequest_Device_OsVersion::kMinorFieldNumber;
const int BidRequest_Device_OsVersion::kMicroFieldNumber;
#endif  // !_MSC_VER

BidRequest_Device_OsVersion::BidRequest_Device_OsVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Device.OsVersion)
}

void BidRequest_Device_OsVersion::InitAsDefaultInstance() {
}

BidRequest_Device_OsVersion::BidRequest_Device_OsVersion(const BidRequest_Device_OsVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Device.OsVersion)
}

void BidRequest_Device_OsVersion::SharedCtor() {
  _cached_size_ = 0;
  major_ = 0;
  minor_ = 0;
  micro_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Device_OsVersion::~BidRequest_Device_OsVersion() {
  // @@protoc_insertion_point(destructor:BidRequest.Device.OsVersion)
  SharedDtor();
}

void BidRequest_Device_OsVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Device_OsVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Device_OsVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_OsVersion_descriptor_;
}

const BidRequest_Device_OsVersion& BidRequest_Device_OsVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Device_OsVersion* BidRequest_Device_OsVersion::default_instance_ = NULL;

BidRequest_Device_OsVersion* BidRequest_Device_OsVersion::New() const {
  return new BidRequest_Device_OsVersion;
}

void BidRequest_Device_OsVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Device_OsVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(major_, micro_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Device_OsVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Device.OsVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // optional int32 minor = 2;
      case 2: {
        if (tag == 16) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_micro;
        break;
      }

      // optional int32 micro = 3;
      case 3: {
        if (tag == 24) {
         parse_micro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &micro_)));
          set_has_micro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Device.OsVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Device.OsVersion)
  return false;
#undef DO_
}

void BidRequest_Device_OsVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Device.OsVersion)
  // optional int32 major = 1;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major(), output);
  }

  // optional int32 minor = 2;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor(), output);
  }

  // optional int32 micro = 3;
  if (has_micro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->micro(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Device.OsVersion)
}

::google::protobuf::uint8* BidRequest_Device_OsVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Device.OsVersion)
  // optional int32 major = 1;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->major(), target);
  }

  // optional int32 minor = 2;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minor(), target);
  }

  // optional int32 micro = 3;
  if (has_micro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->micro(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Device.OsVersion)
  return target;
}

int BidRequest_Device_OsVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major());
    }

    // optional int32 minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor());
    }

    // optional int32 micro = 3;
    if (has_micro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->micro());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Device_OsVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Device_OsVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Device_OsVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Device_OsVersion::MergeFrom(const BidRequest_Device_OsVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_micro()) {
      set_micro(from.micro());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Device_OsVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Device_OsVersion::CopyFrom(const BidRequest_Device_OsVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Device_OsVersion::IsInitialized() const {

  return true;
}

void BidRequest_Device_OsVersion::Swap(BidRequest_Device_OsVersion* other) {
  if (other != this) {
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(micro_, other->micro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Device_OsVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Device_OsVersion_descriptor_;
  metadata.reflection = BidRequest_Device_OsVersion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Device::kDeviceTypeFieldNumber;
const int BidRequest_Device::kPlatformFieldNumber;
const int BidRequest_Device::kBrandFieldNumber;
const int BidRequest_Device::kModelFieldNumber;
const int BidRequest_Device::kOsVersionFieldNumber;
const int BidRequest_Device::kCarrierIdFieldNumber;
const int BidRequest_Device::kScreenWidthFieldNumber;
const int BidRequest_Device::kScreenHeightFieldNumber;
const int BidRequest_Device::kScreenPixelRatioMillisFieldNumber;
const int BidRequest_Device::kScreenOrientationFieldNumber;
const int BidRequest_Device::kHardwareVersionFieldNumber;
#endif  // !_MSC_VER

BidRequest_Device::BidRequest_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Device)
}

void BidRequest_Device::InitAsDefaultInstance() {
  os_version_ = const_cast< ::BidRequest_Device_OsVersion*>(&::BidRequest_Device_OsVersion::default_instance());
}

BidRequest_Device::BidRequest_Device(const BidRequest_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Device)
}

void BidRequest_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_type_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = NULL;
  carrier_id_ = GOOGLE_LONGLONG(0);
  screen_width_ = 0;
  screen_height_ = 0;
  screen_pixel_ratio_millis_ = 0;
  screen_orientation_ = 0;
  hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Device::~BidRequest_Device() {
  // @@protoc_insertion_point(destructor:BidRequest.Device)
  SharedDtor();
}

void BidRequest_Device::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_version_;
  }
  if (this != default_instance_) {
    delete os_version_;
  }
}

void BidRequest_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_descriptor_;
}

const BidRequest_Device& BidRequest_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Device* BidRequest_Device::default_instance_ = NULL;

BidRequest_Device* BidRequest_Device::New() const {
  return new BidRequest_Device;
}

void BidRequest_Device::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(device_type_, screen_width_);
    ZR_(carrier_id_, screen_height_);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != NULL) os_version_->::BidRequest_Device_OsVersion::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    screen_pixel_ratio_millis_ = 0;
    screen_orientation_ = 0;
    if (has_hardware_version()) {
      if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hardware_version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BidRequest.Device.DeviceType device_type = 1 [default = UNKNOWN_DEVICE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Device_DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::BidRequest_Device_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }

      // optional string platform = 2;
      case 2: {
        if (tag == 18) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_brand;
        break;
      }

      // optional string brand = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model;
        break;
      }

      // optional string model = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_os_version;
        break;
      }

      // optional .BidRequest.Device.OsVersion os_version = 5;
      case 5: {
        if (tag == 42) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_carrier_id;
        break;
      }

      // optional int64 carrier_id = 6;
      case 6: {
        if (tag == 48) {
         parse_carrier_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrier_id_)));
          set_has_carrier_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screen_width;
        break;
      }

      // optional int32 screen_width = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_screen_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_width_)));
          set_has_screen_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_screen_height;
        break;
      }

      // optional int32 screen_height = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_screen_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_height_)));
          set_has_screen_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_screen_pixel_ratio_millis;
        break;
      }

      // optional int32 screen_pixel_ratio_millis = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_screen_pixel_ratio_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_pixel_ratio_millis_)));
          set_has_screen_pixel_ratio_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_screen_orientation;
        break;
      }

      // optional .BidRequest.Device.ScreenOrientation screen_orientation = 10 [default = UNKNOWN_ORIENTATION];
      case 10: {
        if (tag == 80) {
         parse_screen_orientation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Device_ScreenOrientation_IsValid(value)) {
            set_screen_orientation(static_cast< ::BidRequest_Device_ScreenOrientation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_hardware_version;
        break;
      }

      // optional string hardware_version = 11;
      case 11: {
        if (tag == 90) {
         parse_hardware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware_version().data(), this->hardware_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hardware_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Device)
  return false;
#undef DO_
}

void BidRequest_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Device)
  // optional .BidRequest.Device.DeviceType device_type = 1 [default = UNKNOWN_DEVICE];
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_type(), output);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->platform(), output);
  }

  // optional string brand = 3 [default = ""];
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brand(), output);
  }

  // optional string model = 4 [default = ""];
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // optional .BidRequest.Device.OsVersion os_version = 5;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->os_version(), output);
  }

  // optional int64 carrier_id = 6;
  if (has_carrier_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->carrier_id(), output);
  }

  // optional int32 screen_width = 7 [default = 0];
  if (has_screen_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->screen_width(), output);
  }

  // optional int32 screen_height = 8 [default = 0];
  if (has_screen_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->screen_height(), output);
  }

  // optional int32 screen_pixel_ratio_millis = 9 [default = 0];
  if (has_screen_pixel_ratio_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->screen_pixel_ratio_millis(), output);
  }

  // optional .BidRequest.Device.ScreenOrientation screen_orientation = 10 [default = UNKNOWN_ORIENTATION];
  if (has_screen_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->screen_orientation(), output);
  }

  // optional string hardware_version = 11;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->hardware_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Device)
}

::google::protobuf::uint8* BidRequest_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Device)
  // optional .BidRequest.Device.DeviceType device_type = 1 [default = UNKNOWN_DEVICE];
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->device_type(), target);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }

  // optional string brand = 3 [default = ""];
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brand(), target);
  }

  // optional string model = 4 [default = ""];
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model(), target);
  }

  // optional .BidRequest.Device.OsVersion os_version = 5;
  if (has_os_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->os_version(), target);
  }

  // optional int64 carrier_id = 6;
  if (has_carrier_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->carrier_id(), target);
  }

  // optional int32 screen_width = 7 [default = 0];
  if (has_screen_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->screen_width(), target);
  }

  // optional int32 screen_height = 8 [default = 0];
  if (has_screen_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->screen_height(), target);
  }

  // optional int32 screen_pixel_ratio_millis = 9 [default = 0];
  if (has_screen_pixel_ratio_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->screen_pixel_ratio_millis(), target);
  }

  // optional .BidRequest.Device.ScreenOrientation screen_orientation = 10 [default = UNKNOWN_ORIENTATION];
  if (has_screen_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->screen_orientation(), target);
  }

  // optional string hardware_version = 11;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hardware_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Device)
  return target;
}

int BidRequest_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BidRequest.Device.DeviceType device_type = 1 [default = UNKNOWN_DEVICE];
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

    // optional string platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string brand = 3 [default = ""];
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 4 [default = ""];
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional .BidRequest.Device.OsVersion os_version = 5;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->os_version());
    }

    // optional int64 carrier_id = 6;
    if (has_carrier_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrier_id());
    }

    // optional int32 screen_width = 7 [default = 0];
    if (has_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_width());
    }

    // optional int32 screen_height = 8 [default = 0];
    if (has_screen_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 screen_pixel_ratio_millis = 9 [default = 0];
    if (has_screen_pixel_ratio_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_pixel_ratio_millis());
    }

    // optional .BidRequest.Device.ScreenOrientation screen_orientation = 10 [default = UNKNOWN_ORIENTATION];
    if (has_screen_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->screen_orientation());
    }

    // optional string hardware_version = 11;
    if (has_hardware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Device::MergeFrom(const BidRequest_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os_version()) {
      mutable_os_version()->::BidRequest_Device_OsVersion::MergeFrom(from.os_version());
    }
    if (from.has_carrier_id()) {
      set_carrier_id(from.carrier_id());
    }
    if (from.has_screen_width()) {
      set_screen_width(from.screen_width());
    }
    if (from.has_screen_height()) {
      set_screen_height(from.screen_height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_screen_pixel_ratio_millis()) {
      set_screen_pixel_ratio_millis(from.screen_pixel_ratio_millis());
    }
    if (from.has_screen_orientation()) {
      set_screen_orientation(from.screen_orientation());
    }
    if (from.has_hardware_version()) {
      set_hardware_version(from.hardware_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Device::CopyFrom(const BidRequest_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Device::IsInitialized() const {

  return true;
}

void BidRequest_Device::Swap(BidRequest_Device* other) {
  if (other != this) {
    std::swap(device_type_, other->device_type_);
    std::swap(platform_, other->platform_);
    std::swap(brand_, other->brand_);
    std::swap(model_, other->model_);
    std::swap(os_version_, other->os_version_);
    std::swap(carrier_id_, other->carrier_id_);
    std::swap(screen_width_, other->screen_width_);
    std::swap(screen_height_, other->screen_height_);
    std::swap(screen_pixel_ratio_millis_, other->screen_pixel_ratio_millis_);
    std::swap(screen_orientation_, other->screen_orientation_);
    std::swap(hardware_version_, other->hardware_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Device_descriptor_;
  metadata.reflection = BidRequest_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_KeyValue::kKeyFieldNumber;
const int BidRequest_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

BidRequest_KeyValue::BidRequest_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.KeyValue)
}

void BidRequest_KeyValue::InitAsDefaultInstance() {
}

BidRequest_KeyValue::BidRequest_KeyValue(const BidRequest_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.KeyValue)
}

void BidRequest_KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_KeyValue::~BidRequest_KeyValue() {
  // @@protoc_insertion_point(destructor:BidRequest.KeyValue)
  SharedDtor();
}

void BidRequest_KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_KeyValue_descriptor_;
}

const BidRequest_KeyValue& BidRequest_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_KeyValue* BidRequest_KeyValue::default_instance_ = NULL;

BidRequest_KeyValue* BidRequest_KeyValue::New() const {
  return new BidRequest_KeyValue;
}

void BidRequest_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.KeyValue)
  return false;
#undef DO_
}

void BidRequest_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.KeyValue)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.KeyValue)
}

::google::protobuf::uint8* BidRequest_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.KeyValue)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.KeyValue)
  return target;
}

int BidRequest_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_KeyValue::MergeFrom(const BidRequest_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_KeyValue::CopyFrom(const BidRequest_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_KeyValue::IsInitialized() const {

  return true;
}

void BidRequest_KeyValue::Swap(BidRequest_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_KeyValue_descriptor_;
  metadata.reflection = BidRequest_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileDeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileDeviceType_descriptor_;
}
bool BidRequest_Mobile_MobileDeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::UNKNOWN;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::HIGHEND_PHONE;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::TABLET;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::MobileDeviceType_MIN;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::MobileDeviceType_MAX;
const int BidRequest_Mobile::MobileDeviceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_ScreenOrientation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_ScreenOrientation_descriptor_;
}
bool BidRequest_Mobile_ScreenOrientation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::SCREEN_ORIENTATION_UNKNOWN;
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::SCREEN_ORIENTATION_PORTRAIT;
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::SCREEN_ORIENTATION_LANDSCAPE;
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::ScreenOrientation_MIN;
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::ScreenOrientation_MAX;
const int BidRequest_Mobile::ScreenOrientation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMajorFieldNumber;
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMinorFieldNumber;
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMicroFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_DeviceOsVersion::BidRequest_Mobile_DeviceOsVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Mobile.DeviceOsVersion)
}

void BidRequest_Mobile_DeviceOsVersion::InitAsDefaultInstance() {
}

BidRequest_Mobile_DeviceOsVersion::BidRequest_Mobile_DeviceOsVersion(const BidRequest_Mobile_DeviceOsVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Mobile.DeviceOsVersion)
}

void BidRequest_Mobile_DeviceOsVersion::SharedCtor() {
  _cached_size_ = 0;
  os_version_major_ = 0;
  os_version_minor_ = 0;
  os_version_micro_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_DeviceOsVersion::~BidRequest_Mobile_DeviceOsVersion() {
  // @@protoc_insertion_point(destructor:BidRequest.Mobile.DeviceOsVersion)
  SharedDtor();
}

void BidRequest_Mobile_DeviceOsVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_DeviceOsVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_DeviceOsVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_DeviceOsVersion_descriptor_;
}

const BidRequest_Mobile_DeviceOsVersion& BidRequest_Mobile_DeviceOsVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile_DeviceOsVersion::default_instance_ = NULL;

BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile_DeviceOsVersion::New() const {
  return new BidRequest_Mobile_DeviceOsVersion;
}

void BidRequest_Mobile_DeviceOsVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile_DeviceOsVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(os_version_major_, os_version_micro_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_DeviceOsVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Mobile.DeviceOsVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 os_version_major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_major_)));
          set_has_os_version_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_os_version_minor;
        break;
      }

      // optional int32 os_version_minor = 2;
      case 2: {
        if (tag == 16) {
         parse_os_version_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_minor_)));
          set_has_os_version_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_os_version_micro;
        break;
      }

      // optional int32 os_version_micro = 3;
      case 3: {
        if (tag == 24) {
         parse_os_version_micro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_micro_)));
          set_has_os_version_micro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Mobile.DeviceOsVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Mobile.DeviceOsVersion)
  return false;
#undef DO_
}

void BidRequest_Mobile_DeviceOsVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Mobile.DeviceOsVersion)
  // optional int32 os_version_major = 1;
  if (has_os_version_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->os_version_major(), output);
  }

  // optional int32 os_version_minor = 2;
  if (has_os_version_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->os_version_minor(), output);
  }

  // optional int32 os_version_micro = 3;
  if (has_os_version_micro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->os_version_micro(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Mobile.DeviceOsVersion)
}

::google::protobuf::uint8* BidRequest_Mobile_DeviceOsVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Mobile.DeviceOsVersion)
  // optional int32 os_version_major = 1;
  if (has_os_version_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->os_version_major(), target);
  }

  // optional int32 os_version_minor = 2;
  if (has_os_version_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->os_version_minor(), target);
  }

  // optional int32 os_version_micro = 3;
  if (has_os_version_micro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->os_version_micro(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Mobile.DeviceOsVersion)
  return target;
}

int BidRequest_Mobile_DeviceOsVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 os_version_major = 1;
    if (has_os_version_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_major());
    }

    // optional int32 os_version_minor = 2;
    if (has_os_version_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_minor());
    }

    // optional int32 os_version_micro = 3;
    if (has_os_version_micro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_micro());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_DeviceOsVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_DeviceOsVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_DeviceOsVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_DeviceOsVersion::MergeFrom(const BidRequest_Mobile_DeviceOsVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os_version_major()) {
      set_os_version_major(from.os_version_major());
    }
    if (from.has_os_version_minor()) {
      set_os_version_minor(from.os_version_minor());
    }
    if (from.has_os_version_micro()) {
      set_os_version_micro(from.os_version_micro());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_DeviceOsVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_DeviceOsVersion::CopyFrom(const BidRequest_Mobile_DeviceOsVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_DeviceOsVersion::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_DeviceOsVersion::Swap(BidRequest_Mobile_DeviceOsVersion* other) {
  if (other != this) {
    std::swap(os_version_major_, other->os_version_major_);
    std::swap(os_version_minor_, other->os_version_minor_);
    std::swap(os_version_micro_, other->os_version_micro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_DeviceOsVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_DeviceOsVersion_descriptor_;
  metadata.reflection = BidRequest_Mobile_DeviceOsVersion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile::kIsAppFieldNumber;
const int BidRequest_Mobile::kAppIdFieldNumber;
const int BidRequest_Mobile::kIsInterstitialRequestFieldNumber;
const int BidRequest_Mobile::kAppCategoryIdsFieldNumber;
const int BidRequest_Mobile::kIsMobileWebOptimizedFieldNumber;
const int BidRequest_Mobile::kEncryptedAdvertisingIdFieldNumber;
const int BidRequest_Mobile::kAdvertisingIdFieldNumber;
const int BidRequest_Mobile::kEncryptedHashedIdfaFieldNumber;
const int BidRequest_Mobile::kHashedIdfaFieldNumber;
const int BidRequest_Mobile::kConstrainedUsageEncryptedAdvertisingIdFieldNumber;
const int BidRequest_Mobile::kConstrainedUsageAdvertisingIdFieldNumber;
const int BidRequest_Mobile::kConstrainedUsageEncryptedHashedIdfaFieldNumber;
const int BidRequest_Mobile::kConstrainedUsageHashedIdfaFieldNumber;
const int BidRequest_Mobile::kAppNameFieldNumber;
const int BidRequest_Mobile::kAppRatingFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDAppNameFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDCompanyNameFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDPlatformFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDCarrierNameFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDCarrierCountryFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDMobileDeviceTypeFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDScreenOrientationFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDBrandFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDModelFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDOsVersionFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDScreenWidthFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDScreenHeightFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDCarrierIdFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDDevicePixelRatioMillisFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile::BidRequest_Mobile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Mobile)
}

void BidRequest_Mobile::InitAsDefaultInstance() {
  deprecated_os_version_ = const_cast< ::BidRequest_Mobile_DeviceOsVersion*>(&::BidRequest_Mobile_DeviceOsVersion::default_instance());
}

BidRequest_Mobile::BidRequest_Mobile(const BidRequest_Mobile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Mobile)
}

void BidRequest_Mobile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_app_ = false;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_interstitial_request_ = false;
  is_mobile_web_optimized_ = false;
  encrypted_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constrained_usage_encrypted_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constrained_usage_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constrained_usage_encrypted_hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constrained_usage_hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_rating_ = 0;
  deprecated_app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_carrier_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_carrier_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_mobile_device_type_ = 0;
  deprecated_screen_orientation_ = 0;
  deprecated_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_os_version_ = NULL;
  deprecated_screen_width_ = 0;
  deprecated_screen_height_ = 0;
  deprecated_carrier_id_ = GOOGLE_LONGLONG(0);
  deprecated_device_pixel_ratio_millis_ = 1000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile::~BidRequest_Mobile() {
  // @@protoc_insertion_point(destructor:BidRequest.Mobile)
  SharedDtor();
}

void BidRequest_Mobile::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_id_;
  }
  if (encrypted_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypted_advertising_id_;
  }
  if (advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete advertising_id_;
  }
  if (encrypted_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypted_hashed_idfa_;
  }
  if (hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hashed_idfa_;
  }
  if (constrained_usage_encrypted_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_encrypted_advertising_id_;
  }
  if (constrained_usage_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_advertising_id_;
  }
  if (constrained_usage_encrypted_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_encrypted_hashed_idfa_;
  }
  if (constrained_usage_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_hashed_idfa_;
  }
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (deprecated_app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_app_name_;
  }
  if (deprecated_company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_company_name_;
  }
  if (deprecated_platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_platform_;
  }
  if (deprecated_carrier_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_carrier_name_;
  }
  if (deprecated_carrier_country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_carrier_country_;
  }
  if (deprecated_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_brand_;
  }
  if (deprecated_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_model_;
  }
  if (this != default_instance_) {
    delete deprecated_os_version_;
  }
}

void BidRequest_Mobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_descriptor_;
}

const BidRequest_Mobile& BidRequest_Mobile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile* BidRequest_Mobile::default_instance_ = NULL;

BidRequest_Mobile* BidRequest_Mobile::New() const {
  return new BidRequest_Mobile;
}

void BidRequest_Mobile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(is_app_, is_mobile_web_optimized_);
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_id_->clear();
      }
    }
    if (has_encrypted_advertising_id()) {
      if (encrypted_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypted_advertising_id_->clear();
      }
    }
    if (has_advertising_id()) {
      if (advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        advertising_id_->clear();
      }
    }
    if (has_encrypted_hashed_idfa()) {
      if (encrypted_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypted_hashed_idfa_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_hashed_idfa()) {
      if (hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hashed_idfa_->clear();
      }
    }
    if (has_constrained_usage_encrypted_advertising_id()) {
      if (constrained_usage_encrypted_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        constrained_usage_encrypted_advertising_id_->clear();
      }
    }
    if (has_constrained_usage_advertising_id()) {
      if (constrained_usage_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        constrained_usage_advertising_id_->clear();
      }
    }
    if (has_constrained_usage_encrypted_hashed_idfa()) {
      if (constrained_usage_encrypted_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        constrained_usage_encrypted_hashed_idfa_->clear();
      }
    }
    if (has_constrained_usage_hashed_idfa()) {
      if (constrained_usage_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        constrained_usage_hashed_idfa_->clear();
      }
    }
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_name_->clear();
      }
    }
    app_rating_ = 0;
    if (has_deprecated_app_name()) {
      if (deprecated_app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_app_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(deprecated_mobile_device_type_, deprecated_screen_orientation_);
    if (has_deprecated_company_name()) {
      if (deprecated_company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_company_name_->clear();
      }
    }
    if (has_deprecated_platform()) {
      if (deprecated_platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_platform_->clear();
      }
    }
    if (has_deprecated_carrier_name()) {
      if (deprecated_carrier_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_carrier_name_->clear();
      }
    }
    if (has_deprecated_carrier_country()) {
      if (deprecated_carrier_country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_carrier_country_->clear();
      }
    }
    if (has_deprecated_brand()) {
      if (deprecated_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_brand_->clear();
      }
    }
    if (has_deprecated_model()) {
      if (deprecated_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_model_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 520093696) {
    ZR_(deprecated_screen_width_, deprecated_carrier_id_);
    if (has_deprecated_os_version()) {
      if (deprecated_os_version_ != NULL) deprecated_os_version_->::BidRequest_Mobile_DeviceOsVersion::Clear();
    }
    deprecated_device_pixel_ratio_millis_ = 1000;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  app_category_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Mobile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DEPRECATED_app_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_app_name().data(), this->deprecated_app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DEPRECATED_company_name;
        break;
      }

      // optional string DEPRECATED_company_name = 2;
      case 2: {
        if (tag == 18) {
         parse_DEPRECATED_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_company_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_company_name().data(), this->deprecated_company_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_company_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DEPRECATED_platform;
        break;
      }

      // optional string DEPRECATED_platform = 3;
      case 3: {
        if (tag == 26) {
         parse_DEPRECATED_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_platform().data(), this->deprecated_platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DEPRECATED_carrier_name;
        break;
      }

      // optional string DEPRECATED_carrier_name = 4;
      case 4: {
        if (tag == 34) {
         parse_DEPRECATED_carrier_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_carrier_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_carrier_name().data(), this->deprecated_carrier_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_carrier_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DEPRECATED_carrier_country;
        break;
      }

      // optional string DEPRECATED_carrier_country = 5;
      case 5: {
        if (tag == 42) {
         parse_DEPRECATED_carrier_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_carrier_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_carrier_country().data(), this->deprecated_carrier_country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_carrier_country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_app_id;
        break;
      }

      // optional string app_id = 6;
      case 6: {
        if (tag == 50) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_app;
        break;
      }

      // optional bool is_app = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_is_app:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_app_)));
          set_has_is_app();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DEPRECATED_mobile_device_type;
        break;
      }

      // optional .BidRequest.Mobile.MobileDeviceType DEPRECATED_mobile_device_type = 8 [default = UNKNOWN];
      case 8: {
        if (tag == 64) {
         parse_DEPRECATED_mobile_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Mobile_MobileDeviceType_IsValid(value)) {
            set_deprecated_mobile_device_type(static_cast< ::BidRequest_Mobile_MobileDeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_DEPRECATED_screen_orientation;
        break;
      }

      // optional int32 DEPRECATED_screen_orientation = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_DEPRECATED_screen_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_screen_orientation_)));
          set_has_deprecated_screen_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_interstitial_request;
        break;
      }

      // optional bool is_interstitial_request = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_is_interstitial_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_interstitial_request_)));
          set_has_is_interstitial_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_app_category_ids;
        break;
      }

      // repeated int32 app_category_ids = 11;
      case 11: {
        if (tag == 88) {
         parse_app_category_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_app_category_ids())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_app_category_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_app_category_ids;
        if (input->ExpectTag(98)) goto parse_DEPRECATED_brand;
        break;
      }

      // optional string DEPRECATED_brand = 12;
      case 12: {
        if (tag == 98) {
         parse_DEPRECATED_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_brand().data(), this->deprecated_brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_DEPRECATED_model;
        break;
      }

      // optional string DEPRECATED_model = 13;
      case 13: {
        if (tag == 106) {
         parse_DEPRECATED_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_model().data(), this->deprecated_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_DEPRECATED_os_version;
        break;
      }

      // optional .BidRequest.Mobile.DeviceOsVersion DEPRECATED_os_version = 14;
      case 14: {
        if (tag == 114) {
         parse_DEPRECATED_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_DEPRECATED_screen_width;
        break;
      }

      // optional int32 DEPRECATED_screen_width = 15;
      case 15: {
        if (tag == 120) {
         parse_DEPRECATED_screen_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_screen_width_)));
          set_has_deprecated_screen_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_DEPRECATED_screen_height;
        break;
      }

      // optional int32 DEPRECATED_screen_height = 16;
      case 16: {
        if (tag == 128) {
         parse_DEPRECATED_screen_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_screen_height_)));
          set_has_deprecated_screen_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_is_mobile_web_optimized;
        break;
      }

      // optional bool is_mobile_web_optimized = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_is_mobile_web_optimized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mobile_web_optimized_)));
          set_has_is_mobile_web_optimized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_DEPRECATED_carrier_id;
        break;
      }

      // optional int64 DEPRECATED_carrier_id = 18;
      case 18: {
        if (tag == 144) {
         parse_DEPRECATED_carrier_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_carrier_id_)));
          set_has_deprecated_carrier_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_DEPRECATED_device_pixel_ratio_millis;
        break;
      }

      // optional int32 DEPRECATED_device_pixel_ratio_millis = 19 [default = 1000];
      case 19: {
        if (tag == 152) {
         parse_DEPRECATED_device_pixel_ratio_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_device_pixel_ratio_millis_)));
          set_has_deprecated_device_pixel_ratio_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_encrypted_advertising_id;
        break;
      }

      // optional bytes encrypted_advertising_id = 20;
      case 20: {
        if (tag == 162) {
         parse_encrypted_advertising_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_advertising_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_encrypted_hashed_idfa;
        break;
      }

      // optional bytes encrypted_hashed_idfa = 21;
      case 21: {
        if (tag == 170) {
         parse_encrypted_hashed_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_hashed_idfa()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_constrained_usage_encrypted_advertising_id;
        break;
      }

      // optional bytes constrained_usage_encrypted_advertising_id = 22;
      case 22: {
        if (tag == 178) {
         parse_constrained_usage_encrypted_advertising_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_constrained_usage_encrypted_advertising_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_constrained_usage_encrypted_hashed_idfa;
        break;
      }

      // optional bytes constrained_usage_encrypted_hashed_idfa = 23;
      case 23: {
        if (tag == 186) {
         parse_constrained_usage_encrypted_hashed_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_constrained_usage_encrypted_hashed_idfa()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_app_name;
        break;
      }

      // optional string app_name = 24;
      case 24: {
        if (tag == 194) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_app_rating;
        break;
      }

      // optional float app_rating = 25;
      case 25: {
        if (tag == 205) {
         parse_app_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &app_rating_)));
          set_has_app_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_advertising_id;
        break;
      }

      // optional bytes advertising_id = 27;
      case 27: {
        if (tag == 218) {
         parse_advertising_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_advertising_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_hashed_idfa;
        break;
      }

      // optional bytes hashed_idfa = 28;
      case 28: {
        if (tag == 226) {
         parse_hashed_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_idfa()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_constrained_usage_advertising_id;
        break;
      }

      // optional bytes constrained_usage_advertising_id = 29;
      case 29: {
        if (tag == 234) {
         parse_constrained_usage_advertising_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_constrained_usage_advertising_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_constrained_usage_hashed_idfa;
        break;
      }

      // optional bytes constrained_usage_hashed_idfa = 30;
      case 30: {
        if (tag == 242) {
         parse_constrained_usage_hashed_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_constrained_usage_hashed_idfa()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Mobile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Mobile)
  return false;
#undef DO_
}

void BidRequest_Mobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Mobile)
  // optional string DEPRECATED_app_name = 1;
  if (has_deprecated_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_app_name().data(), this->deprecated_app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deprecated_app_name(), output);
  }

  // optional string DEPRECATED_company_name = 2;
  if (has_deprecated_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_company_name().data(), this->deprecated_company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_company_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deprecated_company_name(), output);
  }

  // optional string DEPRECATED_platform = 3;
  if (has_deprecated_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_platform().data(), this->deprecated_platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deprecated_platform(), output);
  }

  // optional string DEPRECATED_carrier_name = 4;
  if (has_deprecated_carrier_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_carrier_name().data(), this->deprecated_carrier_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_carrier_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deprecated_carrier_name(), output);
  }

  // optional string DEPRECATED_carrier_country = 5;
  if (has_deprecated_carrier_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_carrier_country().data(), this->deprecated_carrier_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_carrier_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->deprecated_carrier_country(), output);
  }

  // optional string app_id = 6;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->app_id(), output);
  }

  // optional bool is_app = 7 [default = false];
  if (has_is_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_app(), output);
  }

  // optional .BidRequest.Mobile.MobileDeviceType DEPRECATED_mobile_device_type = 8 [default = UNKNOWN];
  if (has_deprecated_mobile_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->deprecated_mobile_device_type(), output);
  }

  // optional int32 DEPRECATED_screen_orientation = 9 [default = 0];
  if (has_deprecated_screen_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->deprecated_screen_orientation(), output);
  }

  // optional bool is_interstitial_request = 10 [default = false];
  if (has_is_interstitial_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_interstitial_request(), output);
  }

  // repeated int32 app_category_ids = 11;
  for (int i = 0; i < this->app_category_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->app_category_ids(i), output);
  }

  // optional string DEPRECATED_brand = 12;
  if (has_deprecated_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_brand().data(), this->deprecated_brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->deprecated_brand(), output);
  }

  // optional string DEPRECATED_model = 13;
  if (has_deprecated_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_model().data(), this->deprecated_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->deprecated_model(), output);
  }

  // optional .BidRequest.Mobile.DeviceOsVersion DEPRECATED_os_version = 14;
  if (has_deprecated_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->deprecated_os_version(), output);
  }

  // optional int32 DEPRECATED_screen_width = 15;
  if (has_deprecated_screen_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->deprecated_screen_width(), output);
  }

  // optional int32 DEPRECATED_screen_height = 16;
  if (has_deprecated_screen_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->deprecated_screen_height(), output);
  }

  // optional bool is_mobile_web_optimized = 17 [default = false];
  if (has_is_mobile_web_optimized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_mobile_web_optimized(), output);
  }

  // optional int64 DEPRECATED_carrier_id = 18;
  if (has_deprecated_carrier_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->deprecated_carrier_id(), output);
  }

  // optional int32 DEPRECATED_device_pixel_ratio_millis = 19 [default = 1000];
  if (has_deprecated_device_pixel_ratio_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->deprecated_device_pixel_ratio_millis(), output);
  }

  // optional bytes encrypted_advertising_id = 20;
  if (has_encrypted_advertising_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->encrypted_advertising_id(), output);
  }

  // optional bytes encrypted_hashed_idfa = 21;
  if (has_encrypted_hashed_idfa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->encrypted_hashed_idfa(), output);
  }

  // optional bytes constrained_usage_encrypted_advertising_id = 22;
  if (has_constrained_usage_encrypted_advertising_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->constrained_usage_encrypted_advertising_id(), output);
  }

  // optional bytes constrained_usage_encrypted_hashed_idfa = 23;
  if (has_constrained_usage_encrypted_hashed_idfa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->constrained_usage_encrypted_hashed_idfa(), output);
  }

  // optional string app_name = 24;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->app_name(), output);
  }

  // optional float app_rating = 25;
  if (has_app_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->app_rating(), output);
  }

  // optional bytes advertising_id = 27;
  if (has_advertising_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      27, this->advertising_id(), output);
  }

  // optional bytes hashed_idfa = 28;
  if (has_hashed_idfa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      28, this->hashed_idfa(), output);
  }

  // optional bytes constrained_usage_advertising_id = 29;
  if (has_constrained_usage_advertising_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      29, this->constrained_usage_advertising_id(), output);
  }

  // optional bytes constrained_usage_hashed_idfa = 30;
  if (has_constrained_usage_hashed_idfa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->constrained_usage_hashed_idfa(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Mobile)
}

::google::protobuf::uint8* BidRequest_Mobile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Mobile)
  // optional string DEPRECATED_app_name = 1;
  if (has_deprecated_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_app_name().data(), this->deprecated_app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deprecated_app_name(), target);
  }

  // optional string DEPRECATED_company_name = 2;
  if (has_deprecated_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_company_name().data(), this->deprecated_company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_company_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deprecated_company_name(), target);
  }

  // optional string DEPRECATED_platform = 3;
  if (has_deprecated_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_platform().data(), this->deprecated_platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deprecated_platform(), target);
  }

  // optional string DEPRECATED_carrier_name = 4;
  if (has_deprecated_carrier_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_carrier_name().data(), this->deprecated_carrier_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_carrier_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deprecated_carrier_name(), target);
  }

  // optional string DEPRECATED_carrier_country = 5;
  if (has_deprecated_carrier_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_carrier_country().data(), this->deprecated_carrier_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_carrier_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deprecated_carrier_country(), target);
  }

  // optional string app_id = 6;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->app_id(), target);
  }

  // optional bool is_app = 7 [default = false];
  if (has_is_app()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_app(), target);
  }

  // optional .BidRequest.Mobile.MobileDeviceType DEPRECATED_mobile_device_type = 8 [default = UNKNOWN];
  if (has_deprecated_mobile_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->deprecated_mobile_device_type(), target);
  }

  // optional int32 DEPRECATED_screen_orientation = 9 [default = 0];
  if (has_deprecated_screen_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->deprecated_screen_orientation(), target);
  }

  // optional bool is_interstitial_request = 10 [default = false];
  if (has_is_interstitial_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_interstitial_request(), target);
  }

  // repeated int32 app_category_ids = 11;
  for (int i = 0; i < this->app_category_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->app_category_ids(i), target);
  }

  // optional string DEPRECATED_brand = 12;
  if (has_deprecated_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_brand().data(), this->deprecated_brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->deprecated_brand(), target);
  }

  // optional string DEPRECATED_model = 13;
  if (has_deprecated_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_model().data(), this->deprecated_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->deprecated_model(), target);
  }

  // optional .BidRequest.Mobile.DeviceOsVersion DEPRECATED_os_version = 14;
  if (has_deprecated_os_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->deprecated_os_version(), target);
  }

  // optional int32 DEPRECATED_screen_width = 15;
  if (has_deprecated_screen_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->deprecated_screen_width(), target);
  }

  // optional int32 DEPRECATED_screen_height = 16;
  if (has_deprecated_screen_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->deprecated_screen_height(), target);
  }

  // optional bool is_mobile_web_optimized = 17 [default = false];
  if (has_is_mobile_web_optimized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_mobile_web_optimized(), target);
  }

  // optional int64 DEPRECATED_carrier_id = 18;
  if (has_deprecated_carrier_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->deprecated_carrier_id(), target);
  }

  // optional int32 DEPRECATED_device_pixel_ratio_millis = 19 [default = 1000];
  if (has_deprecated_device_pixel_ratio_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->deprecated_device_pixel_ratio_millis(), target);
  }

  // optional bytes encrypted_advertising_id = 20;
  if (has_encrypted_advertising_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->encrypted_advertising_id(), target);
  }

  // optional bytes encrypted_hashed_idfa = 21;
  if (has_encrypted_hashed_idfa()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->encrypted_hashed_idfa(), target);
  }

  // optional bytes constrained_usage_encrypted_advertising_id = 22;
  if (has_constrained_usage_encrypted_advertising_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->constrained_usage_encrypted_advertising_id(), target);
  }

  // optional bytes constrained_usage_encrypted_hashed_idfa = 23;
  if (has_constrained_usage_encrypted_hashed_idfa()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->constrained_usage_encrypted_hashed_idfa(), target);
  }

  // optional string app_name = 24;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->app_name(), target);
  }

  // optional float app_rating = 25;
  if (has_app_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->app_rating(), target);
  }

  // optional bytes advertising_id = 27;
  if (has_advertising_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->advertising_id(), target);
  }

  // optional bytes hashed_idfa = 28;
  if (has_hashed_idfa()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        28, this->hashed_idfa(), target);
  }

  // optional bytes constrained_usage_advertising_id = 29;
  if (has_constrained_usage_advertising_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        29, this->constrained_usage_advertising_id(), target);
  }

  // optional bytes constrained_usage_hashed_idfa = 30;
  if (has_constrained_usage_hashed_idfa()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->constrained_usage_hashed_idfa(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Mobile)
  return target;
}

int BidRequest_Mobile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_app = 7 [default = false];
    if (has_is_app()) {
      total_size += 1 + 1;
    }

    // optional string app_id = 6;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional bool is_interstitial_request = 10 [default = false];
    if (has_is_interstitial_request()) {
      total_size += 1 + 1;
    }

    // optional bool is_mobile_web_optimized = 17 [default = false];
    if (has_is_mobile_web_optimized()) {
      total_size += 2 + 1;
    }

    // optional bytes encrypted_advertising_id = 20;
    if (has_encrypted_advertising_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_advertising_id());
    }

    // optional bytes advertising_id = 27;
    if (has_advertising_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->advertising_id());
    }

    // optional bytes encrypted_hashed_idfa = 21;
    if (has_encrypted_hashed_idfa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_hashed_idfa());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes hashed_idfa = 28;
    if (has_hashed_idfa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_idfa());
    }

    // optional bytes constrained_usage_encrypted_advertising_id = 22;
    if (has_constrained_usage_encrypted_advertising_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->constrained_usage_encrypted_advertising_id());
    }

    // optional bytes constrained_usage_advertising_id = 29;
    if (has_constrained_usage_advertising_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->constrained_usage_advertising_id());
    }

    // optional bytes constrained_usage_encrypted_hashed_idfa = 23;
    if (has_constrained_usage_encrypted_hashed_idfa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->constrained_usage_encrypted_hashed_idfa());
    }

    // optional bytes constrained_usage_hashed_idfa = 30;
    if (has_constrained_usage_hashed_idfa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->constrained_usage_hashed_idfa());
    }

    // optional string app_name = 24;
    if (has_app_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional float app_rating = 25;
    if (has_app_rating()) {
      total_size += 2 + 4;
    }

    // optional string DEPRECATED_app_name = 1;
    if (has_deprecated_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_app_name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string DEPRECATED_company_name = 2;
    if (has_deprecated_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_company_name());
    }

    // optional string DEPRECATED_platform = 3;
    if (has_deprecated_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_platform());
    }

    // optional string DEPRECATED_carrier_name = 4;
    if (has_deprecated_carrier_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_carrier_name());
    }

    // optional string DEPRECATED_carrier_country = 5;
    if (has_deprecated_carrier_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_carrier_country());
    }

    // optional .BidRequest.Mobile.MobileDeviceType DEPRECATED_mobile_device_type = 8 [default = UNKNOWN];
    if (has_deprecated_mobile_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->deprecated_mobile_device_type());
    }

    // optional int32 DEPRECATED_screen_orientation = 9 [default = 0];
    if (has_deprecated_screen_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_screen_orientation());
    }

    // optional string DEPRECATED_brand = 12;
    if (has_deprecated_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_brand());
    }

    // optional string DEPRECATED_model = 13;
    if (has_deprecated_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_model());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .BidRequest.Mobile.DeviceOsVersion DEPRECATED_os_version = 14;
    if (has_deprecated_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_os_version());
    }

    // optional int32 DEPRECATED_screen_width = 15;
    if (has_deprecated_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_screen_width());
    }

    // optional int32 DEPRECATED_screen_height = 16;
    if (has_deprecated_screen_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_screen_height());
    }

    // optional int64 DEPRECATED_carrier_id = 18;
    if (has_deprecated_carrier_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_carrier_id());
    }

    // optional int32 DEPRECATED_device_pixel_ratio_millis = 19 [default = 1000];
    if (has_deprecated_device_pixel_ratio_millis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_device_pixel_ratio_millis());
    }

  }
  // repeated int32 app_category_ids = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_category_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->app_category_ids(i));
    }
    total_size += 1 * this->app_category_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile::MergeFrom(const BidRequest_Mobile& from) {
  GOOGLE_CHECK_NE(&from, this);
  app_category_ids_.MergeFrom(from.app_category_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_app()) {
      set_is_app(from.is_app());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_is_interstitial_request()) {
      set_is_interstitial_request(from.is_interstitial_request());
    }
    if (from.has_is_mobile_web_optimized()) {
      set_is_mobile_web_optimized(from.is_mobile_web_optimized());
    }
    if (from.has_encrypted_advertising_id()) {
      set_encrypted_advertising_id(from.encrypted_advertising_id());
    }
    if (from.has_advertising_id()) {
      set_advertising_id(from.advertising_id());
    }
    if (from.has_encrypted_hashed_idfa()) {
      set_encrypted_hashed_idfa(from.encrypted_hashed_idfa());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hashed_idfa()) {
      set_hashed_idfa(from.hashed_idfa());
    }
    if (from.has_constrained_usage_encrypted_advertising_id()) {
      set_constrained_usage_encrypted_advertising_id(from.constrained_usage_encrypted_advertising_id());
    }
    if (from.has_constrained_usage_advertising_id()) {
      set_constrained_usage_advertising_id(from.constrained_usage_advertising_id());
    }
    if (from.has_constrained_usage_encrypted_hashed_idfa()) {
      set_constrained_usage_encrypted_hashed_idfa(from.constrained_usage_encrypted_hashed_idfa());
    }
    if (from.has_constrained_usage_hashed_idfa()) {
      set_constrained_usage_hashed_idfa(from.constrained_usage_hashed_idfa());
    }
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_app_rating()) {
      set_app_rating(from.app_rating());
    }
    if (from.has_deprecated_app_name()) {
      set_deprecated_app_name(from.deprecated_app_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_deprecated_company_name()) {
      set_deprecated_company_name(from.deprecated_company_name());
    }
    if (from.has_deprecated_platform()) {
      set_deprecated_platform(from.deprecated_platform());
    }
    if (from.has_deprecated_carrier_name()) {
      set_deprecated_carrier_name(from.deprecated_carrier_name());
    }
    if (from.has_deprecated_carrier_country()) {
      set_deprecated_carrier_country(from.deprecated_carrier_country());
    }
    if (from.has_deprecated_mobile_device_type()) {
      set_deprecated_mobile_device_type(from.deprecated_mobile_device_type());
    }
    if (from.has_deprecated_screen_orientation()) {
      set_deprecated_screen_orientation(from.deprecated_screen_orientation());
    }
    if (from.has_deprecated_brand()) {
      set_deprecated_brand(from.deprecated_brand());
    }
    if (from.has_deprecated_model()) {
      set_deprecated_model(from.deprecated_model());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_deprecated_os_version()) {
      mutable_deprecated_os_version()->::BidRequest_Mobile_DeviceOsVersion::MergeFrom(from.deprecated_os_version());
    }
    if (from.has_deprecated_screen_width()) {
      set_deprecated_screen_width(from.deprecated_screen_width());
    }
    if (from.has_deprecated_screen_height()) {
      set_deprecated_screen_height(from.deprecated_screen_height());
    }
    if (from.has_deprecated_carrier_id()) {
      set_deprecated_carrier_id(from.deprecated_carrier_id());
    }
    if (from.has_deprecated_device_pixel_ratio_millis()) {
      set_deprecated_device_pixel_ratio_millis(from.deprecated_device_pixel_ratio_millis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile::CopyFrom(const BidRequest_Mobile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile::IsInitialized() const {

  return true;
}

void BidRequest_Mobile::Swap(BidRequest_Mobile* other) {
  if (other != this) {
    std::swap(is_app_, other->is_app_);
    std::swap(app_id_, other->app_id_);
    std::swap(is_interstitial_request_, other->is_interstitial_request_);
    app_category_ids_.Swap(&other->app_category_ids_);
    std::swap(is_mobile_web_optimized_, other->is_mobile_web_optimized_);
    std::swap(encrypted_advertising_id_, other->encrypted_advertising_id_);
    std::swap(advertising_id_, other->advertising_id_);
    std::swap(encrypted_hashed_idfa_, other->encrypted_hashed_idfa_);
    std::swap(hashed_idfa_, other->hashed_idfa_);
    std::swap(constrained_usage_encrypted_advertising_id_, other->constrained_usage_encrypted_advertising_id_);
    std::swap(constrained_usage_advertising_id_, other->constrained_usage_advertising_id_);
    std::swap(constrained_usage_encrypted_hashed_idfa_, other->constrained_usage_encrypted_hashed_idfa_);
    std::swap(constrained_usage_hashed_idfa_, other->constrained_usage_hashed_idfa_);
    std::swap(app_name_, other->app_name_);
    std::swap(app_rating_, other->app_rating_);
    std::swap(deprecated_app_name_, other->deprecated_app_name_);
    std::swap(deprecated_company_name_, other->deprecated_company_name_);
    std::swap(deprecated_platform_, other->deprecated_platform_);
    std::swap(deprecated_carrier_name_, other->deprecated_carrier_name_);
    std::swap(deprecated_carrier_country_, other->deprecated_carrier_country_);
    std::swap(deprecated_mobile_device_type_, other->deprecated_mobile_device_type_);
    std::swap(deprecated_screen_orientation_, other->deprecated_screen_orientation_);
    std::swap(deprecated_brand_, other->deprecated_brand_);
    std::swap(deprecated_model_, other->deprecated_model_);
    std::swap(deprecated_os_version_, other->deprecated_os_version_);
    std::swap(deprecated_screen_width_, other->deprecated_screen_width_);
    std::swap(deprecated_screen_height_, other->deprecated_screen_height_);
    std::swap(deprecated_carrier_id_, other->deprecated_carrier_id_);
    std::swap(deprecated_device_pixel_ratio_millis_, other->deprecated_device_pixel_ratio_millis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_descriptor_;
  metadata.reflection = BidRequest_Mobile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Video_Placement_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_Placement_descriptor_;
}
bool BidRequest_Video_Placement_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Video_Placement BidRequest_Video::UNKNOWN_PLACEMENT;
const BidRequest_Video_Placement BidRequest_Video::INSTREAM;
const BidRequest_Video_Placement BidRequest_Video::INTERSTITIAL;
const BidRequest_Video_Placement BidRequest_Video::Placement_MIN;
const BidRequest_Video_Placement BidRequest_Video::Placement_MAX;
const int BidRequest_Video::Placement_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoPlaybackMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_VideoPlaybackMethod_descriptor_;
}
bool BidRequest_Video_VideoPlaybackMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Video_VideoPlaybackMethod BidRequest_Video::METHOD_UNKNOWN;
const BidRequest_Video_VideoPlaybackMethod BidRequest_Video::AUTO_PLAY_SOUND_ON;
const BidRequest_Video_VideoPlaybackMethod BidRequest_Video::AUTO_PLAY_SOUND_OFF;
const BidRequest_Video_VideoPlaybackMethod BidRequest_Video::CLICK_TO_PLAY;
const BidRequest_Video_VideoPlaybackMethod BidRequest_Video::VideoPlaybackMethod_MIN;
const BidRequest_Video_VideoPlaybackMethod BidRequest_Video::VideoPlaybackMethod_MAX;
const int BidRequest_Video::VideoPlaybackMethod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Video_SkippableBidRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_SkippableBidRequestType_descriptor_;
}
bool BidRequest_Video_SkippableBidRequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::ALLOW_SKIPPABLE;
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::REQUIRE_SKIPPABLE;
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::BLOCK_SKIPPABLE;
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::SkippableBidRequestType_MIN;
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::SkippableBidRequestType_MAX;
const int BidRequest_Video::SkippableBidRequestType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_VideoFormat_descriptor_;
}
bool BidRequest_Video_VideoFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_FLV;
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_MP4;
const BidRequest_Video_VideoFormat BidRequest_Video::YT_HOSTED;
const BidRequest_Video_VideoFormat BidRequest_Video::VPAID_FLASH;
const BidRequest_Video_VideoFormat BidRequest_Video::VPAID_JS;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MIN;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MAX;
const int BidRequest_Video::VideoFormat_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Video_EndCapSupport_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_EndCapSupport_descriptor_;
}
bool BidRequest_Video_EndCapSupport_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Video_EndCapSupport BidRequest_Video::END_CAP_NOT_ENABLED;
const BidRequest_Video_EndCapSupport BidRequest_Video::END_CAP_OPTIONAL;
const BidRequest_Video_EndCapSupport BidRequest_Video::END_CAP_FORBIDDEN;
const BidRequest_Video_EndCapSupport BidRequest_Video::END_CAP_REQUIRED;
const BidRequest_Video_EndCapSupport BidRequest_Video::EndCapSupport_MIN;
const BidRequest_Video_EndCapSupport BidRequest_Video::EndCapSupport_MAX;
const int BidRequest_Video::EndCapSupport_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Video_InventoryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_InventoryType_descriptor_;
}
bool BidRequest_Video_InventoryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Video_InventoryType BidRequest_Video::WEB_VIDEO;
const BidRequest_Video_InventoryType BidRequest_Video::GAMES;
const BidRequest_Video_InventoryType BidRequest_Video::MOBILE_INTERSTITIAL;
const BidRequest_Video_InventoryType BidRequest_Video::MOBILE_APP_VIDEO;
const BidRequest_Video_InventoryType BidRequest_Video::InventoryType_MIN;
const BidRequest_Video_InventoryType BidRequest_Video::InventoryType_MAX;
const int BidRequest_Video::InventoryType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Video_CompanionSlot_CreativeFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_CompanionSlot_CreativeFormat_descriptor_;
}
bool BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::IMAGE_CREATIVE;
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::FLASH_CREATIVE;
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::HTML_CREATIVE;
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::CreativeFormat_MIN;
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::CreativeFormat_MAX;
const int BidRequest_Video_CompanionSlot::CreativeFormat_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Video_CompanionSlot::kHeightFieldNumber;
const int BidRequest_Video_CompanionSlot::kWidthFieldNumber;
const int BidRequest_Video_CompanionSlot::kCreativeFormatFieldNumber;
#endif  // !_MSC_VER

BidRequest_Video_CompanionSlot::BidRequest_Video_CompanionSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Video.CompanionSlot)
}

void BidRequest_Video_CompanionSlot::InitAsDefaultInstance() {
}

BidRequest_Video_CompanionSlot::BidRequest_Video_CompanionSlot(const BidRequest_Video_CompanionSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Video.CompanionSlot)
}

void BidRequest_Video_CompanionSlot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video_CompanionSlot::~BidRequest_Video_CompanionSlot() {
  // @@protoc_insertion_point(destructor:BidRequest.Video.CompanionSlot)
  SharedDtor();
}

void BidRequest_Video_CompanionSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Video_CompanionSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video_CompanionSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_CompanionSlot_descriptor_;
}

const BidRequest_Video_CompanionSlot& BidRequest_Video_CompanionSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video_CompanionSlot* BidRequest_Video_CompanionSlot::default_instance_ = NULL;

BidRequest_Video_CompanionSlot* BidRequest_Video_CompanionSlot::New() const {
  return new BidRequest_Video_CompanionSlot;
}

void BidRequest_Video_CompanionSlot::Clear() {
  height_.Clear();
  width_.Clear();
  creative_format_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Video_CompanionSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Video.CompanionSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 height = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_height())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_height())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_width;
        break;
      }

      // repeated int32 width = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_width())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_width())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creative_format;
        break;
      }

      // repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
      case 3: {
        if (tag == 24) {
         parse_creative_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(value)) {
            add_creative_format(static_cast< ::BidRequest_Video_CompanionSlot_CreativeFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::BidRequest_Video_CompanionSlot_CreativeFormat_IsValid,
                 this->mutable_creative_format())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creative_format;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Video.CompanionSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Video.CompanionSlot)
  return false;
#undef DO_
}

void BidRequest_Video_CompanionSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Video.CompanionSlot)
  // repeated int32 height = 1 [packed = true];
  if (this->height_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_height_cached_byte_size_);
  }
  for (int i = 0; i < this->height_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->height(i), output);
  }

  // repeated int32 width = 2 [packed = true];
  if (this->width_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_width_cached_byte_size_);
  }
  for (int i = 0; i < this->width_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->width(i), output);
  }

  // repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
  for (int i = 0; i < this->creative_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->creative_format(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Video.CompanionSlot)
}

::google::protobuf::uint8* BidRequest_Video_CompanionSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Video.CompanionSlot)
  // repeated int32 height = 1 [packed = true];
  if (this->height_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _height_cached_byte_size_, target);
  }
  for (int i = 0; i < this->height_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->height(i), target);
  }

  // repeated int32 width = 2 [packed = true];
  if (this->width_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _width_cached_byte_size_, target);
  }
  for (int i = 0; i < this->width_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->width(i), target);
  }

  // repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
  for (int i = 0; i < this->creative_format_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->creative_format(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Video.CompanionSlot)
  return target;
}

int BidRequest_Video_CompanionSlot::ByteSize() const {
  int total_size = 0;

  // repeated int32 height = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->height_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->height(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _height_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 width = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->width_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->width(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _width_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_format_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->creative_format(i));
    }
    total_size += 1 * this->creative_format_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video_CompanionSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Video_CompanionSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Video_CompanionSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video_CompanionSlot::MergeFrom(const BidRequest_Video_CompanionSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  height_.MergeFrom(from.height_);
  width_.MergeFrom(from.width_);
  creative_format_.MergeFrom(from.creative_format_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Video_CompanionSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video_CompanionSlot::CopyFrom(const BidRequest_Video_CompanionSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video_CompanionSlot::IsInitialized() const {

  return true;
}

void BidRequest_Video_CompanionSlot::Swap(BidRequest_Video_CompanionSlot* other) {
  if (other != this) {
    height_.Swap(&other->height_);
    width_.Swap(&other->width_);
    creative_format_.Swap(&other->creative_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Video_CompanionSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_CompanionSlot_descriptor_;
  metadata.reflection = BidRequest_Video_CompanionSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Video_ContentAttributes::kTitleFieldNumber;
const int BidRequest_Video_ContentAttributes::kDurationSecondsFieldNumber;
const int BidRequest_Video_ContentAttributes::kKeywordsFieldNumber;
#endif  // !_MSC_VER

BidRequest_Video_ContentAttributes::BidRequest_Video_ContentAttributes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Video.ContentAttributes)
}

void BidRequest_Video_ContentAttributes::InitAsDefaultInstance() {
}

BidRequest_Video_ContentAttributes::BidRequest_Video_ContentAttributes(const BidRequest_Video_ContentAttributes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Video.ContentAttributes)
}

void BidRequest_Video_ContentAttributes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video_ContentAttributes::~BidRequest_Video_ContentAttributes() {
  // @@protoc_insertion_point(destructor:BidRequest.Video.ContentAttributes)
  SharedDtor();
}

void BidRequest_Video_ContentAttributes::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Video_ContentAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video_ContentAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_ContentAttributes_descriptor_;
}

const BidRequest_Video_ContentAttributes& BidRequest_Video_ContentAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video_ContentAttributes* BidRequest_Video_ContentAttributes::default_instance_ = NULL;

BidRequest_Video_ContentAttributes* BidRequest_Video_ContentAttributes::New() const {
  return new BidRequest_Video_ContentAttributes;
}

void BidRequest_Video_ContentAttributes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    duration_seconds_ = 0;
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Video_ContentAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Video.ContentAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration_seconds;
        break;
      }

      // optional int32 duration_seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_duration_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_seconds_)));
          set_has_duration_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 3;
      case 3: {
        if (tag == 26) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Video.ContentAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Video.ContentAttributes)
  return false;
#undef DO_
}

void BidRequest_Video_ContentAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Video.ContentAttributes)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional int32 duration_seconds = 2;
  if (has_duration_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration_seconds(), output);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keywords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Video.ContentAttributes)
}

::google::protobuf::uint8* BidRequest_Video_ContentAttributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Video.ContentAttributes)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional int32 duration_seconds = 2;
  if (has_duration_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration_seconds(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->keywords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Video.ContentAttributes)
  return target;
}

int BidRequest_Video_ContentAttributes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 duration_seconds = 2;
    if (has_duration_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration_seconds());
    }

  }
  // repeated string keywords = 3;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video_ContentAttributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Video_ContentAttributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Video_ContentAttributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video_ContentAttributes::MergeFrom(const BidRequest_Video_ContentAttributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_duration_seconds()) {
      set_duration_seconds(from.duration_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Video_ContentAttributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video_ContentAttributes::CopyFrom(const BidRequest_Video_ContentAttributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video_ContentAttributes::IsInitialized() const {

  return true;
}

void BidRequest_Video_ContentAttributes::Swap(BidRequest_Video_ContentAttributes* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(duration_seconds_, other->duration_seconds_);
    keywords_.Swap(&other->keywords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Video_ContentAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_ContentAttributes_descriptor_;
  metadata.reflection = BidRequest_Video_ContentAttributes_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Video::kPlacementFieldNumber;
const int BidRequest_Video::kDescriptionUrlFieldNumber;
const int BidRequest_Video::kIsEmbeddedOffsiteFieldNumber;
const int BidRequest_Video::kPlaybackMethodFieldNumber;
const int BidRequest_Video::kIsClickableFieldNumber;
const int BidRequest_Video::kVideoadStartDelayFieldNumber;
const int BidRequest_Video::kMaxAdDurationFieldNumber;
const int BidRequest_Video::kMinAdDurationFieldNumber;
const int BidRequest_Video::kMaxAdsInPodFieldNumber;
const int BidRequest_Video::kVideoAdSkippableFieldNumber;
const int BidRequest_Video::kSkippableMaxAdDurationFieldNumber;
const int BidRequest_Video::kAllowedVideoFormatsFieldNumber;
const int BidRequest_Video::kCompanionSlotFieldNumber;
const int BidRequest_Video::kEndCapSupportFieldNumber;
const int BidRequest_Video::kContentAttributesFieldNumber;
const int BidRequest_Video::kDEPRECATEDInventoryTypeFieldNumber;
#endif  // !_MSC_VER

BidRequest_Video::BidRequest_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Video)
}

void BidRequest_Video::InitAsDefaultInstance() {
  content_attributes_ = const_cast< ::BidRequest_Video_ContentAttributes*>(&::BidRequest_Video_ContentAttributes::default_instance());
}

BidRequest_Video::BidRequest_Video(const BidRequest_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Video)
}

void BidRequest_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  placement_ = 0;
  description_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_embedded_offsite_ = false;
  playback_method_ = 0;
  is_clickable_ = false;
  videoad_start_delay_ = 0;
  max_ad_duration_ = 0;
  min_ad_duration_ = 0;
  max_ads_in_pod_ = 0;
  video_ad_skippable_ = 0;
  skippable_max_ad_duration_ = 0;
  end_cap_support_ = 0;
  content_attributes_ = NULL;
  deprecated_inventory_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video::~BidRequest_Video() {
  // @@protoc_insertion_point(destructor:BidRequest.Video)
  SharedDtor();
}

void BidRequest_Video::SharedDtor() {
  if (description_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_url_;
  }
  if (this != default_instance_) {
    delete content_attributes_;
  }
}

void BidRequest_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_descriptor_;
}

const BidRequest_Video& BidRequest_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video* BidRequest_Video::default_instance_ = NULL;

BidRequest_Video* BidRequest_Video::New() const {
  return new BidRequest_Video;
}

void BidRequest_Video::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(placement_, min_ad_duration_);
    if (has_description_url()) {
      if (description_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 59136) {
    ZR_(max_ads_in_pod_, video_ad_skippable_);
    ZR_(skippable_max_ad_duration_, end_cap_support_);
    if (has_content_attributes()) {
      if (content_attributes_ != NULL) content_attributes_->::BidRequest_Video_ContentAttributes::Clear();
    }
    deprecated_inventory_type_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  allowed_video_formats_.Clear();
  companion_slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 videoad_start_delay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_start_delay_)));
          set_has_videoad_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_ad_duration;
        break;
      }

      // optional int32 max_ad_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_max_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ad_duration_)));
          set_has_max_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DEPRECATED_inventory_type;
        break;
      }

      // optional .BidRequest.Video.InventoryType DEPRECATED_inventory_type = 3 [default = WEB_VIDEO];
      case 3: {
        if (tag == 24) {
         parse_DEPRECATED_inventory_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_InventoryType_IsValid(value)) {
            set_deprecated_inventory_type(static_cast< ::BidRequest_Video_InventoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_video_ad_skippable;
        break;
      }

      // optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
      case 4: {
        if (tag == 32) {
         parse_video_ad_skippable:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_SkippableBidRequestType_IsValid(value)) {
            set_video_ad_skippable(static_cast< ::BidRequest_Video_SkippableBidRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skippable_max_ad_duration;
        break;
      }

      // optional int32 skippable_max_ad_duration = 5;
      case 5: {
        if (tag == 40) {
         parse_skippable_max_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skippable_max_ad_duration_)));
          set_has_skippable_max_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allowed_video_formats;
        break;
      }

      // repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
      case 6: {
        if (tag == 48) {
         parse_allowed_video_formats:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_VideoFormat_IsValid(value)) {
            add_allowed_video_formats(static_cast< ::BidRequest_Video_VideoFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::BidRequest_Video_VideoFormat_IsValid,
                 this->mutable_allowed_video_formats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allowed_video_formats;
        if (input->ExpectTag(58)) goto parse_companion_slot;
        break;
      }

      // repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
      case 7: {
        if (tag == 58) {
         parse_companion_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_companion_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_companion_slot;
        if (input->ExpectTag(64)) goto parse_min_ad_duration;
        break;
      }

      // optional int32 min_ad_duration = 8;
      case 8: {
        if (tag == 64) {
         parse_min_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_ad_duration_)));
          set_has_min_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_content_attributes;
        break;
      }

      // optional .BidRequest.Video.ContentAttributes content_attributes = 9;
      case 9: {
        if (tag == 74) {
         parse_content_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_description_url;
        break;
      }

      // optional string description_url = 10;
      case 10: {
        if (tag == 82) {
         parse_description_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description_url().data(), this->description_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_embedded_offsite;
        break;
      }

      // optional bool is_embedded_offsite = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_is_embedded_offsite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_embedded_offsite_)));
          set_has_is_embedded_offsite();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_max_ads_in_pod;
        break;
      }

      // optional int32 max_ads_in_pod = 12;
      case 12: {
        if (tag == 96) {
         parse_max_ads_in_pod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ads_in_pod_)));
          set_has_max_ads_in_pod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_end_cap_support;
        break;
      }

      // optional .BidRequest.Video.EndCapSupport end_cap_support = 13 [default = END_CAP_NOT_ENABLED];
      case 13: {
        if (tag == 104) {
         parse_end_cap_support:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_EndCapSupport_IsValid(value)) {
            set_end_cap_support(static_cast< ::BidRequest_Video_EndCapSupport >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_playback_method;
        break;
      }

      // optional .BidRequest.Video.VideoPlaybackMethod playback_method = 14 [default = METHOD_UNKNOWN];
      case 14: {
        if (tag == 112) {
         parse_playback_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_VideoPlaybackMethod_IsValid(value)) {
            set_playback_method(static_cast< ::BidRequest_Video_VideoPlaybackMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_clickable;
        break;
      }

      // optional bool is_clickable = 15;
      case 15: {
        if (tag == 120) {
         parse_is_clickable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_clickable_)));
          set_has_is_clickable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_placement;
        break;
      }

      // optional .BidRequest.Video.Placement placement = 16 [default = UNKNOWN_PLACEMENT];
      case 16: {
        if (tag == 128) {
         parse_placement:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_Placement_IsValid(value)) {
            set_placement(static_cast< ::BidRequest_Video_Placement >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Video)
  return false;
#undef DO_
}

void BidRequest_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Video)
  // optional int32 videoad_start_delay = 1;
  if (has_videoad_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->videoad_start_delay(), output);
  }

  // optional int32 max_ad_duration = 2;
  if (has_max_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_ad_duration(), output);
  }

  // optional .BidRequest.Video.InventoryType DEPRECATED_inventory_type = 3 [default = WEB_VIDEO];
  if (has_deprecated_inventory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->deprecated_inventory_type(), output);
  }

  // optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
  if (has_video_ad_skippable()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->video_ad_skippable(), output);
  }

  // optional int32 skippable_max_ad_duration = 5;
  if (has_skippable_max_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skippable_max_ad_duration(), output);
  }

  // repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
  for (int i = 0; i < this->allowed_video_formats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->allowed_video_formats(i), output);
  }

  // repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
  for (int i = 0; i < this->companion_slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->companion_slot(i), output);
  }

  // optional int32 min_ad_duration = 8;
  if (has_min_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->min_ad_duration(), output);
  }

  // optional .BidRequest.Video.ContentAttributes content_attributes = 9;
  if (has_content_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->content_attributes(), output);
  }

  // optional string description_url = 10;
  if (has_description_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description_url().data(), this->description_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->description_url(), output);
  }

  // optional bool is_embedded_offsite = 11 [default = false];
  if (has_is_embedded_offsite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_embedded_offsite(), output);
  }

  // optional int32 max_ads_in_pod = 12;
  if (has_max_ads_in_pod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->max_ads_in_pod(), output);
  }

  // optional .BidRequest.Video.EndCapSupport end_cap_support = 13 [default = END_CAP_NOT_ENABLED];
  if (has_end_cap_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->end_cap_support(), output);
  }

  // optional .BidRequest.Video.VideoPlaybackMethod playback_method = 14 [default = METHOD_UNKNOWN];
  if (has_playback_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->playback_method(), output);
  }

  // optional bool is_clickable = 15;
  if (has_is_clickable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_clickable(), output);
  }

  // optional .BidRequest.Video.Placement placement = 16 [default = UNKNOWN_PLACEMENT];
  if (has_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->placement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Video)
}

::google::protobuf::uint8* BidRequest_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Video)
  // optional int32 videoad_start_delay = 1;
  if (has_videoad_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->videoad_start_delay(), target);
  }

  // optional int32 max_ad_duration = 2;
  if (has_max_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_ad_duration(), target);
  }

  // optional .BidRequest.Video.InventoryType DEPRECATED_inventory_type = 3 [default = WEB_VIDEO];
  if (has_deprecated_inventory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->deprecated_inventory_type(), target);
  }

  // optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
  if (has_video_ad_skippable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->video_ad_skippable(), target);
  }

  // optional int32 skippable_max_ad_duration = 5;
  if (has_skippable_max_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skippable_max_ad_duration(), target);
  }

  // repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
  for (int i = 0; i < this->allowed_video_formats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->allowed_video_formats(i), target);
  }

  // repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
  for (int i = 0; i < this->companion_slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->companion_slot(i), target);
  }

  // optional int32 min_ad_duration = 8;
  if (has_min_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->min_ad_duration(), target);
  }

  // optional .BidRequest.Video.ContentAttributes content_attributes = 9;
  if (has_content_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->content_attributes(), target);
  }

  // optional string description_url = 10;
  if (has_description_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description_url().data(), this->description_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->description_url(), target);
  }

  // optional bool is_embedded_offsite = 11 [default = false];
  if (has_is_embedded_offsite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_embedded_offsite(), target);
  }

  // optional int32 max_ads_in_pod = 12;
  if (has_max_ads_in_pod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->max_ads_in_pod(), target);
  }

  // optional .BidRequest.Video.EndCapSupport end_cap_support = 13 [default = END_CAP_NOT_ENABLED];
  if (has_end_cap_support()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->end_cap_support(), target);
  }

  // optional .BidRequest.Video.VideoPlaybackMethod playback_method = 14 [default = METHOD_UNKNOWN];
  if (has_playback_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->playback_method(), target);
  }

  // optional bool is_clickable = 15;
  if (has_is_clickable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_clickable(), target);
  }

  // optional .BidRequest.Video.Placement placement = 16 [default = UNKNOWN_PLACEMENT];
  if (has_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->placement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Video)
  return target;
}

int BidRequest_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BidRequest.Video.Placement placement = 16 [default = UNKNOWN_PLACEMENT];
    if (has_placement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->placement());
    }

    // optional string description_url = 10;
    if (has_description_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description_url());
    }

    // optional bool is_embedded_offsite = 11 [default = false];
    if (has_is_embedded_offsite()) {
      total_size += 1 + 1;
    }

    // optional .BidRequest.Video.VideoPlaybackMethod playback_method = 14 [default = METHOD_UNKNOWN];
    if (has_playback_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->playback_method());
    }

    // optional bool is_clickable = 15;
    if (has_is_clickable()) {
      total_size += 1 + 1;
    }

    // optional int32 videoad_start_delay = 1;
    if (has_videoad_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_start_delay());
    }

    // optional int32 max_ad_duration = 2;
    if (has_max_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ad_duration());
    }

    // optional int32 min_ad_duration = 8;
    if (has_min_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_ad_duration());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_ads_in_pod = 12;
    if (has_max_ads_in_pod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ads_in_pod());
    }

    // optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
    if (has_video_ad_skippable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->video_ad_skippable());
    }

    // optional int32 skippable_max_ad_duration = 5;
    if (has_skippable_max_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skippable_max_ad_duration());
    }

    // optional .BidRequest.Video.EndCapSupport end_cap_support = 13 [default = END_CAP_NOT_ENABLED];
    if (has_end_cap_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->end_cap_support());
    }

    // optional .BidRequest.Video.ContentAttributes content_attributes = 9;
    if (has_content_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content_attributes());
    }

    // optional .BidRequest.Video.InventoryType DEPRECATED_inventory_type = 3 [default = WEB_VIDEO];
    if (has_deprecated_inventory_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->deprecated_inventory_type());
    }

  }
  // repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->allowed_video_formats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->allowed_video_formats(i));
    }
    total_size += 1 * this->allowed_video_formats_size() + data_size;
  }

  // repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
  total_size += 1 * this->companion_slot_size();
  for (int i = 0; i < this->companion_slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->companion_slot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video::MergeFrom(const BidRequest_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  allowed_video_formats_.MergeFrom(from.allowed_video_formats_);
  companion_slot_.MergeFrom(from.companion_slot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placement()) {
      set_placement(from.placement());
    }
    if (from.has_description_url()) {
      set_description_url(from.description_url());
    }
    if (from.has_is_embedded_offsite()) {
      set_is_embedded_offsite(from.is_embedded_offsite());
    }
    if (from.has_playback_method()) {
      set_playback_method(from.playback_method());
    }
    if (from.has_is_clickable()) {
      set_is_clickable(from.is_clickable());
    }
    if (from.has_videoad_start_delay()) {
      set_videoad_start_delay(from.videoad_start_delay());
    }
    if (from.has_max_ad_duration()) {
      set_max_ad_duration(from.max_ad_duration());
    }
    if (from.has_min_ad_duration()) {
      set_min_ad_duration(from.min_ad_duration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_ads_in_pod()) {
      set_max_ads_in_pod(from.max_ads_in_pod());
    }
    if (from.has_video_ad_skippable()) {
      set_video_ad_skippable(from.video_ad_skippable());
    }
    if (from.has_skippable_max_ad_duration()) {
      set_skippable_max_ad_duration(from.skippable_max_ad_duration());
    }
    if (from.has_end_cap_support()) {
      set_end_cap_support(from.end_cap_support());
    }
    if (from.has_content_attributes()) {
      mutable_content_attributes()->::BidRequest_Video_ContentAttributes::MergeFrom(from.content_attributes());
    }
    if (from.has_deprecated_inventory_type()) {
      set_deprecated_inventory_type(from.deprecated_inventory_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video::CopyFrom(const BidRequest_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video::IsInitialized() const {

  return true;
}

void BidRequest_Video::Swap(BidRequest_Video* other) {
  if (other != this) {
    std::swap(placement_, other->placement_);
    std::swap(description_url_, other->description_url_);
    std::swap(is_embedded_offsite_, other->is_embedded_offsite_);
    std::swap(playback_method_, other->playback_method_);
    std::swap(is_clickable_, other->is_clickable_);
    std::swap(videoad_start_delay_, other->videoad_start_delay_);
    std::swap(max_ad_duration_, other->max_ad_duration_);
    std::swap(min_ad_duration_, other->min_ad_duration_);
    std::swap(max_ads_in_pod_, other->max_ads_in_pod_);
    std::swap(video_ad_skippable_, other->video_ad_skippable_);
    std::swap(skippable_max_ad_duration_, other->skippable_max_ad_duration_);
    allowed_video_formats_.Swap(&other->allowed_video_formats_);
    companion_slot_.Swap(&other->companion_slot_);
    std::swap(end_cap_support_, other->end_cap_support_);
    std::swap(content_attributes_, other->content_attributes_);
    std::swap(deprecated_inventory_type_, other->deprecated_inventory_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_descriptor_;
  metadata.reflection = BidRequest_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_SlotVisibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_SlotVisibility_descriptor_;
}
bool BidRequest_AdSlot_SlotVisibility_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::NO_DETECTION;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::ABOVE_THE_FOLD;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::BELOW_THE_FOLD;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::SlotVisibility_MIN;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::SlotVisibility_MAX;
const int BidRequest_AdSlot::SlotVisibility_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_IFramingState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_IFramingState_descriptor_;
}
bool BidRequest_AdSlot_IFramingState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_IFramingState BidRequest_AdSlot::UNKNOWN_IFRAME_STATE;
const BidRequest_AdSlot_IFramingState BidRequest_AdSlot::NO_IFRAME;
const BidRequest_AdSlot_IFramingState BidRequest_AdSlot::SAME_DOMAIN_IFRAME;
const BidRequest_AdSlot_IFramingState BidRequest_AdSlot::CROSS_DOMAIN_IFRAME;
const BidRequest_AdSlot_IFramingState BidRequest_AdSlot::IFramingState_MIN;
const BidRequest_AdSlot_IFramingState BidRequest_AdSlot::IFramingState_MAX;
const int BidRequest_AdSlot::IFramingState_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_IFramingDepth_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_IFramingDepth_descriptor_;
}
bool BidRequest_AdSlot_IFramingDepth_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_IFramingDepth BidRequest_AdSlot::UNKNOWN_IFRAME_DEPTH;
const BidRequest_AdSlot_IFramingDepth BidRequest_AdSlot::NOT_IN_IFRAME;
const BidRequest_AdSlot_IFramingDepth BidRequest_AdSlot::ONE_IFRAME;
const BidRequest_AdSlot_IFramingDepth BidRequest_AdSlot::MULTIPLE_IFRAME;
const BidRequest_AdSlot_IFramingDepth BidRequest_AdSlot::IFramingDepth_MIN;
const BidRequest_AdSlot_IFramingDepth BidRequest_AdSlot::IFramingDepth_MAX;
const int BidRequest_AdSlot::IFramingDepth_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_MediationStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_MediationStatus_descriptor_;
}
bool BidRequest_AdSlot_MediationStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_MediationStatus BidRequest_AdSlot::UNKNOWN;
const BidRequest_AdSlot_MediationStatus BidRequest_AdSlot::DIRECT_REQUEST;
const BidRequest_AdSlot_MediationStatus BidRequest_AdSlot::MEDIATED;
const BidRequest_AdSlot_MediationStatus BidRequest_AdSlot::MediationStatus_MIN;
const BidRequest_AdSlot_MediationStatus BidRequest_AdSlot::MediationStatus_MAX;
const int BidRequest_AdSlot::MediationStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_Stickiness_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_Stickiness_descriptor_;
}
bool BidRequest_AdSlot_Stickiness_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_Stickiness BidRequest_AdSlot::UNKNOWN_STICKINESS;
const BidRequest_AdSlot_Stickiness BidRequest_AdSlot::IS_STICKY;
const BidRequest_AdSlot_Stickiness BidRequest_AdSlot::Stickiness_MIN;
const BidRequest_AdSlot_Stickiness BidRequest_AdSlot::Stickiness_MAX;
const int BidRequest_AdSlot::Stickiness_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_Renderer_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_Renderer_descriptor_;
}
bool BidRequest_AdSlot_Renderer_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_Renderer BidRequest_AdSlot::UNKNOWN_RENDERER;
const BidRequest_AdSlot_Renderer BidRequest_AdSlot::GOOGLE;
const BidRequest_AdSlot_Renderer BidRequest_AdSlot::PUBLISHER;
const BidRequest_AdSlot_Renderer BidRequest_AdSlot::Renderer_MIN;
const BidRequest_AdSlot_Renderer BidRequest_AdSlot::Renderer_MAX;
const int BidRequest_AdSlot::Renderer_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_AmpAdRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_AmpAdRequestType_descriptor_;
}
bool BidRequest_AdSlot_AmpAdRequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_AmpAdRequestType BidRequest_AdSlot::UNKNOWN_AMP;
const BidRequest_AdSlot_AmpAdRequestType BidRequest_AdSlot::NON_AMP_PAGE;
const BidRequest_AdSlot_AmpAdRequestType BidRequest_AdSlot::AMP_PAGE_LATE_REQUEST;
const BidRequest_AdSlot_AmpAdRequestType BidRequest_AdSlot::AmpAdRequestType_MIN;
const BidRequest_AdSlot_AmpAdRequestType BidRequest_AdSlot::AmpAdRequestType_MAX;
const int BidRequest_AdSlot::AmpAdRequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::kIncludedAdvertisersFieldNumber;
const int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::kExcludedAdvertisersFieldNumber;
const int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::kIncludedAgenciesFieldNumber;
const int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::kExcludedAgenciesFieldNumber;
const int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::kBlockedFieldNumber;
const int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::kMinimumCpmMicrosFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::InitAsDefaultInstance() {
}

BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule(const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::SharedCtor() {
  _cached_size_ = 0;
  blocked_ = false;
  minimum_cpm_micros_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::~BidRequest_AdSlot_MatchingAdData_BuyerPricingRule() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
  SharedDtor();
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_descriptor_;
}

const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::default_instance_ = NULL;

BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::New() const {
  return new BidRequest_AdSlot_MatchingAdData_BuyerPricingRule;
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdSlot_MatchingAdData_BuyerPricingRule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(minimum_cpm_micros_, blocked_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  included_advertisers_.Clear();
  excluded_advertisers_.Clear();
  included_agencies_.Clear();
  excluded_agencies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 included_advertisers = 1;
      case 1: {
        if (tag == 8) {
         parse_included_advertisers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_included_advertisers())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_included_advertisers())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_included_advertisers;
        if (input->ExpectTag(16)) goto parse_excluded_advertisers;
        break;
      }

      // repeated int64 excluded_advertisers = 2;
      case 2: {
        if (tag == 16) {
         parse_excluded_advertisers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_excluded_advertisers())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_excluded_advertisers())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_excluded_advertisers;
        if (input->ExpectTag(24)) goto parse_included_agencies;
        break;
      }

      // repeated int64 included_agencies = 3;
      case 3: {
        if (tag == 24) {
         parse_included_agencies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_included_agencies())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_included_agencies())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_included_agencies;
        if (input->ExpectTag(32)) goto parse_excluded_agencies;
        break;
      }

      // repeated int64 excluded_agencies = 4;
      case 4: {
        if (tag == 32) {
         parse_excluded_agencies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_excluded_agencies())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_excluded_agencies())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_excluded_agencies;
        if (input->ExpectTag(40)) goto parse_blocked;
        break;
      }

      // optional bool blocked = 5;
      case 5: {
        if (tag == 40) {
         parse_blocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blocked_)));
          set_has_blocked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_minimum_cpm_micros;
        break;
      }

      // optional int64 minimum_cpm_micros = 6;
      case 6: {
        if (tag == 48) {
         parse_minimum_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minimum_cpm_micros_)));
          set_has_minimum_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
  return false;
#undef DO_
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
  // repeated int64 included_advertisers = 1;
  for (int i = 0; i < this->included_advertisers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->included_advertisers(i), output);
  }

  // repeated int64 excluded_advertisers = 2;
  for (int i = 0; i < this->excluded_advertisers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->excluded_advertisers(i), output);
  }

  // repeated int64 included_agencies = 3;
  for (int i = 0; i < this->included_agencies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->included_agencies(i), output);
  }

  // repeated int64 excluded_agencies = 4;
  for (int i = 0; i < this->excluded_agencies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->excluded_agencies(i), output);
  }

  // optional bool blocked = 5;
  if (has_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blocked(), output);
  }

  // optional int64 minimum_cpm_micros = 6;
  if (has_minimum_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->minimum_cpm_micros(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
}

::google::protobuf::uint8* BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
  // repeated int64 included_advertisers = 1;
  for (int i = 0; i < this->included_advertisers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->included_advertisers(i), target);
  }

  // repeated int64 excluded_advertisers = 2;
  for (int i = 0; i < this->excluded_advertisers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->excluded_advertisers(i), target);
  }

  // repeated int64 included_agencies = 3;
  for (int i = 0; i < this->included_agencies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->included_agencies(i), target);
  }

  // repeated int64 excluded_agencies = 4;
  for (int i = 0; i < this->excluded_agencies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->excluded_agencies(i), target);
  }

  // optional bool blocked = 5;
  if (has_blocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blocked(), target);
  }

  // optional int64 minimum_cpm_micros = 6;
  if (has_minimum_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->minimum_cpm_micros(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
  return target;
}

int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional bool blocked = 5;
    if (has_blocked()) {
      total_size += 1 + 1;
    }

    // optional int64 minimum_cpm_micros = 6;
    if (has_minimum_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minimum_cpm_micros());
    }

  }
  // repeated int64 included_advertisers = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->included_advertisers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->included_advertisers(i));
    }
    total_size += 1 * this->included_advertisers_size() + data_size;
  }

  // repeated int64 excluded_advertisers = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_advertisers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->excluded_advertisers(i));
    }
    total_size += 1 * this->excluded_advertisers_size() + data_size;
  }

  // repeated int64 included_agencies = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->included_agencies_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->included_agencies(i));
    }
    total_size += 1 * this->included_agencies_size() + data_size;
  }

  // repeated int64 excluded_agencies = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_agencies_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->excluded_agencies(i));
    }
    total_size += 1 * this->excluded_agencies_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::MergeFrom(const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  included_advertisers_.MergeFrom(from.included_advertisers_);
  excluded_advertisers_.MergeFrom(from.excluded_advertisers_);
  included_agencies_.MergeFrom(from.included_agencies_);
  excluded_agencies_.MergeFrom(from.excluded_agencies_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_blocked()) {
      set_blocked(from.blocked());
    }
    if (from.has_minimum_cpm_micros()) {
      set_minimum_cpm_micros(from.minimum_cpm_micros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::CopyFrom(const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::Swap(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* other) {
  if (other != this) {
    included_advertisers_.Swap(&other->included_advertisers_);
    excluded_advertisers_.Swap(&other->excluded_advertisers_);
    included_agencies_.Swap(&other->included_agencies_);
    excluded_agencies_.Swap(&other->excluded_agencies_);
    std::swap(blocked_, other->blocked_);
    std::swap(minimum_cpm_micros_, other->minimum_cpm_micros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_descriptor_;
  metadata.reflection = BidRequest_AdSlot_MatchingAdData_BuyerPricingRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_descriptor_;
}
bool BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType BidRequest_AdSlot_MatchingAdData_DirectDeal::UNKNOWN_DEAL_TYPE;
const BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType BidRequest_AdSlot_MatchingAdData_DirectDeal::PREFERRED_DEAL;
const BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType BidRequest_AdSlot_MatchingAdData_DirectDeal::PRIVATE_AUCTION;
const BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType BidRequest_AdSlot_MatchingAdData_DirectDeal::DealType_MIN;
const BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType BidRequest_AdSlot_MatchingAdData_DirectDeal::DealType_MAX;
const int BidRequest_AdSlot_MatchingAdData_DirectDeal::DealType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_AdSlot_MatchingAdData_DirectDeal::kDirectDealIdFieldNumber;
const int BidRequest_AdSlot_MatchingAdData_DirectDeal::kFixedCpmMicrosFieldNumber;
const int BidRequest_AdSlot_MatchingAdData_DirectDeal::kDealTypeFieldNumber;
const int BidRequest_AdSlot_MatchingAdData_DirectDeal::kPublisherBlocksOverriddenFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_MatchingAdData_DirectDeal::BidRequest_AdSlot_MatchingAdData_DirectDeal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.MatchingAdData.DirectDeal)
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::InitAsDefaultInstance() {
}

BidRequest_AdSlot_MatchingAdData_DirectDeal::BidRequest_AdSlot_MatchingAdData_DirectDeal(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.MatchingAdData.DirectDeal)
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::SharedCtor() {
  _cached_size_ = 0;
  direct_deal_id_ = GOOGLE_LONGLONG(0);
  fixed_cpm_micros_ = GOOGLE_LONGLONG(0);
  deal_type_ = 0;
  publisher_blocks_overridden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_MatchingAdData_DirectDeal::~BidRequest_AdSlot_MatchingAdData_DirectDeal() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  SharedDtor();
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData_DirectDeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_;
}

const BidRequest_AdSlot_MatchingAdData_DirectDeal& BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_MatchingAdData_DirectDeal* BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_ = NULL;

BidRequest_AdSlot_MatchingAdData_DirectDeal* BidRequest_AdSlot_MatchingAdData_DirectDeal::New() const {
  return new BidRequest_AdSlot_MatchingAdData_DirectDeal;
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdSlot_MatchingAdData_DirectDeal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(direct_deal_id_, publisher_blocks_overridden_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_MatchingAdData_DirectDeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 direct_deal_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &direct_deal_id_)));
          set_has_direct_deal_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fixed_cpm_micros;
        break;
      }

      // optional int64 fixed_cpm_micros = 2;
      case 2: {
        if (tag == 16) {
         parse_fixed_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fixed_cpm_micros_)));
          set_has_fixed_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deal_type;
        break;
      }

      // optional .BidRequest.AdSlot.MatchingAdData.DirectDeal.DealType deal_type = 3 [default = UNKNOWN_DEAL_TYPE];
      case 3: {
        if (tag == 24) {
         parse_deal_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_IsValid(value)) {
            set_deal_type(static_cast< ::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_publisher_blocks_overridden;
        break;
      }

      // optional bool publisher_blocks_overridden = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_publisher_blocks_overridden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publisher_blocks_overridden_)));
          set_has_publisher_blocks_overridden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  return false;
#undef DO_
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  // optional int64 direct_deal_id = 1;
  if (has_direct_deal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->direct_deal_id(), output);
  }

  // optional int64 fixed_cpm_micros = 2;
  if (has_fixed_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fixed_cpm_micros(), output);
  }

  // optional .BidRequest.AdSlot.MatchingAdData.DirectDeal.DealType deal_type = 3 [default = UNKNOWN_DEAL_TYPE];
  if (has_deal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->deal_type(), output);
  }

  // optional bool publisher_blocks_overridden = 4 [default = false];
  if (has_publisher_blocks_overridden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->publisher_blocks_overridden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.MatchingAdData.DirectDeal)
}

::google::protobuf::uint8* BidRequest_AdSlot_MatchingAdData_DirectDeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  // optional int64 direct_deal_id = 1;
  if (has_direct_deal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->direct_deal_id(), target);
  }

  // optional int64 fixed_cpm_micros = 2;
  if (has_fixed_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fixed_cpm_micros(), target);
  }

  // optional .BidRequest.AdSlot.MatchingAdData.DirectDeal.DealType deal_type = 3 [default = UNKNOWN_DEAL_TYPE];
  if (has_deal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->deal_type(), target);
  }

  // optional bool publisher_blocks_overridden = 4 [default = false];
  if (has_publisher_blocks_overridden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->publisher_blocks_overridden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  return target;
}

int BidRequest_AdSlot_MatchingAdData_DirectDeal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 direct_deal_id = 1;
    if (has_direct_deal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->direct_deal_id());
    }

    // optional int64 fixed_cpm_micros = 2;
    if (has_fixed_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fixed_cpm_micros());
    }

    // optional .BidRequest.AdSlot.MatchingAdData.DirectDeal.DealType deal_type = 3 [default = UNKNOWN_DEAL_TYPE];
    if (has_deal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->deal_type());
    }

    // optional bool publisher_blocks_overridden = 4 [default = false];
    if (has_publisher_blocks_overridden()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_MatchingAdData_DirectDeal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_MatchingAdData_DirectDeal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::MergeFrom(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direct_deal_id()) {
      set_direct_deal_id(from.direct_deal_id());
    }
    if (from.has_fixed_cpm_micros()) {
      set_fixed_cpm_micros(from.fixed_cpm_micros());
    }
    if (from.has_deal_type()) {
      set_deal_type(from.deal_type());
    }
    if (from.has_publisher_blocks_overridden()) {
      set_publisher_blocks_overridden(from.publisher_blocks_overridden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::CopyFrom(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_MatchingAdData_DirectDeal::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::Swap(BidRequest_AdSlot_MatchingAdData_DirectDeal* other) {
  if (other != this) {
    std::swap(direct_deal_id_, other->direct_deal_id_);
    std::swap(fixed_cpm_micros_, other->fixed_cpm_micros_);
    std::swap(deal_type_, other->deal_type_);
    std::swap(publisher_blocks_overridden_, other->publisher_blocks_overridden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_MatchingAdData_DirectDeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_;
  metadata.reflection = BidRequest_AdSlot_MatchingAdData_DirectDeal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdSlot_MatchingAdData::kBillingIdFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kMinimumCpmMicrosFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kPricingRuleFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kDirectDealFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kDEPRECATEDCampaignIdFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kDEPRECATEDPerBuyerMinimumCpmFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kDEPRECATEDFixedCpmMicrosFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_MatchingAdData::BidRequest_AdSlot_MatchingAdData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.MatchingAdData)
}

void BidRequest_AdSlot_MatchingAdData::InitAsDefaultInstance() {
}

BidRequest_AdSlot_MatchingAdData::BidRequest_AdSlot_MatchingAdData(const BidRequest_AdSlot_MatchingAdData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.MatchingAdData)
}

void BidRequest_AdSlot_MatchingAdData::SharedCtor() {
  _cached_size_ = 0;
  minimum_cpm_micros_ = GOOGLE_LONGLONG(0);
  deprecated_campaign_id_ = GOOGLE_LONGLONG(0);
  deprecated_per_buyer_minimum_cpm_ = false;
  deprecated_fixed_cpm_micros_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_MatchingAdData::~BidRequest_AdSlot_MatchingAdData() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.MatchingAdData)
  SharedDtor();
}

void BidRequest_AdSlot_MatchingAdData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_MatchingAdData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_MatchingAdData_descriptor_;
}

const BidRequest_AdSlot_MatchingAdData& BidRequest_AdSlot_MatchingAdData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_MatchingAdData* BidRequest_AdSlot_MatchingAdData::default_instance_ = NULL;

BidRequest_AdSlot_MatchingAdData* BidRequest_AdSlot_MatchingAdData::New() const {
  return new BidRequest_AdSlot_MatchingAdData;
}

void BidRequest_AdSlot_MatchingAdData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdSlot_MatchingAdData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 114) {
    ZR_(deprecated_campaign_id_, deprecated_per_buyer_minimum_cpm_);
    minimum_cpm_micros_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  billing_id_.Clear();
  pricing_rule_.Clear();
  direct_deal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_MatchingAdData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.MatchingAdData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 DEPRECATED_campaign_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_campaign_id_)));
          set_has_deprecated_campaign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_billing_id;
        break;
      }

      // repeated int64 billing_id = 2 [packed = false];
      case 2: {
        if (tag == 16) {
         parse_billing_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_billing_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_billing_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_billing_id;
        if (input->ExpectTag(24)) goto parse_DEPRECATED_per_buyer_minimum_cpm;
        break;
      }

      // optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
      case 3: {
        if (tag == 24) {
         parse_DEPRECATED_per_buyer_minimum_cpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_per_buyer_minimum_cpm_)));
          set_has_deprecated_per_buyer_minimum_cpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DEPRECATED_fixed_cpm_micros;
        break;
      }

      // optional int64 DEPRECATED_fixed_cpm_micros = 4;
      case 4: {
        if (tag == 32) {
         parse_DEPRECATED_fixed_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_fixed_cpm_micros_)));
          set_has_deprecated_fixed_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minimum_cpm_micros;
        break;
      }

      // optional int64 minimum_cpm_micros = 5;
      case 5: {
        if (tag == 40) {
         parse_minimum_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minimum_cpm_micros_)));
          set_has_minimum_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_direct_deal;
        break;
      }

      // repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
      case 6: {
        if (tag == 50) {
         parse_direct_deal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_direct_deal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_direct_deal;
        if (input->ExpectTag(58)) goto parse_pricing_rule;
        break;
      }

      // repeated .BidRequest.AdSlot.MatchingAdData.BuyerPricingRule pricing_rule = 7;
      case 7: {
        if (tag == 58) {
         parse_pricing_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pricing_rule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pricing_rule;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.MatchingAdData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.MatchingAdData)
  return false;
#undef DO_
}

void BidRequest_AdSlot_MatchingAdData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.MatchingAdData)
  // optional int64 DEPRECATED_campaign_id = 1;
  if (has_deprecated_campaign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->deprecated_campaign_id(), output);
  }

  // repeated int64 billing_id = 2 [packed = false];
  for (int i = 0; i < this->billing_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->billing_id(i), output);
  }

  // optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
  if (has_deprecated_per_buyer_minimum_cpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->deprecated_per_buyer_minimum_cpm(), output);
  }

  // optional int64 DEPRECATED_fixed_cpm_micros = 4;
  if (has_deprecated_fixed_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->deprecated_fixed_cpm_micros(), output);
  }

  // optional int64 minimum_cpm_micros = 5;
  if (has_minimum_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->minimum_cpm_micros(), output);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
  for (int i = 0; i < this->direct_deal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->direct_deal(i), output);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData.BuyerPricingRule pricing_rule = 7;
  for (int i = 0; i < this->pricing_rule_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pricing_rule(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.MatchingAdData)
}

::google::protobuf::uint8* BidRequest_AdSlot_MatchingAdData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.MatchingAdData)
  // optional int64 DEPRECATED_campaign_id = 1;
  if (has_deprecated_campaign_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->deprecated_campaign_id(), target);
  }

  // repeated int64 billing_id = 2 [packed = false];
  for (int i = 0; i < this->billing_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->billing_id(i), target);
  }

  // optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
  if (has_deprecated_per_buyer_minimum_cpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->deprecated_per_buyer_minimum_cpm(), target);
  }

  // optional int64 DEPRECATED_fixed_cpm_micros = 4;
  if (has_deprecated_fixed_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->deprecated_fixed_cpm_micros(), target);
  }

  // optional int64 minimum_cpm_micros = 5;
  if (has_minimum_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->minimum_cpm_micros(), target);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
  for (int i = 0; i < this->direct_deal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->direct_deal(i), target);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData.BuyerPricingRule pricing_rule = 7;
  for (int i = 0; i < this->pricing_rule_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pricing_rule(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.MatchingAdData)
  return target;
}

int BidRequest_AdSlot_MatchingAdData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 minimum_cpm_micros = 5;
    if (has_minimum_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minimum_cpm_micros());
    }

    // optional int64 DEPRECATED_campaign_id = 1;
    if (has_deprecated_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_campaign_id());
    }

    // optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
    if (has_deprecated_per_buyer_minimum_cpm()) {
      total_size += 1 + 1;
    }

    // optional int64 DEPRECATED_fixed_cpm_micros = 4;
    if (has_deprecated_fixed_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_fixed_cpm_micros());
    }

  }
  // repeated int64 billing_id = 2 [packed = false];
  {
    int data_size = 0;
    for (int i = 0; i < this->billing_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->billing_id(i));
    }
    total_size += 1 * this->billing_id_size() + data_size;
  }

  // repeated .BidRequest.AdSlot.MatchingAdData.BuyerPricingRule pricing_rule = 7;
  total_size += 1 * this->pricing_rule_size();
  for (int i = 0; i < this->pricing_rule_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pricing_rule(i));
  }

  // repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
  total_size += 1 * this->direct_deal_size();
  for (int i = 0; i < this->direct_deal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->direct_deal(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_MatchingAdData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_MatchingAdData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_MatchingAdData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_MatchingAdData::MergeFrom(const BidRequest_AdSlot_MatchingAdData& from) {
  GOOGLE_CHECK_NE(&from, this);
  billing_id_.MergeFrom(from.billing_id_);
  pricing_rule_.MergeFrom(from.pricing_rule_);
  direct_deal_.MergeFrom(from.direct_deal_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_minimum_cpm_micros()) {
      set_minimum_cpm_micros(from.minimum_cpm_micros());
    }
    if (from.has_deprecated_campaign_id()) {
      set_deprecated_campaign_id(from.deprecated_campaign_id());
    }
    if (from.has_deprecated_per_buyer_minimum_cpm()) {
      set_deprecated_per_buyer_minimum_cpm(from.deprecated_per_buyer_minimum_cpm());
    }
    if (from.has_deprecated_fixed_cpm_micros()) {
      set_deprecated_fixed_cpm_micros(from.deprecated_fixed_cpm_micros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_MatchingAdData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_MatchingAdData::CopyFrom(const BidRequest_AdSlot_MatchingAdData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_MatchingAdData::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_MatchingAdData::Swap(BidRequest_AdSlot_MatchingAdData* other) {
  if (other != this) {
    billing_id_.Swap(&other->billing_id_);
    std::swap(minimum_cpm_micros_, other->minimum_cpm_micros_);
    pricing_rule_.Swap(&other->pricing_rule_);
    direct_deal_.Swap(&other->direct_deal_);
    std::swap(deprecated_campaign_id_, other->deprecated_campaign_id_);
    std::swap(deprecated_per_buyer_minimum_cpm_, other->deprecated_per_buyer_minimum_cpm_);
    std::swap(deprecated_fixed_cpm_micros_, other->deprecated_fixed_cpm_micros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_MatchingAdData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_MatchingAdData_descriptor_;
  metadata.reflection = BidRequest_AdSlot_MatchingAdData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdSlot_ExchangeBidding::kPublisherParameterFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_ExchangeBidding::BidRequest_AdSlot_ExchangeBidding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.ExchangeBidding)
}

void BidRequest_AdSlot_ExchangeBidding::InitAsDefaultInstance() {
}

BidRequest_AdSlot_ExchangeBidding::BidRequest_AdSlot_ExchangeBidding(const BidRequest_AdSlot_ExchangeBidding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.ExchangeBidding)
}

void BidRequest_AdSlot_ExchangeBidding::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_ExchangeBidding::~BidRequest_AdSlot_ExchangeBidding() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.ExchangeBidding)
  SharedDtor();
}

void BidRequest_AdSlot_ExchangeBidding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_ExchangeBidding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_ExchangeBidding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_ExchangeBidding_descriptor_;
}

const BidRequest_AdSlot_ExchangeBidding& BidRequest_AdSlot_ExchangeBidding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_ExchangeBidding* BidRequest_AdSlot_ExchangeBidding::default_instance_ = NULL;

BidRequest_AdSlot_ExchangeBidding* BidRequest_AdSlot_ExchangeBidding::New() const {
  return new BidRequest_AdSlot_ExchangeBidding;
}

void BidRequest_AdSlot_ExchangeBidding::Clear() {
  publisher_parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_ExchangeBidding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.ExchangeBidding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string publisher_parameter = 1;
      case 1: {
        if (tag == 10) {
         parse_publisher_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_publisher_parameter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publisher_parameter(this->publisher_parameter_size() - 1).data(),
            this->publisher_parameter(this->publisher_parameter_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "publisher_parameter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_publisher_parameter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.ExchangeBidding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.ExchangeBidding)
  return false;
#undef DO_
}

void BidRequest_AdSlot_ExchangeBidding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.ExchangeBidding)
  // repeated string publisher_parameter = 1;
  for (int i = 0; i < this->publisher_parameter_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->publisher_parameter(i).data(), this->publisher_parameter(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "publisher_parameter");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->publisher_parameter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.ExchangeBidding)
}

::google::protobuf::uint8* BidRequest_AdSlot_ExchangeBidding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.ExchangeBidding)
  // repeated string publisher_parameter = 1;
  for (int i = 0; i < this->publisher_parameter_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_parameter(i).data(), this->publisher_parameter(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "publisher_parameter");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->publisher_parameter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.ExchangeBidding)
  return target;
}

int BidRequest_AdSlot_ExchangeBidding::ByteSize() const {
  int total_size = 0;

  // repeated string publisher_parameter = 1;
  total_size += 1 * this->publisher_parameter_size();
  for (int i = 0; i < this->publisher_parameter_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->publisher_parameter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_ExchangeBidding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_ExchangeBidding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_ExchangeBidding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_ExchangeBidding::MergeFrom(const BidRequest_AdSlot_ExchangeBidding& from) {
  GOOGLE_CHECK_NE(&from, this);
  publisher_parameter_.MergeFrom(from.publisher_parameter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_ExchangeBidding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_ExchangeBidding::CopyFrom(const BidRequest_AdSlot_ExchangeBidding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_ExchangeBidding::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_ExchangeBidding::Swap(BidRequest_AdSlot_ExchangeBidding* other) {
  if (other != this) {
    publisher_parameter_.Swap(&other->publisher_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_ExchangeBidding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_ExchangeBidding_descriptor_;
  metadata.reflection = BidRequest_AdSlot_ExchangeBidding_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_NativeAdTemplate_Fields_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_NativeAdTemplate_Fields_descriptor_;
}
bool BidRequest_AdSlot_NativeAdTemplate_Fields_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::HEADLINE;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::BODY;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::CALL_TO_ACTION;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::ADVERTISER;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::IMAGE;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::LOGO;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::APP_ICON;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::STAR_RATING;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::PRICE;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::STORE;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::Fields_MIN;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate::Fields_MAX;
const int BidRequest_AdSlot_NativeAdTemplate::Fields_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_AdSlot_NativeAdTemplate::kRequiredFieldsFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kRecommendedFieldsFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kHeadlineMaxSafeLengthFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kBodyMaxSafeLengthFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kCallToActionMaxSafeLengthFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kAdvertiserMaxSafeLengthFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kStoreMaxSafeLengthFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kPriceMaxSafeLengthFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kImageWidthFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kImageHeightFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kLogoWidthFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kLogoHeightFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kAppIconWidthFieldNumber;
const int BidRequest_AdSlot_NativeAdTemplate::kAppIconHeightFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_NativeAdTemplate::BidRequest_AdSlot_NativeAdTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.NativeAdTemplate)
}

void BidRequest_AdSlot_NativeAdTemplate::InitAsDefaultInstance() {
}

BidRequest_AdSlot_NativeAdTemplate::BidRequest_AdSlot_NativeAdTemplate(const BidRequest_AdSlot_NativeAdTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.NativeAdTemplate)
}

void BidRequest_AdSlot_NativeAdTemplate::SharedCtor() {
  _cached_size_ = 0;
  required_fields_ = GOOGLE_LONGLONG(0);
  recommended_fields_ = GOOGLE_LONGLONG(0);
  headline_max_safe_length_ = 0;
  body_max_safe_length_ = 0;
  call_to_action_max_safe_length_ = 0;
  advertiser_max_safe_length_ = 0;
  store_max_safe_length_ = 0;
  price_max_safe_length_ = 0;
  image_width_ = 0;
  image_height_ = 0;
  logo_width_ = 0;
  logo_height_ = 0;
  app_icon_width_ = 0;
  app_icon_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_NativeAdTemplate::~BidRequest_AdSlot_NativeAdTemplate() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.NativeAdTemplate)
  SharedDtor();
}

void BidRequest_AdSlot_NativeAdTemplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_NativeAdTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_NativeAdTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_NativeAdTemplate_descriptor_;
}

const BidRequest_AdSlot_NativeAdTemplate& BidRequest_AdSlot_NativeAdTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_NativeAdTemplate* BidRequest_AdSlot_NativeAdTemplate::default_instance_ = NULL;

BidRequest_AdSlot_NativeAdTemplate* BidRequest_AdSlot_NativeAdTemplate::New() const {
  return new BidRequest_AdSlot_NativeAdTemplate;
}

void BidRequest_AdSlot_NativeAdTemplate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdSlot_NativeAdTemplate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(required_fields_, price_max_safe_length_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(image_width_, app_icon_height_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_NativeAdTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.NativeAdTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 required_fields = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &required_fields_)));
          set_has_required_fields();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recommended_fields;
        break;
      }

      // optional int64 recommended_fields = 2;
      case 2: {
        if (tag == 16) {
         parse_recommended_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recommended_fields_)));
          set_has_recommended_fields();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_headline_max_safe_length;
        break;
      }

      // optional int32 headline_max_safe_length = 3;
      case 3: {
        if (tag == 24) {
         parse_headline_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headline_max_safe_length_)));
          set_has_headline_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_body_max_safe_length;
        break;
      }

      // optional int32 body_max_safe_length = 4;
      case 4: {
        if (tag == 32) {
         parse_body_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &body_max_safe_length_)));
          set_has_body_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_call_to_action_max_safe_length;
        break;
      }

      // optional int32 call_to_action_max_safe_length = 5;
      case 5: {
        if (tag == 40) {
         parse_call_to_action_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_to_action_max_safe_length_)));
          set_has_call_to_action_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_advertiser_max_safe_length;
        break;
      }

      // optional int32 advertiser_max_safe_length = 6;
      case 6: {
        if (tag == 48) {
         parse_advertiser_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advertiser_max_safe_length_)));
          set_has_advertiser_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_image_width;
        break;
      }

      // optional int32 image_width = 7;
      case 7: {
        if (tag == 56) {
         parse_image_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_width_)));
          set_has_image_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_image_height;
        break;
      }

      // optional int32 image_height = 8;
      case 8: {
        if (tag == 64) {
         parse_image_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_height_)));
          set_has_image_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_logo_width;
        break;
      }

      // optional int32 logo_width = 9;
      case 9: {
        if (tag == 72) {
         parse_logo_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logo_width_)));
          set_has_logo_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_logo_height;
        break;
      }

      // optional int32 logo_height = 10;
      case 10: {
        if (tag == 80) {
         parse_logo_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logo_height_)));
          set_has_logo_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_app_icon_width;
        break;
      }

      // optional int32 app_icon_width = 11;
      case 11: {
        if (tag == 88) {
         parse_app_icon_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_icon_width_)));
          set_has_app_icon_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_app_icon_height;
        break;
      }

      // optional int32 app_icon_height = 12;
      case 12: {
        if (tag == 96) {
         parse_app_icon_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_icon_height_)));
          set_has_app_icon_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_store_max_safe_length;
        break;
      }

      // optional int32 store_max_safe_length = 14;
      case 14: {
        if (tag == 112) {
         parse_store_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_max_safe_length_)));
          set_has_store_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_price_max_safe_length;
        break;
      }

      // optional int32 price_max_safe_length = 15;
      case 15: {
        if (tag == 120) {
         parse_price_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_max_safe_length_)));
          set_has_price_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.NativeAdTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.NativeAdTemplate)
  return false;
#undef DO_
}

void BidRequest_AdSlot_NativeAdTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.NativeAdTemplate)
  // optional int64 required_fields = 1;
  if (has_required_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->required_fields(), output);
  }

  // optional int64 recommended_fields = 2;
  if (has_recommended_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->recommended_fields(), output);
  }

  // optional int32 headline_max_safe_length = 3;
  if (has_headline_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headline_max_safe_length(), output);
  }

  // optional int32 body_max_safe_length = 4;
  if (has_body_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->body_max_safe_length(), output);
  }

  // optional int32 call_to_action_max_safe_length = 5;
  if (has_call_to_action_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->call_to_action_max_safe_length(), output);
  }

  // optional int32 advertiser_max_safe_length = 6;
  if (has_advertiser_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->advertiser_max_safe_length(), output);
  }

  // optional int32 image_width = 7;
  if (has_image_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->image_width(), output);
  }

  // optional int32 image_height = 8;
  if (has_image_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->image_height(), output);
  }

  // optional int32 logo_width = 9;
  if (has_logo_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->logo_width(), output);
  }

  // optional int32 logo_height = 10;
  if (has_logo_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->logo_height(), output);
  }

  // optional int32 app_icon_width = 11;
  if (has_app_icon_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->app_icon_width(), output);
  }

  // optional int32 app_icon_height = 12;
  if (has_app_icon_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->app_icon_height(), output);
  }

  // optional int32 store_max_safe_length = 14;
  if (has_store_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->store_max_safe_length(), output);
  }

  // optional int32 price_max_safe_length = 15;
  if (has_price_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->price_max_safe_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.NativeAdTemplate)
}

::google::protobuf::uint8* BidRequest_AdSlot_NativeAdTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.NativeAdTemplate)
  // optional int64 required_fields = 1;
  if (has_required_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->required_fields(), target);
  }

  // optional int64 recommended_fields = 2;
  if (has_recommended_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->recommended_fields(), target);
  }

  // optional int32 headline_max_safe_length = 3;
  if (has_headline_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headline_max_safe_length(), target);
  }

  // optional int32 body_max_safe_length = 4;
  if (has_body_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->body_max_safe_length(), target);
  }

  // optional int32 call_to_action_max_safe_length = 5;
  if (has_call_to_action_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->call_to_action_max_safe_length(), target);
  }

  // optional int32 advertiser_max_safe_length = 6;
  if (has_advertiser_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->advertiser_max_safe_length(), target);
  }

  // optional int32 image_width = 7;
  if (has_image_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->image_width(), target);
  }

  // optional int32 image_height = 8;
  if (has_image_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->image_height(), target);
  }

  // optional int32 logo_width = 9;
  if (has_logo_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->logo_width(), target);
  }

  // optional int32 logo_height = 10;
  if (has_logo_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->logo_height(), target);
  }

  // optional int32 app_icon_width = 11;
  if (has_app_icon_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->app_icon_width(), target);
  }

  // optional int32 app_icon_height = 12;
  if (has_app_icon_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->app_icon_height(), target);
  }

  // optional int32 store_max_safe_length = 14;
  if (has_store_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->store_max_safe_length(), target);
  }

  // optional int32 price_max_safe_length = 15;
  if (has_price_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->price_max_safe_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.NativeAdTemplate)
  return target;
}

int BidRequest_AdSlot_NativeAdTemplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 required_fields = 1;
    if (has_required_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->required_fields());
    }

    // optional int64 recommended_fields = 2;
    if (has_recommended_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recommended_fields());
    }

    // optional int32 headline_max_safe_length = 3;
    if (has_headline_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headline_max_safe_length());
    }

    // optional int32 body_max_safe_length = 4;
    if (has_body_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->body_max_safe_length());
    }

    // optional int32 call_to_action_max_safe_length = 5;
    if (has_call_to_action_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_to_action_max_safe_length());
    }

    // optional int32 advertiser_max_safe_length = 6;
    if (has_advertiser_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advertiser_max_safe_length());
    }

    // optional int32 store_max_safe_length = 14;
    if (has_store_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_max_safe_length());
    }

    // optional int32 price_max_safe_length = 15;
    if (has_price_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_max_safe_length());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 image_width = 7;
    if (has_image_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_width());
    }

    // optional int32 image_height = 8;
    if (has_image_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_height());
    }

    // optional int32 logo_width = 9;
    if (has_logo_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logo_width());
    }

    // optional int32 logo_height = 10;
    if (has_logo_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logo_height());
    }

    // optional int32 app_icon_width = 11;
    if (has_app_icon_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_icon_width());
    }

    // optional int32 app_icon_height = 12;
    if (has_app_icon_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_icon_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_NativeAdTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_NativeAdTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_NativeAdTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_NativeAdTemplate::MergeFrom(const BidRequest_AdSlot_NativeAdTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_required_fields()) {
      set_required_fields(from.required_fields());
    }
    if (from.has_recommended_fields()) {
      set_recommended_fields(from.recommended_fields());
    }
    if (from.has_headline_max_safe_length()) {
      set_headline_max_safe_length(from.headline_max_safe_length());
    }
    if (from.has_body_max_safe_length()) {
      set_body_max_safe_length(from.body_max_safe_length());
    }
    if (from.has_call_to_action_max_safe_length()) {
      set_call_to_action_max_safe_length(from.call_to_action_max_safe_length());
    }
    if (from.has_advertiser_max_safe_length()) {
      set_advertiser_max_safe_length(from.advertiser_max_safe_length());
    }
    if (from.has_store_max_safe_length()) {
      set_store_max_safe_length(from.store_max_safe_length());
    }
    if (from.has_price_max_safe_length()) {
      set_price_max_safe_length(from.price_max_safe_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_image_width()) {
      set_image_width(from.image_width());
    }
    if (from.has_image_height()) {
      set_image_height(from.image_height());
    }
    if (from.has_logo_width()) {
      set_logo_width(from.logo_width());
    }
    if (from.has_logo_height()) {
      set_logo_height(from.logo_height());
    }
    if (from.has_app_icon_width()) {
      set_app_icon_width(from.app_icon_width());
    }
    if (from.has_app_icon_height()) {
      set_app_icon_height(from.app_icon_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_NativeAdTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_NativeAdTemplate::CopyFrom(const BidRequest_AdSlot_NativeAdTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_NativeAdTemplate::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_NativeAdTemplate::Swap(BidRequest_AdSlot_NativeAdTemplate* other) {
  if (other != this) {
    std::swap(required_fields_, other->required_fields_);
    std::swap(recommended_fields_, other->recommended_fields_);
    std::swap(headline_max_safe_length_, other->headline_max_safe_length_);
    std::swap(body_max_safe_length_, other->body_max_safe_length_);
    std::swap(call_to_action_max_safe_length_, other->call_to_action_max_safe_length_);
    std::swap(advertiser_max_safe_length_, other->advertiser_max_safe_length_);
    std::swap(store_max_safe_length_, other->store_max_safe_length_);
    std::swap(price_max_safe_length_, other->price_max_safe_length_);
    std::swap(image_width_, other->image_width_);
    std::swap(image_height_, other->image_height_);
    std::swap(logo_width_, other->logo_width_);
    std::swap(logo_height_, other->logo_height_);
    std::swap(app_icon_width_, other->app_icon_width_);
    std::swap(app_icon_height_, other->app_icon_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_NativeAdTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_NativeAdTemplate_descriptor_;
  metadata.reflection = BidRequest_AdSlot_NativeAdTemplate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_descriptor_;
}
bool BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::UNKNOWN_AUTO_REFRESH_TYPE;
const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::USER_ACTION;
const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::EVENT;
const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::TIME;
const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::AutoRefreshType_MIN;
const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::AutoRefreshType_MAX;
const int BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::AutoRefreshType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::kRefreshTypeFieldNumber;
const int BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::kMinRefreshIntervalSecondsFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::InitAsDefaultInstance() {
}

BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings(const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::SharedCtor() {
  _cached_size_ = 0;
  refresh_type_ = 0;
  min_refresh_interval_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::~BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
  SharedDtor();
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_descriptor_;
}

const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::default_instance_ = NULL;

BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::New() const {
  return new BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings;
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(refresh_type_, min_refresh_interval_seconds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType refresh_type = 1 [default = UNKNOWN_AUTO_REFRESH_TYPE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_IsValid(value)) {
            set_refresh_type(static_cast< ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_refresh_interval_seconds;
        break;
      }

      // optional int32 min_refresh_interval_seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_min_refresh_interval_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_refresh_interval_seconds_)));
          set_has_min_refresh_interval_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
  return false;
#undef DO_
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
  // optional .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType refresh_type = 1 [default = UNKNOWN_AUTO_REFRESH_TYPE];
  if (has_refresh_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->refresh_type(), output);
  }

  // optional int32 min_refresh_interval_seconds = 2;
  if (has_min_refresh_interval_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_refresh_interval_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
}

::google::protobuf::uint8* BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
  // optional .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType refresh_type = 1 [default = UNKNOWN_AUTO_REFRESH_TYPE];
  if (has_refresh_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->refresh_type(), target);
  }

  // optional int32 min_refresh_interval_seconds = 2;
  if (has_min_refresh_interval_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_refresh_interval_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
  return target;
}

int BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType refresh_type = 1 [default = UNKNOWN_AUTO_REFRESH_TYPE];
    if (has_refresh_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->refresh_type());
    }

    // optional int32 min_refresh_interval_seconds = 2;
    if (has_min_refresh_interval_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_refresh_interval_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::MergeFrom(const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refresh_type()) {
      set_refresh_type(from.refresh_type());
    }
    if (from.has_min_refresh_interval_seconds()) {
      set_min_refresh_interval_seconds(from.min_refresh_interval_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::CopyFrom(const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::Swap(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* other) {
  if (other != this) {
    std::swap(refresh_type_, other->refresh_type_);
    std::swap(min_refresh_interval_seconds_, other->min_refresh_interval_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_descriptor_;
  metadata.reflection = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdSlot_AutoRefresh::kRefreshSettingsFieldNumber;
const int BidRequest_AdSlot_AutoRefresh::kRefreshCountFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot_AutoRefresh::BidRequest_AdSlot_AutoRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.AutoRefresh)
}

void BidRequest_AdSlot_AutoRefresh::InitAsDefaultInstance() {
}

BidRequest_AdSlot_AutoRefresh::BidRequest_AdSlot_AutoRefresh(const BidRequest_AdSlot_AutoRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.AutoRefresh)
}

void BidRequest_AdSlot_AutoRefresh::SharedCtor() {
  _cached_size_ = 0;
  refresh_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_AutoRefresh::~BidRequest_AdSlot_AutoRefresh() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.AutoRefresh)
  SharedDtor();
}

void BidRequest_AdSlot_AutoRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_AutoRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_AutoRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_AutoRefresh_descriptor_;
}

const BidRequest_AdSlot_AutoRefresh& BidRequest_AdSlot_AutoRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_AutoRefresh* BidRequest_AdSlot_AutoRefresh::default_instance_ = NULL;

BidRequest_AdSlot_AutoRefresh* BidRequest_AdSlot_AutoRefresh::New() const {
  return new BidRequest_AdSlot_AutoRefresh;
}

void BidRequest_AdSlot_AutoRefresh::Clear() {
  refresh_count_ = 0;
  refresh_settings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot_AutoRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.AutoRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings refresh_settings = 1;
      case 1: {
        if (tag == 10) {
         parse_refresh_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refresh_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_refresh_settings;
        if (input->ExpectTag(16)) goto parse_refresh_count;
        break;
      }

      // optional int32 refresh_count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_refresh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_count_)));
          set_has_refresh_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.AutoRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.AutoRefresh)
  return false;
#undef DO_
}

void BidRequest_AdSlot_AutoRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.AutoRefresh)
  // repeated .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings refresh_settings = 1;
  for (int i = 0; i < this->refresh_settings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->refresh_settings(i), output);
  }

  // optional int32 refresh_count = 2 [default = 0];
  if (has_refresh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refresh_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.AutoRefresh)
}

::google::protobuf::uint8* BidRequest_AdSlot_AutoRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.AutoRefresh)
  // repeated .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings refresh_settings = 1;
  for (int i = 0; i < this->refresh_settings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->refresh_settings(i), target);
  }

  // optional int32 refresh_count = 2 [default = 0];
  if (has_refresh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refresh_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.AutoRefresh)
  return target;
}

int BidRequest_AdSlot_AutoRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 refresh_count = 2 [default = 0];
    if (has_refresh_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_count());
    }

  }
  // repeated .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings refresh_settings = 1;
  total_size += 1 * this->refresh_settings_size();
  for (int i = 0; i < this->refresh_settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refresh_settings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_AutoRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot_AutoRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot_AutoRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_AutoRefresh::MergeFrom(const BidRequest_AdSlot_AutoRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  refresh_settings_.MergeFrom(from.refresh_settings_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_refresh_count()) {
      set_refresh_count(from.refresh_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot_AutoRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_AutoRefresh::CopyFrom(const BidRequest_AdSlot_AutoRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_AutoRefresh::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_AutoRefresh::Swap(BidRequest_AdSlot_AutoRefresh* other) {
  if (other != this) {
    refresh_settings_.Swap(&other->refresh_settings_);
    std::swap(refresh_count_, other->refresh_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot_AutoRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_AutoRefresh_descriptor_;
  metadata.reflection = BidRequest_AdSlot_AutoRefresh_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdSlot::kIdFieldNumber;
const int BidRequest_AdSlot::kAdBlockKeyFieldNumber;
const int BidRequest_AdSlot::kTargetableChannelFieldNumber;
const int BidRequest_AdSlot::kWidthFieldNumber;
const int BidRequest_AdSlot::kHeightFieldNumber;
const int BidRequest_AdSlot::kExcludedAttributeFieldNumber;
const int BidRequest_AdSlot::kAllowedVendorTypeFieldNumber;
const int BidRequest_AdSlot::kExcludedSensitiveCategoryFieldNumber;
const int BidRequest_AdSlot::kAllowedRestrictedCategoryFieldNumber;
const int BidRequest_AdSlot::kAllowedRestrictedCategoryForDealsFieldNumber;
const int BidRequest_AdSlot::kAllowedLanguagesFieldNumber;
const int BidRequest_AdSlot::kExcludedProductCategoryFieldNumber;
const int BidRequest_AdSlot::kMatchingAdDataFieldNumber;
const int BidRequest_AdSlot::kPublisherSettingsListIdFieldNumber;
const int BidRequest_AdSlot::kExchangeBiddingFieldNumber;
const int BidRequest_AdSlot::kSlotVisibilityFieldNumber;
const int BidRequest_AdSlot::kViewabilityFieldNumber;
const int BidRequest_AdSlot::kClickThroughRateFieldNumber;
const int BidRequest_AdSlot::kIframingStateFieldNumber;
const int BidRequest_AdSlot::kIframingDepthFieldNumber;
const int BidRequest_AdSlot::kNativeAdTemplateFieldNumber;
const int BidRequest_AdSlot::kMediationStatusFieldNumber;
const int BidRequest_AdSlot::kAutoRefreshFieldNumber;
const int BidRequest_AdSlot::kStickinessFieldNumber;
const int BidRequest_AdSlot::kRendererFieldNumber;
const int BidRequest_AdSlot::kAmpAdRequestTypeFieldNumber;
const int BidRequest_AdSlot::kDEPRECATEDAllowedAttributeFieldNumber;
const int BidRequest_AdSlot::kDEPRECATEDPublisherSettingsListIdFieldNumber;
const int BidRequest_AdSlot::kDEPRECATEDExcludedClickThroughUrlFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot::BidRequest_AdSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot)
}

void BidRequest_AdSlot::InitAsDefaultInstance() {
  exchange_bidding_ = const_cast< ::BidRequest_AdSlot_ExchangeBidding*>(&::BidRequest_AdSlot_ExchangeBidding::default_instance());
  auto_refresh_ = const_cast< ::BidRequest_AdSlot_AutoRefresh*>(&::BidRequest_AdSlot_AutoRefresh::default_instance());
}

BidRequest_AdSlot::BidRequest_AdSlot(const BidRequest_AdSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot)
}

void BidRequest_AdSlot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  ad_block_key_ = GOOGLE_ULONGLONG(0);
  exchange_bidding_ = NULL;
  slot_visibility_ = 0;
  viewability_ = -1;
  click_through_rate_ = -1;
  iframing_state_ = 0;
  iframing_depth_ = 0;
  mediation_status_ = 0;
  auto_refresh_ = NULL;
  stickiness_ = 0;
  renderer_ = 0;
  amp_ad_request_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot::~BidRequest_AdSlot() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot)
  SharedDtor();
}

void BidRequest_AdSlot::SharedDtor() {
  if (this != default_instance_) {
    delete exchange_bidding_;
    delete auto_refresh_;
  }
}

void BidRequest_AdSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_descriptor_;
}

const BidRequest_AdSlot& BidRequest_AdSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot* BidRequest_AdSlot::default_instance_ = NULL;

BidRequest_AdSlot* BidRequest_AdSlot::New() const {
  return new BidRequest_AdSlot;
}

void BidRequest_AdSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    ad_block_key_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 49152) {
    if (has_exchange_bidding()) {
      if (exchange_bidding_ != NULL) exchange_bidding_->::BidRequest_AdSlot_ExchangeBidding::Clear();
    }
    slot_visibility_ = 0;
  }
  if (_has_bits_[16 / 32] & 15663104) {
    ZR_(iframing_state_, iframing_depth_);
    ZR_(mediation_status_, stickiness_);
    viewability_ = -1;
    click_through_rate_ = -1;
    if (has_auto_refresh()) {
      if (auto_refresh_ != NULL) auto_refresh_->::BidRequest_AdSlot_AutoRefresh::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 50331648) {
    renderer_ = 0;
    amp_ad_request_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetable_channel_.Clear();
  width_.Clear();
  height_.Clear();
  excluded_attribute_.Clear();
  allowed_vendor_type_.Clear();
  excluded_sensitive_category_.Clear();
  allowed_restricted_category_.Clear();
  allowed_restricted_category_for_deals_.Clear();
  allowed_languages_.Clear();
  excluded_product_category_.Clear();
  matching_ad_data_.Clear();
  publisher_settings_list_id_.Clear();
  native_ad_template_.Clear();
  deprecated_allowed_attribute_.Clear();
  deprecated_publisher_settings_list_id_.Clear();
  deprecated_excluded_click_through_url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // repeated int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_width())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_width())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // repeated int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_height())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_height())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        if (input->ExpectTag(34)) goto parse_excluded_attribute;
        break;
      }

      // repeated int32 excluded_attribute = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_excluded_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_attribute())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_excluded_attribute())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DEPRECATED_allowed_attribute;
        break;
      }

      // repeated int32 DEPRECATED_allowed_attribute = 5;
      case 5: {
        if (tag == 40) {
         parse_DEPRECATED_allowed_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_deprecated_allowed_attribute())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deprecated_allowed_attribute())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DEPRECATED_allowed_attribute;
        if (input->ExpectTag(50)) goto parse_allowed_vendor_type;
        break;
      }

      // repeated int32 allowed_vendor_type = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_allowed_vendor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allowed_vendor_type())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_allowed_vendor_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_excluded_sensitive_category;
        break;
      }

      // repeated int32 excluded_sensitive_category = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_excluded_sensitive_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_sensitive_category())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_excluded_sensitive_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DEPRECATED_excluded_click_through_url;
        break;
      }

      // repeated string DEPRECATED_excluded_click_through_url = 8;
      case 8: {
        if (tag == 66) {
         parse_DEPRECATED_excluded_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deprecated_excluded_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_excluded_click_through_url(this->deprecated_excluded_click_through_url_size() - 1).data(),
            this->deprecated_excluded_click_through_url(this->deprecated_excluded_click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_excluded_click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DEPRECATED_excluded_click_through_url;
        if (input->ExpectTag(74)) goto parse_matching_ad_data;
        break;
      }

      // repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
      case 9: {
        if (tag == 74) {
         parse_matching_ad_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matching_ad_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_matching_ad_data;
        if (input->ExpectTag(82)) goto parse_targetable_channel;
        break;
      }

      // repeated string targetable_channel = 10;
      case 10: {
        if (tag == 82) {
         parse_targetable_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_targetable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetable_channel(this->targetable_channel_size() - 1).data(),
            this->targetable_channel(this->targetable_channel_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetable_channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_targetable_channel;
        if (input->ExpectTag(90)) goto parse_DEPRECATED_publisher_settings_list_id;
        break;
      }

      // repeated bytes DEPRECATED_publisher_settings_list_id = 11;
      case 11: {
        if (tag == 90) {
         parse_DEPRECATED_publisher_settings_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_deprecated_publisher_settings_list_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_DEPRECATED_publisher_settings_list_id;
        if (input->ExpectTag(96)) goto parse_slot_visibility;
        break;
      }

      // optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
      case 12: {
        if (tag == 96) {
         parse_slot_visibility:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_SlotVisibility_IsValid(value)) {
            set_slot_visibility(static_cast< ::BidRequest_AdSlot_SlotVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_excluded_product_category;
        break;
      }

      // repeated int32 excluded_product_category = 13 [packed = true];
      case 13: {
        if (tag == 106) {
         parse_excluded_product_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_product_category())));
        } else if (tag == 104) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106, input, this->mutable_excluded_product_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ad_block_key;
        break;
      }

      // optional uint64 ad_block_key = 14;
      case 14: {
        if (tag == 112) {
         parse_ad_block_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ad_block_key_)));
          set_has_ad_block_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_publisher_settings_list_id;
        break;
      }

      // repeated fixed64 publisher_settings_list_id = 15;
      case 15: {
        if (tag == 121) {
         parse_publisher_settings_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 121, input, this->mutable_publisher_settings_list_id())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_publisher_settings_list_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_publisher_settings_list_id;
        if (input->ExpectTag(130)) goto parse_allowed_restricted_category;
        break;
      }

      // repeated int32 allowed_restricted_category = 16 [packed = true];
      case 16: {
        if (tag == 130) {
         parse_allowed_restricted_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allowed_restricted_category())));
        } else if (tag == 128) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 130, input, this->mutable_allowed_restricted_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_iframing_state;
        break;
      }

      // optional .BidRequest.AdSlot.IFramingState iframing_state = 19 [default = UNKNOWN_IFRAME_STATE];
      case 19: {
        if (tag == 152) {
         parse_iframing_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_IFramingState_IsValid(value)) {
            set_iframing_state(static_cast< ::BidRequest_AdSlot_IFramingState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_iframing_depth;
        break;
      }

      // optional .BidRequest.AdSlot.IFramingDepth iframing_depth = 20 [default = UNKNOWN_IFRAME_DEPTH];
      case 20: {
        if (tag == 160) {
         parse_iframing_depth:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_IFramingDepth_IsValid(value)) {
            set_iframing_depth(static_cast< ::BidRequest_AdSlot_IFramingDepth >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_viewability;
        break;
      }

      // optional int32 viewability = 21 [default = -1];
      case 21: {
        if (tag == 168) {
         parse_viewability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewability_)));
          set_has_viewability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_allowed_restricted_category_for_deals;
        break;
      }

      // repeated int32 allowed_restricted_category_for_deals = 22 [packed = true];
      case 22: {
        if (tag == 178) {
         parse_allowed_restricted_category_for_deals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allowed_restricted_category_for_deals())));
        } else if (tag == 176) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 178, input, this->mutable_allowed_restricted_category_for_deals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_auto_refresh;
        break;
      }

      // optional .BidRequest.AdSlot.AutoRefresh auto_refresh = 23;
      case 23: {
        if (tag == 186) {
         parse_auto_refresh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_refresh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_stickiness;
        break;
      }

      // optional .BidRequest.AdSlot.Stickiness stickiness = 24 [default = UNKNOWN_STICKINESS];
      case 24: {
        if (tag == 192) {
         parse_stickiness:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_Stickiness_IsValid(value)) {
            set_stickiness(static_cast< ::BidRequest_AdSlot_Stickiness >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_click_through_rate;
        break;
      }

      // optional float click_through_rate = 25 [default = -1];
      case 25: {
        if (tag == 205) {
         parse_click_through_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &click_through_rate_)));
          set_has_click_through_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_renderer;
        break;
      }

      // optional .BidRequest.AdSlot.Renderer renderer = 26 [default = UNKNOWN_RENDERER];
      case 26: {
        if (tag == 208) {
         parse_renderer:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_Renderer_IsValid(value)) {
            set_renderer(static_cast< ::BidRequest_AdSlot_Renderer >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_allowed_languages;
        break;
      }

      // repeated string allowed_languages = 27;
      case 27: {
        if (tag == 218) {
         parse_allowed_languages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allowed_languages()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->allowed_languages(this->allowed_languages_size() - 1).data(),
            this->allowed_languages(this->allowed_languages_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "allowed_languages");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_allowed_languages;
        if (input->ExpectTag(226)) goto parse_exchange_bidding;
        break;
      }

      // optional .BidRequest.AdSlot.ExchangeBidding exchange_bidding = 28;
      case 28: {
        if (tag == 226) {
         parse_exchange_bidding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchange_bidding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_amp_ad_request_type;
        break;
      }

      // optional .BidRequest.AdSlot.AmpAdRequestType amp_ad_request_type = 29 [default = NON_AMP_PAGE];
      case 29: {
        if (tag == 232) {
         parse_amp_ad_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_AmpAdRequestType_IsValid(value)) {
            set_amp_ad_request_type(static_cast< ::BidRequest_AdSlot_AmpAdRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(29, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_native_ad_template;
        break;
      }

      // repeated .BidRequest.AdSlot.NativeAdTemplate native_ad_template = 51;
      case 51: {
        if (tag == 410) {
         parse_native_ad_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_native_ad_template()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_native_ad_template;
        if (input->ExpectTag(416)) goto parse_mediation_status;
        break;
      }

      // optional .BidRequest.AdSlot.MediationStatus mediation_status = 52 [default = UNKNOWN];
      case 52: {
        if (tag == 416) {
         parse_mediation_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_MediationStatus_IsValid(value)) {
            set_mediation_status(static_cast< ::BidRequest_AdSlot_MediationStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(52, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot)
  return false;
#undef DO_
}

void BidRequest_AdSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 width = 2;
  for (int i = 0; i < this->width_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->width(i), output);
  }

  // repeated int32 height = 3;
  for (int i = 0; i < this->height_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->height(i), output);
  }

  // repeated int32 excluded_attribute = 4 [packed = true];
  if (this->excluded_attribute_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_excluded_attribute_cached_byte_size_);
  }
  for (int i = 0; i < this->excluded_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->excluded_attribute(i), output);
  }

  // repeated int32 DEPRECATED_allowed_attribute = 5;
  for (int i = 0; i < this->deprecated_allowed_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->deprecated_allowed_attribute(i), output);
  }

  // repeated int32 allowed_vendor_type = 6 [packed = true];
  if (this->allowed_vendor_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_allowed_vendor_type_cached_byte_size_);
  }
  for (int i = 0; i < this->allowed_vendor_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->allowed_vendor_type(i), output);
  }

  // repeated int32 excluded_sensitive_category = 7 [packed = true];
  if (this->excluded_sensitive_category_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_excluded_sensitive_category_cached_byte_size_);
  }
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->excluded_sensitive_category(i), output);
  }

  // repeated string DEPRECATED_excluded_click_through_url = 8;
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->deprecated_excluded_click_through_url(i).data(), this->deprecated_excluded_click_through_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "deprecated_excluded_click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->deprecated_excluded_click_through_url(i), output);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
  for (int i = 0; i < this->matching_ad_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->matching_ad_data(i), output);
  }

  // repeated string targetable_channel = 10;
  for (int i = 0; i < this->targetable_channel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->targetable_channel(i).data(), this->targetable_channel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "targetable_channel");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->targetable_channel(i), output);
  }

  // repeated bytes DEPRECATED_publisher_settings_list_id = 11;
  for (int i = 0; i < this->deprecated_publisher_settings_list_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->deprecated_publisher_settings_list_id(i), output);
  }

  // optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
  if (has_slot_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->slot_visibility(), output);
  }

  // repeated int32 excluded_product_category = 13 [packed = true];
  if (this->excluded_product_category_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_excluded_product_category_cached_byte_size_);
  }
  for (int i = 0; i < this->excluded_product_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->excluded_product_category(i), output);
  }

  // optional uint64 ad_block_key = 14;
  if (has_ad_block_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->ad_block_key(), output);
  }

  // repeated fixed64 publisher_settings_list_id = 15;
  for (int i = 0; i < this->publisher_settings_list_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      15, this->publisher_settings_list_id(i), output);
  }

  // repeated int32 allowed_restricted_category = 16 [packed = true];
  if (this->allowed_restricted_category_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_allowed_restricted_category_cached_byte_size_);
  }
  for (int i = 0; i < this->allowed_restricted_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->allowed_restricted_category(i), output);
  }

  // optional .BidRequest.AdSlot.IFramingState iframing_state = 19 [default = UNKNOWN_IFRAME_STATE];
  if (has_iframing_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->iframing_state(), output);
  }

  // optional .BidRequest.AdSlot.IFramingDepth iframing_depth = 20 [default = UNKNOWN_IFRAME_DEPTH];
  if (has_iframing_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->iframing_depth(), output);
  }

  // optional int32 viewability = 21 [default = -1];
  if (has_viewability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->viewability(), output);
  }

  // repeated int32 allowed_restricted_category_for_deals = 22 [packed = true];
  if (this->allowed_restricted_category_for_deals_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_allowed_restricted_category_for_deals_cached_byte_size_);
  }
  for (int i = 0; i < this->allowed_restricted_category_for_deals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->allowed_restricted_category_for_deals(i), output);
  }

  // optional .BidRequest.AdSlot.AutoRefresh auto_refresh = 23;
  if (has_auto_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->auto_refresh(), output);
  }

  // optional .BidRequest.AdSlot.Stickiness stickiness = 24 [default = UNKNOWN_STICKINESS];
  if (has_stickiness()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->stickiness(), output);
  }

  // optional float click_through_rate = 25 [default = -1];
  if (has_click_through_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->click_through_rate(), output);
  }

  // optional .BidRequest.AdSlot.Renderer renderer = 26 [default = UNKNOWN_RENDERER];
  if (has_renderer()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->renderer(), output);
  }

  // repeated string allowed_languages = 27;
  for (int i = 0; i < this->allowed_languages_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->allowed_languages(i).data(), this->allowed_languages(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "allowed_languages");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->allowed_languages(i), output);
  }

  // optional .BidRequest.AdSlot.ExchangeBidding exchange_bidding = 28;
  if (has_exchange_bidding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->exchange_bidding(), output);
  }

  // optional .BidRequest.AdSlot.AmpAdRequestType amp_ad_request_type = 29 [default = NON_AMP_PAGE];
  if (has_amp_ad_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->amp_ad_request_type(), output);
  }

  // repeated .BidRequest.AdSlot.NativeAdTemplate native_ad_template = 51;
  for (int i = 0; i < this->native_ad_template_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->native_ad_template(i), output);
  }

  // optional .BidRequest.AdSlot.MediationStatus mediation_status = 52 [default = UNKNOWN];
  if (has_mediation_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      52, this->mediation_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot)
}

::google::protobuf::uint8* BidRequest_AdSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 width = 2;
  for (int i = 0; i < this->width_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->width(i), target);
  }

  // repeated int32 height = 3;
  for (int i = 0; i < this->height_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->height(i), target);
  }

  // repeated int32 excluded_attribute = 4 [packed = true];
  if (this->excluded_attribute_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _excluded_attribute_cached_byte_size_, target);
  }
  for (int i = 0; i < this->excluded_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->excluded_attribute(i), target);
  }

  // repeated int32 DEPRECATED_allowed_attribute = 5;
  for (int i = 0; i < this->deprecated_allowed_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->deprecated_allowed_attribute(i), target);
  }

  // repeated int32 allowed_vendor_type = 6 [packed = true];
  if (this->allowed_vendor_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _allowed_vendor_type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->allowed_vendor_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->allowed_vendor_type(i), target);
  }

  // repeated int32 excluded_sensitive_category = 7 [packed = true];
  if (this->excluded_sensitive_category_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _excluded_sensitive_category_cached_byte_size_, target);
  }
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->excluded_sensitive_category(i), target);
  }

  // repeated string DEPRECATED_excluded_click_through_url = 8;
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_excluded_click_through_url(i).data(), this->deprecated_excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_excluded_click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->deprecated_excluded_click_through_url(i), target);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
  for (int i = 0; i < this->matching_ad_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->matching_ad_data(i), target);
  }

  // repeated string targetable_channel = 10;
  for (int i = 0; i < this->targetable_channel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetable_channel(i).data(), this->targetable_channel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetable_channel");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->targetable_channel(i), target);
  }

  // repeated bytes DEPRECATED_publisher_settings_list_id = 11;
  for (int i = 0; i < this->deprecated_publisher_settings_list_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(11, this->deprecated_publisher_settings_list_id(i), target);
  }

  // optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
  if (has_slot_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->slot_visibility(), target);
  }

  // repeated int32 excluded_product_category = 13 [packed = true];
  if (this->excluded_product_category_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _excluded_product_category_cached_byte_size_, target);
  }
  for (int i = 0; i < this->excluded_product_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->excluded_product_category(i), target);
  }

  // optional uint64 ad_block_key = 14;
  if (has_ad_block_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->ad_block_key(), target);
  }

  // repeated fixed64 publisher_settings_list_id = 15;
  for (int i = 0; i < this->publisher_settings_list_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(15, this->publisher_settings_list_id(i), target);
  }

  // repeated int32 allowed_restricted_category = 16 [packed = true];
  if (this->allowed_restricted_category_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _allowed_restricted_category_cached_byte_size_, target);
  }
  for (int i = 0; i < this->allowed_restricted_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->allowed_restricted_category(i), target);
  }

  // optional .BidRequest.AdSlot.IFramingState iframing_state = 19 [default = UNKNOWN_IFRAME_STATE];
  if (has_iframing_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->iframing_state(), target);
  }

  // optional .BidRequest.AdSlot.IFramingDepth iframing_depth = 20 [default = UNKNOWN_IFRAME_DEPTH];
  if (has_iframing_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->iframing_depth(), target);
  }

  // optional int32 viewability = 21 [default = -1];
  if (has_viewability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->viewability(), target);
  }

  // repeated int32 allowed_restricted_category_for_deals = 22 [packed = true];
  if (this->allowed_restricted_category_for_deals_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _allowed_restricted_category_for_deals_cached_byte_size_, target);
  }
  for (int i = 0; i < this->allowed_restricted_category_for_deals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->allowed_restricted_category_for_deals(i), target);
  }

  // optional .BidRequest.AdSlot.AutoRefresh auto_refresh = 23;
  if (has_auto_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->auto_refresh(), target);
  }

  // optional .BidRequest.AdSlot.Stickiness stickiness = 24 [default = UNKNOWN_STICKINESS];
  if (has_stickiness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->stickiness(), target);
  }

  // optional float click_through_rate = 25 [default = -1];
  if (has_click_through_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->click_through_rate(), target);
  }

  // optional .BidRequest.AdSlot.Renderer renderer = 26 [default = UNKNOWN_RENDERER];
  if (has_renderer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->renderer(), target);
  }

  // repeated string allowed_languages = 27;
  for (int i = 0; i < this->allowed_languages_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowed_languages(i).data(), this->allowed_languages(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "allowed_languages");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(27, this->allowed_languages(i), target);
  }

  // optional .BidRequest.AdSlot.ExchangeBidding exchange_bidding = 28;
  if (has_exchange_bidding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->exchange_bidding(), target);
  }

  // optional .BidRequest.AdSlot.AmpAdRequestType amp_ad_request_type = 29 [default = NON_AMP_PAGE];
  if (has_amp_ad_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->amp_ad_request_type(), target);
  }

  // repeated .BidRequest.AdSlot.NativeAdTemplate native_ad_template = 51;
  for (int i = 0; i < this->native_ad_template_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->native_ad_template(i), target);
  }

  // optional .BidRequest.AdSlot.MediationStatus mediation_status = 52 [default = UNKNOWN];
  if (has_mediation_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      52, this->mediation_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot)
  return target;
}

int BidRequest_AdSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 ad_block_key = 14;
    if (has_ad_block_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ad_block_key());
    }

  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional .BidRequest.AdSlot.ExchangeBidding exchange_bidding = 28;
    if (has_exchange_bidding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchange_bidding());
    }

    // optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
    if (has_slot_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot_visibility());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 viewability = 21 [default = -1];
    if (has_viewability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewability());
    }

    // optional float click_through_rate = 25 [default = -1];
    if (has_click_through_rate()) {
      total_size += 2 + 4;
    }

    // optional .BidRequest.AdSlot.IFramingState iframing_state = 19 [default = UNKNOWN_IFRAME_STATE];
    if (has_iframing_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->iframing_state());
    }

    // optional .BidRequest.AdSlot.IFramingDepth iframing_depth = 20 [default = UNKNOWN_IFRAME_DEPTH];
    if (has_iframing_depth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->iframing_depth());
    }

    // optional .BidRequest.AdSlot.MediationStatus mediation_status = 52 [default = UNKNOWN];
    if (has_mediation_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mediation_status());
    }

    // optional .BidRequest.AdSlot.AutoRefresh auto_refresh = 23;
    if (has_auto_refresh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auto_refresh());
    }

    // optional .BidRequest.AdSlot.Stickiness stickiness = 24 [default = UNKNOWN_STICKINESS];
    if (has_stickiness()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stickiness());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .BidRequest.AdSlot.Renderer renderer = 26 [default = UNKNOWN_RENDERER];
    if (has_renderer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->renderer());
    }

    // optional .BidRequest.AdSlot.AmpAdRequestType amp_ad_request_type = 29 [default = NON_AMP_PAGE];
    if (has_amp_ad_request_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->amp_ad_request_type());
    }

  }
  // repeated string targetable_channel = 10;
  total_size += 1 * this->targetable_channel_size();
  for (int i = 0; i < this->targetable_channel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->targetable_channel(i));
  }

  // repeated int32 width = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->width_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->width(i));
    }
    total_size += 1 * this->width_size() + data_size;
  }

  // repeated int32 height = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->height_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->height(i));
    }
    total_size += 1 * this->height_size() + data_size;
  }

  // repeated int32 excluded_attribute = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_attribute(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _excluded_attribute_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 allowed_vendor_type = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->allowed_vendor_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allowed_vendor_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allowed_vendor_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 excluded_sensitive_category = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_sensitive_category(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _excluded_sensitive_category_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 allowed_restricted_category = 16 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->allowed_restricted_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allowed_restricted_category(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allowed_restricted_category_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 allowed_restricted_category_for_deals = 22 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->allowed_restricted_category_for_deals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allowed_restricted_category_for_deals(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allowed_restricted_category_for_deals_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string allowed_languages = 27;
  total_size += 2 * this->allowed_languages_size();
  for (int i = 0; i < this->allowed_languages_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allowed_languages(i));
  }

  // repeated int32 excluded_product_category = 13 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_product_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_product_category(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _excluded_product_category_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
  total_size += 1 * this->matching_ad_data_size();
  for (int i = 0; i < this->matching_ad_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matching_ad_data(i));
  }

  // repeated fixed64 publisher_settings_list_id = 15;
  {
    int data_size = 0;
    data_size = 8 * this->publisher_settings_list_id_size();
    total_size += 1 * this->publisher_settings_list_id_size() + data_size;
  }

  // repeated .BidRequest.AdSlot.NativeAdTemplate native_ad_template = 51;
  total_size += 2 * this->native_ad_template_size();
  for (int i = 0; i < this->native_ad_template_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->native_ad_template(i));
  }

  // repeated int32 DEPRECATED_allowed_attribute = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->deprecated_allowed_attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deprecated_allowed_attribute(i));
    }
    total_size += 1 * this->deprecated_allowed_attribute_size() + data_size;
  }

  // repeated bytes DEPRECATED_publisher_settings_list_id = 11;
  total_size += 1 * this->deprecated_publisher_settings_list_id_size();
  for (int i = 0; i < this->deprecated_publisher_settings_list_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->deprecated_publisher_settings_list_id(i));
  }

  // repeated string DEPRECATED_excluded_click_through_url = 8;
  total_size += 1 * this->deprecated_excluded_click_through_url_size();
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deprecated_excluded_click_through_url(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot::MergeFrom(const BidRequest_AdSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetable_channel_.MergeFrom(from.targetable_channel_);
  width_.MergeFrom(from.width_);
  height_.MergeFrom(from.height_);
  excluded_attribute_.MergeFrom(from.excluded_attribute_);
  allowed_vendor_type_.MergeFrom(from.allowed_vendor_type_);
  excluded_sensitive_category_.MergeFrom(from.excluded_sensitive_category_);
  allowed_restricted_category_.MergeFrom(from.allowed_restricted_category_);
  allowed_restricted_category_for_deals_.MergeFrom(from.allowed_restricted_category_for_deals_);
  allowed_languages_.MergeFrom(from.allowed_languages_);
  excluded_product_category_.MergeFrom(from.excluded_product_category_);
  matching_ad_data_.MergeFrom(from.matching_ad_data_);
  publisher_settings_list_id_.MergeFrom(from.publisher_settings_list_id_);
  native_ad_template_.MergeFrom(from.native_ad_template_);
  deprecated_allowed_attribute_.MergeFrom(from.deprecated_allowed_attribute_);
  deprecated_publisher_settings_list_id_.MergeFrom(from.deprecated_publisher_settings_list_id_);
  deprecated_excluded_click_through_url_.MergeFrom(from.deprecated_excluded_click_through_url_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ad_block_key()) {
      set_ad_block_key(from.ad_block_key());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_exchange_bidding()) {
      mutable_exchange_bidding()->::BidRequest_AdSlot_ExchangeBidding::MergeFrom(from.exchange_bidding());
    }
    if (from.has_slot_visibility()) {
      set_slot_visibility(from.slot_visibility());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_viewability()) {
      set_viewability(from.viewability());
    }
    if (from.has_click_through_rate()) {
      set_click_through_rate(from.click_through_rate());
    }
    if (from.has_iframing_state()) {
      set_iframing_state(from.iframing_state());
    }
    if (from.has_iframing_depth()) {
      set_iframing_depth(from.iframing_depth());
    }
    if (from.has_mediation_status()) {
      set_mediation_status(from.mediation_status());
    }
    if (from.has_auto_refresh()) {
      mutable_auto_refresh()->::BidRequest_AdSlot_AutoRefresh::MergeFrom(from.auto_refresh());
    }
    if (from.has_stickiness()) {
      set_stickiness(from.stickiness());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_renderer()) {
      set_renderer(from.renderer());
    }
    if (from.has_amp_ad_request_type()) {
      set_amp_ad_request_type(from.amp_ad_request_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot::CopyFrom(const BidRequest_AdSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_AdSlot::Swap(BidRequest_AdSlot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ad_block_key_, other->ad_block_key_);
    targetable_channel_.Swap(&other->targetable_channel_);
    width_.Swap(&other->width_);
    height_.Swap(&other->height_);
    excluded_attribute_.Swap(&other->excluded_attribute_);
    allowed_vendor_type_.Swap(&other->allowed_vendor_type_);
    excluded_sensitive_category_.Swap(&other->excluded_sensitive_category_);
    allowed_restricted_category_.Swap(&other->allowed_restricted_category_);
    allowed_restricted_category_for_deals_.Swap(&other->allowed_restricted_category_for_deals_);
    allowed_languages_.Swap(&other->allowed_languages_);
    excluded_product_category_.Swap(&other->excluded_product_category_);
    matching_ad_data_.Swap(&other->matching_ad_data_);
    publisher_settings_list_id_.Swap(&other->publisher_settings_list_id_);
    std::swap(exchange_bidding_, other->exchange_bidding_);
    std::swap(slot_visibility_, other->slot_visibility_);
    std::swap(viewability_, other->viewability_);
    std::swap(click_through_rate_, other->click_through_rate_);
    std::swap(iframing_state_, other->iframing_state_);
    std::swap(iframing_depth_, other->iframing_depth_);
    native_ad_template_.Swap(&other->native_ad_template_);
    std::swap(mediation_status_, other->mediation_status_);
    std::swap(auto_refresh_, other->auto_refresh_);
    std::swap(stickiness_, other->stickiness_);
    std::swap(renderer_, other->renderer_);
    std::swap(amp_ad_request_type_, other->amp_ad_request_type_);
    deprecated_allowed_attribute_.Swap(&other->deprecated_allowed_attribute_);
    deprecated_publisher_settings_list_id_.Swap(&other->deprecated_publisher_settings_list_id_);
    deprecated_excluded_click_through_url_.Swap(&other->deprecated_excluded_click_through_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_descriptor_;
  metadata.reflection = BidRequest_AdSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_BidResponseFeedback::kRequestIdFieldNumber;
const int BidRequest_BidResponseFeedback::kCreativeIndexFieldNumber;
const int BidRequest_BidResponseFeedback::kCreativeStatusCodeFieldNumber;
const int BidRequest_BidResponseFeedback::kCpmMicrosFieldNumber;
#endif  // !_MSC_VER

BidRequest_BidResponseFeedback::BidRequest_BidResponseFeedback()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.BidResponseFeedback)
}

void BidRequest_BidResponseFeedback::InitAsDefaultInstance() {
}

BidRequest_BidResponseFeedback::BidRequest_BidResponseFeedback(const BidRequest_BidResponseFeedback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.BidResponseFeedback)
}

void BidRequest_BidResponseFeedback::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_index_ = 0;
  creative_status_code_ = 0;
  cpm_micros_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_BidResponseFeedback::~BidRequest_BidResponseFeedback() {
  // @@protoc_insertion_point(destructor:BidRequest.BidResponseFeedback)
  SharedDtor();
}

void BidRequest_BidResponseFeedback::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_BidResponseFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_BidResponseFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_BidResponseFeedback_descriptor_;
}

const BidRequest_BidResponseFeedback& BidRequest_BidResponseFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_BidResponseFeedback* BidRequest_BidResponseFeedback::default_instance_ = NULL;

BidRequest_BidResponseFeedback* BidRequest_BidResponseFeedback::New() const {
  return new BidRequest_BidResponseFeedback;
}

void BidRequest_BidResponseFeedback::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_BidResponseFeedback*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(creative_index_, cpm_micros_);
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_BidResponseFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.BidResponseFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creative_index;
        break;
      }

      // optional int32 creative_index = 2;
      case 2: {
        if (tag == 16) {
         parse_creative_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_index_)));
          set_has_creative_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creative_status_code;
        break;
      }

      // optional int32 creative_status_code = 3;
      case 3: {
        if (tag == 24) {
         parse_creative_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_status_code_)));
          set_has_creative_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cpm_micros;
        break;
      }

      // optional int64 cpm_micros = 4;
      case 4: {
        if (tag == 32) {
         parse_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpm_micros_)));
          set_has_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.BidResponseFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.BidResponseFeedback)
  return false;
#undef DO_
}

void BidRequest_BidResponseFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.BidResponseFeedback)
  // optional bytes request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->request_id(), output);
  }

  // optional int32 creative_index = 2;
  if (has_creative_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->creative_index(), output);
  }

  // optional int32 creative_status_code = 3;
  if (has_creative_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->creative_status_code(), output);
  }

  // optional int64 cpm_micros = 4;
  if (has_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cpm_micros(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.BidResponseFeedback)
}

::google::protobuf::uint8* BidRequest_BidResponseFeedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.BidResponseFeedback)
  // optional bytes request_id = 1;
  if (has_request_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request_id(), target);
  }

  // optional int32 creative_index = 2;
  if (has_creative_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->creative_index(), target);
  }

  // optional int32 creative_status_code = 3;
  if (has_creative_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->creative_status_code(), target);
  }

  // optional int64 cpm_micros = 4;
  if (has_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cpm_micros(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.BidResponseFeedback)
  return target;
}

int BidRequest_BidResponseFeedback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_id());
    }

    // optional int32 creative_index = 2;
    if (has_creative_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_index());
    }

    // optional int32 creative_status_code = 3;
    if (has_creative_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_status_code());
    }

    // optional int64 cpm_micros = 4;
    if (has_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cpm_micros());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_BidResponseFeedback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_BidResponseFeedback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_BidResponseFeedback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_BidResponseFeedback::MergeFrom(const BidRequest_BidResponseFeedback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_creative_index()) {
      set_creative_index(from.creative_index());
    }
    if (from.has_creative_status_code()) {
      set_creative_status_code(from.creative_status_code());
    }
    if (from.has_cpm_micros()) {
      set_cpm_micros(from.cpm_micros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_BidResponseFeedback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_BidResponseFeedback::CopyFrom(const BidRequest_BidResponseFeedback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_BidResponseFeedback::IsInitialized() const {

  return true;
}

void BidRequest_BidResponseFeedback::Swap(BidRequest_BidResponseFeedback* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(creative_index_, other->creative_index_);
    std::swap(creative_status_code_, other->creative_status_code_);
    std::swap(cpm_micros_, other->cpm_micros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_BidResponseFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_BidResponseFeedback_descriptor_;
  metadata.reflection = BidRequest_BidResponseFeedback_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_MatchingNetwork::kDEPRECATEDNetworkIdFieldNumber;
const int BidRequest_MatchingNetwork::kDEPRECATEDGoogleUserIdFieldNumber;
#endif  // !_MSC_VER

BidRequest_MatchingNetwork::BidRequest_MatchingNetwork()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.MatchingNetwork)
}

void BidRequest_MatchingNetwork::InitAsDefaultInstance() {
}

BidRequest_MatchingNetwork::BidRequest_MatchingNetwork(const BidRequest_MatchingNetwork& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.MatchingNetwork)
}

void BidRequest_MatchingNetwork::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deprecated_network_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_google_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_MatchingNetwork::~BidRequest_MatchingNetwork() {
  // @@protoc_insertion_point(destructor:BidRequest.MatchingNetwork)
  SharedDtor();
}

void BidRequest_MatchingNetwork::SharedDtor() {
  if (deprecated_network_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_network_id_;
  }
  if (deprecated_google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_google_user_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_MatchingNetwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_MatchingNetwork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_MatchingNetwork_descriptor_;
}

const BidRequest_MatchingNetwork& BidRequest_MatchingNetwork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_MatchingNetwork* BidRequest_MatchingNetwork::default_instance_ = NULL;

BidRequest_MatchingNetwork* BidRequest_MatchingNetwork::New() const {
  return new BidRequest_MatchingNetwork;
}

void BidRequest_MatchingNetwork::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_deprecated_network_id()) {
      if (deprecated_network_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_network_id_->clear();
      }
    }
    if (has_deprecated_google_user_id()) {
      if (deprecated_google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_google_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_MatchingNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.MatchingNetwork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DEPRECATED_network_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_network_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_network_id().data(), this->deprecated_network_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_network_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DEPRECATED_google_user_id;
        break;
      }

      // optional string DEPRECATED_google_user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_DEPRECATED_google_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_google_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_google_user_id().data(), this->deprecated_google_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_google_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.MatchingNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.MatchingNetwork)
  return false;
#undef DO_
}

void BidRequest_MatchingNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.MatchingNetwork)
  // optional string DEPRECATED_network_id = 1;
  if (has_deprecated_network_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_network_id().data(), this->deprecated_network_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_network_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deprecated_network_id(), output);
  }

  // optional string DEPRECATED_google_user_id = 2;
  if (has_deprecated_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_google_user_id().data(), this->deprecated_google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_google_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deprecated_google_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.MatchingNetwork)
}

::google::protobuf::uint8* BidRequest_MatchingNetwork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.MatchingNetwork)
  // optional string DEPRECATED_network_id = 1;
  if (has_deprecated_network_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_network_id().data(), this->deprecated_network_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_network_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deprecated_network_id(), target);
  }

  // optional string DEPRECATED_google_user_id = 2;
  if (has_deprecated_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_google_user_id().data(), this->deprecated_google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_google_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deprecated_google_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.MatchingNetwork)
  return target;
}

int BidRequest_MatchingNetwork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string DEPRECATED_network_id = 1;
    if (has_deprecated_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_network_id());
    }

    // optional string DEPRECATED_google_user_id = 2;
    if (has_deprecated_google_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_google_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_MatchingNetwork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_MatchingNetwork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_MatchingNetwork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_MatchingNetwork::MergeFrom(const BidRequest_MatchingNetwork& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deprecated_network_id()) {
      set_deprecated_network_id(from.deprecated_network_id());
    }
    if (from.has_deprecated_google_user_id()) {
      set_deprecated_google_user_id(from.deprecated_google_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_MatchingNetwork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_MatchingNetwork::CopyFrom(const BidRequest_MatchingNetwork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_MatchingNetwork::IsInitialized() const {

  return true;
}

void BidRequest_MatchingNetwork::Swap(BidRequest_MatchingNetwork* other) {
  if (other != this) {
    std::swap(deprecated_network_id_, other->deprecated_network_id_);
    std::swap(deprecated_google_user_id_, other->deprecated_google_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_MatchingNetwork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_MatchingNetwork_descriptor_;
  metadata.reflection = BidRequest_MatchingNetwork_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest::kIdFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kUserDataTreatmentFieldNumber;
const int BidRequest::kGoogleUserIdFieldNumber;
const int BidRequest::kConstrainedUsageGoogleUserIdFieldNumber;
const int BidRequest::kCookieVersionFieldNumber;
const int BidRequest::kCookieAgeSecondsFieldNumber;
const int BidRequest::kHostedMatchDataFieldNumber;
const int BidRequest::kConstrainedUsageHostedMatchDataFieldNumber;
const int BidRequest::kUserAgentFieldNumber;
const int BidRequest::kGeoCriteriaIdFieldNumber;
const int BidRequest::kPostalCodeFieldNumber;
const int BidRequest::kPostalCodePrefixFieldNumber;
const int BidRequest::kEncryptedHyperlocalSetFieldNumber;
const int BidRequest::kHyperlocalSetFieldNumber;
const int BidRequest::kTimezoneOffsetFieldNumber;
const int BidRequest::kUserVerticalFieldNumber;
const int BidRequest::kUserDemographicFieldNumber;
const int BidRequest::kUserListFieldNumber;
const int BidRequest::kSellerNetworkIdFieldNumber;
const int BidRequest::kPartnerIdFieldNumber;
const int BidRequest::kUrlFieldNumber;
const int BidRequest::kAnonymousIdFieldNumber;
const int BidRequest::kDetectedLanguageFieldNumber;
const int BidRequest::kDetectedVerticalFieldNumber;
const int BidRequest::kDetectedContentLabelFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kKeyValueFieldNumber;
const int BidRequest::kMobileFieldNumber;
const int BidRequest::kVideoFieldNumber;
const int BidRequest::kPublisherSettingsListIdFieldNumber;
const int BidRequest::kPublisherTypeFieldNumber;
const int BidRequest::kAdslotFieldNumber;
const int BidRequest::kBidResponseFeedbackFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kIsPingFieldNumber;
const int BidRequest::kIsPredictedToBeIgnoredFieldNumber;
const int BidRequest::kDEPRECATEDProtocolVersionFieldNumber;
const int BidRequest::kDEPRECATEDClickTrackingUrlFieldNumber;
const int BidRequest::kDEPRECATEDCookieFieldNumber;
const int BidRequest::kDEPRECATEDCountryFieldNumber;
const int BidRequest::kDEPRECATEDRegionFieldNumber;
const int BidRequest::kDEPRECATEDCityFieldNumber;
const int BidRequest::kDEPRECATEDMetroFieldNumber;
const int BidRequest::kDEPRECATEDHashedCookieFieldNumber;
const int BidRequest::kDEPRECATEDExcludedClickThroughUrlFieldNumber;
const int BidRequest::kDEPRECATEDSellerNetworkFieldNumber;
const int BidRequest::kDEPRECATEDPublisherSettingsListIdFieldNumber;
const int BidRequest::kDEPRECATEDMatchingNetworkFieldNumber;
const int BidRequest::kDEPRECATEDExperimentalDeadlineFieldNumber;
const int BidRequest::kDEPRECATEDSiteListIdFieldNumber;
const int BidRequest::kDEPRECATEDVerticalDictionaryVersionFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  hyperlocal_set_ = const_cast< ::BidRequest_HyperlocalSet*>(&::BidRequest_HyperlocalSet::default_instance());
  user_demographic_ = const_cast< ::BidRequest_UserDemographic*>(&::BidRequest_UserDemographic::default_instance());
  device_ = const_cast< ::BidRequest_Device*>(&::BidRequest_Device::default_instance());
  mobile_ = const_cast< ::BidRequest_Mobile*>(&::BidRequest_Mobile::default_instance());
  video_ = const_cast< ::BidRequest_Video*>(&::BidRequest_Video::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constrained_usage_google_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_version_ = 0u;
  cookie_age_seconds_ = 0;
  hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constrained_usage_hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_criteria_id_ = 0;
  postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postal_code_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_hyperlocal_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hyperlocal_set_ = NULL;
  timezone_offset_ = 0;
  user_demographic_ = NULL;
  seller_network_id_ = 0;
  partner_id_ = GOOGLE_ULONGLONG(0);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anonymous_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = NULL;
  mobile_ = NULL;
  video_ = NULL;
  publisher_settings_list_id_ = GOOGLE_ULONGLONG(0);
  publisher_type_ = 0;
  is_test_ = false;
  is_ping_ = false;
  is_predicted_to_be_ignored_ = false;
  deprecated_protocol_version_ = 0;
  deprecated_click_tracking_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_cookie_ = GOOGLE_ULONGLONG(0);
  deprecated_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_metro_ = 0;
  deprecated_hashed_cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_seller_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_publisher_settings_list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_experimental_deadline_ = false;
  deprecated_vertical_dictionary_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete google_user_id_;
  }
  if (constrained_usage_google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_google_user_id_;
  }
  if (hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hosted_match_data_;
  }
  if (constrained_usage_hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_hosted_match_data_;
  }
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_agent_;
  }
  if (postal_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete postal_code_;
  }
  if (postal_code_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete postal_code_prefix_;
  }
  if (encrypted_hyperlocal_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypted_hyperlocal_set_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (anonymous_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete anonymous_id_;
  }
  if (deprecated_click_tracking_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_click_tracking_url_;
  }
  if (deprecated_country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_country_;
  }
  if (deprecated_region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_region_;
  }
  if (deprecated_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_city_;
  }
  if (deprecated_hashed_cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_hashed_cookie_;
  }
  if (deprecated_seller_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_seller_network_;
  }
  if (deprecated_publisher_settings_list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_publisher_settings_list_id_;
  }
  if (this != default_instance_) {
    delete hyperlocal_set_;
    delete user_demographic_;
    delete device_;
    delete mobile_;
    delete video_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(cookie_version_, cookie_age_seconds_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_google_user_id()) {
      if (google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        google_user_id_->clear();
      }
    }
    if (has_constrained_usage_google_user_id()) {
      if (constrained_usage_google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        constrained_usage_google_user_id_->clear();
      }
    }
    if (has_hosted_match_data()) {
      if (hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hosted_match_data_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(geo_criteria_id_, timezone_offset_);
    if (has_constrained_usage_hosted_match_data()) {
      if (constrained_usage_hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        constrained_usage_hosted_match_data_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_agent_->clear();
      }
    }
    if (has_postal_code()) {
      if (postal_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        postal_code_->clear();
      }
    }
    if (has_postal_code_prefix()) {
      if (postal_code_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        postal_code_prefix_->clear();
      }
    }
    if (has_encrypted_hyperlocal_set()) {
      if (encrypted_hyperlocal_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypted_hyperlocal_set_->clear();
      }
    }
    if (has_hyperlocal_set()) {
      if (hyperlocal_set_ != NULL) hyperlocal_set_->::BidRequest_HyperlocalSet::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 7995392) {
    if (has_user_demographic()) {
      if (user_demographic_ != NULL) user_demographic_->::BidRequest_UserDemographic::Clear();
    }
    seller_network_id_ = 0;
    partner_id_ = GOOGLE_ULONGLONG(0);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_anonymous_id()) {
      if (anonymous_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        anonymous_id_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4093640704) {
    if (has_device()) {
      if (device_ != NULL) device_->::BidRequest_Device::Clear();
    }
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::BidRequest_Mobile::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::BidRequest_Video::Clear();
    }
    publisher_settings_list_id_ = GOOGLE_ULONGLONG(0);
    publisher_type_ = 0;
  }
  if (_has_bits_[32 / 32] & 252) {
    ZR_(deprecated_protocol_version_, is_predicted_to_be_ignored_);
    if (has_deprecated_click_tracking_url()) {
      if (deprecated_click_tracking_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_click_tracking_url_->clear();
      }
    }
    deprecated_cookie_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[40 / 32] & 57088) {
    if (has_deprecated_country()) {
      if (deprecated_country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_country_->clear();
      }
    }
    if (has_deprecated_region()) {
      if (deprecated_region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_region_->clear();
      }
    }
    if (has_deprecated_city()) {
      if (deprecated_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_city_->clear();
      }
    }
    deprecated_metro_ = 0;
    if (has_deprecated_hashed_cookie()) {
      if (deprecated_hashed_cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_hashed_cookie_->clear();
      }
    }
    if (has_deprecated_seller_network()) {
      if (deprecated_seller_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_seller_network_->clear();
      }
    }
    if (has_deprecated_publisher_settings_list_id()) {
      if (deprecated_publisher_settings_list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_publisher_settings_list_id_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 655360) {
    deprecated_experimental_deadline_ = false;
    deprecated_vertical_dictionary_version_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_data_treatment_.Clear();
  user_vertical_.Clear();
  user_list_.Clear();
  detected_language_.Clear();
  detected_vertical_.Clear();
  detected_content_label_.Clear();
  key_value_.Clear();
  adslot_.Clear();
  bid_response_feedback_.Clear();
  deprecated_excluded_click_through_url_.Clear();
  deprecated_matching_network_.Clear();
  deprecated_site_list_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DEPRECATED_protocol_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_protocol_version_)));
          set_has_deprecated_protocol_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required bytes id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DEPRECATED_click_tracking_url;
        break;
      }

      // optional string DEPRECATED_click_tracking_url = 3;
      case 3: {
        if (tag == 26) {
         parse_DEPRECATED_click_tracking_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_click_tracking_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_click_tracking_url().data(), this->deprecated_click_tracking_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_click_tracking_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional bytes ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DEPRECATED_cookie;
        break;
      }

      // optional uint64 DEPRECATED_cookie = 5;
      case 5: {
        if (tag == 40) {
         parse_DEPRECATED_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deprecated_cookie_)));
          set_has_deprecated_cookie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 6;
      case 6: {
        if (tag == 50) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DEPRECATED_country;
        break;
      }

      // optional string DEPRECATED_country = 7;
      case 7: {
        if (tag == 58) {
         parse_DEPRECATED_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_country().data(), this->deprecated_country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DEPRECATED_region;
        break;
      }

      // optional string DEPRECATED_region = 8;
      case 8: {
        if (tag == 66) {
         parse_DEPRECATED_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_region().data(), this->deprecated_region().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_region");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_DEPRECATED_city;
        break;
      }

      // optional string DEPRECATED_city = 9;
      case 9: {
        if (tag == 74) {
         parse_DEPRECATED_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_city().data(), this->deprecated_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_DEPRECATED_metro;
        break;
      }

      // optional int32 DEPRECATED_metro = 10;
      case 10: {
        if (tag == 80) {
         parse_DEPRECATED_metro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_metro_)));
          set_has_deprecated_metro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_url;
        break;
      }

      // optional string url = 11;
      case 11: {
        if (tag == 90) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_detected_language;
        break;
      }

      // repeated string detected_language = 12;
      case 12: {
        if (tag == 98) {
         parse_detected_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_detected_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detected_language(this->detected_language_size() - 1).data(),
            this->detected_language(this->detected_language_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "detected_language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_detected_language;
        if (input->ExpectTag(106)) goto parse_detected_vertical;
        break;
      }

      // repeated .BidRequest.Vertical detected_vertical = 13;
      case 13: {
        if (tag == 106) {
         parse_detected_vertical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detected_vertical()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_detected_vertical;
        if (input->ExpectTag(114)) goto parse_adslot;
        break;
      }

      // repeated .BidRequest.AdSlot adslot = 14;
      case 14: {
        if (tag == 114) {
         parse_adslot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adslot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_adslot;
        if (input->ExpectTag(120)) goto parse_is_test;
        break;
      }

      // optional bool is_test = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_DEPRECATED_hashed_cookie;
        break;
      }

      // optional bytes DEPRECATED_hashed_cookie = 16;
      case 16: {
        if (tag == 130) {
         parse_DEPRECATED_hashed_cookie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deprecated_hashed_cookie()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_is_ping;
        break;
      }

      // optional bool is_ping = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_DEPRECATED_excluded_click_through_url;
        break;
      }

      // repeated string DEPRECATED_excluded_click_through_url = 18;
      case 18: {
        if (tag == 146) {
         parse_DEPRECATED_excluded_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deprecated_excluded_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_excluded_click_through_url(this->deprecated_excluded_click_through_url_size() - 1).data(),
            this->deprecated_excluded_click_through_url(this->deprecated_excluded_click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_excluded_click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_DEPRECATED_excluded_click_through_url;
        if (input->ExpectTag(154)) goto parse_anonymous_id;
        break;
      }

      // optional string anonymous_id = 19;
      case 19: {
        if (tag == 154) {
         parse_anonymous_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anonymous_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->anonymous_id().data(), this->anonymous_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "anonymous_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_cookie_version;
        break;
      }

      // optional uint32 cookie_version = 20;
      case 20: {
        if (tag == 160) {
         parse_cookie_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookie_version_)));
          set_has_cookie_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_google_user_id;
        break;
      }

      // optional string google_user_id = 21;
      case 21: {
        if (tag == 170) {
         parse_google_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->google_user_id().data(), this->google_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "google_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_DEPRECATED_seller_network;
        break;
      }

      // optional string DEPRECATED_seller_network = 22;
      case 22: {
        if (tag == 178) {
         parse_DEPRECATED_seller_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_seller_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_seller_network().data(), this->deprecated_seller_network().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_seller_network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_DEPRECATED_publisher_settings_list_id;
        break;
      }

      // optional bytes DEPRECATED_publisher_settings_list_id = 23;
      case 23: {
        if (tag == 186) {
         parse_DEPRECATED_publisher_settings_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deprecated_publisher_settings_list_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_DEPRECATED_vertical_dictionary_version;
        break;
      }

      // optional int32 DEPRECATED_vertical_dictionary_version = 24;
      case 24: {
        if (tag == 192) {
         parse_DEPRECATED_vertical_dictionary_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_vertical_dictionary_version_)));
          set_has_deprecated_vertical_dictionary_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_timezone_offset;
        break;
      }

      // optional int32 timezone_offset = 25;
      case 25: {
        if (tag == 200) {
         parse_timezone_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_offset_)));
          set_has_timezone_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_detected_content_label;
        break;
      }

      // repeated int32 detected_content_label = 26 [packed = true];
      case 26: {
        if (tag == 210) {
         parse_detected_content_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_detected_content_label())));
        } else if (tag == 208) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 210, input, this->mutable_detected_content_label())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_DEPRECATED_matching_network;
        break;
      }

      // repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
      case 27: {
        if (tag == 218) {
         parse_DEPRECATED_matching_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deprecated_matching_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_DEPRECATED_matching_network;
        if (input->ExpectTag(226)) goto parse_mobile;
        break;
      }

      // optional .BidRequest.Mobile mobile = 28;
      case 28: {
        if (tag == 226) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_video;
        break;
      }

      // optional .BidRequest.Video video = 29;
      case 29: {
        if (tag == 234) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_user_vertical;
        break;
      }

      // repeated int32 user_vertical = 30 [packed = true];
      case 30: {
        if (tag == 242) {
         parse_user_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_vertical())));
        } else if (tag == 240) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 242, input, this->mutable_user_vertical())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_cookie_age_seconds;
        break;
      }

      // optional int32 cookie_age_seconds = 31;
      case 31: {
        if (tag == 248) {
         parse_cookie_age_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cookie_age_seconds_)));
          set_has_cookie_age_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_user_list;
        break;
      }

      // repeated .BidRequest.UserList user_list = 32;
      case 32: {
        if (tag == 258) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_user_list;
        if (input->ExpectTag(266)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 33;
      case 33: {
        if (tag == 266) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "postal_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_postal_code_prefix;
        break;
      }

      // optional string postal_code_prefix = 34;
      case 34: {
        if (tag == 274) {
         parse_postal_code_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postal_code_prefix().data(), this->postal_code_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "postal_code_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_DEPRECATED_experimental_deadline;
        break;
      }

      // optional bool DEPRECATED_experimental_deadline = 35 [default = false];
      case 35: {
        if (tag == 280) {
         parse_DEPRECATED_experimental_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_experimental_deadline_)));
          set_has_deprecated_experimental_deadline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_DEPRECATED_site_list_id;
        break;
      }

      // repeated int32 DEPRECATED_site_list_id = 36;
      case 36: {
        if (tag == 288) {
         parse_DEPRECATED_site_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 288, input, this->mutable_deprecated_site_list_id())));
        } else if (tag == 290) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deprecated_site_list_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_DEPRECATED_site_list_id;
        if (input->ExpectTag(298)) goto parse_hosted_match_data;
        break;
      }

      // optional bytes hosted_match_data = 37;
      case 37: {
        if (tag == 298) {
         parse_hosted_match_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hosted_match_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_key_value;
        break;
      }

      // repeated .BidRequest.KeyValue key_value = 38;
      case 38: {
        if (tag == 306) {
         parse_key_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_key_value;
        if (input->ExpectTag(312)) goto parse_geo_criteria_id;
        break;
      }

      // optional int32 geo_criteria_id = 39;
      case 39: {
        if (tag == 312) {
         parse_geo_criteria_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geo_criteria_id_)));
          set_has_geo_criteria_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_encrypted_hyperlocal_set;
        break;
      }

      // optional bytes encrypted_hyperlocal_set = 40;
      case 40: {
        if (tag == 322) {
         parse_encrypted_hyperlocal_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_hyperlocal_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_seller_network_id;
        break;
      }

      // optional int32 seller_network_id = 41;
      case 41: {
        if (tag == 328) {
         parse_seller_network_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_network_id_)));
          set_has_seller_network_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(337)) goto parse_publisher_settings_list_id;
        break;
      }

      // optional fixed64 publisher_settings_list_id = 42;
      case 42: {
        if (tag == 337) {
         parse_publisher_settings_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &publisher_settings_list_id_)));
          set_has_publisher_settings_list_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_bid_response_feedback;
        break;
      }

      // repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
      case 44: {
        if (tag == 354) {
         parse_bid_response_feedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bid_response_feedback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_bid_response_feedback;
        if (input->ExpectTag(360)) goto parse_is_predicted_to_be_ignored;
        break;
      }

      // optional bool is_predicted_to_be_ignored = 45 [default = false];
      case 45: {
        if (tag == 360) {
         parse_is_predicted_to_be_ignored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_predicted_to_be_ignored_)));
          set_has_is_predicted_to_be_ignored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_constrained_usage_google_user_id;
        break;
      }

      // optional string constrained_usage_google_user_id = 47;
      case 47: {
        if (tag == 378) {
         parse_constrained_usage_google_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_constrained_usage_google_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->constrained_usage_google_user_id().data(), this->constrained_usage_google_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "constrained_usage_google_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_constrained_usage_hosted_match_data;
        break;
      }

      // optional bytes constrained_usage_hosted_match_data = 48;
      case 48: {
        if (tag == 386) {
         parse_constrained_usage_hosted_match_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_constrained_usage_hosted_match_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_user_data_treatment;
        break;
      }

      // repeated .BidRequest.UserDataTreatment user_data_treatment = 49;
      case 49: {
        if (tag == 392) {
         parse_user_data_treatment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_UserDataTreatment_IsValid(value)) {
            add_user_data_treatment(static_cast< ::BidRequest_UserDataTreatment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(49, value);
          }
        } else if (tag == 394) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::BidRequest_UserDataTreatment_IsValid,
                 this->mutable_user_data_treatment())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_user_data_treatment;
        if (input->ExpectTag(402)) goto parse_user_demographic;
        break;
      }

      // optional .BidRequest.UserDemographic user_demographic = 50;
      case 50: {
        if (tag == 402) {
         parse_user_demographic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_demographic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_publisher_type;
        break;
      }

      // optional .BidRequest.PublisherType publisher_type = 51 [default = UNKNOWN_PUBLISHER_TYPE];
      case 51: {
        if (tag == 408) {
         parse_publisher_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_PublisherType_IsValid(value)) {
            set_publisher_type(static_cast< ::BidRequest_PublisherType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(51, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(417)) goto parse_partner_id;
        break;
      }

      // optional fixed64 partner_id = 52;
      case 52: {
        if (tag == 417) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_hyperlocal_set;
        break;
      }

      // optional .BidRequest.HyperlocalSet hyperlocal_set = 53;
      case 53: {
        if (tag == 426) {
         parse_hyperlocal_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hyperlocal_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_device;
        break;
      }

      // optional .BidRequest.Device device = 54;
      case 54: {
        if (tag == 434) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest)
  // optional int32 DEPRECATED_protocol_version = 1;
  if (has_deprecated_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deprecated_protocol_version(), output);
  }

  // required bytes id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id(), output);
  }

  // optional string DEPRECATED_click_tracking_url = 3;
  if (has_deprecated_click_tracking_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_click_tracking_url().data(), this->deprecated_click_tracking_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_click_tracking_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deprecated_click_tracking_url(), output);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ip(), output);
  }

  // optional uint64 DEPRECATED_cookie = 5;
  if (has_deprecated_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->deprecated_cookie(), output);
  }

  // optional string user_agent = 6;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_agent(), output);
  }

  // optional string DEPRECATED_country = 7;
  if (has_deprecated_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_country().data(), this->deprecated_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->deprecated_country(), output);
  }

  // optional string DEPRECATED_region = 8;
  if (has_deprecated_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_region().data(), this->deprecated_region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->deprecated_region(), output);
  }

  // optional string DEPRECATED_city = 9;
  if (has_deprecated_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_city().data(), this->deprecated_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->deprecated_city(), output);
  }

  // optional int32 DEPRECATED_metro = 10;
  if (has_deprecated_metro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->deprecated_metro(), output);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->url(), output);
  }

  // repeated string detected_language = 12;
  for (int i = 0; i < this->detected_language_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->detected_language(i).data(), this->detected_language(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "detected_language");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->detected_language(i), output);
  }

  // repeated .BidRequest.Vertical detected_vertical = 13;
  for (int i = 0; i < this->detected_vertical_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->detected_vertical(i), output);
  }

  // repeated .BidRequest.AdSlot adslot = 14;
  for (int i = 0; i < this->adslot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->adslot(i), output);
  }

  // optional bool is_test = 15 [default = false];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_test(), output);
  }

  // optional bytes DEPRECATED_hashed_cookie = 16;
  if (has_deprecated_hashed_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->deprecated_hashed_cookie(), output);
  }

  // optional bool is_ping = 17 [default = false];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_ping(), output);
  }

  // repeated string DEPRECATED_excluded_click_through_url = 18;
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->deprecated_excluded_click_through_url(i).data(), this->deprecated_excluded_click_through_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "deprecated_excluded_click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->deprecated_excluded_click_through_url(i), output);
  }

  // optional string anonymous_id = 19;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "anonymous_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->anonymous_id(), output);
  }

  // optional uint32 cookie_version = 20;
  if (has_cookie_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cookie_version(), output);
  }

  // optional string google_user_id = 21;
  if (has_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->google_user_id().data(), this->google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "google_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->google_user_id(), output);
  }

  // optional string DEPRECATED_seller_network = 22;
  if (has_deprecated_seller_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_seller_network().data(), this->deprecated_seller_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_seller_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->deprecated_seller_network(), output);
  }

  // optional bytes DEPRECATED_publisher_settings_list_id = 23;
  if (has_deprecated_publisher_settings_list_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->deprecated_publisher_settings_list_id(), output);
  }

  // optional int32 DEPRECATED_vertical_dictionary_version = 24;
  if (has_deprecated_vertical_dictionary_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->deprecated_vertical_dictionary_version(), output);
  }

  // optional int32 timezone_offset = 25;
  if (has_timezone_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->timezone_offset(), output);
  }

  // repeated int32 detected_content_label = 26 [packed = true];
  if (this->detected_content_label_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(26, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_detected_content_label_cached_byte_size_);
  }
  for (int i = 0; i < this->detected_content_label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->detected_content_label(i), output);
  }

  // repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
  for (int i = 0; i < this->deprecated_matching_network_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->deprecated_matching_network(i), output);
  }

  // optional .BidRequest.Mobile mobile = 28;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->mobile(), output);
  }

  // optional .BidRequest.Video video = 29;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->video(), output);
  }

  // repeated int32 user_vertical = 30 [packed = true];
  if (this->user_vertical_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(30, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_user_vertical_cached_byte_size_);
  }
  for (int i = 0; i < this->user_vertical_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->user_vertical(i), output);
  }

  // optional int32 cookie_age_seconds = 31;
  if (has_cookie_age_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->cookie_age_seconds(), output);
  }

  // repeated .BidRequest.UserList user_list = 32;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->user_list(i), output);
  }

  // optional string postal_code = 33;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "postal_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->postal_code(), output);
  }

  // optional string postal_code_prefix = 34;
  if (has_postal_code_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code_prefix().data(), this->postal_code_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "postal_code_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->postal_code_prefix(), output);
  }

  // optional bool DEPRECATED_experimental_deadline = 35 [default = false];
  if (has_deprecated_experimental_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->deprecated_experimental_deadline(), output);
  }

  // repeated int32 DEPRECATED_site_list_id = 36;
  for (int i = 0; i < this->deprecated_site_list_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      36, this->deprecated_site_list_id(i), output);
  }

  // optional bytes hosted_match_data = 37;
  if (has_hosted_match_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      37, this->hosted_match_data(), output);
  }

  // repeated .BidRequest.KeyValue key_value = 38;
  for (int i = 0; i < this->key_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->key_value(i), output);
  }

  // optional int32 geo_criteria_id = 39;
  if (has_geo_criteria_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->geo_criteria_id(), output);
  }

  // optional bytes encrypted_hyperlocal_set = 40;
  if (has_encrypted_hyperlocal_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      40, this->encrypted_hyperlocal_set(), output);
  }

  // optional int32 seller_network_id = 41;
  if (has_seller_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->seller_network_id(), output);
  }

  // optional fixed64 publisher_settings_list_id = 42;
  if (has_publisher_settings_list_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(42, this->publisher_settings_list_id(), output);
  }

  // repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
  for (int i = 0; i < this->bid_response_feedback_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->bid_response_feedback(i), output);
  }

  // optional bool is_predicted_to_be_ignored = 45 [default = false];
  if (has_is_predicted_to_be_ignored()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->is_predicted_to_be_ignored(), output);
  }

  // optional string constrained_usage_google_user_id = 47;
  if (has_constrained_usage_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->constrained_usage_google_user_id().data(), this->constrained_usage_google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "constrained_usage_google_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->constrained_usage_google_user_id(), output);
  }

  // optional bytes constrained_usage_hosted_match_data = 48;
  if (has_constrained_usage_hosted_match_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      48, this->constrained_usage_hosted_match_data(), output);
  }

  // repeated .BidRequest.UserDataTreatment user_data_treatment = 49;
  for (int i = 0; i < this->user_data_treatment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      49, this->user_data_treatment(i), output);
  }

  // optional .BidRequest.UserDemographic user_demographic = 50;
  if (has_user_demographic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->user_demographic(), output);
  }

  // optional .BidRequest.PublisherType publisher_type = 51 [default = UNKNOWN_PUBLISHER_TYPE];
  if (has_publisher_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      51, this->publisher_type(), output);
  }

  // optional fixed64 partner_id = 52;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(52, this->partner_id(), output);
  }

  // optional .BidRequest.HyperlocalSet hyperlocal_set = 53;
  if (has_hyperlocal_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->hyperlocal_set(), output);
  }

  // optional .BidRequest.Device device = 54;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest)
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest)
  // optional int32 DEPRECATED_protocol_version = 1;
  if (has_deprecated_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deprecated_protocol_version(), target);
  }

  // required bytes id = 2;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }

  // optional string DEPRECATED_click_tracking_url = 3;
  if (has_deprecated_click_tracking_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_click_tracking_url().data(), this->deprecated_click_tracking_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_click_tracking_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deprecated_click_tracking_url(), target);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  // optional uint64 DEPRECATED_cookie = 5;
  if (has_deprecated_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->deprecated_cookie(), target);
  }

  // optional string user_agent = 6;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_agent(), target);
  }

  // optional string DEPRECATED_country = 7;
  if (has_deprecated_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_country().data(), this->deprecated_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deprecated_country(), target);
  }

  // optional string DEPRECATED_region = 8;
  if (has_deprecated_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_region().data(), this->deprecated_region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->deprecated_region(), target);
  }

  // optional string DEPRECATED_city = 9;
  if (has_deprecated_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_city().data(), this->deprecated_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->deprecated_city(), target);
  }

  // optional int32 DEPRECATED_metro = 10;
  if (has_deprecated_metro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->deprecated_metro(), target);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->url(), target);
  }

  // repeated string detected_language = 12;
  for (int i = 0; i < this->detected_language_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language(i).data(), this->detected_language(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detected_language");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->detected_language(i), target);
  }

  // repeated .BidRequest.Vertical detected_vertical = 13;
  for (int i = 0; i < this->detected_vertical_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->detected_vertical(i), target);
  }

  // repeated .BidRequest.AdSlot adslot = 14;
  for (int i = 0; i < this->adslot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->adslot(i), target);
  }

  // optional bool is_test = 15 [default = false];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_test(), target);
  }

  // optional bytes DEPRECATED_hashed_cookie = 16;
  if (has_deprecated_hashed_cookie()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->deprecated_hashed_cookie(), target);
  }

  // optional bool is_ping = 17 [default = false];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_ping(), target);
  }

  // repeated string DEPRECATED_excluded_click_through_url = 18;
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_excluded_click_through_url(i).data(), this->deprecated_excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_excluded_click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->deprecated_excluded_click_through_url(i), target);
  }

  // optional string anonymous_id = 19;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "anonymous_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->anonymous_id(), target);
  }

  // optional uint32 cookie_version = 20;
  if (has_cookie_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cookie_version(), target);
  }

  // optional string google_user_id = 21;
  if (has_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->google_user_id().data(), this->google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "google_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->google_user_id(), target);
  }

  // optional string DEPRECATED_seller_network = 22;
  if (has_deprecated_seller_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_seller_network().data(), this->deprecated_seller_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_seller_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->deprecated_seller_network(), target);
  }

  // optional bytes DEPRECATED_publisher_settings_list_id = 23;
  if (has_deprecated_publisher_settings_list_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->deprecated_publisher_settings_list_id(), target);
  }

  // optional int32 DEPRECATED_vertical_dictionary_version = 24;
  if (has_deprecated_vertical_dictionary_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->deprecated_vertical_dictionary_version(), target);
  }

  // optional int32 timezone_offset = 25;
  if (has_timezone_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->timezone_offset(), target);
  }

  // repeated int32 detected_content_label = 26 [packed = true];
  if (this->detected_content_label_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      26,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _detected_content_label_cached_byte_size_, target);
  }
  for (int i = 0; i < this->detected_content_label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->detected_content_label(i), target);
  }

  // repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
  for (int i = 0; i < this->deprecated_matching_network_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->deprecated_matching_network(i), target);
  }

  // optional .BidRequest.Mobile mobile = 28;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->mobile(), target);
  }

  // optional .BidRequest.Video video = 29;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->video(), target);
  }

  // repeated int32 user_vertical = 30 [packed = true];
  if (this->user_vertical_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      30,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _user_vertical_cached_byte_size_, target);
  }
  for (int i = 0; i < this->user_vertical_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->user_vertical(i), target);
  }

  // optional int32 cookie_age_seconds = 31;
  if (has_cookie_age_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->cookie_age_seconds(), target);
  }

  // repeated .BidRequest.UserList user_list = 32;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->user_list(i), target);
  }

  // optional string postal_code = 33;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "postal_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->postal_code(), target);
  }

  // optional string postal_code_prefix = 34;
  if (has_postal_code_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code_prefix().data(), this->postal_code_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "postal_code_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->postal_code_prefix(), target);
  }

  // optional bool DEPRECATED_experimental_deadline = 35 [default = false];
  if (has_deprecated_experimental_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->deprecated_experimental_deadline(), target);
  }

  // repeated int32 DEPRECATED_site_list_id = 36;
  for (int i = 0; i < this->deprecated_site_list_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(36, this->deprecated_site_list_id(i), target);
  }

  // optional bytes hosted_match_data = 37;
  if (has_hosted_match_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        37, this->hosted_match_data(), target);
  }

  // repeated .BidRequest.KeyValue key_value = 38;
  for (int i = 0; i < this->key_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->key_value(i), target);
  }

  // optional int32 geo_criteria_id = 39;
  if (has_geo_criteria_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->geo_criteria_id(), target);
  }

  // optional bytes encrypted_hyperlocal_set = 40;
  if (has_encrypted_hyperlocal_set()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->encrypted_hyperlocal_set(), target);
  }

  // optional int32 seller_network_id = 41;
  if (has_seller_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->seller_network_id(), target);
  }

  // optional fixed64 publisher_settings_list_id = 42;
  if (has_publisher_settings_list_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(42, this->publisher_settings_list_id(), target);
  }

  // repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
  for (int i = 0; i < this->bid_response_feedback_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->bid_response_feedback(i), target);
  }

  // optional bool is_predicted_to_be_ignored = 45 [default = false];
  if (has_is_predicted_to_be_ignored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->is_predicted_to_be_ignored(), target);
  }

  // optional string constrained_usage_google_user_id = 47;
  if (has_constrained_usage_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->constrained_usage_google_user_id().data(), this->constrained_usage_google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "constrained_usage_google_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->constrained_usage_google_user_id(), target);
  }

  // optional bytes constrained_usage_hosted_match_data = 48;
  if (has_constrained_usage_hosted_match_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        48, this->constrained_usage_hosted_match_data(), target);
  }

  // repeated .BidRequest.UserDataTreatment user_data_treatment = 49;
  for (int i = 0; i < this->user_data_treatment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      49, this->user_data_treatment(i), target);
  }

  // optional .BidRequest.UserDemographic user_demographic = 50;
  if (has_user_demographic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->user_demographic(), target);
  }

  // optional .BidRequest.PublisherType publisher_type = 51 [default = UNKNOWN_PUBLISHER_TYPE];
  if (has_publisher_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      51, this->publisher_type(), target);
  }

  // optional fixed64 partner_id = 52;
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(52, this->partner_id(), target);
  }

  // optional .BidRequest.HyperlocalSet hyperlocal_set = 53;
  if (has_hyperlocal_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->hyperlocal_set(), target);
  }

  // optional .BidRequest.Device device = 54;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional string google_user_id = 21;
    if (has_google_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->google_user_id());
    }

    // optional string constrained_usage_google_user_id = 47;
    if (has_constrained_usage_google_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->constrained_usage_google_user_id());
    }

    // optional uint32 cookie_version = 20;
    if (has_cookie_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookie_version());
    }

    // optional int32 cookie_age_seconds = 31;
    if (has_cookie_age_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cookie_age_seconds());
    }

    // optional bytes hosted_match_data = 37;
    if (has_hosted_match_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hosted_match_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes constrained_usage_hosted_match_data = 48;
    if (has_constrained_usage_hosted_match_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->constrained_usage_hosted_match_data());
    }

    // optional string user_agent = 6;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional int32 geo_criteria_id = 39;
    if (has_geo_criteria_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->geo_criteria_id());
    }

    // optional string postal_code = 33;
    if (has_postal_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

    // optional string postal_code_prefix = 34;
    if (has_postal_code_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code_prefix());
    }

    // optional bytes encrypted_hyperlocal_set = 40;
    if (has_encrypted_hyperlocal_set()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_hyperlocal_set());
    }

    // optional .BidRequest.HyperlocalSet hyperlocal_set = 53;
    if (has_hyperlocal_set()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hyperlocal_set());
    }

    // optional int32 timezone_offset = 25;
    if (has_timezone_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone_offset());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .BidRequest.UserDemographic user_demographic = 50;
    if (has_user_demographic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_demographic());
    }

    // optional int32 seller_network_id = 41;
    if (has_seller_network_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_network_id());
    }

    // optional fixed64 partner_id = 52;
    if (has_partner_id()) {
      total_size += 2 + 8;
    }

    // optional string url = 11;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string anonymous_id = 19;
    if (has_anonymous_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anonymous_id());
    }

  }
  if (_has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    // optional .BidRequest.Device device = 54;
    if (has_device()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional .BidRequest.Mobile mobile = 28;
    if (has_mobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

    // optional .BidRequest.Video video = 29;
    if (has_video()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional fixed64 publisher_settings_list_id = 42;
    if (has_publisher_settings_list_id()) {
      total_size += 2 + 8;
    }

    // optional .BidRequest.PublisherType publisher_type = 51 [default = UNKNOWN_PUBLISHER_TYPE];
    if (has_publisher_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->publisher_type());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional bool is_test = 15 [default = false];
    if (has_is_test()) {
      total_size += 1 + 1;
    }

    // optional bool is_ping = 17 [default = false];
    if (has_is_ping()) {
      total_size += 2 + 1;
    }

    // optional bool is_predicted_to_be_ignored = 45 [default = false];
    if (has_is_predicted_to_be_ignored()) {
      total_size += 2 + 1;
    }

    // optional int32 DEPRECATED_protocol_version = 1;
    if (has_deprecated_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_protocol_version());
    }

    // optional string DEPRECATED_click_tracking_url = 3;
    if (has_deprecated_click_tracking_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_click_tracking_url());
    }

    // optional uint64 DEPRECATED_cookie = 5;
    if (has_deprecated_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deprecated_cookie());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string DEPRECATED_country = 7;
    if (has_deprecated_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_country());
    }

    // optional string DEPRECATED_region = 8;
    if (has_deprecated_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_region());
    }

    // optional string DEPRECATED_city = 9;
    if (has_deprecated_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_city());
    }

    // optional int32 DEPRECATED_metro = 10;
    if (has_deprecated_metro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_metro());
    }

    // optional bytes DEPRECATED_hashed_cookie = 16;
    if (has_deprecated_hashed_cookie()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deprecated_hashed_cookie());
    }

    // optional string DEPRECATED_seller_network = 22;
    if (has_deprecated_seller_network()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_seller_network());
    }

    // optional bytes DEPRECATED_publisher_settings_list_id = 23;
    if (has_deprecated_publisher_settings_list_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deprecated_publisher_settings_list_id());
    }

  }
  if (_has_bits_[49 / 32] & (0xffu << (49 % 32))) {
    // optional bool DEPRECATED_experimental_deadline = 35 [default = false];
    if (has_deprecated_experimental_deadline()) {
      total_size += 2 + 1;
    }

    // optional int32 DEPRECATED_vertical_dictionary_version = 24;
    if (has_deprecated_vertical_dictionary_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_vertical_dictionary_version());
    }

  }
  // repeated .BidRequest.UserDataTreatment user_data_treatment = 49;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_data_treatment_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->user_data_treatment(i));
    }
    total_size += 2 * this->user_data_treatment_size() + data_size;
  }

  // repeated int32 user_vertical = 30 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->user_vertical_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user_vertical(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _user_vertical_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .BidRequest.UserList user_list = 32;
  total_size += 2 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  // repeated string detected_language = 12;
  total_size += 1 * this->detected_language_size();
  for (int i = 0; i < this->detected_language_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->detected_language(i));
  }

  // repeated .BidRequest.Vertical detected_vertical = 13;
  total_size += 1 * this->detected_vertical_size();
  for (int i = 0; i < this->detected_vertical_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detected_vertical(i));
  }

  // repeated int32 detected_content_label = 26 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->detected_content_label_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->detected_content_label(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _detected_content_label_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .BidRequest.KeyValue key_value = 38;
  total_size += 2 * this->key_value_size();
  for (int i = 0; i < this->key_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key_value(i));
  }

  // repeated .BidRequest.AdSlot adslot = 14;
  total_size += 1 * this->adslot_size();
  for (int i = 0; i < this->adslot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adslot(i));
  }

  // repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
  total_size += 2 * this->bid_response_feedback_size();
  for (int i = 0; i < this->bid_response_feedback_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid_response_feedback(i));
  }

  // repeated string DEPRECATED_excluded_click_through_url = 18;
  total_size += 2 * this->deprecated_excluded_click_through_url_size();
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deprecated_excluded_click_through_url(i));
  }

  // repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
  total_size += 2 * this->deprecated_matching_network_size();
  for (int i = 0; i < this->deprecated_matching_network_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deprecated_matching_network(i));
  }

  // repeated int32 DEPRECATED_site_list_id = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->deprecated_site_list_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deprecated_site_list_id(i));
    }
    total_size += 2 * this->deprecated_site_list_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_data_treatment_.MergeFrom(from.user_data_treatment_);
  user_vertical_.MergeFrom(from.user_vertical_);
  user_list_.MergeFrom(from.user_list_);
  detected_language_.MergeFrom(from.detected_language_);
  detected_vertical_.MergeFrom(from.detected_vertical_);
  detected_content_label_.MergeFrom(from.detected_content_label_);
  key_value_.MergeFrom(from.key_value_);
  adslot_.MergeFrom(from.adslot_);
  bid_response_feedback_.MergeFrom(from.bid_response_feedback_);
  deprecated_excluded_click_through_url_.MergeFrom(from.deprecated_excluded_click_through_url_);
  deprecated_matching_network_.MergeFrom(from.deprecated_matching_network_);
  deprecated_site_list_id_.MergeFrom(from.deprecated_site_list_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_google_user_id()) {
      set_google_user_id(from.google_user_id());
    }
    if (from.has_constrained_usage_google_user_id()) {
      set_constrained_usage_google_user_id(from.constrained_usage_google_user_id());
    }
    if (from.has_cookie_version()) {
      set_cookie_version(from.cookie_version());
    }
    if (from.has_cookie_age_seconds()) {
      set_cookie_age_seconds(from.cookie_age_seconds());
    }
    if (from.has_hosted_match_data()) {
      set_hosted_match_data(from.hosted_match_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_constrained_usage_hosted_match_data()) {
      set_constrained_usage_hosted_match_data(from.constrained_usage_hosted_match_data());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_geo_criteria_id()) {
      set_geo_criteria_id(from.geo_criteria_id());
    }
    if (from.has_postal_code()) {
      set_postal_code(from.postal_code());
    }
    if (from.has_postal_code_prefix()) {
      set_postal_code_prefix(from.postal_code_prefix());
    }
    if (from.has_encrypted_hyperlocal_set()) {
      set_encrypted_hyperlocal_set(from.encrypted_hyperlocal_set());
    }
    if (from.has_hyperlocal_set()) {
      mutable_hyperlocal_set()->::BidRequest_HyperlocalSet::MergeFrom(from.hyperlocal_set());
    }
    if (from.has_timezone_offset()) {
      set_timezone_offset(from.timezone_offset());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_user_demographic()) {
      mutable_user_demographic()->::BidRequest_UserDemographic::MergeFrom(from.user_demographic());
    }
    if (from.has_seller_network_id()) {
      set_seller_network_id(from.seller_network_id());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_anonymous_id()) {
      set_anonymous_id(from.anonymous_id());
    }
  }
  if (from._has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    if (from.has_device()) {
      mutable_device()->::BidRequest_Device::MergeFrom(from.device());
    }
    if (from.has_mobile()) {
      mutable_mobile()->::BidRequest_Mobile::MergeFrom(from.mobile());
    }
    if (from.has_video()) {
      mutable_video()->::BidRequest_Video::MergeFrom(from.video());
    }
    if (from.has_publisher_settings_list_id()) {
      set_publisher_settings_list_id(from.publisher_settings_list_id());
    }
    if (from.has_publisher_type()) {
      set_publisher_type(from.publisher_type());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
    if (from.has_is_predicted_to_be_ignored()) {
      set_is_predicted_to_be_ignored(from.is_predicted_to_be_ignored());
    }
    if (from.has_deprecated_protocol_version()) {
      set_deprecated_protocol_version(from.deprecated_protocol_version());
    }
    if (from.has_deprecated_click_tracking_url()) {
      set_deprecated_click_tracking_url(from.deprecated_click_tracking_url());
    }
    if (from.has_deprecated_cookie()) {
      set_deprecated_cookie(from.deprecated_cookie());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_deprecated_country()) {
      set_deprecated_country(from.deprecated_country());
    }
    if (from.has_deprecated_region()) {
      set_deprecated_region(from.deprecated_region());
    }
    if (from.has_deprecated_city()) {
      set_deprecated_city(from.deprecated_city());
    }
    if (from.has_deprecated_metro()) {
      set_deprecated_metro(from.deprecated_metro());
    }
    if (from.has_deprecated_hashed_cookie()) {
      set_deprecated_hashed_cookie(from.deprecated_hashed_cookie());
    }
    if (from.has_deprecated_seller_network()) {
      set_deprecated_seller_network(from.deprecated_seller_network());
    }
    if (from.has_deprecated_publisher_settings_list_id()) {
      set_deprecated_publisher_settings_list_id(from.deprecated_publisher_settings_list_id());
    }
  }
  if (from._has_bits_[49 / 32] & (0xffu << (49 % 32))) {
    if (from.has_deprecated_experimental_deadline()) {
      set_deprecated_experimental_deadline(from.deprecated_experimental_deadline());
    }
    if (from.has_deprecated_vertical_dictionary_version()) {
      set_deprecated_vertical_dictionary_version(from.deprecated_vertical_dictionary_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->detected_vertical())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->adslot())) return false;
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    user_data_treatment_.Swap(&other->user_data_treatment_);
    std::swap(google_user_id_, other->google_user_id_);
    std::swap(constrained_usage_google_user_id_, other->constrained_usage_google_user_id_);
    std::swap(cookie_version_, other->cookie_version_);
    std::swap(cookie_age_seconds_, other->cookie_age_seconds_);
    std::swap(hosted_match_data_, other->hosted_match_data_);
    std::swap(constrained_usage_hosted_match_data_, other->constrained_usage_hosted_match_data_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(geo_criteria_id_, other->geo_criteria_id_);
    std::swap(postal_code_, other->postal_code_);
    std::swap(postal_code_prefix_, other->postal_code_prefix_);
    std::swap(encrypted_hyperlocal_set_, other->encrypted_hyperlocal_set_);
    std::swap(hyperlocal_set_, other->hyperlocal_set_);
    std::swap(timezone_offset_, other->timezone_offset_);
    user_vertical_.Swap(&other->user_vertical_);
    std::swap(user_demographic_, other->user_demographic_);
    user_list_.Swap(&other->user_list_);
    std::swap(seller_network_id_, other->seller_network_id_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(url_, other->url_);
    std::swap(anonymous_id_, other->anonymous_id_);
    detected_language_.Swap(&other->detected_language_);
    detected_vertical_.Swap(&other->detected_vertical_);
    detected_content_label_.Swap(&other->detected_content_label_);
    std::swap(device_, other->device_);
    key_value_.Swap(&other->key_value_);
    std::swap(mobile_, other->mobile_);
    std::swap(video_, other->video_);
    std::swap(publisher_settings_list_id_, other->publisher_settings_list_id_);
    std::swap(publisher_type_, other->publisher_type_);
    adslot_.Swap(&other->adslot_);
    bid_response_feedback_.Swap(&other->bid_response_feedback_);
    std::swap(is_test_, other->is_test_);
    std::swap(is_ping_, other->is_ping_);
    std::swap(is_predicted_to_be_ignored_, other->is_predicted_to_be_ignored_);
    std::swap(deprecated_protocol_version_, other->deprecated_protocol_version_);
    std::swap(deprecated_click_tracking_url_, other->deprecated_click_tracking_url_);
    std::swap(deprecated_cookie_, other->deprecated_cookie_);
    std::swap(deprecated_country_, other->deprecated_country_);
    std::swap(deprecated_region_, other->deprecated_region_);
    std::swap(deprecated_city_, other->deprecated_city_);
    std::swap(deprecated_metro_, other->deprecated_metro_);
    std::swap(deprecated_hashed_cookie_, other->deprecated_hashed_cookie_);
    deprecated_excluded_click_through_url_.Swap(&other->deprecated_excluded_click_through_url_);
    std::swap(deprecated_seller_network_, other->deprecated_seller_network_);
    std::swap(deprecated_publisher_settings_list_id_, other->deprecated_publisher_settings_list_id_);
    deprecated_matching_network_.Swap(&other->deprecated_matching_network_);
    std::swap(deprecated_experimental_deadline_, other->deprecated_experimental_deadline_);
    deprecated_site_list_id_.Swap(&other->deprecated_site_list_id_);
    std::swap(deprecated_vertical_dictionary_version_, other->deprecated_vertical_dictionary_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse_Ad_NativeAd_Image::kUrlFieldNumber;
const int BidResponse_Ad_NativeAd_Image::kWidthFieldNumber;
const int BidResponse_Ad_NativeAd_Image::kHeightFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ad_NativeAd_Image::BidResponse_Ad_NativeAd_Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad.NativeAd.Image)
}

void BidResponse_Ad_NativeAd_Image::InitAsDefaultInstance() {
}

BidResponse_Ad_NativeAd_Image::BidResponse_Ad_NativeAd_Image(const BidResponse_Ad_NativeAd_Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad.NativeAd.Image)
}

void BidResponse_Ad_NativeAd_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_NativeAd_Image::~BidResponse_Ad_NativeAd_Image() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad.NativeAd.Image)
  SharedDtor();
}

void BidResponse_Ad_NativeAd_Image::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_NativeAd_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_NativeAd_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_NativeAd_Image_descriptor_;
}

const BidResponse_Ad_NativeAd_Image& BidResponse_Ad_NativeAd_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd_Image::default_instance_ = NULL;

BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd_Image::New() const {
  return new BidResponse_Ad_NativeAd_Image;
}

void BidResponse_Ad_NativeAd_Image::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_Ad_NativeAd_Image*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(width_, height_);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ad_NativeAd_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad.NativeAd.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad.NativeAd.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad.NativeAd.Image)
  return false;
#undef DO_
}

void BidResponse_Ad_NativeAd_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad.NativeAd.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad.NativeAd.Image)
}

::google::protobuf::uint8* BidResponse_Ad_NativeAd_Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad.NativeAd.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad.NativeAd.Image)
  return target;
}

int BidResponse_Ad_NativeAd_Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_NativeAd_Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ad_NativeAd_Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ad_NativeAd_Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad_NativeAd_Image::MergeFrom(const BidResponse_Ad_NativeAd_Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ad_NativeAd_Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_NativeAd_Image::CopyFrom(const BidResponse_Ad_NativeAd_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_NativeAd_Image::IsInitialized() const {

  return true;
}

void BidResponse_Ad_NativeAd_Image::Swap(BidResponse_Ad_NativeAd_Image* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ad_NativeAd_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_NativeAd_Image_descriptor_;
  metadata.reflection = BidResponse_Ad_NativeAd_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_Ad_NativeAd::kHeadlineFieldNumber;
const int BidResponse_Ad_NativeAd::kBodyFieldNumber;
const int BidResponse_Ad_NativeAd::kCallToActionFieldNumber;
const int BidResponse_Ad_NativeAd::kAdvertiserFieldNumber;
const int BidResponse_Ad_NativeAd::kImageFieldNumber;
const int BidResponse_Ad_NativeAd::kLogoFieldNumber;
const int BidResponse_Ad_NativeAd::kAppIconFieldNumber;
const int BidResponse_Ad_NativeAd::kStarRatingFieldNumber;
const int BidResponse_Ad_NativeAd::kClickTrackingUrlFieldNumber;
const int BidResponse_Ad_NativeAd::kPriceFieldNumber;
const int BidResponse_Ad_NativeAd::kStoreFieldNumber;
const int BidResponse_Ad_NativeAd::kDEPRECATEDImpressionTrackingUrlFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ad_NativeAd::BidResponse_Ad_NativeAd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad.NativeAd)
}

void BidResponse_Ad_NativeAd::InitAsDefaultInstance() {
  image_ = const_cast< ::BidResponse_Ad_NativeAd_Image*>(&::BidResponse_Ad_NativeAd_Image::default_instance());
  logo_ = const_cast< ::BidResponse_Ad_NativeAd_Image*>(&::BidResponse_Ad_NativeAd_Image::default_instance());
  app_icon_ = const_cast< ::BidResponse_Ad_NativeAd_Image*>(&::BidResponse_Ad_NativeAd_Image::default_instance());
}

BidResponse_Ad_NativeAd::BidResponse_Ad_NativeAd(const BidResponse_Ad_NativeAd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad.NativeAd)
}

void BidResponse_Ad_NativeAd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_to_action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advertiser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = NULL;
  logo_ = NULL;
  app_icon_ = NULL;
  star_rating_ = 0;
  click_tracking_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_NativeAd::~BidResponse_Ad_NativeAd() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad.NativeAd)
  SharedDtor();
}

void BidResponse_Ad_NativeAd::SharedDtor() {
  if (headline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headline_;
  }
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (call_to_action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete call_to_action_;
  }
  if (advertiser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete advertiser_;
  }
  if (click_tracking_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete click_tracking_url_;
  }
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (store_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete store_;
  }
  if (this != default_instance_) {
    delete image_;
    delete logo_;
    delete app_icon_;
  }
}

void BidResponse_Ad_NativeAd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_NativeAd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_NativeAd_descriptor_;
}

const BidResponse_Ad_NativeAd& BidResponse_Ad_NativeAd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_NativeAd* BidResponse_Ad_NativeAd::default_instance_ = NULL;

BidResponse_Ad_NativeAd* BidResponse_Ad_NativeAd::New() const {
  return new BidResponse_Ad_NativeAd;
}

void BidResponse_Ad_NativeAd::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_headline()) {
      if (headline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        headline_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
    if (has_call_to_action()) {
      if (call_to_action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        call_to_action_->clear();
      }
    }
    if (has_advertiser()) {
      if (advertiser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        advertiser_->clear();
      }
    }
    if (has_image()) {
      if (image_ != NULL) image_->::BidResponse_Ad_NativeAd_Image::Clear();
    }
    if (has_logo()) {
      if (logo_ != NULL) logo_->::BidResponse_Ad_NativeAd_Image::Clear();
    }
    if (has_app_icon()) {
      if (app_icon_ != NULL) app_icon_->::BidResponse_Ad_NativeAd_Image::Clear();
    }
    star_rating_ = 0;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_click_tracking_url()) {
      if (click_tracking_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        click_tracking_url_->clear();
      }
    }
    if (has_price()) {
      if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        price_->clear();
      }
    }
    if (has_store()) {
      if (store_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        store_->clear();
      }
    }
  }
  deprecated_impression_tracking_url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ad_NativeAd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad.NativeAd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string headline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headline().data(), this->headline().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "headline");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional string body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "body");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_call_to_action;
        break;
      }

      // optional string call_to_action = 3;
      case 3: {
        if (tag == 26) {
         parse_call_to_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_to_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->call_to_action().data(), this->call_to_action().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "call_to_action");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_advertiser;
        break;
      }

      // optional string advertiser = 4;
      case 4: {
        if (tag == 34) {
         parse_advertiser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_advertiser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->advertiser().data(), this->advertiser().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "advertiser");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image;
        break;
      }

      // optional .BidResponse.Ad.NativeAd.Image image = 5;
      case 5: {
        if (tag == 42) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_logo;
        break;
      }

      // optional .BidResponse.Ad.NativeAd.Image logo = 6;
      case 6: {
        if (tag == 50) {
         parse_logo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_app_icon;
        break;
      }

      // optional .BidResponse.Ad.NativeAd.Image app_icon = 7;
      case 7: {
        if (tag == 58) {
         parse_app_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_star_rating;
        break;
      }

      // optional double star_rating = 8;
      case 8: {
        if (tag == 65) {
         parse_star_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &star_rating_)));
          set_has_star_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_DEPRECATED_impression_tracking_url;
        break;
      }

      // repeated string DEPRECATED_impression_tracking_url = 9;
      case 9: {
        if (tag == 74) {
         parse_DEPRECATED_impression_tracking_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deprecated_impression_tracking_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_impression_tracking_url(this->deprecated_impression_tracking_url_size() - 1).data(),
            this->deprecated_impression_tracking_url(this->deprecated_impression_tracking_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_impression_tracking_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_DEPRECATED_impression_tracking_url;
        if (input->ExpectTag(82)) goto parse_price;
        break;
      }

      // optional string price = 10;
      case 10: {
        if (tag == 82) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "price");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_click_tracking_url;
        break;
      }

      // optional string click_tracking_url = 11;
      case 11: {
        if (tag == 90) {
         parse_click_tracking_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_click_tracking_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_tracking_url().data(), this->click_tracking_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_tracking_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_store;
        break;
      }

      // optional string store = 12;
      case 12: {
        if (tag == 98) {
         parse_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->store().data(), this->store().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "store");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad.NativeAd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad.NativeAd)
  return false;
#undef DO_
}

void BidResponse_Ad_NativeAd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad.NativeAd)
  // optional string headline = 1;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->headline(), output);
  }

  // optional string body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->body(), output);
  }

  // optional string call_to_action = 3;
  if (has_call_to_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->call_to_action().data(), this->call_to_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "call_to_action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->call_to_action(), output);
  }

  // optional string advertiser = 4;
  if (has_advertiser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advertiser().data(), this->advertiser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "advertiser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->advertiser(), output);
  }

  // optional .BidResponse.Ad.NativeAd.Image image = 5;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->image(), output);
  }

  // optional .BidResponse.Ad.NativeAd.Image logo = 6;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->logo(), output);
  }

  // optional .BidResponse.Ad.NativeAd.Image app_icon = 7;
  if (has_app_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->app_icon(), output);
  }

  // optional double star_rating = 8;
  if (has_star_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->star_rating(), output);
  }

  // repeated string DEPRECATED_impression_tracking_url = 9;
  for (int i = 0; i < this->deprecated_impression_tracking_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->deprecated_impression_tracking_url(i).data(), this->deprecated_impression_tracking_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "deprecated_impression_tracking_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->deprecated_impression_tracking_url(i), output);
  }

  // optional string price = 10;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->price(), output);
  }

  // optional string click_tracking_url = 11;
  if (has_click_tracking_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_tracking_url().data(), this->click_tracking_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_tracking_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->click_tracking_url(), output);
  }

  // optional string store = 12;
  if (has_store()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store().data(), this->store().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "store");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->store(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad.NativeAd)
}

::google::protobuf::uint8* BidResponse_Ad_NativeAd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad.NativeAd)
  // optional string headline = 1;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->headline(), target);
  }

  // optional string body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body(), target);
  }

  // optional string call_to_action = 3;
  if (has_call_to_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->call_to_action().data(), this->call_to_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "call_to_action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->call_to_action(), target);
  }

  // optional string advertiser = 4;
  if (has_advertiser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advertiser().data(), this->advertiser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "advertiser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->advertiser(), target);
  }

  // optional .BidResponse.Ad.NativeAd.Image image = 5;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->image(), target);
  }

  // optional .BidResponse.Ad.NativeAd.Image logo = 6;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->logo(), target);
  }

  // optional .BidResponse.Ad.NativeAd.Image app_icon = 7;
  if (has_app_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->app_icon(), target);
  }

  // optional double star_rating = 8;
  if (has_star_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->star_rating(), target);
  }

  // repeated string DEPRECATED_impression_tracking_url = 9;
  for (int i = 0; i < this->deprecated_impression_tracking_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_impression_tracking_url(i).data(), this->deprecated_impression_tracking_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_impression_tracking_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->deprecated_impression_tracking_url(i), target);
  }

  // optional string price = 10;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->price(), target);
  }

  // optional string click_tracking_url = 11;
  if (has_click_tracking_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_tracking_url().data(), this->click_tracking_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_tracking_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->click_tracking_url(), target);
  }

  // optional string store = 12;
  if (has_store()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store().data(), this->store().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "store");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->store(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad.NativeAd)
  return target;
}

int BidResponse_Ad_NativeAd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string headline = 1;
    if (has_headline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

    // optional string body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional string call_to_action = 3;
    if (has_call_to_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->call_to_action());
    }

    // optional string advertiser = 4;
    if (has_advertiser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->advertiser());
    }

    // optional .BidResponse.Ad.NativeAd.Image image = 5;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .BidResponse.Ad.NativeAd.Image logo = 6;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logo());
    }

    // optional .BidResponse.Ad.NativeAd.Image app_icon = 7;
    if (has_app_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_icon());
    }

    // optional double star_rating = 8;
    if (has_star_rating()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string click_tracking_url = 11;
    if (has_click_tracking_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->click_tracking_url());
    }

    // optional string price = 10;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // optional string store = 12;
    if (has_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store());
    }

  }
  // repeated string DEPRECATED_impression_tracking_url = 9;
  total_size += 1 * this->deprecated_impression_tracking_url_size();
  for (int i = 0; i < this->deprecated_impression_tracking_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deprecated_impression_tracking_url(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_NativeAd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ad_NativeAd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ad_NativeAd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad_NativeAd::MergeFrom(const BidResponse_Ad_NativeAd& from) {
  GOOGLE_CHECK_NE(&from, this);
  deprecated_impression_tracking_url_.MergeFrom(from.deprecated_impression_tracking_url_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headline()) {
      set_headline(from.headline());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_call_to_action()) {
      set_call_to_action(from.call_to_action());
    }
    if (from.has_advertiser()) {
      set_advertiser(from.advertiser());
    }
    if (from.has_image()) {
      mutable_image()->::BidResponse_Ad_NativeAd_Image::MergeFrom(from.image());
    }
    if (from.has_logo()) {
      mutable_logo()->::BidResponse_Ad_NativeAd_Image::MergeFrom(from.logo());
    }
    if (from.has_app_icon()) {
      mutable_app_icon()->::BidResponse_Ad_NativeAd_Image::MergeFrom(from.app_icon());
    }
    if (from.has_star_rating()) {
      set_star_rating(from.star_rating());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_click_tracking_url()) {
      set_click_tracking_url(from.click_tracking_url());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_store()) {
      set_store(from.store());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ad_NativeAd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_NativeAd::CopyFrom(const BidResponse_Ad_NativeAd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_NativeAd::IsInitialized() const {

  return true;
}

void BidResponse_Ad_NativeAd::Swap(BidResponse_Ad_NativeAd* other) {
  if (other != this) {
    std::swap(headline_, other->headline_);
    std::swap(body_, other->body_);
    std::swap(call_to_action_, other->call_to_action_);
    std::swap(advertiser_, other->advertiser_);
    std::swap(image_, other->image_);
    std::swap(logo_, other->logo_);
    std::swap(app_icon_, other->app_icon_);
    std::swap(star_rating_, other->star_rating_);
    std::swap(click_tracking_url_, other->click_tracking_url_);
    std::swap(price_, other->price_);
    std::swap(store_, other->store_);
    deprecated_impression_tracking_url_.Swap(&other->deprecated_impression_tracking_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ad_NativeAd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_NativeAd_descriptor_;
  metadata.reflection = BidResponse_Ad_NativeAd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_Ad_AdSlot::kIdFieldNumber;
const int BidResponse_Ad_AdSlot::kMaxCpmMicrosFieldNumber;
const int BidResponse_Ad_AdSlot::kMinCpmMicrosFieldNumber;
const int BidResponse_Ad_AdSlot::kBillingIdFieldNumber;
const int BidResponse_Ad_AdSlot::kDealIdFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ad_AdSlot::BidResponse_Ad_AdSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad.AdSlot)
}

void BidResponse_Ad_AdSlot::InitAsDefaultInstance() {
}

BidResponse_Ad_AdSlot::BidResponse_Ad_AdSlot(const BidResponse_Ad_AdSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad.AdSlot)
}

void BidResponse_Ad_AdSlot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  max_cpm_micros_ = GOOGLE_LONGLONG(0);
  min_cpm_micros_ = GOOGLE_LONGLONG(0);
  billing_id_ = GOOGLE_LONGLONG(0);
  deal_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_AdSlot::~BidResponse_Ad_AdSlot() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad.AdSlot)
  SharedDtor();
}

void BidResponse_Ad_AdSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_AdSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_AdSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_AdSlot_descriptor_;
}

const BidResponse_Ad_AdSlot& BidResponse_Ad_AdSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_AdSlot* BidResponse_Ad_AdSlot::default_instance_ = NULL;

BidResponse_Ad_AdSlot* BidResponse_Ad_AdSlot::New() const {
  return new BidResponse_Ad_AdSlot;
}

void BidResponse_Ad_AdSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_Ad_AdSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(max_cpm_micros_, id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ad_AdSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad.AdSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_cpm_micros;
        break;
      }

      // required int64 max_cpm_micros = 2;
      case 2: {
        if (tag == 16) {
         parse_max_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_cpm_micros_)));
          set_has_max_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_cpm_micros;
        break;
      }

      // optional int64 min_cpm_micros = 3;
      case 3: {
        if (tag == 24) {
         parse_min_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_cpm_micros_)));
          set_has_min_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_billing_id;
        break;
      }

      // optional int64 billing_id = 4;
      case 4: {
        if (tag == 32) {
         parse_billing_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &billing_id_)));
          set_has_billing_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deal_id;
        break;
      }

      // optional int64 deal_id = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_deal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deal_id_)));
          set_has_deal_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad.AdSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad.AdSlot)
  return false;
#undef DO_
}

void BidResponse_Ad_AdSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad.AdSlot)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 max_cpm_micros = 2;
  if (has_max_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_cpm_micros(), output);
  }

  // optional int64 min_cpm_micros = 3;
  if (has_min_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->min_cpm_micros(), output);
  }

  // optional int64 billing_id = 4;
  if (has_billing_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->billing_id(), output);
  }

  // optional int64 deal_id = 5 [default = 0];
  if (has_deal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->deal_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad.AdSlot)
}

::google::protobuf::uint8* BidResponse_Ad_AdSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad.AdSlot)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 max_cpm_micros = 2;
  if (has_max_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_cpm_micros(), target);
  }

  // optional int64 min_cpm_micros = 3;
  if (has_min_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->min_cpm_micros(), target);
  }

  // optional int64 billing_id = 4;
  if (has_billing_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->billing_id(), target);
  }

  // optional int64 deal_id = 5 [default = 0];
  if (has_deal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->deal_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad.AdSlot)
  return target;
}

int BidResponse_Ad_AdSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 max_cpm_micros = 2;
    if (has_max_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_cpm_micros());
    }

    // optional int64 min_cpm_micros = 3;
    if (has_min_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_cpm_micros());
    }

    // optional int64 billing_id = 4;
    if (has_billing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->billing_id());
    }

    // optional int64 deal_id = 5 [default = 0];
    if (has_deal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deal_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_AdSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ad_AdSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ad_AdSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad_AdSlot::MergeFrom(const BidResponse_Ad_AdSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_max_cpm_micros()) {
      set_max_cpm_micros(from.max_cpm_micros());
    }
    if (from.has_min_cpm_micros()) {
      set_min_cpm_micros(from.min_cpm_micros());
    }
    if (from.has_billing_id()) {
      set_billing_id(from.billing_id());
    }
    if (from.has_deal_id()) {
      set_deal_id(from.deal_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ad_AdSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_AdSlot::CopyFrom(const BidResponse_Ad_AdSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_AdSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidResponse_Ad_AdSlot::Swap(BidResponse_Ad_AdSlot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(max_cpm_micros_, other->max_cpm_micros_);
    std::swap(min_cpm_micros_, other->min_cpm_micros_);
    std::swap(billing_id_, other->billing_id_);
    std::swap(deal_id_, other->deal_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ad_AdSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_AdSlot_descriptor_;
  metadata.reflection = BidResponse_Ad_AdSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_Ad_TemplateParameter::kParameterValueFieldNumber;
const int BidResponse_Ad_TemplateParameter::kBlankAdParameterValueFieldNumber;
const int BidResponse_Ad_TemplateParameter::kBuyerCreativeIdFieldNumber;
const int BidResponse_Ad_TemplateParameter::kClickThroughUrlFieldNumber;
const int BidResponse_Ad_TemplateParameter::kLeftFieldNumber;
const int BidResponse_Ad_TemplateParameter::kRightFieldNumber;
const int BidResponse_Ad_TemplateParameter::kTopFieldNumber;
const int BidResponse_Ad_TemplateParameter::kBottomFieldNumber;
const int BidResponse_Ad_TemplateParameter::kBackupIndexFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ad_TemplateParameter::BidResponse_Ad_TemplateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad.TemplateParameter)
}

void BidResponse_Ad_TemplateParameter::InitAsDefaultInstance() {
}

BidResponse_Ad_TemplateParameter::BidResponse_Ad_TemplateParameter(const BidResponse_Ad_TemplateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad.TemplateParameter)
}

void BidResponse_Ad_TemplateParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parameter_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blank_ad_parameter_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyer_creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  click_through_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  backup_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_TemplateParameter::~BidResponse_Ad_TemplateParameter() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad.TemplateParameter)
  SharedDtor();
}

void BidResponse_Ad_TemplateParameter::SharedDtor() {
  if (parameter_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parameter_value_;
  }
  if (blank_ad_parameter_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blank_ad_parameter_value_;
  }
  if (buyer_creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyer_creative_id_;
  }
  if (click_through_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete click_through_url_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_TemplateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_TemplateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_TemplateParameter_descriptor_;
}

const BidResponse_Ad_TemplateParameter& BidResponse_Ad_TemplateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_TemplateParameter* BidResponse_Ad_TemplateParameter::default_instance_ = NULL;

BidResponse_Ad_TemplateParameter* BidResponse_Ad_TemplateParameter::New() const {
  return new BidResponse_Ad_TemplateParameter;
}

void BidResponse_Ad_TemplateParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_Ad_TemplateParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(left_, bottom_);
    if (has_parameter_value()) {
      if (parameter_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parameter_value_->clear();
      }
    }
    if (has_blank_ad_parameter_value()) {
      if (blank_ad_parameter_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blank_ad_parameter_value_->clear();
      }
    }
    if (has_buyer_creative_id()) {
      if (buyer_creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyer_creative_id_->clear();
      }
    }
    if (has_click_through_url()) {
      if (click_through_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        click_through_url_->clear();
      }
    }
  }
  backup_index_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ad_TemplateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad.TemplateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parameter_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameter_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parameter_value().data(), this->parameter_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parameter_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyer_creative_id;
        break;
      }

      // optional string buyer_creative_id = 2;
      case 2: {
        if (tag == 18) {
         parse_buyer_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyer_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyer_creative_id().data(), this->buyer_creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buyer_creative_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_click_through_url;
        break;
      }

      // optional string click_through_url = 3;
      case 3: {
        if (tag == 26) {
         parse_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_through_url().data(), this->click_through_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_left;
        break;
      }

      // optional int32 left = 4;
      case 4: {
        if (tag == 32) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_right;
        break;
      }

      // optional int32 right = 5;
      case 5: {
        if (tag == 40) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_top;
        break;
      }

      // optional int32 top = 6;
      case 6: {
        if (tag == 48) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bottom;
        break;
      }

      // optional int32 bottom = 7;
      case 7: {
        if (tag == 56) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_blank_ad_parameter_value;
        break;
      }

      // optional string blank_ad_parameter_value = 8;
      case 8: {
        if (tag == 66) {
         parse_blank_ad_parameter_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blank_ad_parameter_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blank_ad_parameter_value().data(), this->blank_ad_parameter_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blank_ad_parameter_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_backup_index;
        break;
      }

      // optional int32 backup_index = 9;
      case 9: {
        if (tag == 72) {
         parse_backup_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backup_index_)));
          set_has_backup_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad.TemplateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad.TemplateParameter)
  return false;
#undef DO_
}

void BidResponse_Ad_TemplateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad.TemplateParameter)
  // optional string parameter_value = 1;
  if (has_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameter_value().data(), this->parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parameter_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parameter_value(), output);
  }

  // optional string buyer_creative_id = 2;
  if (has_buyer_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_creative_id().data(), this->buyer_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyer_creative_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buyer_creative_id(), output);
  }

  // optional string click_through_url = 3;
  if (has_click_through_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url().data(), this->click_through_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->click_through_url(), output);
  }

  // optional int32 left = 4;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left(), output);
  }

  // optional int32 right = 5;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->right(), output);
  }

  // optional int32 top = 6;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->top(), output);
  }

  // optional int32 bottom = 7;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bottom(), output);
  }

  // optional string blank_ad_parameter_value = 8;
  if (has_blank_ad_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blank_ad_parameter_value().data(), this->blank_ad_parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blank_ad_parameter_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->blank_ad_parameter_value(), output);
  }

  // optional int32 backup_index = 9;
  if (has_backup_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->backup_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad.TemplateParameter)
}

::google::protobuf::uint8* BidResponse_Ad_TemplateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad.TemplateParameter)
  // optional string parameter_value = 1;
  if (has_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameter_value().data(), this->parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parameter_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parameter_value(), target);
  }

  // optional string buyer_creative_id = 2;
  if (has_buyer_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_creative_id().data(), this->buyer_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyer_creative_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buyer_creative_id(), target);
  }

  // optional string click_through_url = 3;
  if (has_click_through_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url().data(), this->click_through_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_through_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->click_through_url(), target);
  }

  // optional int32 left = 4;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left(), target);
  }

  // optional int32 right = 5;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->right(), target);
  }

  // optional int32 top = 6;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->top(), target);
  }

  // optional int32 bottom = 7;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bottom(), target);
  }

  // optional string blank_ad_parameter_value = 8;
  if (has_blank_ad_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blank_ad_parameter_value().data(), this->blank_ad_parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blank_ad_parameter_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->blank_ad_parameter_value(), target);
  }

  // optional int32 backup_index = 9;
  if (has_backup_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->backup_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad.TemplateParameter)
  return target;
}

int BidResponse_Ad_TemplateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string parameter_value = 1;
    if (has_parameter_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameter_value());
    }

    // optional string blank_ad_parameter_value = 8;
    if (has_blank_ad_parameter_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blank_ad_parameter_value());
    }

    // optional string buyer_creative_id = 2;
    if (has_buyer_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyer_creative_id());
    }

    // optional string click_through_url = 3;
    if (has_click_through_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->click_through_url());
    }

    // optional int32 left = 4;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // optional int32 right = 5;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // optional int32 top = 6;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // optional int32 bottom = 7;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 backup_index = 9;
    if (has_backup_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backup_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_TemplateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ad_TemplateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ad_TemplateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad_TemplateParameter::MergeFrom(const BidResponse_Ad_TemplateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parameter_value()) {
      set_parameter_value(from.parameter_value());
    }
    if (from.has_blank_ad_parameter_value()) {
      set_blank_ad_parameter_value(from.blank_ad_parameter_value());
    }
    if (from.has_buyer_creative_id()) {
      set_buyer_creative_id(from.buyer_creative_id());
    }
    if (from.has_click_through_url()) {
      set_click_through_url(from.click_through_url());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_backup_index()) {
      set_backup_index(from.backup_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ad_TemplateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_TemplateParameter::CopyFrom(const BidResponse_Ad_TemplateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_TemplateParameter::IsInitialized() const {

  return true;
}

void BidResponse_Ad_TemplateParameter::Swap(BidResponse_Ad_TemplateParameter* other) {
  if (other != this) {
    std::swap(parameter_value_, other->parameter_value_);
    std::swap(blank_ad_parameter_value_, other->blank_ad_parameter_value_);
    std::swap(buyer_creative_id_, other->buyer_creative_id_);
    std::swap(click_through_url_, other->click_through_url_);
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(backup_index_, other->backup_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ad_TemplateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_TemplateParameter_descriptor_;
  metadata.reflection = BidResponse_Ad_TemplateParameter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_Ad::kBuyerCreativeIdFieldNumber;
const int BidResponse_Ad::kHtmlSnippetFieldNumber;
const int BidResponse_Ad::kVideoUrlFieldNumber;
const int BidResponse_Ad::kNativeAdFieldNumber;
const int BidResponse_Ad::kClickThroughUrlFieldNumber;
const int BidResponse_Ad::kVendorTypeFieldNumber;
const int BidResponse_Ad::kAttributeFieldNumber;
const int BidResponse_Ad::kCategoryFieldNumber;
const int BidResponse_Ad::kRestrictedCategoryFieldNumber;
const int BidResponse_Ad::kAdvertiserNameFieldNumber;
const int BidResponse_Ad::kBidderNameFieldNumber;
const int BidResponse_Ad::kWidthFieldNumber;
const int BidResponse_Ad::kHeightFieldNumber;
const int BidResponse_Ad::kAgencyIdFieldNumber;
const int BidResponse_Ad::kAdslotFieldNumber;
const int BidResponse_Ad::kImpressionTrackingUrlFieldNumber;
const int BidResponse_Ad::kAdChoicesDestinationUrlFieldNumber;
const int BidResponse_Ad::kDEPRECATEDCreativeIdFieldNumber;
const int BidResponse_Ad::kDEPRECATEDClickThroughUrlFieldNumber;
const int BidResponse_Ad::kDEPRECATEDSnippetTemplateFieldNumber;
const int BidResponse_Ad::kDEPRECATEDTemplateParameterFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ad::BidResponse_Ad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad)
}

void BidResponse_Ad::InitAsDefaultInstance() {
  native_ad_ = const_cast< ::BidResponse_Ad_NativeAd*>(&::BidResponse_Ad_NativeAd::default_instance());
}

BidResponse_Ad::BidResponse_Ad(const BidResponse_Ad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad)
}

void BidResponse_Ad::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buyer_creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  native_ad_ = NULL;
  bidder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  agency_id_ = GOOGLE_LONGLONG(0);
  ad_choices_destination_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_creative_id_ = GOOGLE_LONGLONG(0);
  deprecated_click_through_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_snippet_template_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad::~BidResponse_Ad() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad)
  SharedDtor();
}

void BidResponse_Ad::SharedDtor() {
  if (buyer_creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyer_creative_id_;
  }
  if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete html_snippet_;
  }
  if (video_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_url_;
  }
  if (bidder_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidder_name_;
  }
  if (ad_choices_destination_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ad_choices_destination_url_;
  }
  if (deprecated_click_through_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_click_through_url_;
  }
  if (deprecated_snippet_template_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_snippet_template_;
  }
  if (this != default_instance_) {
    delete native_ad_;
  }
}

void BidResponse_Ad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_descriptor_;
}

const BidResponse_Ad& BidResponse_Ad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad* BidResponse_Ad::default_instance_ = NULL;

BidResponse_Ad* BidResponse_Ad::New() const {
  return new BidResponse_Ad;
}

void BidResponse_Ad::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_Ad*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    if (has_buyer_creative_id()) {
      if (buyer_creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyer_creative_id_->clear();
      }
    }
    if (has_html_snippet()) {
      if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        html_snippet_->clear();
      }
    }
    if (has_video_url()) {
      if (video_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        video_url_->clear();
      }
    }
    if (has_native_ad()) {
      if (native_ad_ != NULL) native_ad_->::BidResponse_Ad_NativeAd::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 15360) {
    ZR_(width_, agency_id_);
    if (has_bidder_name()) {
      if (bidder_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bidder_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 983040) {
    if (has_ad_choices_destination_url()) {
      if (ad_choices_destination_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ad_choices_destination_url_->clear();
      }
    }
    deprecated_creative_id_ = GOOGLE_LONGLONG(0);
    if (has_deprecated_click_through_url()) {
      if (deprecated_click_through_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_click_through_url_->clear();
      }
    }
    if (has_deprecated_snippet_template()) {
      if (deprecated_snippet_template_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deprecated_snippet_template_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  click_through_url_.Clear();
  vendor_type_.Clear();
  attribute_.Clear();
  category_.Clear();
  restricted_category_.Clear();
  advertiser_name_.Clear();
  adslot_.Clear();
  impression_tracking_url_.Clear();
  deprecated_template_parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string html_snippet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html_snippet().data(), this->html_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "html_snippet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DEPRECATED_click_through_url;
        break;
      }

      // optional string DEPRECATED_click_through_url = 2;
      case 2: {
        if (tag == 18) {
         parse_DEPRECATED_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_click_through_url().data(), this->deprecated_click_through_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_adslot;
        break;
      }

      // repeated .BidResponse.Ad.AdSlot adslot = 3;
      case 3: {
        if (tag == 26) {
         parse_adslot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adslot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_adslot;
        if (input->ExpectTag(34)) goto parse_click_through_url;
        break;
      }

      // repeated string click_through_url = 4;
      case 4: {
        if (tag == 34) {
         parse_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_through_url(this->click_through_url_size() - 1).data(),
            this->click_through_url(this->click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_click_through_url;
        if (input->ExpectTag(40)) goto parse_vendor_type;
        break;
      }

      // repeated int32 vendor_type = 5;
      case 5: {
        if (tag == 40) {
         parse_vendor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_vendor_type())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vendor_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vendor_type;
        if (input->ExpectTag(48)) goto parse_attribute;
        break;
      }

      // repeated int32 attribute = 6;
      case 6: {
        if (tag == 48) {
         parse_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_attribute())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attribute())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attribute;
        if (input->ExpectTag(56)) goto parse_category;
        break;
      }

      // repeated int32 category = 7;
      case 7: {
        if (tag == 56) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_category())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_category;
        if (input->ExpectTag(64)) goto parse_DEPRECATED_creative_id;
        break;
      }

      // optional int64 DEPRECATED_creative_id = 8;
      case 8: {
        if (tag == 64) {
         parse_DEPRECATED_creative_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_creative_id_)));
          set_has_deprecated_creative_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_video_url;
        break;
      }

      // optional string video_url = 9;
      case 9: {
        if (tag == 74) {
         parse_video_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), this->video_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_buyer_creative_id;
        break;
      }

      // optional string buyer_creative_id = 10;
      case 10: {
        if (tag == 82) {
         parse_buyer_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyer_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyer_creative_id().data(), this->buyer_creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buyer_creative_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_advertiser_name;
        break;
      }

      // repeated string advertiser_name = 11;
      case 11: {
        if (tag == 90) {
         parse_advertiser_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_advertiser_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->advertiser_name(this->advertiser_name_size() - 1).data(),
            this->advertiser_name(this->advertiser_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "advertiser_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_advertiser_name;
        if (input->ExpectTag(98)) goto parse_DEPRECATED_snippet_template;
        break;
      }

      // optional string DEPRECATED_snippet_template = 12;
      case 12: {
        if (tag == 98) {
         parse_DEPRECATED_snippet_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_snippet_template()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_snippet_template().data(), this->deprecated_snippet_template().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deprecated_snippet_template");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_DEPRECATED_template_parameter;
        break;
      }

      // repeated .BidResponse.Ad.TemplateParameter DEPRECATED_template_parameter = 13;
      case 13: {
        if (tag == 106) {
         parse_DEPRECATED_template_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deprecated_template_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_DEPRECATED_template_parameter;
        if (input->ExpectTag(112)) goto parse_width;
        break;
      }

      // optional int32 width = 14;
      case 14: {
        if (tag == 112) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_height;
        break;
      }

      // optional int32 height = 15;
      case 15: {
        if (tag == 120) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_agency_id;
        break;
      }

      // optional int64 agency_id = 16;
      case 16: {
        if (tag == 128) {
         parse_agency_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &agency_id_)));
          set_has_agency_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_restricted_category;
        break;
      }

      // repeated int32 restricted_category = 17;
      case 17: {
        if (tag == 136) {
         parse_restricted_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_restricted_category())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_restricted_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_restricted_category;
        if (input->ExpectTag(146)) goto parse_native_ad;
        break;
      }

      // optional .BidResponse.Ad.NativeAd native_ad = 18;
      case 18: {
        if (tag == 146) {
         parse_native_ad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native_ad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_impression_tracking_url;
        break;
      }

      // repeated string impression_tracking_url = 19;
      case 19: {
        if (tag == 154) {
         parse_impression_tracking_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impression_tracking_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impression_tracking_url(this->impression_tracking_url_size() - 1).data(),
            this->impression_tracking_url(this->impression_tracking_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impression_tracking_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_impression_tracking_url;
        if (input->ExpectTag(170)) goto parse_ad_choices_destination_url;
        break;
      }

      // optional string ad_choices_destination_url = 21;
      case 21: {
        if (tag == 170) {
         parse_ad_choices_destination_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_choices_destination_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ad_choices_destination_url().data(), this->ad_choices_destination_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ad_choices_destination_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_bidder_name;
        break;
      }

      // optional string bidder_name = 22;
      case 22: {
        if (tag == 178) {
         parse_bidder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidder_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidder_name().data(), this->bidder_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidder_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad)
  return false;
#undef DO_
}

void BidResponse_Ad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad)
  // optional string html_snippet = 1;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "html_snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->html_snippet(), output);
  }

  // optional string DEPRECATED_click_through_url = 2;
  if (has_deprecated_click_through_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_click_through_url().data(), this->deprecated_click_through_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deprecated_click_through_url(), output);
  }

  // repeated .BidResponse.Ad.AdSlot adslot = 3;
  for (int i = 0; i < this->adslot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->adslot(i), output);
  }

  // repeated string click_through_url = 4;
  for (int i = 0; i < this->click_through_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->click_through_url(i).data(), this->click_through_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->click_through_url(i), output);
  }

  // repeated int32 vendor_type = 5;
  for (int i = 0; i < this->vendor_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->vendor_type(i), output);
  }

  // repeated int32 attribute = 6;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->attribute(i), output);
  }

  // repeated int32 category = 7;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->category(i), output);
  }

  // optional int64 DEPRECATED_creative_id = 8;
  if (has_deprecated_creative_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->deprecated_creative_id(), output);
  }

  // optional string video_url = 9;
  if (has_video_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), this->video_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->video_url(), output);
  }

  // optional string buyer_creative_id = 10;
  if (has_buyer_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_creative_id().data(), this->buyer_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyer_creative_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->buyer_creative_id(), output);
  }

  // repeated string advertiser_name = 11;
  for (int i = 0; i < this->advertiser_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->advertiser_name(i).data(), this->advertiser_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "advertiser_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->advertiser_name(i), output);
  }

  // optional string DEPRECATED_snippet_template = 12;
  if (has_deprecated_snippet_template()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_snippet_template().data(), this->deprecated_snippet_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_snippet_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->deprecated_snippet_template(), output);
  }

  // repeated .BidResponse.Ad.TemplateParameter DEPRECATED_template_parameter = 13;
  for (int i = 0; i < this->deprecated_template_parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->deprecated_template_parameter(i), output);
  }

  // optional int32 width = 14;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->width(), output);
  }

  // optional int32 height = 15;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->height(), output);
  }

  // optional int64 agency_id = 16;
  if (has_agency_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->agency_id(), output);
  }

  // repeated int32 restricted_category = 17;
  for (int i = 0; i < this->restricted_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->restricted_category(i), output);
  }

  // optional .BidResponse.Ad.NativeAd native_ad = 18;
  if (has_native_ad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->native_ad(), output);
  }

  // repeated string impression_tracking_url = 19;
  for (int i = 0; i < this->impression_tracking_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->impression_tracking_url(i).data(), this->impression_tracking_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "impression_tracking_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->impression_tracking_url(i), output);
  }

  // optional string ad_choices_destination_url = 21;
  if (has_ad_choices_destination_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ad_choices_destination_url().data(), this->ad_choices_destination_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ad_choices_destination_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->ad_choices_destination_url(), output);
  }

  // optional string bidder_name = 22;
  if (has_bidder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidder_name().data(), this->bidder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->bidder_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad)
}

::google::protobuf::uint8* BidResponse_Ad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad)
  // optional string html_snippet = 1;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "html_snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->html_snippet(), target);
  }

  // optional string DEPRECATED_click_through_url = 2;
  if (has_deprecated_click_through_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_click_through_url().data(), this->deprecated_click_through_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_click_through_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deprecated_click_through_url(), target);
  }

  // repeated .BidResponse.Ad.AdSlot adslot = 3;
  for (int i = 0; i < this->adslot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->adslot(i), target);
  }

  // repeated string click_through_url = 4;
  for (int i = 0; i < this->click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url(i).data(), this->click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->click_through_url(i), target);
  }

  // repeated int32 vendor_type = 5;
  for (int i = 0; i < this->vendor_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->vendor_type(i), target);
  }

  // repeated int32 attribute = 6;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->attribute(i), target);
  }

  // repeated int32 category = 7;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->category(i), target);
  }

  // optional int64 DEPRECATED_creative_id = 8;
  if (has_deprecated_creative_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->deprecated_creative_id(), target);
  }

  // optional string video_url = 9;
  if (has_video_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), this->video_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->video_url(), target);
  }

  // optional string buyer_creative_id = 10;
  if (has_buyer_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_creative_id().data(), this->buyer_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyer_creative_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->buyer_creative_id(), target);
  }

  // repeated string advertiser_name = 11;
  for (int i = 0; i < this->advertiser_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advertiser_name(i).data(), this->advertiser_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "advertiser_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->advertiser_name(i), target);
  }

  // optional string DEPRECATED_snippet_template = 12;
  if (has_deprecated_snippet_template()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_snippet_template().data(), this->deprecated_snippet_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deprecated_snippet_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->deprecated_snippet_template(), target);
  }

  // repeated .BidResponse.Ad.TemplateParameter DEPRECATED_template_parameter = 13;
  for (int i = 0; i < this->deprecated_template_parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->deprecated_template_parameter(i), target);
  }

  // optional int32 width = 14;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->width(), target);
  }

  // optional int32 height = 15;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->height(), target);
  }

  // optional int64 agency_id = 16;
  if (has_agency_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->agency_id(), target);
  }

  // repeated int32 restricted_category = 17;
  for (int i = 0; i < this->restricted_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->restricted_category(i), target);
  }

  // optional .BidResponse.Ad.NativeAd native_ad = 18;
  if (has_native_ad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->native_ad(), target);
  }

  // repeated string impression_tracking_url = 19;
  for (int i = 0; i < this->impression_tracking_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impression_tracking_url(i).data(), this->impression_tracking_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impression_tracking_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->impression_tracking_url(i), target);
  }

  // optional string ad_choices_destination_url = 21;
  if (has_ad_choices_destination_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ad_choices_destination_url().data(), this->ad_choices_destination_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ad_choices_destination_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ad_choices_destination_url(), target);
  }

  // optional string bidder_name = 22;
  if (has_bidder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidder_name().data(), this->bidder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->bidder_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad)
  return target;
}

int BidResponse_Ad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string buyer_creative_id = 10;
    if (has_buyer_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyer_creative_id());
    }

    // optional string html_snippet = 1;
    if (has_html_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->html_snippet());
    }

    // optional string video_url = 9;
    if (has_video_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_url());
    }

    // optional .BidResponse.Ad.NativeAd native_ad = 18;
    if (has_native_ad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->native_ad());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional string bidder_name = 22;
    if (has_bidder_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidder_name());
    }

    // optional int32 width = 14;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 15;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int64 agency_id = 16;
    if (has_agency_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->agency_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string ad_choices_destination_url = 21;
    if (has_ad_choices_destination_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ad_choices_destination_url());
    }

    // optional int64 DEPRECATED_creative_id = 8;
    if (has_deprecated_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_creative_id());
    }

    // optional string DEPRECATED_click_through_url = 2;
    if (has_deprecated_click_through_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_click_through_url());
    }

    // optional string DEPRECATED_snippet_template = 12;
    if (has_deprecated_snippet_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_snippet_template());
    }

  }
  // repeated string click_through_url = 4;
  total_size += 1 * this->click_through_url_size();
  for (int i = 0; i < this->click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_through_url(i));
  }

  // repeated int32 vendor_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->vendor_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vendor_type(i));
    }
    total_size += 1 * this->vendor_type_size() + data_size;
  }

  // repeated int32 attribute = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attribute(i));
    }
    total_size += 1 * this->attribute_size() + data_size;
  }

  // repeated int32 category = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  // repeated int32 restricted_category = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->restricted_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->restricted_category(i));
    }
    total_size += 2 * this->restricted_category_size() + data_size;
  }

  // repeated string advertiser_name = 11;
  total_size += 1 * this->advertiser_name_size();
  for (int i = 0; i < this->advertiser_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->advertiser_name(i));
  }

  // repeated .BidResponse.Ad.AdSlot adslot = 3;
  total_size += 1 * this->adslot_size();
  for (int i = 0; i < this->adslot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adslot(i));
  }

  // repeated string impression_tracking_url = 19;
  total_size += 2 * this->impression_tracking_url_size();
  for (int i = 0; i < this->impression_tracking_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impression_tracking_url(i));
  }

  // repeated .BidResponse.Ad.TemplateParameter DEPRECATED_template_parameter = 13;
  total_size += 1 * this->deprecated_template_parameter_size();
  for (int i = 0; i < this->deprecated_template_parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deprecated_template_parameter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad::MergeFrom(const BidResponse_Ad& from) {
  GOOGLE_CHECK_NE(&from, this);
  click_through_url_.MergeFrom(from.click_through_url_);
  vendor_type_.MergeFrom(from.vendor_type_);
  attribute_.MergeFrom(from.attribute_);
  category_.MergeFrom(from.category_);
  restricted_category_.MergeFrom(from.restricted_category_);
  advertiser_name_.MergeFrom(from.advertiser_name_);
  adslot_.MergeFrom(from.adslot_);
  impression_tracking_url_.MergeFrom(from.impression_tracking_url_);
  deprecated_template_parameter_.MergeFrom(from.deprecated_template_parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyer_creative_id()) {
      set_buyer_creative_id(from.buyer_creative_id());
    }
    if (from.has_html_snippet()) {
      set_html_snippet(from.html_snippet());
    }
    if (from.has_video_url()) {
      set_video_url(from.video_url());
    }
    if (from.has_native_ad()) {
      mutable_native_ad()->::BidResponse_Ad_NativeAd::MergeFrom(from.native_ad());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_bidder_name()) {
      set_bidder_name(from.bidder_name());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_agency_id()) {
      set_agency_id(from.agency_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ad_choices_destination_url()) {
      set_ad_choices_destination_url(from.ad_choices_destination_url());
    }
    if (from.has_deprecated_creative_id()) {
      set_deprecated_creative_id(from.deprecated_creative_id());
    }
    if (from.has_deprecated_click_through_url()) {
      set_deprecated_click_through_url(from.deprecated_click_through_url());
    }
    if (from.has_deprecated_snippet_template()) {
      set_deprecated_snippet_template(from.deprecated_snippet_template());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad::CopyFrom(const BidResponse_Ad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->adslot())) return false;
  return true;
}

void BidResponse_Ad::Swap(BidResponse_Ad* other) {
  if (other != this) {
    std::swap(buyer_creative_id_, other->buyer_creative_id_);
    std::swap(html_snippet_, other->html_snippet_);
    std::swap(video_url_, other->video_url_);
    std::swap(native_ad_, other->native_ad_);
    click_through_url_.Swap(&other->click_through_url_);
    vendor_type_.Swap(&other->vendor_type_);
    attribute_.Swap(&other->attribute_);
    category_.Swap(&other->category_);
    restricted_category_.Swap(&other->restricted_category_);
    advertiser_name_.Swap(&other->advertiser_name_);
    std::swap(bidder_name_, other->bidder_name_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(agency_id_, other->agency_id_);
    adslot_.Swap(&other->adslot_);
    impression_tracking_url_.Swap(&other->impression_tracking_url_);
    std::swap(ad_choices_destination_url_, other->ad_choices_destination_url_);
    std::swap(deprecated_creative_id_, other->deprecated_creative_id_);
    std::swap(deprecated_click_through_url_, other->deprecated_click_through_url_);
    std::swap(deprecated_snippet_template_, other->deprecated_snippet_template_);
    deprecated_template_parameter_.Swap(&other->deprecated_template_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_descriptor_;
  metadata.reflection = BidResponse_Ad_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse::kAdFieldNumber;
const int BidResponse::kDebugStringFieldNumber;
const int BidResponse::kProcessingTimeMsFieldNumber;
const int BidResponse::kDEPRECATEDProtocolVersionFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  debug_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_time_ms_ = 0;
  deprecated_protocol_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (debug_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete debug_string_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(processing_time_ms_, deprecated_protocol_version_);
    if (has_debug_string()) {
      if (debug_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        debug_string_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DEPRECATED_protocol_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_protocol_version_)));
          set_has_deprecated_protocol_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ad;
        break;
      }

      // repeated .BidResponse.Ad ad = 2;
      case 2: {
        if (tag == 18) {
         parse_ad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ad;
        if (input->ExpectTag(32)) goto parse_processing_time_ms;
        break;
      }

      // optional int32 processing_time_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processing_time_ms_)));
          set_has_processing_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_debug_string;
        break;
      }

      // optional string debug_string = 5;
      case 5: {
        if (tag == 42) {
         parse_debug_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_string().data(), this->debug_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "debug_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse)
  // optional int32 DEPRECATED_protocol_version = 1;
  if (has_deprecated_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deprecated_protocol_version(), output);
  }

  // repeated .BidResponse.Ad ad = 2;
  for (int i = 0; i < this->ad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ad(i), output);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->processing_time_ms(), output);
  }

  // optional string debug_string = 5;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "debug_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->debug_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse)
  // optional int32 DEPRECATED_protocol_version = 1;
  if (has_deprecated_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deprecated_protocol_version(), target);
  }

  // repeated .BidResponse.Ad ad = 2;
  for (int i = 0; i < this->ad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ad(i), target);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->processing_time_ms(), target);
  }

  // optional string debug_string = 5;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "debug_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string debug_string = 5;
    if (has_debug_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_string());
    }

    // optional int32 processing_time_ms = 4;
    if (has_processing_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processing_time_ms());
    }

    // optional int32 DEPRECATED_protocol_version = 1;
    if (has_deprecated_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_protocol_version());
    }

  }
  // repeated .BidResponse.Ad ad = 2;
  total_size += 1 * this->ad_size();
  for (int i = 0; i < this->ad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ad(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ad_.MergeFrom(from.ad_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_debug_string()) {
      set_debug_string(from.debug_string());
    }
    if (from.has_processing_time_ms()) {
      set_processing_time_ms(from.processing_time_ms());
    }
    if (from.has_deprecated_protocol_version()) {
      set_deprecated_protocol_version(from.deprecated_protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ad())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    ad_.Swap(&other->ad_);
    std::swap(debug_string_, other->debug_string_);
    std::swap(processing_time_ms_, other->processing_time_ms_);
    std::swap(deprecated_protocol_version_, other->deprecated_protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

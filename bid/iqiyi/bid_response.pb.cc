// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bid_response.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bid_response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ads_serving {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Settlement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Settlement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Seatbid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Seatbid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bid_5fresponse_2eproto() {
  protobuf_AddDesc_bid_5fresponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bid_response.proto");
  GOOGLE_CHECK(file != NULL);
  Settlement_descriptor_ = file->message_type(0);
  static const int Settlement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, auth_),
  };
  Settlement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Settlement_descriptor_,
      Settlement::default_instance_,
      Settlement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Settlement));
  Bid_descriptor_ = file->message_type(1);
  static const int Bid_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, adm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, crid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, startdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, is_precision_advertising_),
  };
  Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bid_descriptor_,
      Bid::default_instance_,
      Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bid));
  Seatbid_descriptor_ = file->message_type(2);
  static const int Seatbid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seatbid, bid_),
  };
  Seatbid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Seatbid_descriptor_,
      Seatbid::default_instance_,
      Seatbid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seatbid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seatbid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Seatbid));
  BidResponse_descriptor_ = file->message_type(3);
  static const int BidResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seatbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, processing_time_ms_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bid_5fresponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Settlement_descriptor_, &Settlement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bid_descriptor_, &Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Seatbid_descriptor_, &Seatbid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bid_5fresponse_2eproto() {
  delete Settlement::default_instance_;
  delete Settlement_reflection_;
  delete Bid::default_instance_;
  delete Bid_reflection_;
  delete Seatbid::default_instance_;
  delete Seatbid_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
}

void protobuf_AddDesc_bid_5fresponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022bid_response.proto\022\021ads_serving.proto\""
    ":\n\nSettlement\022\017\n\007version\030\001 \001(\r\022\r\n\005price\030"
    "\002 \002(\014\022\014\n\004auth\030\003 \001(\014\"\221\001\n\003Bid\022\n\n\002id\030\001 \002(\t\022"
    "\r\n\005impid\030\002 \002(\t\022\r\n\005price\030\003 \002(\005\022\013\n\003adm\030\006 \002"
    "(\t\022\014\n\004crid\030\n \002(\t\022\022\n\nstartdelay\030\020 \001(\005\022\'\n\030"
    "is_precision_advertising\030\021 \001(\010:\005false*\010\010"
    "d\020\200\200\200\200\002\".\n\007Seatbid\022#\n\003bid\030\001 \003(\0132\026.ads_se"
    "rving.proto.Bid\"l\n\013BidResponse\022\n\n\002id\030\001 \002"
    "(\t\022+\n\007seatbid\030\002 \003(\0132\032.ads_serving.proto."
    "Seatbid\022\032\n\022processing_time_ms\030\004 \001(\005*\010\010d\020"
    "\200\200\200\200\002", 405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bid_response.proto", &protobuf_RegisterTypes);
  Settlement::default_instance_ = new Settlement();
  Bid::default_instance_ = new Bid();
  Seatbid::default_instance_ = new Seatbid();
  BidResponse::default_instance_ = new BidResponse();
  Settlement::default_instance_->InitAsDefaultInstance();
  Bid::default_instance_->InitAsDefaultInstance();
  Seatbid::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bid_5fresponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bid_5fresponse_2eproto {
  StaticDescriptorInitializer_bid_5fresponse_2eproto() {
    protobuf_AddDesc_bid_5fresponse_2eproto();
  }
} static_descriptor_initializer_bid_5fresponse_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Settlement::kVersionFieldNumber;
const int Settlement::kPriceFieldNumber;
const int Settlement::kAuthFieldNumber;
#endif  // !_MSC_VER

Settlement::Settlement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ads_serving.proto.Settlement)
}

void Settlement::InitAsDefaultInstance() {
}

Settlement::Settlement(const Settlement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ads_serving.proto.Settlement)
}

void Settlement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Settlement::~Settlement() {
  // @@protoc_insertion_point(destructor:ads_serving.proto.Settlement)
  SharedDtor();
}

void Settlement::SharedDtor() {
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (auth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_;
  }
  if (this != default_instance_) {
  }
}

void Settlement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Settlement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Settlement_descriptor_;
}

const Settlement& Settlement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5fresponse_2eproto();
  return *default_instance_;
}

Settlement* Settlement::default_instance_ = NULL;

Settlement* Settlement::New() const {
  return new Settlement;
}

void Settlement::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    version_ = 0u;
    if (has_price()) {
      if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        price_->clear();
      }
    }
    if (has_auth()) {
      if (auth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        auth_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Settlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ads_serving.proto.Settlement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_price;
        break;
      }

      // required bytes price = 2;
      case 2: {
        if (tag == 18) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_price()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_auth;
        break;
      }

      // optional bytes auth = 3;
      case 3: {
        if (tag == 26) {
         parse_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ads_serving.proto.Settlement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ads_serving.proto.Settlement)
  return false;
#undef DO_
}

void Settlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ads_serving.proto.Settlement)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required bytes price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->price(), output);
  }

  // optional bytes auth = 3;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->auth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ads_serving.proto.Settlement)
}

::google::protobuf::uint8* Settlement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ads_serving.proto.Settlement)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required bytes price = 2;
  if (has_price()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->price(), target);
  }

  // optional bytes auth = 3;
  if (has_auth()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->auth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ads_serving.proto.Settlement)
  return target;
}

int Settlement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required bytes price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->price());
    }

    // optional bytes auth = 3;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->auth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settlement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Settlement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Settlement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Settlement::MergeFrom(const Settlement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_auth()) {
      set_auth(from.auth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Settlement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settlement::CopyFrom(const Settlement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settlement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Settlement::Swap(Settlement* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(price_, other->price_);
    std::swap(auth_, other->auth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Settlement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Settlement_descriptor_;
  metadata.reflection = Settlement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bid::kIdFieldNumber;
const int Bid::kImpidFieldNumber;
const int Bid::kPriceFieldNumber;
const int Bid::kAdmFieldNumber;
const int Bid::kCridFieldNumber;
const int Bid::kStartdelayFieldNumber;
const int Bid::kIsPrecisionAdvertisingFieldNumber;
#endif  // !_MSC_VER

Bid::Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ads_serving.proto.Bid)
}

void Bid::InitAsDefaultInstance() {
}

Bid::Bid(const Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ads_serving.proto.Bid)
}

void Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  adm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdelay_ = 0;
  is_precision_advertising_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bid::~Bid() {
  // @@protoc_insertion_point(destructor:ads_serving.proto.Bid)
  SharedDtor();
}

void Bid::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impid_;
  }
  if (adm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adm_;
  }
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crid_;
  }
  if (this != default_instance_) {
  }
}

void Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bid_descriptor_;
}

const Bid& Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5fresponse_2eproto();
  return *default_instance_;
}

Bid* Bid::default_instance_ = NULL;

Bid* Bid::New() const {
  return new Bid;
}

void Bid::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Bid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(price_, startdelay_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_impid()) {
      if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        impid_->clear();
      }
    }
    if (has_adm()) {
      if (adm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adm_->clear();
      }
    }
    if (has_crid()) {
      if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        crid_->clear();
      }
    }
    is_precision_advertising_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ads_serving.proto.Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_impid;
        break;
      }

      // required string impid = 2;
      case 2: {
        if (tag == 18) {
         parse_impid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // required int32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adm;
        break;
      }

      // required string adm = 6;
      case 6: {
        if (tag == 50) {
         parse_adm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adm().data(), this->adm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_crid;
        break;
      }

      // required string crid = 10;
      case 10: {
        if (tag == 82) {
         parse_crid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crid().data(), this->crid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "crid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_startdelay;
        break;
      }

      // optional int32 startdelay = 16;
      case 16: {
        if (tag == 128) {
         parse_startdelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startdelay_)));
          set_has_startdelay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_is_precision_advertising;
        break;
      }

      // optional bool is_precision_advertising = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_is_precision_advertising:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_precision_advertising_)));
          set_has_is_precision_advertising();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ads_serving.proto.Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ads_serving.proto.Bid)
  return false;
#undef DO_
}

void Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ads_serving.proto.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->impid(), output);
  }

  // required int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // required string adm = 6;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->adm(), output);
  }

  // required string crid = 10;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->crid(), output);
  }

  // optional int32 startdelay = 16;
  if (has_startdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->startdelay(), output);
  }

  // optional bool is_precision_advertising = 17 [default = false];
  if (has_is_precision_advertising()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_precision_advertising(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ads_serving.proto.Bid)
}

::google::protobuf::uint8* Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ads_serving.proto.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impid(), target);
  }

  // required int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // required string adm = 6;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->adm(), target);
  }

  // required string crid = 10;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->crid(), target);
  }

  // optional int32 startdelay = 16;
  if (has_startdelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->startdelay(), target);
  }

  // optional bool is_precision_advertising = 17 [default = false];
  if (has_is_precision_advertising()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_precision_advertising(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ads_serving.proto.Bid)
  return target;
}

int Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string impid = 2;
    if (has_impid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impid());
    }

    // required int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required string adm = 6;
    if (has_adm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adm());
    }

    // required string crid = 10;
    if (has_crid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crid());
    }

    // optional int32 startdelay = 16;
    if (has_startdelay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startdelay());
    }

    // optional bool is_precision_advertising = 17 [default = false];
    if (has_is_precision_advertising()) {
      total_size += 2 + 1;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bid::MergeFrom(const Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_impid()) {
      set_impid(from.impid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_adm()) {
      set_adm(from.adm());
    }
    if (from.has_crid()) {
      set_crid(from.crid());
    }
    if (from.has_startdelay()) {
      set_startdelay(from.startdelay());
    }
    if (from.has_is_precision_advertising()) {
      set_is_precision_advertising(from.is_precision_advertising());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bid::CopyFrom(const Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Bid::Swap(Bid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(impid_, other->impid_);
    std::swap(price_, other->price_);
    std::swap(adm_, other->adm_);
    std::swap(crid_, other->crid_);
    std::swap(startdelay_, other->startdelay_);
    std::swap(is_precision_advertising_, other->is_precision_advertising_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bid_descriptor_;
  metadata.reflection = Bid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Seatbid::kBidFieldNumber;
#endif  // !_MSC_VER

Seatbid::Seatbid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ads_serving.proto.Seatbid)
}

void Seatbid::InitAsDefaultInstance() {
}

Seatbid::Seatbid(const Seatbid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ads_serving.proto.Seatbid)
}

void Seatbid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Seatbid::~Seatbid() {
  // @@protoc_insertion_point(destructor:ads_serving.proto.Seatbid)
  SharedDtor();
}

void Seatbid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Seatbid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Seatbid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Seatbid_descriptor_;
}

const Seatbid& Seatbid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5fresponse_2eproto();
  return *default_instance_;
}

Seatbid* Seatbid::default_instance_ = NULL;

Seatbid* Seatbid::New() const {
  return new Seatbid;
}

void Seatbid::Clear() {
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Seatbid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ads_serving.proto.Seatbid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ads_serving.proto.Bid bid = 1;
      case 1: {
        if (tag == 10) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ads_serving.proto.Seatbid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ads_serving.proto.Seatbid)
  return false;
#undef DO_
}

void Seatbid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ads_serving.proto.Seatbid)
  // repeated .ads_serving.proto.Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ads_serving.proto.Seatbid)
}

::google::protobuf::uint8* Seatbid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ads_serving.proto.Seatbid)
  // repeated .ads_serving.proto.Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ads_serving.proto.Seatbid)
  return target;
}

int Seatbid::ByteSize() const {
  int total_size = 0;

  // repeated .ads_serving.proto.Bid bid = 1;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Seatbid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Seatbid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Seatbid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Seatbid::MergeFrom(const Seatbid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bid_.MergeFrom(from.bid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Seatbid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Seatbid::CopyFrom(const Seatbid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Seatbid::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;
  return true;
}

void Seatbid::Swap(Seatbid* other) {
  if (other != this) {
    bid_.Swap(&other->bid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Seatbid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Seatbid_descriptor_;
  metadata.reflection = Seatbid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse::kIdFieldNumber;
const int BidResponse::kSeatbidFieldNumber;
const int BidResponse::kProcessingTimeMsFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ads_serving.proto.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ads_serving.proto.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:ads_serving.proto.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bid_5fresponse_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 5) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    processing_time_ms_ = 0;
  }
  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ads_serving.proto.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        break;
      }

      // repeated .ads_serving.proto.Seatbid seatbid = 2;
      case 2: {
        if (tag == 18) {
         parse_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seatbid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        if (input->ExpectTag(32)) goto parse_processing_time_ms;
        break;
      }

      // optional int32 processing_time_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processing_time_ms_)));
          set_has_processing_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ads_serving.proto.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ads_serving.proto.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ads_serving.proto.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .ads_serving.proto.Seatbid seatbid = 2;
  for (int i = 0; i < this->seatbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seatbid(i), output);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->processing_time_ms(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ads_serving.proto.BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ads_serving.proto.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .ads_serving.proto.Seatbid seatbid = 2;
  for (int i = 0; i < this->seatbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seatbid(i), target);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->processing_time_ms(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ads_serving.proto.BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 processing_time_ms = 4;
    if (has_processing_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processing_time_ms());
    }

  }
  // repeated .ads_serving.proto.Seatbid seatbid = 2;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_processing_time_ms()) {
      set_processing_time_ms(from.processing_time_ms());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbid())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    seatbid_.Swap(&other->seatbid_);
    std::swap(processing_time_ms_, other->processing_time_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ads_serving

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: momortb12.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "momortb12.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace immomo {
namespace moaservice {
namespace third {
namespace rtb {
namespace v12 {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Native_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Device_ConnectionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_App_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_User_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Segment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Segment_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_NativeCreative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_Bid_NativeCreative_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_NativeCreative_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_Bid_NativeCreative_Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_Bid_Link_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidResponse_NoBidReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NativeFormat_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_momortb12_2eproto() {
  protobuf_AddDesc_momortb12_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "momortb12.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, imp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  BidRequest_Imp_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_Imp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, bcat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, badv_),
  };
  BidRequest_Imp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Imp_descriptor_,
      BidRequest_Imp::default_instance_,
      BidRequest_Imp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Imp));
  BidRequest_Imp_Native_descriptor_ = BidRequest_Imp_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Native_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, native_format_),
  };
  BidRequest_Imp_Native_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Imp_Native_descriptor_,
      BidRequest_Imp_Native::default_instance_,
      BidRequest_Imp_Native_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Imp_Native));
  BidRequest_Device_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_Device_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, osv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, make_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, macmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, didmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, geo_),
  };
  BidRequest_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Device_descriptor_,
      BidRequest_Device::default_instance_,
      BidRequest_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Device));
  BidRequest_Device_ConnectionType_descriptor_ = BidRequest_Device_descriptor_->enum_type(0);
  BidRequest_App_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_App_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, bundle_),
  };
  BidRequest_App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_App_descriptor_,
      BidRequest_App::default_instance_,
      BidRequest_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_App));
  BidRequest_User_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_User_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, age_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, age_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, geo_),
  };
  BidRequest_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_User_descriptor_,
      BidRequest_User::default_instance_,
      BidRequest_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_User));
  BidRequest_User_Gender_descriptor_ = BidRequest_User_descriptor_->enum_type(0);
  BidRequest_Geo_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_Geo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, district_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, street_),
  };
  BidRequest_Geo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Geo_descriptor_,
      BidRequest_Geo::default_instance_,
      BidRequest_Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Geo));
  Data_descriptor_ = file->message_type(1);
  static const int Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, segment_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
  Segment_descriptor_ = file->message_type(2);
  static const int Segment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, value_),
  };
  Segment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Segment_descriptor_,
      Segment::default_instance_,
      Segment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Segment));
  BidResponse_descriptor_ = file->message_type(3);
  static const int BidResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, em_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seatbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bidid_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  BidResponse_SeatBid_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, seat_),
  };
  BidResponse_SeatBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_SeatBid_descriptor_,
      BidResponse_SeatBid::default_instance_,
      BidResponse_SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_SeatBid));
  BidResponse_SeatBid_Bid_descriptor_ = BidResponse_SeatBid_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_Bid_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, crid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, adomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, nurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, native_creative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, imptrackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, clicktrackers_),
  };
  BidResponse_SeatBid_Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_SeatBid_Bid_descriptor_,
      BidResponse_SeatBid_Bid::default_instance_,
      BidResponse_SeatBid_Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_SeatBid_Bid));
  BidResponse_SeatBid_Bid_NativeCreative_descriptor_ = BidResponse_SeatBid_Bid_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_Bid_NativeCreative_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, native_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, landingpage_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, app_download_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, app_intro_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, app_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, app_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, display_labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, ext_data_),
  };
  BidResponse_SeatBid_Bid_NativeCreative_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_SeatBid_Bid_NativeCreative_descriptor_,
      BidResponse_SeatBid_Bid_NativeCreative::default_instance_,
      BidResponse_SeatBid_Bid_NativeCreative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_SeatBid_Bid_NativeCreative));
  BidResponse_SeatBid_Bid_NativeCreative_Image_descriptor_ = BidResponse_SeatBid_Bid_NativeCreative_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_Bid_NativeCreative_Image_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative_Image, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative_Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative_Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative_Image, link_),
  };
  BidResponse_SeatBid_Bid_NativeCreative_Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_SeatBid_Bid_NativeCreative_Image_descriptor_,
      BidResponse_SeatBid_Bid_NativeCreative_Image::default_instance_,
      BidResponse_SeatBid_Bid_NativeCreative_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative_Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_NativeCreative_Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_SeatBid_Bid_NativeCreative_Image));
  BidResponse_SeatBid_Bid_Link_descriptor_ = BidResponse_SeatBid_Bid_descriptor_->nested_type(1);
  static const int BidResponse_SeatBid_Bid_Link_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Link, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Link, deeplink_url_),
  };
  BidResponse_SeatBid_Bid_Link_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_SeatBid_Bid_Link_descriptor_,
      BidResponse_SeatBid_Bid_Link::default_instance_,
      BidResponse_SeatBid_Bid_Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Link, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Link, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_SeatBid_Bid_Link));
  BidResponse_NoBidReason_descriptor_ = BidResponse_descriptor_->enum_type(0);
  NativeFormat_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_momortb12_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Imp_descriptor_, &BidRequest_Imp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Imp_Native_descriptor_, &BidRequest_Imp_Native::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Device_descriptor_, &BidRequest_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_App_descriptor_, &BidRequest_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_User_descriptor_, &BidRequest_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Geo_descriptor_, &BidRequest_Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Segment_descriptor_, &Segment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_SeatBid_descriptor_, &BidResponse_SeatBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_SeatBid_Bid_descriptor_, &BidResponse_SeatBid_Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_SeatBid_Bid_NativeCreative_descriptor_, &BidResponse_SeatBid_Bid_NativeCreative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_SeatBid_Bid_NativeCreative_Image_descriptor_, &BidResponse_SeatBid_Bid_NativeCreative_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_SeatBid_Bid_Link_descriptor_, &BidResponse_SeatBid_Bid_Link::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_momortb12_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_Imp::default_instance_;
  delete BidRequest_Imp_reflection_;
  delete BidRequest_Imp_Native::default_instance_;
  delete BidRequest_Imp_Native_reflection_;
  delete BidRequest_Device::default_instance_;
  delete BidRequest_Device_reflection_;
  delete BidRequest_App::default_instance_;
  delete BidRequest_App_reflection_;
  delete BidRequest_User::default_instance_;
  delete BidRequest_User_reflection_;
  delete BidRequest_Geo::default_instance_;
  delete BidRequest_Geo_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete Segment::default_instance_;
  delete Segment_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_SeatBid::default_instance_;
  delete BidResponse_SeatBid_reflection_;
  delete BidResponse_SeatBid_Bid::default_instance_;
  delete BidResponse_SeatBid_Bid_reflection_;
  delete BidResponse_SeatBid_Bid_NativeCreative::default_instance_;
  delete BidResponse_SeatBid_Bid_NativeCreative_reflection_;
  delete BidResponse_SeatBid_Bid_NativeCreative_Image::default_instance_;
  delete BidResponse_SeatBid_Bid_NativeCreative_Image_reflection_;
  delete BidResponse_SeatBid_Bid_Link::default_instance_;
  delete BidResponse_SeatBid_Bid_Link_reflection_;
}

void protobuf_AddDesc_momortb12_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017momortb12.proto\022#com.immomo.moaservice"
    ".third.rtb.v12\"\343\013\n\nBidRequest\022\n\n\002id\030\001 \002("
    "\t\022\017\n\007version\030\002 \002(\t\022\026\n\007is_test\030\003 \001(\010:\005fal"
    "se\022\026\n\007is_ping\030\004 \001(\010:\005false\022@\n\003imp\030\005 \003(\0132"
    "3.com.immomo.moaservice.third.rtb.v12.Bi"
    "dRequest.Imp\022F\n\006device\030\006 \001(\01326.com.immom"
    "o.moaservice.third.rtb.v12.BidRequest.De"
    "vice\022@\n\003app\030\007 \001(\01323.com.immomo.moaservic"
    "e.third.rtb.v12.BidRequest.App\022B\n\004user\030\010"
    " \001(\01324.com.immomo.moaservice.third.rtb.v"
    "12.BidRequest.User\032\357\001\n\003Imp\022\n\n\002id\030\001 \002(\t\022\016"
    "\n\006slotid\030\002 \002(\t\022\020\n\010bidfloor\030\003 \001(\001\022J\n\006nati"
    "ve\030\004 \001(\0132:.com.immomo.moaservice.third.r"
    "tb.v12.BidRequest.Imp.Native\022\014\n\004bcat\030\005 \003"
    "(\t\022\014\n\004badv\030\006 \003(\t\032R\n\006Native\022H\n\rnative_for"
    "mat\030\001 \003(\01621.com.immomo.moaservice.third."
    "rtb.v12.NativeFormat\032\237\003\n\006Device\022\n\n\002os\030\001 "
    "\001(\t\022\013\n\003osv\030\002 \001(\t\022\r\n\005model\030\003 \001(\t\022\014\n\004make\030"
    "\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\016\n\006macmd5\030\006 \001(\t\022\013\n\003did"
    "\030\007 \001(\t\022\016\n\006didmd5\030\010 \001(\t\022]\n\016connectiontype"
    "\030\t \001(\0162E.com.immomo.moaservice.third.rtb"
    ".v12.BidRequest.Device.ConnectionType\022\n\n"
    "\002ua\030\n \001(\t\022@\n\003geo\030\013 \001(\01323.com.immomo.moas"
    "ervice.third.rtb.v12.BidRequest.Geo\"y\n\016C"
    "onnectionType\022\026\n\022CONNECTION_UNKNOWN\020\000\022\014\n"
    "\010ETHERNET\020\001\022\010\n\004WIFI\020\002\022\020\n\014CELL_UNKNOWN\020\003\022"
    "\013\n\007CELL_2G\020\004\022\013\n\007CELL_3G\020\005\022\013\n\007CELL_4G\020\006\032<"
    "\n\003App\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003ver\030\003"
    " \001(\t\022\016\n\006bundle\030\004 \001(\t\032\302\002\n\004User\022\n\n\002id\030\001 \001("
    "\t\022K\n\006gender\030\002 \001(\0162;.com.immomo.moaservic"
    "e.third.rtb.v12.BidRequest.User.Gender\022\022"
    "\n\007age_low\030\003 \001(\005:\0010\022\025\n\010age_high\030\004 \001(\005:\00399"
    "9\0227\n\004data\030\010 \003(\0132).com.immomo.moaservice."
    "third.rtb.v12.Data\022\020\n\010keywords\030\006 \001(\t\022@\n\003"
    "geo\030\007 \001(\01323.com.immomo.moaservice.third."
    "rtb.v12.BidRequest.Geo\")\n\006Gender\022\010\n\004MALE"
    "\020\001\022\n\n\006FEMALE\020\002\022\t\n\005OTHER\020\003\032a\n\003Geo\022\013\n\003lat\030"
    "\001 \001(\001\022\013\n\003lon\030\002 \001(\001\022\020\n\010province\030\004 \001(\t\022\014\n\004"
    "city\030\005 \001(\t\022\020\n\010district\030\006 \001(\t\022\016\n\006street\030\007"
    " \001(\t\"_\n\004Data\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022="
    "\n\007segment\030\003 \003(\0132,.com.immomo.moaservice."
    "third.rtb.v12.Segment\"2\n\007Segment\022\n\n\002id\030\001"
    " \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"\271\r\n\013Bi"
    "dResponse\022\n\n\002id\030\001 \002(\t\022I\n\003nbr\030\002 \001(\0162<.com"
    ".immomo.moaservice.third.rtb.v12.BidResp"
    "onse.NoBidReason\022\n\n\002em\030\003 \001(\t\022I\n\007seatbid\030"
    "\004 \003(\01328.com.immomo.moaservice.third.rtb."
    "v12.BidResponse.SeatBid\022\r\n\005bidid\030\005 \001(\t\032\210"
    "\n\n\007SeatBid\022I\n\003bid\030\001 \003(\0132<.com.immomo.moa"
    "service.third.rtb.v12.BidResponse.SeatBi"
    "d.Bid\022\014\n\004seat\030\002 \002(\t\032\243\t\n\003Bid\022\n\n\002id\030\001 \002(\t\022"
    "\r\n\005impid\030\002 \002(\t\022\r\n\005price\030\003 \002(\001\022\013\n\003cid\030\004 \001"
    "(\t\022\014\n\004adid\030\005 \001(\t\022\014\n\004crid\030\006 \002(\t\022\013\n\003cat\030\007 "
    "\003(\t\022\017\n\007adomain\030\010 \003(\t\022\014\n\004nurl\030\t \001(\t\022\016\n\006bu"
    "ndle\030\n \001(\t\022d\n\017native_creative\030\013 \001(\0132K.co"
    "m.immomo.moaservice.third.rtb.v12.BidRes"
    "ponse.SeatBid.Bid.NativeCreative\022\023\n\013impt"
    "rackers\030\014 \003(\t\022\025\n\rclicktrackers\030\r \003(\t\032\317\006\n"
    "\016NativeCreative\022H\n\rnative_format\030\001 \002(\01621"
    ".com.immomo.moaservice.third.rtb.v12.Nat"
    "iveFormat\022\r\n\005title\030\002 \002(\t\022\014\n\004desc\030\003 \002(\t\022_"
    "\n\004logo\030\004 \002(\0132Q.com.immomo.moaservice.thi"
    "rd.rtb.v12.BidResponse.SeatBid.Bid.Nativ"
    "eCreative.Image\022`\n\005image\030\005 \003(\0132Q.com.imm"
    "omo.moaservice.third.rtb.v12.BidResponse"
    ".SeatBid.Bid.NativeCreative.Image\022Z\n\017lan"
    "dingpage_url\030\006 \001(\0132A.com.immomo.moaservi"
    "ce.third.rtb.v12.BidResponse.SeatBid.Bid"
    ".Link\022[\n\020app_download_url\030\007 \001(\0132A.com.im"
    "momo.moaservice.third.rtb.v12.BidRespons"
    "e.SeatBid.Bid.Link\022X\n\rapp_intro_url\030\010 \001("
    "\0132A.com.immomo.moaservice.third.rtb.v12."
    "BidResponse.SeatBid.Bid.Link\022\017\n\007app_ver\030"
    "\t \001(\t\022\020\n\010app_size\030\n \001(\001\022\026\n\016display_label"
    "s\030\013 \003(\t\022>\n\010ext_data\030\014 \003(\0132,.com.immomo.m"
    "oaservice.third.rtb.v12.Segment\032\204\001\n\005Imag"
    "e\022\013\n\003url\030\001 \001(\t\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030"
    "\003 \001(\005\022O\n\004link\030\004 \001(\0132A.com.immomo.moaserv"
    "ice.third.rtb.v12.BidResponse.SeatBid.Bi"
    "d.Link\032)\n\004Link\022\013\n\003url\030\001 \002(\t\022\024\n\014deeplink_"
    "url\030\002 \001(\t\"\341\001\n\013NoBidReason\022\021\n\rUNKNOWN_ERR"
    "OR\020\000\022\023\n\017TECHNICAL_ERROR\020\001\022\023\n\017INVALID_REQ"
    "UEST\020\002\022\024\n\020KNOWN_WEB_SPIDER\020\003\022\036\n\032SUSPECTE"
    "D_NONHUMAN_TRAFFIC\020\004\022\034\n\030CLOUD_DATACENTER"
    "_PROXYIP\020\005\022\026\n\022UNSUPPORTED_DEVICE\020\006\022\025\n\021BL"
    "OCKED_PUBLISHER\020\007\022\022\n\016UNMATCHED_USER\020\010*\242\002"
    "\n\014NativeFormat\022\037\n\033FEED_LANDING_PAGE_LARG"
    "E_IMG\020\001\022\037\n\033FEED_LANDING_PAGE_SMALL_IMG\020\002"
    "\022\036\n\032NEARBY_LANDING_PAGE_NO_IMG\020\003\022\032\n\026FEED"
    "_APP_IOS_LARGE_IMG\020\004\022\032\n\026FEED_APP_IOS_SMA"
    "LL_IMG\020\005\022\031\n\025NEARBY_APP_IOS_NO_IMG\020\006\022\036\n\032F"
    "EED_APP_ANDROID_LARGE_IMG\020\007\022\036\n\032FEED_APP_"
    "ANDROID_SMALL_IMG\020\010\022\035\n\031NEARBY_APP_ANDROI"
    "D_NO_IMG\020\tB\016B\014MomoExchange", 3746);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "momortb12.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_Imp::default_instance_ = new BidRequest_Imp();
  BidRequest_Imp_Native::default_instance_ = new BidRequest_Imp_Native();
  BidRequest_Device::default_instance_ = new BidRequest_Device();
  BidRequest_App::default_instance_ = new BidRequest_App();
  BidRequest_User::default_instance_ = new BidRequest_User();
  BidRequest_Geo::default_instance_ = new BidRequest_Geo();
  Data::default_instance_ = new Data();
  Segment::default_instance_ = new Segment();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_SeatBid::default_instance_ = new BidResponse_SeatBid();
  BidResponse_SeatBid_Bid::default_instance_ = new BidResponse_SeatBid_Bid();
  BidResponse_SeatBid_Bid_NativeCreative::default_instance_ = new BidResponse_SeatBid_Bid_NativeCreative();
  BidResponse_SeatBid_Bid_NativeCreative_Image::default_instance_ = new BidResponse_SeatBid_Bid_NativeCreative_Image();
  BidResponse_SeatBid_Bid_Link::default_instance_ = new BidResponse_SeatBid_Bid_Link();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Native::default_instance_->InitAsDefaultInstance();
  BidRequest_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_App::default_instance_->InitAsDefaultInstance();
  BidRequest_User::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  Segment::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid_Bid::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid_Bid_NativeCreative::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid_Bid_NativeCreative_Image::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid_Bid_Link::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_momortb12_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_momortb12_2eproto {
  StaticDescriptorInitializer_momortb12_2eproto() {
    protobuf_AddDesc_momortb12_2eproto();
  }
} static_descriptor_initializer_momortb12_2eproto_;
const ::google::protobuf::EnumDescriptor* NativeFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeFormat_descriptor_;
}
bool NativeFormat_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BidRequest_Imp_Native::kNativeFormatFieldNumber;
#endif  // !_MSC_VER

BidRequest_Imp_Native::BidRequest_Imp_Native()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
}

void BidRequest_Imp_Native::InitAsDefaultInstance() {
}

BidRequest_Imp_Native::BidRequest_Imp_Native(const BidRequest_Imp_Native& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
}

void BidRequest_Imp_Native::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Native::~BidRequest_Imp_Native() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
  SharedDtor();
}

void BidRequest_Imp_Native::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Native::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Native::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Native_descriptor_;
}

const BidRequest_Imp_Native& BidRequest_Imp_Native::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Native* BidRequest_Imp_Native::default_instance_ = NULL;

BidRequest_Imp_Native* BidRequest_Imp_Native::New() const {
  return new BidRequest_Imp_Native;
}

void BidRequest_Imp_Native::Clear() {
  native_format_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Imp_Native::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
      case 1: {
        if (tag == 8) {
         parse_native_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::immomo::moaservice::third::rtb::v12::NativeFormat_IsValid(value)) {
            add_native_format(static_cast< ::com::immomo::moaservice::third::rtb::v12::NativeFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::com::immomo::moaservice::third::rtb::v12::NativeFormat_IsValid,
                 this->mutable_native_format())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_native_format;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
  return false;
#undef DO_
}

void BidRequest_Imp_Native::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
  // repeated .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
  for (int i = 0; i < this->native_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->native_format(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
}

::google::protobuf::uint8* BidRequest_Imp_Native::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
  // repeated .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
  for (int i = 0; i < this->native_format_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->native_format(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native)
  return target;
}

int BidRequest_Imp_Native::ByteSize() const {
  int total_size = 0;

  // repeated .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->native_format_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->native_format(i));
    }
    total_size += 1 * this->native_format_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Native::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Imp_Native* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Imp_Native*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Native::MergeFrom(const BidRequest_Imp_Native& from) {
  GOOGLE_CHECK_NE(&from, this);
  native_format_.MergeFrom(from.native_format_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Imp_Native::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Native::CopyFrom(const BidRequest_Imp_Native& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Native::IsInitialized() const {

  return true;
}

void BidRequest_Imp_Native::Swap(BidRequest_Imp_Native* other) {
  if (other != this) {
    native_format_.Swap(&other->native_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Imp_Native::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Native_descriptor_;
  metadata.reflection = BidRequest_Imp_Native_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Imp::kIdFieldNumber;
const int BidRequest_Imp::kSlotidFieldNumber;
const int BidRequest_Imp::kBidfloorFieldNumber;
const int BidRequest_Imp::kNativeFieldNumber;
const int BidRequest_Imp::kBcatFieldNumber;
const int BidRequest_Imp::kBadvFieldNumber;
#endif  // !_MSC_VER

BidRequest_Imp::BidRequest_Imp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
}

void BidRequest_Imp::InitAsDefaultInstance() {
  native_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native*>(&::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native::default_instance());
}

BidRequest_Imp::BidRequest_Imp(const BidRequest_Imp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
}

void BidRequest_Imp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slotid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloor_ = 0;
  native_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp::~BidRequest_Imp() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
  SharedDtor();
}

void BidRequest_Imp::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (slotid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slotid_;
  }
  if (this != default_instance_) {
    delete native_;
  }
}

void BidRequest_Imp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_descriptor_;
}

const BidRequest_Imp& BidRequest_Imp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidRequest_Imp* BidRequest_Imp::default_instance_ = NULL;

BidRequest_Imp* BidRequest_Imp::New() const {
  return new BidRequest_Imp;
}

void BidRequest_Imp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_slotid()) {
      if (slotid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slotid_->clear();
      }
    }
    bidfloor_ = 0;
    if (has_native()) {
      if (native_ != NULL) native_->::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native::Clear();
    }
  }
  bcat_.Clear();
  badv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Imp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slotid;
        break;
      }

      // required string slotid = 2;
      case 2: {
        if (tag == 18) {
         parse_slotid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slotid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slotid().data(), this->slotid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slotid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_bidfloor;
        break;
      }

      // optional double bidfloor = 3;
      case 3: {
        if (tag == 25) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_native;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native native = 4;
      case 4: {
        if (tag == 34) {
         parse_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bcat;
        break;
      }

      // repeated string bcat = 5;
      case 5: {
        if (tag == 42) {
         parse_bcat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bcat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bcat(this->bcat_size() - 1).data(),
            this->bcat(this->bcat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bcat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bcat;
        if (input->ExpectTag(50)) goto parse_badv;
        break;
      }

      // repeated string badv = 6;
      case 6: {
        if (tag == 50) {
         parse_badv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_badv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->badv(this->badv_size() - 1).data(),
            this->badv(this->badv_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "badv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_badv;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
  return false;
#undef DO_
}

void BidRequest_Imp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string slotid = 2;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slotid().data(), this->slotid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slotid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->slotid(), output);
  }

  // optional double bidfloor = 3;
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bidfloor(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native native = 4;
  if (has_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->native(), output);
  }

  // repeated string bcat = 5;
  for (int i = 0; i < this->bcat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->bcat(i).data(), this->bcat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "bcat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bcat(i), output);
  }

  // repeated string badv = 6;
  for (int i = 0; i < this->badv_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->badv(i).data(), this->badv(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "badv");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->badv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
}

::google::protobuf::uint8* BidRequest_Imp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string slotid = 2;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slotid().data(), this->slotid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slotid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->slotid(), target);
  }

  // optional double bidfloor = 3;
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bidfloor(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native native = 4;
  if (has_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->native(), target);
  }

  // repeated string bcat = 5;
  for (int i = 0; i < this->bcat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bcat(i).data(), this->bcat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bcat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->bcat(i), target);
  }

  // repeated string badv = 6;
  for (int i = 0; i < this->badv_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->badv(i).data(), this->badv(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "badv");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->badv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidRequest.Imp)
  return target;
}

int BidRequest_Imp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string slotid = 2;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slotid());
    }

    // optional double bidfloor = 3;
    if (has_bidfloor()) {
      total_size += 1 + 8;
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp.Native native = 4;
    if (has_native()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->native());
    }

  }
  // repeated string bcat = 5;
  total_size += 1 * this->bcat_size();
  for (int i = 0; i < this->bcat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bcat(i));
  }

  // repeated string badv = 6;
  total_size += 1 * this->badv_size();
  for (int i = 0; i < this->badv_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->badv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Imp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Imp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Imp::MergeFrom(const BidRequest_Imp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bcat_.MergeFrom(from.bcat_);
  badv_.MergeFrom(from.badv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
    if (from.has_native()) {
      mutable_native()->::com::immomo::moaservice::third::rtb::v12::BidRequest_Imp_Native::MergeFrom(from.native());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Imp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp::CopyFrom(const BidRequest_Imp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_Imp::Swap(BidRequest_Imp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(slotid_, other->slotid_);
    std::swap(bidfloor_, other->bidfloor_);
    std::swap(native_, other->native_);
    bcat_.Swap(&other->bcat_);
    badv_.Swap(&other->badv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Imp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_descriptor_;
  metadata.reflection = BidRequest_Imp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Device_ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_ConnectionType_descriptor_;
}
bool BidRequest_Device_ConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Device_ConnectionType BidRequest_Device::CONNECTION_UNKNOWN;
const BidRequest_Device_ConnectionType BidRequest_Device::ETHERNET;
const BidRequest_Device_ConnectionType BidRequest_Device::WIFI;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_UNKNOWN;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_2G;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_3G;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_4G;
const BidRequest_Device_ConnectionType BidRequest_Device::ConnectionType_MIN;
const BidRequest_Device_ConnectionType BidRequest_Device::ConnectionType_MAX;
const int BidRequest_Device::ConnectionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Device::kOsFieldNumber;
const int BidRequest_Device::kOsvFieldNumber;
const int BidRequest_Device::kModelFieldNumber;
const int BidRequest_Device::kMakeFieldNumber;
const int BidRequest_Device::kIpFieldNumber;
const int BidRequest_Device::kMacmd5FieldNumber;
const int BidRequest_Device::kDidFieldNumber;
const int BidRequest_Device::kDidmd5FieldNumber;
const int BidRequest_Device::kConnectiontypeFieldNumber;
const int BidRequest_Device::kUaFieldNumber;
const int BidRequest_Device::kGeoFieldNumber;
#endif  // !_MSC_VER

BidRequest_Device::BidRequest_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
}

void BidRequest_Device::InitAsDefaultInstance() {
  geo_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo*>(&::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo::default_instance());
}

BidRequest_Device::BidRequest_Device(const BidRequest_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
}

void BidRequest_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  did_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  didmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connectiontype_ = 0;
  ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Device::~BidRequest_Device() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
  SharedDtor();
}

void BidRequest_Device::SharedDtor() {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete make_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (macmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete macmd5_;
  }
  if (did_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete did_;
  }
  if (didmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete didmd5_;
  }
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void BidRequest_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_descriptor_;
}

const BidRequest_Device& BidRequest_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidRequest_Device* BidRequest_Device::default_instance_ = NULL;

BidRequest_Device* BidRequest_Device::New() const {
  return new BidRequest_Device;
}

void BidRequest_Device::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_->clear();
      }
    }
    if (has_osv()) {
      if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        osv_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_make()) {
      if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        make_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_macmd5()) {
      if (macmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        macmd5_->clear();
      }
    }
    if (has_did()) {
      if (did_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        did_->clear();
      }
    }
    if (has_didmd5()) {
      if (didmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        didmd5_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    connectiontype_ = 0;
    if (has_ua()) {
      if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ua_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string os = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_osv;
        break;
      }

      // optional string osv = 2;
      case 2: {
        if (tag == 18) {
         parse_osv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->osv().data(), this->osv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "osv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (tag == 26) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_make;
        break;
      }

      // optional string make = 4;
      case 4: {
        if (tag == 34) {
         parse_make:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_make()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->make().data(), this->make().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "make");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (tag == 42) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_macmd5;
        break;
      }

      // optional string macmd5 = 6;
      case 6: {
        if (tag == 50) {
         parse_macmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macmd5().data(), this->macmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "macmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_did;
        break;
      }

      // optional string did = 7;
      case 7: {
        if (tag == 58) {
         parse_did:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->did().data(), this->did().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "did");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_didmd5;
        break;
      }

      // optional string didmd5 = 8;
      case 8: {
        if (tag == 66) {
         parse_didmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_didmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->didmd5().data(), this->didmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "didmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_connectiontype;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ConnectionType connectiontype = 9;
      case 9: {
        if (tag == 72) {
         parse_connectiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device_ConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ua;
        break;
      }

      // optional string ua = 10;
      case 10: {
        if (tag == 82) {
         parse_ua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_geo;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 11;
      case 11: {
        if (tag == 90) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
  return false;
#undef DO_
}

void BidRequest_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
  // optional string os = 1;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->os(), output);
  }

  // optional string osv = 2;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->osv(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // optional string make = 4;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "make");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->make(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // optional string macmd5 = 6;
  if (has_macmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macmd5().data(), this->macmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "macmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->macmd5(), output);
  }

  // optional string did = 7;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "did");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->did(), output);
  }

  // optional string didmd5 = 8;
  if (has_didmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didmd5().data(), this->didmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "didmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->didmd5(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ConnectionType connectiontype = 9;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->connectiontype(), output);
  }

  // optional string ua = 10;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ua(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 11;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->geo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
}

::google::protobuf::uint8* BidRequest_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
  // optional string os = 1;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->os(), target);
  }

  // optional string osv = 2;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->osv(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string make = 4;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "make");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->make(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional string macmd5 = 6;
  if (has_macmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macmd5().data(), this->macmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "macmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->macmd5(), target);
  }

  // optional string did = 7;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "did");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->did(), target);
  }

  // optional string didmd5 = 8;
  if (has_didmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didmd5().data(), this->didmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "didmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->didmd5(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ConnectionType connectiontype = 9;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->connectiontype(), target);
  }

  // optional string ua = 10;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ua(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 11;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->geo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidRequest.Device)
  return target;
}

int BidRequest_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string os = 1;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string osv = 2;
    if (has_osv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osv());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string make = 4;
    if (has_make()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->make());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string macmd5 = 6;
    if (has_macmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macmd5());
    }

    // optional string did = 7;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->did());
    }

    // optional string didmd5 = 8;
    if (has_didmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->didmd5());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device.ConnectionType connectiontype = 9;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

    // optional string ua = 10;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 11;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Device::MergeFrom(const BidRequest_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_osv()) {
      set_osv(from.osv());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_make()) {
      set_make(from.make());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_macmd5()) {
      set_macmd5(from.macmd5());
    }
    if (from.has_did()) {
      set_did(from.did());
    }
    if (from.has_didmd5()) {
      set_didmd5(from.didmd5());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_ua()) {
      set_ua(from.ua());
    }
    if (from.has_geo()) {
      mutable_geo()->::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo::MergeFrom(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Device::CopyFrom(const BidRequest_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Device::IsInitialized() const {

  return true;
}

void BidRequest_Device::Swap(BidRequest_Device* other) {
  if (other != this) {
    std::swap(os_, other->os_);
    std::swap(osv_, other->osv_);
    std::swap(model_, other->model_);
    std::swap(make_, other->make_);
    std::swap(ip_, other->ip_);
    std::swap(macmd5_, other->macmd5_);
    std::swap(did_, other->did_);
    std::swap(didmd5_, other->didmd5_);
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(ua_, other->ua_);
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Device_descriptor_;
  metadata.reflection = BidRequest_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_App::kIdFieldNumber;
const int BidRequest_App::kNameFieldNumber;
const int BidRequest_App::kVerFieldNumber;
const int BidRequest_App::kBundleFieldNumber;
#endif  // !_MSC_VER

BidRequest_App::BidRequest_App()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
}

void BidRequest_App::InitAsDefaultInstance() {
}

BidRequest_App::BidRequest_App(const BidRequest_App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
}

void BidRequest_App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_App::~BidRequest_App() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
  SharedDtor();
}

void BidRequest_App::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_App_descriptor_;
}

const BidRequest_App& BidRequest_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidRequest_App* BidRequest_App::default_instance_ = NULL;

BidRequest_App* BidRequest_App::New() const {
  return new BidRequest_App;
}

void BidRequest_App::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ver_->clear();
      }
    }
    if (has_bundle()) {
      if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bundle_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ver;
        break;
      }

      // optional string ver = 3;
      case 3: {
        if (tag == 26) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bundle;
        break;
      }

      // optional string bundle = 4;
      case 4: {
        if (tag == 34) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
  return false;
#undef DO_
}

void BidRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string ver = 3;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ver(), output);
  }

  // optional string bundle = 4;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bundle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
}

::google::protobuf::uint8* BidRequest_App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string ver = 3;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ver(), target);
  }

  // optional string bundle = 4;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bundle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidRequest.App)
  return target;
}

int BidRequest_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ver = 3;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // optional string bundle = 4;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_App::MergeFrom(const BidRequest_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_bundle()) {
      set_bundle(from.bundle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_App::CopyFrom(const BidRequest_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_App::IsInitialized() const {

  return true;
}

void BidRequest_App::Swap(BidRequest_App* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ver_, other->ver_);
    std::swap(bundle_, other->bundle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_App_descriptor_;
  metadata.reflection = BidRequest_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_User_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Gender_descriptor_;
}
bool BidRequest_User_Gender_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_User_Gender BidRequest_User::MALE;
const BidRequest_User_Gender BidRequest_User::FEMALE;
const BidRequest_User_Gender BidRequest_User::OTHER;
const BidRequest_User_Gender BidRequest_User::Gender_MIN;
const BidRequest_User_Gender BidRequest_User::Gender_MAX;
const int BidRequest_User::Gender_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_User::kIdFieldNumber;
const int BidRequest_User::kGenderFieldNumber;
const int BidRequest_User::kAgeLowFieldNumber;
const int BidRequest_User::kAgeHighFieldNumber;
const int BidRequest_User::kDataFieldNumber;
const int BidRequest_User::kKeywordsFieldNumber;
const int BidRequest_User::kGeoFieldNumber;
#endif  // !_MSC_VER

BidRequest_User::BidRequest_User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
}

void BidRequest_User::InitAsDefaultInstance() {
  geo_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo*>(&::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo::default_instance());
}

BidRequest_User::BidRequest_User(const BidRequest_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
}

void BidRequest_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 1;
  age_low_ = 0;
  age_high_ = 999;
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User::~BidRequest_User() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
  SharedDtor();
}

void BidRequest_User::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void BidRequest_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_descriptor_;
}

const BidRequest_User& BidRequest_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidRequest_User* BidRequest_User::default_instance_ = NULL;

BidRequest_User* BidRequest_User::New() const {
  return new BidRequest_User;
}

void BidRequest_User::Clear() {
  if (_has_bits_[0 / 32] & 111) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    gender_ = 1;
    age_low_ = 0;
    age_high_ = 999;
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gender;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User.Gender gender = 2;
      case 2: {
        if (tag == 16) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender_IsValid(value)) {
            set_gender(static_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_User_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_age_low;
        break;
      }

      // optional int32 age_low = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_age_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_low_)));
          set_has_age_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_age_high;
        break;
      }

      // optional int32 age_high = 4 [default = 999];
      case 4: {
        if (tag == 32) {
         parse_age_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_high_)));
          set_has_age_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_keywords;
        break;
      }

      // optional string keywords = 6;
      case 6: {
        if (tag == 50) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_geo;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 7;
      case 7: {
        if (tag == 58) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // repeated .com.immomo.moaservice.third.rtb.v12.Data data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
  return false;
#undef DO_
}

void BidRequest_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User.Gender gender = 2;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gender(), output);
  }

  // optional int32 age_low = 3 [default = 0];
  if (has_age_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age_low(), output);
  }

  // optional int32 age_high = 4 [default = 999];
  if (has_age_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->age_high(), output);
  }

  // optional string keywords = 6;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->keywords(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 7;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->geo(), output);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.Data data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
}

::google::protobuf::uint8* BidRequest_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User.Gender gender = 2;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gender(), target);
  }

  // optional int32 age_low = 3 [default = 0];
  if (has_age_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age_low(), target);
  }

  // optional int32 age_high = 4 [default = 999];
  if (has_age_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->age_high(), target);
  }

  // optional string keywords = 6;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->keywords(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 7;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->geo(), target);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.Data data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidRequest.User)
  return target;
}

int BidRequest_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User.Gender gender = 2;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional int32 age_low = 3 [default = 0];
    if (has_age_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_low());
    }

    // optional int32 age_high = 4 [default = 999];
    if (has_age_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_high());
    }

    // optional string keywords = 6;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Geo geo = 7;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

  }
  // repeated .com.immomo.moaservice.third.rtb.v12.Data data = 8;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_User::MergeFrom(const BidRequest_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age_low()) {
      set_age_low(from.age_low());
    }
    if (from.has_age_high()) {
      set_age_high(from.age_high());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_geo()) {
      mutable_geo()->::com::immomo::moaservice::third::rtb::v12::BidRequest_Geo::MergeFrom(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User::CopyFrom(const BidRequest_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User::IsInitialized() const {

  return true;
}

void BidRequest_User::Swap(BidRequest_User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gender_, other->gender_);
    std::swap(age_low_, other->age_low_);
    std::swap(age_high_, other->age_high_);
    data_.Swap(&other->data_);
    std::swap(keywords_, other->keywords_);
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_descriptor_;
  metadata.reflection = BidRequest_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Geo::kLatFieldNumber;
const int BidRequest_Geo::kLonFieldNumber;
const int BidRequest_Geo::kProvinceFieldNumber;
const int BidRequest_Geo::kCityFieldNumber;
const int BidRequest_Geo::kDistrictFieldNumber;
const int BidRequest_Geo::kStreetFieldNumber;
#endif  // !_MSC_VER

BidRequest_Geo::BidRequest_Geo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
}

void BidRequest_Geo::InitAsDefaultInstance() {
}

BidRequest_Geo::BidRequest_Geo(const BidRequest_Geo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
}

void BidRequest_Geo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  district_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo::~BidRequest_Geo() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
  SharedDtor();
}

void BidRequest_Geo::SharedDtor() {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (district_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete district_;
  }
  if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete street_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_descriptor_;
}

const BidRequest_Geo& BidRequest_Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidRequest_Geo* BidRequest_Geo::default_instance_ = NULL;

BidRequest_Geo* BidRequest_Geo::New() const {
  return new BidRequest_Geo;
}

void BidRequest_Geo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Geo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(lat_, lon_);
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_district()) {
      if (district_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        district_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        street_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // optional double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_province;
        break;
      }

      // optional string province = 4;
      case 4: {
        if (tag == 34) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_city;
        break;
      }

      // optional string city = 5;
      case 5: {
        if (tag == 42) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_district;
        break;
      }

      // optional string district = 6;
      case 6: {
        if (tag == 50) {
         parse_district:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_district()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->district().data(), this->district().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "district");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_street;
        break;
      }

      // optional string street = 7;
      case 7: {
        if (tag == 58) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "street");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
  return false;
#undef DO_
}

void BidRequest_Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
  // optional double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // optional double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // optional string province = 4;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->province(), output);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->city(), output);
  }

  // optional string district = 6;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "district");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->district(), output);
  }

  // optional string street = 7;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->street(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
}

::google::protobuf::uint8* BidRequest_Geo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
  // optional double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // optional double lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // optional string province = 4;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->province(), target);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city(), target);
  }

  // optional string district = 6;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "district");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->district(), target);
  }

  // optional string street = 7;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->street(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidRequest.Geo)
  return target;
}

int BidRequest_Geo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional string province = 4;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string district = 6;
    if (has_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->district());
    }

    // optional string street = 7;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Geo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Geo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Geo::MergeFrom(const BidRequest_Geo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_district()) {
      set_district(from.district());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Geo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo::CopyFrom(const BidRequest_Geo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo::IsInitialized() const {

  return true;
}

void BidRequest_Geo::Swap(BidRequest_Geo* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(district_, other->district_);
    std::swap(street_, other->street_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_descriptor_;
  metadata.reflection = BidRequest_Geo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest::kIdFieldNumber;
const int BidRequest::kVersionFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kIsPingFieldNumber;
const int BidRequest::kImpFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kAppFieldNumber;
const int BidRequest::kUserFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  device_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_Device*>(&::com::immomo::moaservice::third::rtb::v12::BidRequest_Device::default_instance());
  app_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_App*>(&::com::immomo::moaservice::third::rtb::v12::BidRequest_App::default_instance());
  user_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidRequest_User*>(&::com::immomo::moaservice::third::rtb::v12::BidRequest_User::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_test_ = false;
  is_ping_ = false;
  device_ = NULL;
  app_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
    delete device_;
    delete app_;
    delete user_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(is_test_, is_ping_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_device()) {
      if (device_ != NULL) device_->::com::immomo::moaservice::third::rtb::v12::BidRequest_Device::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::com::immomo::moaservice::third::rtb::v12::BidRequest_App::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::com::immomo::moaservice::third::rtb::v12::BidRequest_User::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  imp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // required string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_test;
        break;
      }

      // optional bool is_test = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_ping;
        break;
      }

      // optional bool is_ping = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_imp;
        break;
      }

      // repeated .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp imp = 5;
      case 5: {
        if (tag == 42) {
         parse_imp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_imp;
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device device = 6;
      case 6: {
        if (tag == 50) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_app;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.App app = 7;
      case 7: {
        if (tag == 58) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User user = 8;
      case 8: {
        if (tag == 66) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional bool is_test = 3 [default = false];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_test(), output);
  }

  // optional bool is_ping = 4 [default = false];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_ping(), output);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp imp = 5;
  for (int i = 0; i < this->imp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->imp(i), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->device(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.App app = 7;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->app(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User user = 8;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidRequest)
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional bool is_test = 3 [default = false];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_test(), target);
  }

  // optional bool is_ping = 4 [default = false];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_ping(), target);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp imp = 5;
  for (int i = 0; i < this->imp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->imp(i), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device device = 6;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->device(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.App app = 7;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->app(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User user = 8;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional bool is_test = 3 [default = false];
    if (has_is_test()) {
      total_size += 1 + 1;
    }

    // optional bool is_ping = 4 [default = false];
    if (has_is_ping()) {
      total_size += 1 + 1;
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.Device device = 6;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.App app = 7;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidRequest.User user = 8;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  // repeated .com.immomo.moaservice.third.rtb.v12.BidRequest.Imp imp = 5;
  total_size += 1 * this->imp_size();
  for (int i = 0; i < this->imp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  imp_.MergeFrom(from.imp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
    if (from.has_device()) {
      mutable_device()->::com::immomo::moaservice::third::rtb::v12::BidRequest_Device::MergeFrom(from.device());
    }
    if (from.has_app()) {
      mutable_app()->::com::immomo::moaservice::third::rtb::v12::BidRequest_App::MergeFrom(from.app());
    }
    if (from.has_user()) {
      mutable_user()->::com::immomo::moaservice::third::rtb::v12::BidRequest_User::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->imp())) return false;
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(version_, other->version_);
    std::swap(is_test_, other->is_test_);
    std::swap(is_ping_, other->is_ping_);
    imp_.Swap(&other->imp_);
    std::swap(device_, other->device_);
    std::swap(app_, other->app_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Data::kIdFieldNumber;
const int Data::kNameFieldNumber;
const int Data::kSegmentFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.Data)
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.Data)
}

void Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_segment;
        break;
      }

      // repeated .com.immomo.moaservice.third.rtb.v12.Segment segment = 3;
      case 3: {
        if (tag == 26) {
         parse_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_segment;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.Data)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.Segment segment = 3;
  for (int i = 0; i < this->segment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->segment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.Data)
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.Data)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.Segment segment = 3;
  for (int i = 0; i < this->segment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->segment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.Data)
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .com.immomo.moaservice.third.rtb.v12.Segment segment = 3;
  total_size += 1 * this->segment_size();
  for (int i = 0; i < this->segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  segment_.MergeFrom(from.segment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    segment_.Swap(&other->segment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Segment::kIdFieldNumber;
const int Segment::kNameFieldNumber;
const int Segment::kValueFieldNumber;
#endif  // !_MSC_VER

Segment::Segment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.Segment)
}

void Segment::InitAsDefaultInstance() {
}

Segment::Segment(const Segment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.Segment)
}

void Segment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.Segment)
  SharedDtor();
}

void Segment::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Segment_descriptor_;
}

const Segment& Segment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

Segment* Segment::default_instance_ = NULL;

Segment* Segment::New() const {
  return new Segment;
}

void Segment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.Segment)
  return false;
#undef DO_
}

void Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.Segment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.Segment)
}

::google::protobuf::uint8* Segment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.Segment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.Segment)
  return target;
}

int Segment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Segment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Segment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Segment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {

  return true;
}

void Segment::Swap(Segment* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Segment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Segment_descriptor_;
  metadata.reflection = Segment_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BidResponse_NoBidReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_NoBidReason_descriptor_;
}
bool BidResponse_NoBidReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidResponse_NoBidReason BidResponse::UNKNOWN_ERROR;
const BidResponse_NoBidReason BidResponse::TECHNICAL_ERROR;
const BidResponse_NoBidReason BidResponse::INVALID_REQUEST;
const BidResponse_NoBidReason BidResponse::KNOWN_WEB_SPIDER;
const BidResponse_NoBidReason BidResponse::SUSPECTED_NONHUMAN_TRAFFIC;
const BidResponse_NoBidReason BidResponse::CLOUD_DATACENTER_PROXYIP;
const BidResponse_NoBidReason BidResponse::UNSUPPORTED_DEVICE;
const BidResponse_NoBidReason BidResponse::BLOCKED_PUBLISHER;
const BidResponse_NoBidReason BidResponse::UNMATCHED_USER;
const BidResponse_NoBidReason BidResponse::NoBidReason_MIN;
const BidResponse_NoBidReason BidResponse::NoBidReason_MAX;
const int BidResponse::NoBidReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidResponse_SeatBid_Bid_NativeCreative_Image::kUrlFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative_Image::kWidthFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative_Image::kHeightFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative_Image::kLinkFieldNumber;
#endif  // !_MSC_VER

BidResponse_SeatBid_Bid_NativeCreative_Image::BidResponse_SeatBid_Bid_NativeCreative_Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::InitAsDefaultInstance() {
  link_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link*>(&::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::default_instance());
}

BidResponse_SeatBid_Bid_NativeCreative_Image::BidResponse_SeatBid_Bid_NativeCreative_Image(const BidResponse_SeatBid_Bid_NativeCreative_Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  link_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid_Bid_NativeCreative_Image::~BidResponse_SeatBid_Bid_NativeCreative_Image() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
  SharedDtor();
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
    delete link_;
  }
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_NativeCreative_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_Bid_NativeCreative_Image_descriptor_;
}

const BidResponse_SeatBid_Bid_NativeCreative_Image& BidResponse_SeatBid_Bid_NativeCreative_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid_Bid_NativeCreative_Image* BidResponse_SeatBid_Bid_NativeCreative_Image::default_instance_ = NULL;

BidResponse_SeatBid_Bid_NativeCreative_Image* BidResponse_SeatBid_Bid_NativeCreative_Image::New() const {
  return new BidResponse_SeatBid_Bid_NativeCreative_Image;
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_SeatBid_Bid_NativeCreative_Image*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(width_, height_);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_link()) {
      if (link_ != NULL) link_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_SeatBid_Bid_NativeCreative_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_link;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link link = 4;
      case 4: {
        if (tag == 34) {
         parse_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
  return false;
#undef DO_
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link link = 4;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->link(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
}

::google::protobuf::uint8* BidResponse_SeatBid_Bid_NativeCreative_Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link link = 4;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->link(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image)
  return target;
}

int BidResponse_SeatBid_Bid_NativeCreative_Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link link = 4;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_SeatBid_Bid_NativeCreative_Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_SeatBid_Bid_NativeCreative_Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::MergeFrom(const BidResponse_SeatBid_Bid_NativeCreative_Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_link()) {
      mutable_link()->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::MergeFrom(from.link());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::CopyFrom(const BidResponse_SeatBid_Bid_NativeCreative_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid_Bid_NativeCreative_Image::IsInitialized() const {

  if (has_link()) {
    if (!this->link().IsInitialized()) return false;
  }
  return true;
}

void BidResponse_SeatBid_Bid_NativeCreative_Image::Swap(BidResponse_SeatBid_Bid_NativeCreative_Image* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(link_, other->link_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_SeatBid_Bid_NativeCreative_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_Bid_NativeCreative_Image_descriptor_;
  metadata.reflection = BidResponse_SeatBid_Bid_NativeCreative_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_SeatBid_Bid_NativeCreative::kNativeFormatFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kTitleFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kDescFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kLogoFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kImageFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kLandingpageUrlFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kAppDownloadUrlFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kAppIntroUrlFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kAppVerFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kAppSizeFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kDisplayLabelsFieldNumber;
const int BidResponse_SeatBid_Bid_NativeCreative::kExtDataFieldNumber;
#endif  // !_MSC_VER

BidResponse_SeatBid_Bid_NativeCreative::BidResponse_SeatBid_Bid_NativeCreative()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
}

void BidResponse_SeatBid_Bid_NativeCreative::InitAsDefaultInstance() {
  logo_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image*>(&::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image::default_instance());
  landingpage_url_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link*>(&::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::default_instance());
  app_download_url_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link*>(&::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::default_instance());
  app_intro_url_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link*>(&::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::default_instance());
}

BidResponse_SeatBid_Bid_NativeCreative::BidResponse_SeatBid_Bid_NativeCreative(const BidResponse_SeatBid_Bid_NativeCreative& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
}

void BidResponse_SeatBid_Bid_NativeCreative::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  native_format_ = 1;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_ = NULL;
  landingpage_url_ = NULL;
  app_download_url_ = NULL;
  app_intro_url_ = NULL;
  app_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid_Bid_NativeCreative::~BidResponse_SeatBid_Bid_NativeCreative() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
  SharedDtor();
}

void BidResponse_SeatBid_Bid_NativeCreative::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (app_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_ver_;
  }
  if (this != default_instance_) {
    delete logo_;
    delete landingpage_url_;
    delete app_download_url_;
    delete app_intro_url_;
  }
}

void BidResponse_SeatBid_Bid_NativeCreative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_NativeCreative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_Bid_NativeCreative_descriptor_;
}

const BidResponse_SeatBid_Bid_NativeCreative& BidResponse_SeatBid_Bid_NativeCreative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid_Bid_NativeCreative* BidResponse_SeatBid_Bid_NativeCreative::default_instance_ = NULL;

BidResponse_SeatBid_Bid_NativeCreative* BidResponse_SeatBid_Bid_NativeCreative::New() const {
  return new BidResponse_SeatBid_Bid_NativeCreative;
}

void BidResponse_SeatBid_Bid_NativeCreative::Clear() {
  if (_has_bits_[0 / 32] & 239) {
    native_format_ = 1;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_logo()) {
      if (logo_ != NULL) logo_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image::Clear();
    }
    if (has_landingpage_url()) {
      if (landingpage_url_ != NULL) landingpage_url_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::Clear();
    }
    if (has_app_download_url()) {
      if (app_download_url_ != NULL) app_download_url_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::Clear();
    }
    if (has_app_intro_url()) {
      if (app_intro_url_ != NULL) app_intro_url_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_app_ver()) {
      if (app_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_ver_->clear();
      }
    }
    app_size_ = 0;
  }
  image_.Clear();
  display_labels_.Clear();
  ext_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_SeatBid_Bid_NativeCreative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::immomo::moaservice::third::rtb::v12::NativeFormat_IsValid(value)) {
            set_native_format(static_cast< ::com::immomo::moaservice::third::rtb::v12::NativeFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // required string desc = 3;
      case 3: {
        if (tag == 26) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_logo;
        break;
      }

      // required .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image logo = 4;
      case 4: {
        if (tag == 34) {
         parse_logo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image;
        break;
      }

      // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image image = 5;
      case 5: {
        if (tag == 42) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image;
        if (input->ExpectTag(50)) goto parse_landingpage_url;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link landingpage_url = 6;
      case 6: {
        if (tag == 50) {
         parse_landingpage_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landingpage_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_app_download_url;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_download_url = 7;
      case 7: {
        if (tag == 58) {
         parse_app_download_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_download_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_app_intro_url;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_intro_url = 8;
      case 8: {
        if (tag == 66) {
         parse_app_intro_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_intro_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_app_ver;
        break;
      }

      // optional string app_ver = 9;
      case 9: {
        if (tag == 74) {
         parse_app_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_ver().data(), this->app_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_app_size;
        break;
      }

      // optional double app_size = 10;
      case 10: {
        if (tag == 81) {
         parse_app_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &app_size_)));
          set_has_app_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_display_labels;
        break;
      }

      // repeated string display_labels = 11;
      case 11: {
        if (tag == 90) {
         parse_display_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_display_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_labels(this->display_labels_size() - 1).data(),
            this->display_labels(this->display_labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "display_labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_display_labels;
        if (input->ExpectTag(98)) goto parse_ext_data;
        break;
      }

      // repeated .com.immomo.moaservice.third.rtb.v12.Segment ext_data = 12;
      case 12: {
        if (tag == 98) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ext_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ext_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
  return false;
#undef DO_
}

void BidResponse_SeatBid_Bid_NativeCreative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
  // required .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
  if (has_native_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->native_format(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // required .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image logo = 4;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->logo(), output);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image image = 5;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->image(i), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link landingpage_url = 6;
  if (has_landingpage_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->landingpage_url(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_download_url = 7;
  if (has_app_download_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->app_download_url(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_intro_url = 8;
  if (has_app_intro_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->app_intro_url(), output);
  }

  // optional string app_ver = 9;
  if (has_app_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_ver().data(), this->app_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->app_ver(), output);
  }

  // optional double app_size = 10;
  if (has_app_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->app_size(), output);
  }

  // repeated string display_labels = 11;
  for (int i = 0; i < this->display_labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->display_labels(i).data(), this->display_labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "display_labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->display_labels(i), output);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.Segment ext_data = 12;
  for (int i = 0; i < this->ext_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->ext_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
}

::google::protobuf::uint8* BidResponse_SeatBid_Bid_NativeCreative::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
  // required .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
  if (has_native_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->native_format(), target);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // required .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image logo = 4;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->logo(), target);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image image = 5;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->image(i), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link landingpage_url = 6;
  if (has_landingpage_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->landingpage_url(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_download_url = 7;
  if (has_app_download_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->app_download_url(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_intro_url = 8;
  if (has_app_intro_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->app_intro_url(), target);
  }

  // optional string app_ver = 9;
  if (has_app_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_ver().data(), this->app_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->app_ver(), target);
  }

  // optional double app_size = 10;
  if (has_app_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->app_size(), target);
  }

  // repeated string display_labels = 11;
  for (int i = 0; i < this->display_labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_labels(i).data(), this->display_labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display_labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->display_labels(i), target);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.Segment ext_data = 12;
  for (int i = 0; i < this->ext_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->ext_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative)
  return target;
}

int BidResponse_SeatBid_Bid_NativeCreative::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.immomo.moaservice.third.rtb.v12.NativeFormat native_format = 1;
    if (has_native_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->native_format());
    }

    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logo());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link landingpage_url = 6;
    if (has_landingpage_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landingpage_url());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_download_url = 7;
    if (has_app_download_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_download_url());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link app_intro_url = 8;
    if (has_app_intro_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_intro_url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string app_ver = 9;
    if (has_app_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_ver());
    }

    // optional double app_size = 10;
    if (has_app_size()) {
      total_size += 1 + 8;
    }

  }
  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative.Image image = 5;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  // repeated string display_labels = 11;
  total_size += 1 * this->display_labels_size();
  for (int i = 0; i < this->display_labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->display_labels(i));
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.Segment ext_data = 12;
  total_size += 1 * this->ext_data_size();
  for (int i = 0; i < this->ext_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ext_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid_Bid_NativeCreative::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_SeatBid_Bid_NativeCreative* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_SeatBid_Bid_NativeCreative*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid_Bid_NativeCreative::MergeFrom(const BidResponse_SeatBid_Bid_NativeCreative& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  display_labels_.MergeFrom(from.display_labels_);
  ext_data_.MergeFrom(from.ext_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_native_format()) {
      set_native_format(from.native_format());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_logo()) {
      mutable_logo()->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative_Image::MergeFrom(from.logo());
    }
    if (from.has_landingpage_url()) {
      mutable_landingpage_url()->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::MergeFrom(from.landingpage_url());
    }
    if (from.has_app_download_url()) {
      mutable_app_download_url()->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::MergeFrom(from.app_download_url());
    }
    if (from.has_app_intro_url()) {
      mutable_app_intro_url()->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_Link::MergeFrom(from.app_intro_url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_app_ver()) {
      set_app_ver(from.app_ver());
    }
    if (from.has_app_size()) {
      set_app_size(from.app_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_SeatBid_Bid_NativeCreative::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid_Bid_NativeCreative::CopyFrom(const BidResponse_SeatBid_Bid_NativeCreative& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid_Bid_NativeCreative::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_logo()) {
    if (!this->logo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  if (has_landingpage_url()) {
    if (!this->landingpage_url().IsInitialized()) return false;
  }
  if (has_app_download_url()) {
    if (!this->app_download_url().IsInitialized()) return false;
  }
  if (has_app_intro_url()) {
    if (!this->app_intro_url().IsInitialized()) return false;
  }
  return true;
}

void BidResponse_SeatBid_Bid_NativeCreative::Swap(BidResponse_SeatBid_Bid_NativeCreative* other) {
  if (other != this) {
    std::swap(native_format_, other->native_format_);
    std::swap(title_, other->title_);
    std::swap(desc_, other->desc_);
    std::swap(logo_, other->logo_);
    image_.Swap(&other->image_);
    std::swap(landingpage_url_, other->landingpage_url_);
    std::swap(app_download_url_, other->app_download_url_);
    std::swap(app_intro_url_, other->app_intro_url_);
    std::swap(app_ver_, other->app_ver_);
    std::swap(app_size_, other->app_size_);
    display_labels_.Swap(&other->display_labels_);
    ext_data_.Swap(&other->ext_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_SeatBid_Bid_NativeCreative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_Bid_NativeCreative_descriptor_;
  metadata.reflection = BidResponse_SeatBid_Bid_NativeCreative_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_SeatBid_Bid_Link::kUrlFieldNumber;
const int BidResponse_SeatBid_Bid_Link::kDeeplinkUrlFieldNumber;
#endif  // !_MSC_VER

BidResponse_SeatBid_Bid_Link::BidResponse_SeatBid_Bid_Link()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
}

void BidResponse_SeatBid_Bid_Link::InitAsDefaultInstance() {
}

BidResponse_SeatBid_Bid_Link::BidResponse_SeatBid_Bid_Link(const BidResponse_SeatBid_Bid_Link& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
}

void BidResponse_SeatBid_Bid_Link::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deeplink_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid_Bid_Link::~BidResponse_SeatBid_Bid_Link() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
  SharedDtor();
}

void BidResponse_SeatBid_Bid_Link::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (deeplink_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deeplink_url_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid_Bid_Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_Bid_Link_descriptor_;
}

const BidResponse_SeatBid_Bid_Link& BidResponse_SeatBid_Bid_Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_Link::default_instance_ = NULL;

BidResponse_SeatBid_Bid_Link* BidResponse_SeatBid_Bid_Link::New() const {
  return new BidResponse_SeatBid_Bid_Link;
}

void BidResponse_SeatBid_Bid_Link::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_deeplink_url()) {
      if (deeplink_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deeplink_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_SeatBid_Bid_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deeplink_url;
        break;
      }

      // optional string deeplink_url = 2;
      case 2: {
        if (tag == 18) {
         parse_deeplink_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deeplink_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deeplink_url().data(), this->deeplink_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deeplink_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
  return false;
#undef DO_
}

void BidResponse_SeatBid_Bid_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string deeplink_url = 2;
  if (has_deeplink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deeplink_url().data(), this->deeplink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deeplink_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deeplink_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
}

::google::protobuf::uint8* BidResponse_SeatBid_Bid_Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string deeplink_url = 2;
  if (has_deeplink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deeplink_url().data(), this->deeplink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deeplink_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deeplink_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.Link)
  return target;
}

int BidResponse_SeatBid_Bid_Link::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string deeplink_url = 2;
    if (has_deeplink_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deeplink_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid_Bid_Link::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_SeatBid_Bid_Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_SeatBid_Bid_Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid_Bid_Link::MergeFrom(const BidResponse_SeatBid_Bid_Link& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_deeplink_url()) {
      set_deeplink_url(from.deeplink_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_SeatBid_Bid_Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid_Bid_Link::CopyFrom(const BidResponse_SeatBid_Bid_Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid_Bid_Link::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidResponse_SeatBid_Bid_Link::Swap(BidResponse_SeatBid_Bid_Link* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(deeplink_url_, other->deeplink_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_SeatBid_Bid_Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_Bid_Link_descriptor_;
  metadata.reflection = BidResponse_SeatBid_Bid_Link_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_SeatBid_Bid::kIdFieldNumber;
const int BidResponse_SeatBid_Bid::kImpidFieldNumber;
const int BidResponse_SeatBid_Bid::kPriceFieldNumber;
const int BidResponse_SeatBid_Bid::kCidFieldNumber;
const int BidResponse_SeatBid_Bid::kAdidFieldNumber;
const int BidResponse_SeatBid_Bid::kCridFieldNumber;
const int BidResponse_SeatBid_Bid::kCatFieldNumber;
const int BidResponse_SeatBid_Bid::kAdomainFieldNumber;
const int BidResponse_SeatBid_Bid::kNurlFieldNumber;
const int BidResponse_SeatBid_Bid::kBundleFieldNumber;
const int BidResponse_SeatBid_Bid::kNativeCreativeFieldNumber;
const int BidResponse_SeatBid_Bid::kImptrackersFieldNumber;
const int BidResponse_SeatBid_Bid::kClicktrackersFieldNumber;
#endif  // !_MSC_VER

BidResponse_SeatBid_Bid::BidResponse_SeatBid_Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
}

void BidResponse_SeatBid_Bid::InitAsDefaultInstance() {
  native_creative_ = const_cast< ::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative*>(&::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative::default_instance());
}

BidResponse_SeatBid_Bid::BidResponse_SeatBid_Bid(const BidResponse_SeatBid_Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
}

void BidResponse_SeatBid_Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  native_creative_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid_Bid::~BidResponse_SeatBid_Bid() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
  SharedDtor();
}

void BidResponse_SeatBid_Bid::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impid_;
  }
  if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cid_;
  }
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adid_;
  }
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crid_;
  }
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nurl_;
  }
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (this != default_instance_) {
    delete native_creative_;
  }
}

void BidResponse_SeatBid_Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_Bid_descriptor_;
}

const BidResponse_SeatBid_Bid& BidResponse_SeatBid_Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid_Bid* BidResponse_SeatBid_Bid::default_instance_ = NULL;

BidResponse_SeatBid_Bid* BidResponse_SeatBid_Bid::New() const {
  return new BidResponse_SeatBid_Bid;
}

void BidResponse_SeatBid_Bid::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_impid()) {
      if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        impid_->clear();
      }
    }
    price_ = 0;
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cid_->clear();
      }
    }
    if (has_adid()) {
      if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adid_->clear();
      }
    }
    if (has_crid()) {
      if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        crid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_nurl()) {
      if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nurl_->clear();
      }
    }
    if (has_bundle()) {
      if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bundle_->clear();
      }
    }
    if (has_native_creative()) {
      if (native_creative_ != NULL) native_creative_->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative::Clear();
    }
  }
  cat_.Clear();
  adomain_.Clear();
  imptrackers_.Clear();
  clicktrackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_SeatBid_Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_impid;
        break;
      }

      // required string impid = 2;
      case 2: {
        if (tag == 18) {
         parse_impid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_price;
        break;
      }

      // required double price = 3;
      case 3: {
        if (tag == 25) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cid;
        break;
      }

      // optional string cid = 4;
      case 4: {
        if (tag == 34) {
         parse_cid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_adid;
        break;
      }

      // optional string adid = 5;
      case 5: {
        if (tag == 42) {
         parse_adid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adid().data(), this->adid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_crid;
        break;
      }

      // required string crid = 6;
      case 6: {
        if (tag == 50) {
         parse_crid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crid().data(), this->crid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "crid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cat;
        break;
      }

      // repeated string cat = 7;
      case 7: {
        if (tag == 58) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cat;
        if (input->ExpectTag(66)) goto parse_adomain;
        break;
      }

      // repeated string adomain = 8;
      case 8: {
        if (tag == 66) {
         parse_adomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_adomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adomain(this->adomain_size() - 1).data(),
            this->adomain(this->adomain_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_adomain;
        if (input->ExpectTag(74)) goto parse_nurl;
        break;
      }

      // optional string nurl = 9;
      case 9: {
        if (tag == 74) {
         parse_nurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nurl().data(), this->nurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_bundle;
        break;
      }

      // optional string bundle = 10;
      case 10: {
        if (tag == 82) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_native_creative;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative native_creative = 11;
      case 11: {
        if (tag == 90) {
         parse_native_creative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native_creative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_imptrackers;
        break;
      }

      // repeated string imptrackers = 12;
      case 12: {
        if (tag == 98) {
         parse_imptrackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_imptrackers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imptrackers(this->imptrackers_size() - 1).data(),
            this->imptrackers(this->imptrackers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imptrackers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_imptrackers;
        if (input->ExpectTag(106)) goto parse_clicktrackers;
        break;
      }

      // repeated string clicktrackers = 13;
      case 13: {
        if (tag == 106) {
         parse_clicktrackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_clicktrackers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clicktrackers(this->clicktrackers_size() - 1).data(),
            this->clicktrackers(this->clicktrackers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clicktrackers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_clicktrackers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
  return false;
#undef DO_
}

void BidResponse_SeatBid_Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->impid(), output);
  }

  // required double price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional string cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cid(), output);
  }

  // optional string adid = 5;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->adid(), output);
  }

  // required string crid = 6;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->crid(), output);
  }

  // repeated string cat = 7;
  for (int i = 0; i < this->cat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cat(i).data(), this->cat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cat(i), output);
  }

  // repeated string adomain = 8;
  for (int i = 0; i < this->adomain_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->adomain(i).data(), this->adomain(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "adomain");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->adomain(i), output);
  }

  // optional string nurl = 9;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->nurl(), output);
  }

  // optional string bundle = 10;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->bundle(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative native_creative = 11;
  if (has_native_creative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->native_creative(), output);
  }

  // repeated string imptrackers = 12;
  for (int i = 0; i < this->imptrackers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->imptrackers(i).data(), this->imptrackers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "imptrackers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->imptrackers(i), output);
  }

  // repeated string clicktrackers = 13;
  for (int i = 0; i < this->clicktrackers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->clicktrackers(i).data(), this->clicktrackers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "clicktrackers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->clicktrackers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
}

::google::protobuf::uint8* BidResponse_SeatBid_Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impid(), target);
  }

  // required double price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional string cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cid(), target);
  }

  // optional string adid = 5;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->adid(), target);
  }

  // required string crid = 6;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->crid(), target);
  }

  // repeated string cat = 7;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->cat(i), target);
  }

  // repeated string adomain = 8;
  for (int i = 0; i < this->adomain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adomain(i).data(), this->adomain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adomain");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->adomain(i), target);
  }

  // optional string nurl = 9;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->nurl(), target);
  }

  // optional string bundle = 10;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->bundle(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative native_creative = 11;
  if (has_native_creative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->native_creative(), target);
  }

  // repeated string imptrackers = 12;
  for (int i = 0; i < this->imptrackers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imptrackers(i).data(), this->imptrackers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imptrackers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->imptrackers(i), target);
  }

  // repeated string clicktrackers = 13;
  for (int i = 0; i < this->clicktrackers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clicktrackers(i).data(), this->clicktrackers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clicktrackers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->clicktrackers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid)
  return target;
}

int BidResponse_SeatBid_Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string impid = 2;
    if (has_impid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impid());
    }

    // required double price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional string cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string adid = 5;
    if (has_adid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adid());
    }

    // required string crid = 6;
    if (has_crid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string nurl = 9;
    if (has_nurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nurl());
    }

    // optional string bundle = 10;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid.NativeCreative native_creative = 11;
    if (has_native_creative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->native_creative());
    }

  }
  // repeated string cat = 7;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  // repeated string adomain = 8;
  total_size += 1 * this->adomain_size();
  for (int i = 0; i < this->adomain_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->adomain(i));
  }

  // repeated string imptrackers = 12;
  total_size += 1 * this->imptrackers_size();
  for (int i = 0; i < this->imptrackers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->imptrackers(i));
  }

  // repeated string clicktrackers = 13;
  total_size += 1 * this->clicktrackers_size();
  for (int i = 0; i < this->clicktrackers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->clicktrackers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid_Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_SeatBid_Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_SeatBid_Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid_Bid::MergeFrom(const BidResponse_SeatBid_Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  adomain_.MergeFrom(from.adomain_);
  imptrackers_.MergeFrom(from.imptrackers_);
  clicktrackers_.MergeFrom(from.clicktrackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_impid()) {
      set_impid(from.impid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_adid()) {
      set_adid(from.adid());
    }
    if (from.has_crid()) {
      set_crid(from.crid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nurl()) {
      set_nurl(from.nurl());
    }
    if (from.has_bundle()) {
      set_bundle(from.bundle());
    }
    if (from.has_native_creative()) {
      mutable_native_creative()->::com::immomo::moaservice::third::rtb::v12::BidResponse_SeatBid_Bid_NativeCreative::MergeFrom(from.native_creative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_SeatBid_Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid_Bid::CopyFrom(const BidResponse_SeatBid_Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid_Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  if (has_native_creative()) {
    if (!this->native_creative().IsInitialized()) return false;
  }
  return true;
}

void BidResponse_SeatBid_Bid::Swap(BidResponse_SeatBid_Bid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(impid_, other->impid_);
    std::swap(price_, other->price_);
    std::swap(cid_, other->cid_);
    std::swap(adid_, other->adid_);
    std::swap(crid_, other->crid_);
    cat_.Swap(&other->cat_);
    adomain_.Swap(&other->adomain_);
    std::swap(nurl_, other->nurl_);
    std::swap(bundle_, other->bundle_);
    std::swap(native_creative_, other->native_creative_);
    imptrackers_.Swap(&other->imptrackers_);
    clicktrackers_.Swap(&other->clicktrackers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_SeatBid_Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_Bid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_Bid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_SeatBid::kBidFieldNumber;
const int BidResponse_SeatBid::kSeatFieldNumber;
#endif  // !_MSC_VER

BidResponse_SeatBid::BidResponse_SeatBid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
}

void BidResponse_SeatBid::InitAsDefaultInstance() {
}

BidResponse_SeatBid::BidResponse_SeatBid(const BidResponse_SeatBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
}

void BidResponse_SeatBid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid::~BidResponse_SeatBid() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
  SharedDtor();
}

void BidResponse_SeatBid::SharedDtor() {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seat_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_descriptor_;
}

const BidResponse_SeatBid& BidResponse_SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid* BidResponse_SeatBid::default_instance_ = NULL;

BidResponse_SeatBid* BidResponse_SeatBid::New() const {
  return new BidResponse_SeatBid;
}

void BidResponse_SeatBid::Clear() {
  if (has_seat()) {
    if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      seat_->clear();
    }
  }
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid bid = 1;
      case 1: {
        if (tag == 10) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bid;
        if (input->ExpectTag(18)) goto parse_seat;
        break;
      }

      // required string seat = 2;
      case 2: {
        if (tag == 18) {
         parse_seat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seat().data(), this->seat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "seat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
  return false;
#undef DO_
}

void BidResponse_SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(i), output);
  }

  // required string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
}

::google::protobuf::uint8* BidResponse_SeatBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bid(i), target);
  }

  // required string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid)
  return target;
}

int BidResponse_SeatBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seat());
    }

  }
  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid.Bid bid = 1;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_SeatBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_SeatBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid::MergeFrom(const BidResponse_SeatBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bid_.MergeFrom(from.bid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid::CopyFrom(const BidResponse_SeatBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;
  return true;
}

void BidResponse_SeatBid::Swap(BidResponse_SeatBid* other) {
  if (other != this) {
    bid_.Swap(&other->bid_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse::kIdFieldNumber;
const int BidResponse::kNbrFieldNumber;
const int BidResponse::kEmFieldNumber;
const int BidResponse::kSeatbidFieldNumber;
const int BidResponse::kBididFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.immomo.moaservice.third.rtb.v12.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.immomo.moaservice.third.rtb.v12.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nbr_ = 0;
  em_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:com.immomo.moaservice.third.rtb.v12.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (em_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete em_;
  }
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidid_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_momortb12_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    nbr_ = 0;
    if (has_em()) {
      if (em_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        em_->clear();
      }
    }
    if (has_bidid()) {
      if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bidid_->clear();
      }
    }
  }
  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.immomo.moaservice.third.rtb.v12.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nbr;
        break;
      }

      // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.NoBidReason nbr = 2;
      case 2: {
        if (tag == 16) {
         parse_nbr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason_IsValid(value)) {
            set_nbr(static_cast< ::com::immomo::moaservice::third::rtb::v12::BidResponse_NoBidReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_em;
        break;
      }

      // optional string em = 3;
      case 3: {
        if (tag == 26) {
         parse_em:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_em()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->em().data(), this->em().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "em");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_seatbid;
        break;
      }

      // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid seatbid = 4;
      case 4: {
        if (tag == 34) {
         parse_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seatbid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_seatbid;
        if (input->ExpectTag(42)) goto parse_bidid;
        break;
      }

      // optional string bidid = 5;
      case 5: {
        if (tag == 42) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.immomo.moaservice.third.rtb.v12.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.immomo.moaservice.third.rtb.v12.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.immomo.moaservice.third.rtb.v12.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.NoBidReason nbr = 2;
  if (has_nbr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nbr(), output);
  }

  // optional string em = 3;
  if (has_em()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->em().data(), this->em().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "em");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->em(), output);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid seatbid = 4;
  for (int i = 0; i < this->seatbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seatbid(i), output);
  }

  // optional string bidid = 5;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bidid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.immomo.moaservice.third.rtb.v12.BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.immomo.moaservice.third.rtb.v12.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.NoBidReason nbr = 2;
  if (has_nbr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->nbr(), target);
  }

  // optional string em = 3;
  if (has_em()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->em().data(), this->em().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "em");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->em(), target);
  }

  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid seatbid = 4;
  for (int i = 0; i < this->seatbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->seatbid(i), target);
  }

  // optional string bidid = 5;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bidid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.immomo.moaservice.third.rtb.v12.BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .com.immomo.moaservice.third.rtb.v12.BidResponse.NoBidReason nbr = 2;
    if (has_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nbr());
    }

    // optional string em = 3;
    if (has_em()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->em());
    }

    // optional string bidid = 5;
    if (has_bidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidid());
    }

  }
  // repeated .com.immomo.moaservice.third.rtb.v12.BidResponse.SeatBid seatbid = 4;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nbr()) {
      set_nbr(from.nbr());
    }
    if (from.has_em()) {
      set_em(from.em());
    }
    if (from.has_bidid()) {
      set_bidid(from.bidid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbid())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nbr_, other->nbr_);
    std::swap(em_, other->em_);
    seatbid_.Swap(&other->seatbid_);
    std::swap(bidid_, other->bidid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v12
}  // namespace rtb
}  // namespace third
}  // namespace moaservice
}  // namespace immomo
}  // namespace com

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sohuRTB.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sohuRTB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sohuadx {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Impression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Impression_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Impression_Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Impression_Banner_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Impression_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Impression_Video_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_Impression_ScreenLocation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Request_Site_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Site_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_SeatBid_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sohuRTB_2eproto() {
  protobuf_AddDesc_sohuRTB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sohuRTB.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, bidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, istest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, impression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, excludeadcategory_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_Impression_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_Impression_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, screenlocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, ispreferreddeals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, campaignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, pageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, acceptadvertisingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, tradingtype_),
  };
  Request_Impression_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Impression_descriptor_,
      Request_Impression::default_instance_,
      Request_Impression_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Impression));
  Request_Impression_Banner_descriptor_ = Request_Impression_descriptor_->nested_type(0);
  static const int Request_Impression_Banner_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, template__),
  };
  Request_Impression_Banner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Impression_Banner_descriptor_,
      Request_Impression_Banner::default_instance_,
      Request_Impression_Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Impression_Banner));
  Request_Impression_Video_descriptor_ = Request_Impression_descriptor_->nested_type(1);
  static const int Request_Impression_Video_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, durationlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, pageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, external_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, region_),
  };
  Request_Impression_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Impression_Video_descriptor_,
      Request_Impression_Video::default_instance_,
      Request_Impression_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Impression_Video));
  Request_Impression_ScreenLocation_descriptor_ = Request_Impression_descriptor_->enum_type(0);
  Request_Site_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_Site_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, ref_),
  };
  Request_Site_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Site_descriptor_,
      Request_Site::default_instance_,
      Request_Site_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Site));
  Request_Device_descriptor_ = Request_descriptor_->nested_type(2);
  static const int Request_Device_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, nettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, mobiletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, screenwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, screenheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, imsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, androidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, openudid_),
  };
  Request_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Device_descriptor_,
      Request_Device::default_instance_,
      Request_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Device));
  Request_User_descriptor_ = Request_descriptor_->nested_type(3);
  static const int Request_User_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, searchkeywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, yyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, fyid_),
  };
  Request_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_User_descriptor_,
      Request_User::default_instance_,
      Request_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_User));
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, bidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, seatbid_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_Bid_descriptor_ = Response_descriptor_->nested_type(0);
  static const int Response_Bid_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, adurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, clickpara_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, displaypara_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, adpara_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, displaymonitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, clickmonitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, adm_url_),
  };
  Response_Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_Bid_descriptor_,
      Response_Bid::default_instance_,
      Response_Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_Bid));
  Response_SeatBid_descriptor_ = Response_descriptor_->nested_type(1);
  static const int Response_SeatBid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SeatBid, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SeatBid, bid_),
  };
  Response_SeatBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_SeatBid_descriptor_,
      Response_SeatBid::default_instance_,
      Response_SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SeatBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SeatBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_SeatBid));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sohuRTB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Impression_descriptor_, &Request_Impression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Impression_Banner_descriptor_, &Request_Impression_Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Impression_Video_descriptor_, &Request_Impression_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Site_descriptor_, &Request_Site::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Device_descriptor_, &Request_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_User_descriptor_, &Request_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_Bid_descriptor_, &Response_Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_SeatBid_descriptor_, &Response_SeatBid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sohuRTB_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Request_Impression::default_instance_;
  delete Request_Impression_reflection_;
  delete Request_Impression_Banner::default_instance_;
  delete Request_Impression_Banner_reflection_;
  delete Request_Impression_Video::default_instance_;
  delete Request_Impression_Video_reflection_;
  delete Request_Site::default_instance_;
  delete Request_Site_reflection_;
  delete Request_Device::default_instance_;
  delete Request_Device_reflection_;
  delete Request_User::default_instance_;
  delete Request_User_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Response_Bid::default_instance_;
  delete Response_Bid_reflection_;
  delete Response_SeatBid::default_instance_;
  delete Response_SeatBid_reflection_;
}

void protobuf_AddDesc_sohuRTB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsohuRTB.proto\022\007sohuadx\"\333\n\n\007Request\022\017\n\007"
    "version\030\001 \002(\r\022\r\n\005bidid\030\002 \002(\t\022\016\n\006isTest\030\003"
    " \001(\r\022#\n\004site\030\004 \001(\0132\025.sohuadx.Request.Sit"
    "e\022\'\n\006device\030\005 \001(\0132\027.sohuadx.Request.Devi"
    "ce\022#\n\004user\030\006 \001(\0132\025.sohuadx.Request.User\022"
    "/\n\nimpression\030\007 \003(\0132\033.sohuadx.Request.Im"
    "pression\022\031\n\021excludeAdCategory\030\010 \003(\t\032\302\005\n\n"
    "Impression\022\013\n\003idx\030\001 \001(\r\022\013\n\003pid\030\002 \001(\t\022\020\n\010"
    "bidFloor\030\003 \001(\r\0222\n\006banner\030\004 \001(\0132\".sohuadx"
    ".Request.Impression.Banner\0220\n\005video\030\005 \001("
    "\0132!.sohuadx.Request.Impression.Video\022B\n\016"
    "screenLocation\030\006 \001(\0162*.sohuadx.Request.I"
    "mpression.ScreenLocation\022\030\n\020isPreferredD"
    "eals\030\007 \001(\010\022\022\n\ncampaignId\030\010 \001(\t\022\017\n\007pageur"
    "l\030\t \001(\t\022\020\n\010category\030\n \003(\t\022\r\n\005title\030\013 \001(\t"
    "\022\016\n\006lineId\030\014 \001(\t\022\035\n\025acceptAdvertisingTyp"
    "e\030\r \003(\t\022\023\n\013tradingType\030\016 \001(\t\032H\n\006Banner\022\r"
    "\n\005mimes\030\001 \003(\r\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003"
    " \001(\r\022\020\n\010template\030\004 \001(\t\032\262\001\n\005Video\022\r\n\005mime"
    "s\030\001 \003(\r\022\025\n\rdurationLimit\030\002 \001(\r\022\020\n\010protoc"
    "ol\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\022"
    "\017\n\007pageurl\030\006 \001(\t\022\020\n\010external\030\007 \001(\t\022\020\n\010ca"
    "tegory\030\010 \003(\t\022\r\n\005title\030\t \001(\t\022\016\n\006region\030\n "
    "\001(\t\";\n\016ScreenLocation\022\013\n\007UNKNOWN\020\000\022\r\n\tFI"
    "RSTVIEW\020\001\022\r\n\tOTHERVIEW\020\002\032A\n\004Site\022\014\n\004name"
    "\030\001 \001(\t\022\014\n\004page\030\002 \001(\t\022\020\n\010category\030\003 \001(\003\022\013"
    "\n\003ref\030\004 \001(\t\032\353\001\n\006Device\022\014\n\004type\030\001 \001(\t\022\n\n\002"
    "ip\030\002 \001(\t\022\n\n\002ua\030\003 \001(\t\022\017\n\007carrier\030\004 \001(\t\022\017\n"
    "\007netType\030\005 \001(\t\022\022\n\nmobileType\030\006 \001(\t\022\023\n\013sc"
    "reenWidth\030\007 \001(\r\022\024\n\014screenHeight\030\010 \001(\r\022\014\n"
    "\004imei\030\t \001(\t\022\014\n\004imsi\030\n \001(\t\022\013\n\003mac\030\013 \001(\t\022\014"
    "\n\004idfa\030\014 \001(\t\022\021\n\tandroidID\030\r \001(\t\022\020\n\010openU"
    "DID\030\016 \001(\t\032k\n\004User\022\014\n\004suid\030\001 \001(\t\022\017\n\007versi"
    "on\030\002 \001(\r\022\020\n\010category\030\003 \003(\003\022\026\n\016searchKeyW"
    "ords\030\004 \003(\t\022\014\n\004yyid\030\005 \001(\t\022\014\n\004fyid\030\006 \001(\t\"\274"
    "\002\n\010Response\022\017\n\007version\030\001 \002(\r\022\r\n\005bidid\030\002 "
    "\002(\t\022*\n\007seatbid\030\003 \003(\0132\031.sohuadx.Response."
    "SeatBid\032\247\001\n\003Bid\022\r\n\005price\030\001 \002(\r\022\r\n\005adurl\030"
    "\002 \002(\t\022\013\n\003ext\030\003 \001(\t\022\021\n\tclickPara\030\004 \001(\t\022\023\n"
    "\013displayPara\030\005 \001(\t\022\016\n\006adPara\030\006 \001(\t\022\026\n\016di"
    "splayMonitor\030\007 \001(\t\022\024\n\014clickMonitor\030\010 \001(\t"
    "\022\017\n\007adm_url\030\t \001(\t\032:\n\007SeatBid\022\013\n\003idx\030\001 \001("
    "\r\022\"\n\003bid\030\002 \003(\0132\025.sohuadx.Response.Bid", 1717);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sohuRTB.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_Impression::default_instance_ = new Request_Impression();
  Request_Impression_Banner::default_instance_ = new Request_Impression_Banner();
  Request_Impression_Video::default_instance_ = new Request_Impression_Video();
  Request_Site::default_instance_ = new Request_Site();
  Request_Device::default_instance_ = new Request_Device();
  Request_User::default_instance_ = new Request_User();
  Response::default_instance_ = new Response();
  Response_Bid::default_instance_ = new Response_Bid();
  Response_SeatBid::default_instance_ = new Response_SeatBid();
  Request::default_instance_->InitAsDefaultInstance();
  Request_Impression::default_instance_->InitAsDefaultInstance();
  Request_Impression_Banner::default_instance_->InitAsDefaultInstance();
  Request_Impression_Video::default_instance_->InitAsDefaultInstance();
  Request_Site::default_instance_->InitAsDefaultInstance();
  Request_Device::default_instance_->InitAsDefaultInstance();
  Request_User::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Response_Bid::default_instance_->InitAsDefaultInstance();
  Response_SeatBid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sohuRTB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sohuRTB_2eproto {
  StaticDescriptorInitializer_sohuRTB_2eproto() {
    protobuf_AddDesc_sohuRTB_2eproto();
  }
} static_descriptor_initializer_sohuRTB_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_Impression_ScreenLocation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Impression_ScreenLocation_descriptor_;
}
bool Request_Impression_ScreenLocation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_Impression_ScreenLocation Request_Impression::UNKNOWN;
const Request_Impression_ScreenLocation Request_Impression::FIRSTVIEW;
const Request_Impression_ScreenLocation Request_Impression::OTHERVIEW;
const Request_Impression_ScreenLocation Request_Impression::ScreenLocation_MIN;
const Request_Impression_ScreenLocation Request_Impression::ScreenLocation_MAX;
const int Request_Impression::ScreenLocation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request_Impression_Banner::kMimesFieldNumber;
const int Request_Impression_Banner::kWidthFieldNumber;
const int Request_Impression_Banner::kHeightFieldNumber;
const int Request_Impression_Banner::kTemplateFieldNumber;
#endif  // !_MSC_VER

Request_Impression_Banner::Request_Impression_Banner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Request.Impression.Banner)
}

void Request_Impression_Banner::InitAsDefaultInstance() {
}

Request_Impression_Banner::Request_Impression_Banner(const Request_Impression_Banner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Request.Impression.Banner)
}

void Request_Impression_Banner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  template__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Impression_Banner::~Request_Impression_Banner() {
  // @@protoc_insertion_point(destructor:sohuadx.Request.Impression.Banner)
  SharedDtor();
}

void Request_Impression_Banner::SharedDtor() {
  if (template__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete template__;
  }
  if (this != default_instance_) {
  }
}

void Request_Impression_Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Impression_Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Impression_Banner_descriptor_;
}

const Request_Impression_Banner& Request_Impression_Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Request_Impression_Banner* Request_Impression_Banner::default_instance_ = NULL;

Request_Impression_Banner* Request_Impression_Banner::New() const {
  return new Request_Impression_Banner;
}

void Request_Impression_Banner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_Impression_Banner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(width_, height_);
    if (has_template_()) {
      if (template__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        template__->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Impression_Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Request.Impression.Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mimes = 1;
      case 1: {
        if (tag == 8) {
         parse_mimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mimes())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mimes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_mimes;
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_template;
        break;
      }

      // optional string template = 4;
      case 4: {
        if (tag == 34) {
         parse_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_().data(), this->template_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "template_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Request.Impression.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Request.Impression.Banner)
  return false;
#undef DO_
}

void Request_Impression_Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Request.Impression.Banner)
  // repeated uint32 mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mimes(i), output);
  }

  // optional uint32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional string template = 4;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->template_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Request.Impression.Banner)
}

::google::protobuf::uint8* Request_Impression_Banner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Request.Impression.Banner)
  // repeated uint32 mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mimes(i), target);
  }

  // optional uint32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional string template = 4;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->template_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Request.Impression.Banner)
  return target;
}

int Request_Impression_Banner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional string template = 4;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_());
    }

  }
  // repeated uint32 mimes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mimes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mimes(i));
    }
    total_size += 1 * this->mimes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Impression_Banner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Impression_Banner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Impression_Banner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Impression_Banner::MergeFrom(const Request_Impression_Banner& from) {
  GOOGLE_CHECK_NE(&from, this);
  mimes_.MergeFrom(from.mimes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_template_()) {
      set_template_(from.template_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Impression_Banner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Impression_Banner::CopyFrom(const Request_Impression_Banner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Impression_Banner::IsInitialized() const {

  return true;
}

void Request_Impression_Banner::Swap(Request_Impression_Banner* other) {
  if (other != this) {
    mimes_.Swap(&other->mimes_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(template__, other->template__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Impression_Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Impression_Banner_descriptor_;
  metadata.reflection = Request_Impression_Banner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Impression_Video::kMimesFieldNumber;
const int Request_Impression_Video::kDurationLimitFieldNumber;
const int Request_Impression_Video::kProtocolFieldNumber;
const int Request_Impression_Video::kWidthFieldNumber;
const int Request_Impression_Video::kHeightFieldNumber;
const int Request_Impression_Video::kPageurlFieldNumber;
const int Request_Impression_Video::kExternalFieldNumber;
const int Request_Impression_Video::kCategoryFieldNumber;
const int Request_Impression_Video::kTitleFieldNumber;
const int Request_Impression_Video::kRegionFieldNumber;
#endif  // !_MSC_VER

Request_Impression_Video::Request_Impression_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Request.Impression.Video)
}

void Request_Impression_Video::InitAsDefaultInstance() {
}

Request_Impression_Video::Request_Impression_Video(const Request_Impression_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Request.Impression.Video)
}

void Request_Impression_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  durationlimit_ = 0u;
  protocol_ = 0u;
  width_ = 0u;
  height_ = 0u;
  pageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Impression_Video::~Request_Impression_Video() {
  // @@protoc_insertion_point(destructor:sohuadx.Request.Impression.Video)
  SharedDtor();
}

void Request_Impression_Video::SharedDtor() {
  if (pageurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pageurl_;
  }
  if (external_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete external_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete region_;
  }
  if (this != default_instance_) {
  }
}

void Request_Impression_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Impression_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Impression_Video_descriptor_;
}

const Request_Impression_Video& Request_Impression_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Request_Impression_Video* Request_Impression_Video::default_instance_ = NULL;

Request_Impression_Video* Request_Impression_Video::New() const {
  return new Request_Impression_Video;
}

void Request_Impression_Video::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_Impression_Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 126) {
    ZR_(durationlimit_, height_);
    if (has_pageurl()) {
      if (pageurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pageurl_->clear();
      }
    }
    if (has_external()) {
      if (external_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        external_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        region_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mimes_.Clear();
  category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Impression_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Request.Impression.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mimes = 1;
      case 1: {
        if (tag == 8) {
         parse_mimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mimes())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mimes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_mimes;
        if (input->ExpectTag(16)) goto parse_durationLimit;
        break;
      }

      // optional uint32 durationLimit = 2;
      case 2: {
        if (tag == 16) {
         parse_durationLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &durationlimit_)));
          set_has_durationlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protocol;
        break;
      }

      // optional uint32 protocol = 3;
      case 3: {
        if (tag == 24) {
         parse_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
          set_has_protocol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional uint32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pageurl;
        break;
      }

      // optional string pageurl = 6;
      case 6: {
        if (tag == 50) {
         parse_pageurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pageurl().data(), this->pageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pageurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_external;
        break;
      }

      // optional string external = 7;
      case 7: {
        if (tag == 58) {
         parse_external:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external().data(), this->external().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "external");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_category;
        break;
      }

      // repeated string category = 8;
      case 8: {
        if (tag == 66) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category(this->category_size() - 1).data(),
            this->category(this->category_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "category");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_category;
        if (input->ExpectTag(74)) goto parse_title;
        break;
      }

      // optional string title = 9;
      case 9: {
        if (tag == 74) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_region;
        break;
      }

      // optional string region = 10;
      case 10: {
        if (tag == 82) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "region");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Request.Impression.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Request.Impression.Video)
  return false;
#undef DO_
}

void Request_Impression_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Request.Impression.Video)
  // repeated uint32 mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mimes(i), output);
  }

  // optional uint32 durationLimit = 2;
  if (has_durationlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->durationlimit(), output);
  }

  // optional uint32 protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->protocol(), output);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  // optional string pageurl = 6;
  if (has_pageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), this->pageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pageurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pageurl(), output);
  }

  // optional string external = 7;
  if (has_external()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external().data(), this->external().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "external");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->external(), output);
  }

  // repeated string category = 8;
  for (int i = 0; i < this->category_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->category(i).data(), this->category(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "category");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->category(i), output);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->title(), output);
  }

  // optional string region = 10;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Request.Impression.Video)
}

::google::protobuf::uint8* Request_Impression_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Request.Impression.Video)
  // repeated uint32 mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mimes(i), target);
  }

  // optional uint32 durationLimit = 2;
  if (has_durationlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->durationlimit(), target);
  }

  // optional uint32 protocol = 3;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->protocol(), target);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  // optional string pageurl = 6;
  if (has_pageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), this->pageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pageurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pageurl(), target);
  }

  // optional string external = 7;
  if (has_external()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external().data(), this->external().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "external");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->external(), target);
  }

  // repeated string category = 8;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category(i).data(), this->category(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "category");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->category(i), target);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->title(), target);
  }

  // optional string region = 10;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Request.Impression.Video)
  return target;
}

int Request_Impression_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 durationLimit = 2;
    if (has_durationlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->durationlimit());
    }

    // optional uint32 protocol = 3;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional string pageurl = 6;
    if (has_pageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pageurl());
    }

    // optional string external = 7;
    if (has_external()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string title = 9;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string region = 10;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }

  }
  // repeated uint32 mimes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mimes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mimes(i));
    }
    total_size += 1 * this->mimes_size() + data_size;
  }

  // repeated string category = 8;
  total_size += 1 * this->category_size();
  for (int i = 0; i < this->category_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->category(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Impression_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Impression_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Impression_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Impression_Video::MergeFrom(const Request_Impression_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  mimes_.MergeFrom(from.mimes_);
  category_.MergeFrom(from.category_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_durationlimit()) {
      set_durationlimit(from.durationlimit());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_pageurl()) {
      set_pageurl(from.pageurl());
    }
    if (from.has_external()) {
      set_external(from.external());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Impression_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Impression_Video::CopyFrom(const Request_Impression_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Impression_Video::IsInitialized() const {

  return true;
}

void Request_Impression_Video::Swap(Request_Impression_Video* other) {
  if (other != this) {
    mimes_.Swap(&other->mimes_);
    std::swap(durationlimit_, other->durationlimit_);
    std::swap(protocol_, other->protocol_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(pageurl_, other->pageurl_);
    std::swap(external_, other->external_);
    category_.Swap(&other->category_);
    std::swap(title_, other->title_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Impression_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Impression_Video_descriptor_;
  metadata.reflection = Request_Impression_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Impression::kIdxFieldNumber;
const int Request_Impression::kPidFieldNumber;
const int Request_Impression::kBidFloorFieldNumber;
const int Request_Impression::kBannerFieldNumber;
const int Request_Impression::kVideoFieldNumber;
const int Request_Impression::kScreenLocationFieldNumber;
const int Request_Impression::kIsPreferredDealsFieldNumber;
const int Request_Impression::kCampaignIdFieldNumber;
const int Request_Impression::kPageurlFieldNumber;
const int Request_Impression::kCategoryFieldNumber;
const int Request_Impression::kTitleFieldNumber;
const int Request_Impression::kLineIdFieldNumber;
const int Request_Impression::kAcceptAdvertisingTypeFieldNumber;
const int Request_Impression::kTradingTypeFieldNumber;
#endif  // !_MSC_VER

Request_Impression::Request_Impression()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Request.Impression)
}

void Request_Impression::InitAsDefaultInstance() {
  banner_ = const_cast< ::sohuadx::Request_Impression_Banner*>(&::sohuadx::Request_Impression_Banner::default_instance());
  video_ = const_cast< ::sohuadx::Request_Impression_Video*>(&::sohuadx::Request_Impression_Video::default_instance());
}

Request_Impression::Request_Impression(const Request_Impression& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Request.Impression)
}

void Request_Impression::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  idx_ = 0u;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloor_ = 0u;
  banner_ = NULL;
  video_ = NULL;
  screenlocation_ = 0;
  ispreferreddeals_ = false;
  campaignid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Impression::~Request_Impression() {
  // @@protoc_insertion_point(destructor:sohuadx.Request.Impression)
  SharedDtor();
}

void Request_Impression::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pid_;
  }
  if (campaignid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete campaignid_;
  }
  if (pageurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pageurl_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (lineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lineid_;
  }
  if (tradingtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradingtype_;
  }
  if (this != default_instance_) {
    delete banner_;
    delete video_;
  }
}

void Request_Impression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Impression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Impression_descriptor_;
}

const Request_Impression& Request_Impression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Request_Impression* Request_Impression::default_instance_ = NULL;

Request_Impression* Request_Impression::New() const {
  return new Request_Impression;
}

void Request_Impression::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_Impression*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(idx_, bidfloor_);
    ZR_(screenlocation_, ispreferreddeals_);
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pid_->clear();
      }
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::sohuadx::Request_Impression_Banner::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::sohuadx::Request_Impression_Video::Clear();
    }
    if (has_campaignid()) {
      if (campaignid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        campaignid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 11520) {
    if (has_pageurl()) {
      if (pageurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pageurl_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_lineid()) {
      if (lineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lineid_->clear();
      }
    }
    if (has_tradingtype()) {
      if (tradingtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradingtype_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  category_.Clear();
  acceptadvertisingtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Impression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Request.Impression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pid;
        break;
      }

      // optional string pid = 2;
      case 2: {
        if (tag == 18) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bidFloor;
        break;
      }

      // optional uint32 bidFloor = 3;
      case 3: {
        if (tag == 24) {
         parse_bidFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_banner;
        break;
      }

      // optional .sohuadx.Request.Impression.Banner banner = 4;
      case 4: {
        if (tag == 34) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_video;
        break;
      }

      // optional .sohuadx.Request.Impression.Video video = 5;
      case 5: {
        if (tag == 42) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_screenLocation;
        break;
      }

      // optional .sohuadx.Request.Impression.ScreenLocation screenLocation = 6;
      case 6: {
        if (tag == 48) {
         parse_screenLocation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sohuadx::Request_Impression_ScreenLocation_IsValid(value)) {
            set_screenlocation(static_cast< ::sohuadx::Request_Impression_ScreenLocation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isPreferredDeals;
        break;
      }

      // optional bool isPreferredDeals = 7;
      case 7: {
        if (tag == 56) {
         parse_isPreferredDeals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispreferreddeals_)));
          set_has_ispreferreddeals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_campaignId;
        break;
      }

      // optional string campaignId = 8;
      case 8: {
        if (tag == 66) {
         parse_campaignId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_campaignid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->campaignid().data(), this->campaignid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "campaignid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_pageurl;
        break;
      }

      // optional string pageurl = 9;
      case 9: {
        if (tag == 74) {
         parse_pageurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pageurl().data(), this->pageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pageurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_category;
        break;
      }

      // repeated string category = 10;
      case 10: {
        if (tag == 82) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category(this->category_size() - 1).data(),
            this->category(this->category_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "category");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_category;
        if (input->ExpectTag(90)) goto parse_title;
        break;
      }

      // optional string title = 11;
      case 11: {
        if (tag == 90) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_lineId;
        break;
      }

      // optional string lineId = 12;
      case 12: {
        if (tag == 98) {
         parse_lineId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lineid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lineid().data(), this->lineid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lineid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_acceptAdvertisingType;
        break;
      }

      // repeated string acceptAdvertisingType = 13;
      case 13: {
        if (tag == 106) {
         parse_acceptAdvertisingType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_acceptadvertisingtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acceptadvertisingtype(this->acceptadvertisingtype_size() - 1).data(),
            this->acceptadvertisingtype(this->acceptadvertisingtype_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acceptadvertisingtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_acceptAdvertisingType;
        if (input->ExpectTag(114)) goto parse_tradingType;
        break;
      }

      // optional string tradingType = 14;
      case 14: {
        if (tag == 114) {
         parse_tradingType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradingtype().data(), this->tradingtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradingtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Request.Impression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Request.Impression)
  return false;
#undef DO_
}

void Request_Impression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Request.Impression)
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pid(), output);
  }

  // optional uint32 bidFloor = 3;
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bidfloor(), output);
  }

  // optional .sohuadx.Request.Impression.Banner banner = 4;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->banner(), output);
  }

  // optional .sohuadx.Request.Impression.Video video = 5;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->video(), output);
  }

  // optional .sohuadx.Request.Impression.ScreenLocation screenLocation = 6;
  if (has_screenlocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->screenlocation(), output);
  }

  // optional bool isPreferredDeals = 7;
  if (has_ispreferreddeals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ispreferreddeals(), output);
  }

  // optional string campaignId = 8;
  if (has_campaignid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->campaignid().data(), this->campaignid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "campaignid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->campaignid(), output);
  }

  // optional string pageurl = 9;
  if (has_pageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), this->pageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pageurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->pageurl(), output);
  }

  // repeated string category = 10;
  for (int i = 0; i < this->category_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->category(i).data(), this->category(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "category");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->category(i), output);
  }

  // optional string title = 11;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->title(), output);
  }

  // optional string lineId = 12;
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lineid().data(), this->lineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lineid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->lineid(), output);
  }

  // repeated string acceptAdvertisingType = 13;
  for (int i = 0; i < this->acceptadvertisingtype_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->acceptadvertisingtype(i).data(), this->acceptadvertisingtype(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "acceptadvertisingtype");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->acceptadvertisingtype(i), output);
  }

  // optional string tradingType = 14;
  if (has_tradingtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradingtype().data(), this->tradingtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradingtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->tradingtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Request.Impression)
}

::google::protobuf::uint8* Request_Impression::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Request.Impression)
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pid(), target);
  }

  // optional uint32 bidFloor = 3;
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bidfloor(), target);
  }

  // optional .sohuadx.Request.Impression.Banner banner = 4;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->banner(), target);
  }

  // optional .sohuadx.Request.Impression.Video video = 5;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->video(), target);
  }

  // optional .sohuadx.Request.Impression.ScreenLocation screenLocation = 6;
  if (has_screenlocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->screenlocation(), target);
  }

  // optional bool isPreferredDeals = 7;
  if (has_ispreferreddeals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ispreferreddeals(), target);
  }

  // optional string campaignId = 8;
  if (has_campaignid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->campaignid().data(), this->campaignid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "campaignid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->campaignid(), target);
  }

  // optional string pageurl = 9;
  if (has_pageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), this->pageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pageurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pageurl(), target);
  }

  // repeated string category = 10;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category(i).data(), this->category(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "category");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->category(i), target);
  }

  // optional string title = 11;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->title(), target);
  }

  // optional string lineId = 12;
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lineid().data(), this->lineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lineid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->lineid(), target);
  }

  // repeated string acceptAdvertisingType = 13;
  for (int i = 0; i < this->acceptadvertisingtype_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acceptadvertisingtype(i).data(), this->acceptadvertisingtype(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acceptadvertisingtype");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->acceptadvertisingtype(i), target);
  }

  // optional string tradingType = 14;
  if (has_tradingtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradingtype().data(), this->tradingtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradingtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->tradingtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Request.Impression)
  return target;
}

int Request_Impression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional string pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional uint32 bidFloor = 3;
    if (has_bidfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bidfloor());
    }

    // optional .sohuadx.Request.Impression.Banner banner = 4;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }

    // optional .sohuadx.Request.Impression.Video video = 5;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional .sohuadx.Request.Impression.ScreenLocation screenLocation = 6;
    if (has_screenlocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->screenlocation());
    }

    // optional bool isPreferredDeals = 7;
    if (has_ispreferreddeals()) {
      total_size += 1 + 1;
    }

    // optional string campaignId = 8;
    if (has_campaignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->campaignid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string pageurl = 9;
    if (has_pageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pageurl());
    }

    // optional string title = 11;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string lineId = 12;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lineid());
    }

    // optional string tradingType = 14;
    if (has_tradingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingtype());
    }

  }
  // repeated string category = 10;
  total_size += 1 * this->category_size();
  for (int i = 0; i < this->category_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->category(i));
  }

  // repeated string acceptAdvertisingType = 13;
  total_size += 1 * this->acceptadvertisingtype_size();
  for (int i = 0; i < this->acceptadvertisingtype_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->acceptadvertisingtype(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Impression::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Impression* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Impression*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Impression::MergeFrom(const Request_Impression& from) {
  GOOGLE_CHECK_NE(&from, this);
  category_.MergeFrom(from.category_);
  acceptadvertisingtype_.MergeFrom(from.acceptadvertisingtype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
    if (from.has_banner()) {
      mutable_banner()->::sohuadx::Request_Impression_Banner::MergeFrom(from.banner());
    }
    if (from.has_video()) {
      mutable_video()->::sohuadx::Request_Impression_Video::MergeFrom(from.video());
    }
    if (from.has_screenlocation()) {
      set_screenlocation(from.screenlocation());
    }
    if (from.has_ispreferreddeals()) {
      set_ispreferreddeals(from.ispreferreddeals());
    }
    if (from.has_campaignid()) {
      set_campaignid(from.campaignid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pageurl()) {
      set_pageurl(from.pageurl());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
    if (from.has_tradingtype()) {
      set_tradingtype(from.tradingtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Impression::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Impression::CopyFrom(const Request_Impression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Impression::IsInitialized() const {

  return true;
}

void Request_Impression::Swap(Request_Impression* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(pid_, other->pid_);
    std::swap(bidfloor_, other->bidfloor_);
    std::swap(banner_, other->banner_);
    std::swap(video_, other->video_);
    std::swap(screenlocation_, other->screenlocation_);
    std::swap(ispreferreddeals_, other->ispreferreddeals_);
    std::swap(campaignid_, other->campaignid_);
    std::swap(pageurl_, other->pageurl_);
    category_.Swap(&other->category_);
    std::swap(title_, other->title_);
    std::swap(lineid_, other->lineid_);
    acceptadvertisingtype_.Swap(&other->acceptadvertisingtype_);
    std::swap(tradingtype_, other->tradingtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Impression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Impression_descriptor_;
  metadata.reflection = Request_Impression_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Site::kNameFieldNumber;
const int Request_Site::kPageFieldNumber;
const int Request_Site::kCategoryFieldNumber;
const int Request_Site::kRefFieldNumber;
#endif  // !_MSC_VER

Request_Site::Request_Site()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Request.Site)
}

void Request_Site::InitAsDefaultInstance() {
}

Request_Site::Request_Site(const Request_Site& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Request.Site)
}

void Request_Site::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = GOOGLE_LONGLONG(0);
  ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Site::~Request_Site() {
  // @@protoc_insertion_point(destructor:sohuadx.Request.Site)
  SharedDtor();
}

void Request_Site::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_;
  }
  if (ref_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ref_;
  }
  if (this != default_instance_) {
  }
}

void Request_Site::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Site::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Site_descriptor_;
}

const Request_Site& Request_Site::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Request_Site* Request_Site::default_instance_ = NULL;

Request_Site* Request_Site::New() const {
  return new Request_Site;
}

void Request_Site::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_page()) {
      if (page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_->clear();
      }
    }
    category_ = GOOGLE_LONGLONG(0);
    if (has_ref()) {
      if (ref_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Site::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Request.Site)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page;
        break;
      }

      // optional string page = 2;
      case 2: {
        if (tag == 18) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page().data(), this->page().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "page");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }

      // optional int64 category = 3;
      case 3: {
        if (tag == 24) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ref;
        break;
      }

      // optional string ref = 4;
      case 4: {
        if (tag == 34) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ref");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Request.Site)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Request.Site)
  return false;
#undef DO_
}

void Request_Site::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Request.Site)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page(), output);
  }

  // optional int64 category = 3;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->category(), output);
  }

  // optional string ref = 4;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ref(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Request.Site)
}

::google::protobuf::uint8* Request_Site::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Request.Site)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page(), target);
  }

  // optional int64 category = 3;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->category(), target);
  }

  // optional string ref = 4;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ref(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Request.Site)
  return target;
}

int Request_Site::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page());
    }

    // optional int64 category = 3;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->category());
    }

    // optional string ref = 4;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Site::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Site* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Site*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Site::MergeFrom(const Request_Site& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Site::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Site::CopyFrom(const Request_Site& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Site::IsInitialized() const {

  return true;
}

void Request_Site::Swap(Request_Site* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(page_, other->page_);
    std::swap(category_, other->category_);
    std::swap(ref_, other->ref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Site::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Site_descriptor_;
  metadata.reflection = Request_Site_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Device::kTypeFieldNumber;
const int Request_Device::kIpFieldNumber;
const int Request_Device::kUaFieldNumber;
const int Request_Device::kCarrierFieldNumber;
const int Request_Device::kNetTypeFieldNumber;
const int Request_Device::kMobileTypeFieldNumber;
const int Request_Device::kScreenWidthFieldNumber;
const int Request_Device::kScreenHeightFieldNumber;
const int Request_Device::kImeiFieldNumber;
const int Request_Device::kImsiFieldNumber;
const int Request_Device::kMacFieldNumber;
const int Request_Device::kIdfaFieldNumber;
const int Request_Device::kAndroidIDFieldNumber;
const int Request_Device::kOpenUDIDFieldNumber;
#endif  // !_MSC_VER

Request_Device::Request_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Request.Device)
}

void Request_Device::InitAsDefaultInstance() {
}

Request_Device::Request_Device(const Request_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Request.Device)
}

void Request_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nettype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobiletype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  screenwidth_ = 0u;
  screenheight_ = 0u;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openudid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Device::~Request_Device() {
  // @@protoc_insertion_point(destructor:sohuadx.Request.Device)
  SharedDtor();
}

void Request_Device::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carrier_;
  }
  if (nettype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nettype_;
  }
  if (mobiletype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobiletype_;
  }
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imsi_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idfa_;
  }
  if (androidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete androidid_;
  }
  if (openudid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openudid_;
  }
  if (this != default_instance_) {
  }
}

void Request_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Device_descriptor_;
}

const Request_Device& Request_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Request_Device* Request_Device::default_instance_ = NULL;

Request_Device* Request_Device::New() const {
  return new Request_Device;
}

void Request_Device::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(screenwidth_, screenheight_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_ua()) {
      if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ua_->clear();
      }
    }
    if (has_carrier()) {
      if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        carrier_->clear();
      }
    }
    if (has_nettype()) {
      if (nettype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nettype_->clear();
      }
    }
    if (has_mobiletype()) {
      if (mobiletype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobiletype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imei_->clear();
      }
    }
    if (has_imsi()) {
      if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imsi_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idfa_->clear();
      }
    }
    if (has_androidid()) {
      if (androidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        androidid_->clear();
      }
    }
    if (has_openudid()) {
      if (openudid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openudid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Request.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ua;
        break;
      }

      // optional string ua = 3;
      case 3: {
        if (tag == 26) {
         parse_ua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_carrier;
        break;
      }

      // optional string carrier = 4;
      case 4: {
        if (tag == 34) {
         parse_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->carrier().data(), this->carrier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "carrier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_netType;
        break;
      }

      // optional string netType = 5;
      case 5: {
        if (tag == 42) {
         parse_netType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nettype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nettype().data(), this->nettype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nettype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mobileType;
        break;
      }

      // optional string mobileType = 6;
      case 6: {
        if (tag == 50) {
         parse_mobileType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobiletype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobiletype().data(), this->mobiletype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobiletype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screenWidth;
        break;
      }

      // optional uint32 screenWidth = 7;
      case 7: {
        if (tag == 56) {
         parse_screenWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenwidth_)));
          set_has_screenwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_screenHeight;
        break;
      }

      // optional uint32 screenHeight = 8;
      case 8: {
        if (tag == 64) {
         parse_screenHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenheight_)));
          set_has_screenheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_imei;
        break;
      }

      // optional string imei = 9;
      case 9: {
        if (tag == 74) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_imsi;
        break;
      }

      // optional string imsi = 10;
      case 10: {
        if (tag == 82) {
         parse_imsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imsi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imsi().data(), this->imsi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imsi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_mac;
        break;
      }

      // optional string mac = 11;
      case 11: {
        if (tag == 90) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_idfa;
        break;
      }

      // optional string idfa = 12;
      case 12: {
        if (tag == 98) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "idfa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_androidID;
        break;
      }

      // optional string androidID = 13;
      case 13: {
        if (tag == 106) {
         parse_androidID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_androidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->androidid().data(), this->androidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "androidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_openUDID;
        break;
      }

      // optional string openUDID = 14;
      case 14: {
        if (tag == 114) {
         parse_openUDID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openudid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openudid().data(), this->openudid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openudid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Request.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Request.Device)
  return false;
#undef DO_
}

void Request_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Request.Device)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional string ua = 3;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ua(), output);
  }

  // optional string carrier = 4;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "carrier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->carrier(), output);
  }

  // optional string netType = 5;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nettype().data(), this->nettype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nettype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nettype(), output);
  }

  // optional string mobileType = 6;
  if (has_mobiletype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobiletype().data(), this->mobiletype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobiletype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mobiletype(), output);
  }

  // optional uint32 screenWidth = 7;
  if (has_screenwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screenwidth(), output);
  }

  // optional uint32 screenHeight = 8;
  if (has_screenheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->screenheight(), output);
  }

  // optional string imei = 9;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->imei(), output);
  }

  // optional string imsi = 10;
  if (has_imsi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imsi().data(), this->imsi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imsi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->imsi(), output);
  }

  // optional string mac = 11;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->mac(), output);
  }

  // optional string idfa = 12;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->idfa(), output);
  }

  // optional string androidID = 13;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "androidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->androidid(), output);
  }

  // optional string openUDID = 14;
  if (has_openudid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openudid().data(), this->openudid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openudid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->openudid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Request.Device)
}

::google::protobuf::uint8* Request_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Request.Device)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string ua = 3;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ua(), target);
  }

  // optional string carrier = 4;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "carrier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->carrier(), target);
  }

  // optional string netType = 5;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nettype().data(), this->nettype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nettype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nettype(), target);
  }

  // optional string mobileType = 6;
  if (has_mobiletype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobiletype().data(), this->mobiletype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobiletype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mobiletype(), target);
  }

  // optional uint32 screenWidth = 7;
  if (has_screenwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screenwidth(), target);
  }

  // optional uint32 screenHeight = 8;
  if (has_screenheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->screenheight(), target);
  }

  // optional string imei = 9;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->imei(), target);
  }

  // optional string imsi = 10;
  if (has_imsi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imsi().data(), this->imsi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imsi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->imsi(), target);
  }

  // optional string mac = 11;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->mac(), target);
  }

  // optional string idfa = 12;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->idfa(), target);
  }

  // optional string androidID = 13;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "androidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->androidid(), target);
  }

  // optional string openUDID = 14;
  if (has_openudid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openudid().data(), this->openudid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openudid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->openudid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Request.Device)
  return target;
}

int Request_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string ua = 3;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

    // optional string carrier = 4;
    if (has_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrier());
    }

    // optional string netType = 5;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nettype());
    }

    // optional string mobileType = 6;
    if (has_mobiletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobiletype());
    }

    // optional uint32 screenWidth = 7;
    if (has_screenwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenwidth());
    }

    // optional uint32 screenHeight = 8;
    if (has_screenheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenheight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string imei = 9;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string imsi = 10;
    if (has_imsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imsi());
    }

    // optional string mac = 11;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string idfa = 12;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string androidID = 13;
    if (has_androidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->androidid());
    }

    // optional string openUDID = 14;
    if (has_openudid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openudid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Device::MergeFrom(const Request_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_ua()) {
      set_ua(from.ua());
    }
    if (from.has_carrier()) {
      set_carrier(from.carrier());
    }
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
    if (from.has_mobiletype()) {
      set_mobiletype(from.mobiletype());
    }
    if (from.has_screenwidth()) {
      set_screenwidth(from.screenwidth());
    }
    if (from.has_screenheight()) {
      set_screenheight(from.screenheight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_imsi()) {
      set_imsi(from.imsi());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_androidid()) {
      set_androidid(from.androidid());
    }
    if (from.has_openudid()) {
      set_openudid(from.openudid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Device::CopyFrom(const Request_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Device::IsInitialized() const {

  return true;
}

void Request_Device::Swap(Request_Device* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ip_, other->ip_);
    std::swap(ua_, other->ua_);
    std::swap(carrier_, other->carrier_);
    std::swap(nettype_, other->nettype_);
    std::swap(mobiletype_, other->mobiletype_);
    std::swap(screenwidth_, other->screenwidth_);
    std::swap(screenheight_, other->screenheight_);
    std::swap(imei_, other->imei_);
    std::swap(imsi_, other->imsi_);
    std::swap(mac_, other->mac_);
    std::swap(idfa_, other->idfa_);
    std::swap(androidid_, other->androidid_);
    std::swap(openudid_, other->openudid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Device_descriptor_;
  metadata.reflection = Request_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_User::kSuidFieldNumber;
const int Request_User::kVersionFieldNumber;
const int Request_User::kCategoryFieldNumber;
const int Request_User::kSearchKeyWordsFieldNumber;
const int Request_User::kYyidFieldNumber;
const int Request_User::kFyidFieldNumber;
#endif  // !_MSC_VER

Request_User::Request_User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Request.User)
}

void Request_User::InitAsDefaultInstance() {
}

Request_User::Request_User(const Request_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Request.User)
}

void Request_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  yyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_User::~Request_User() {
  // @@protoc_insertion_point(destructor:sohuadx.Request.User)
  SharedDtor();
}

void Request_User::SharedDtor() {
  if (suid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suid_;
  }
  if (yyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete yyid_;
  }
  if (fyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fyid_;
  }
  if (this != default_instance_) {
  }
}

void Request_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_User_descriptor_;
}

const Request_User& Request_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Request_User* Request_User::default_instance_ = NULL;

Request_User* Request_User::New() const {
  return new Request_User;
}

void Request_User::Clear() {
  if (_has_bits_[0 / 32] & 51) {
    if (has_suid()) {
      if (suid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        suid_->clear();
      }
    }
    version_ = 0u;
    if (has_yyid()) {
      if (yyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        yyid_->clear();
      }
    }
    if (has_fyid()) {
      if (fyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fyid_->clear();
      }
    }
  }
  category_.Clear();
  searchkeywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Request.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string suid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suid().data(), this->suid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "suid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }

      // repeated int64 category = 3;
      case 3: {
        if (tag == 24) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_category())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_category;
        if (input->ExpectTag(34)) goto parse_searchKeyWords;
        break;
      }

      // repeated string searchKeyWords = 4;
      case 4: {
        if (tag == 34) {
         parse_searchKeyWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_searchkeywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchkeywords(this->searchkeywords_size() - 1).data(),
            this->searchkeywords(this->searchkeywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "searchkeywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_searchKeyWords;
        if (input->ExpectTag(42)) goto parse_yyid;
        break;
      }

      // optional string yyid = 5;
      case 5: {
        if (tag == 42) {
         parse_yyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->yyid().data(), this->yyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fyid;
        break;
      }

      // optional string fyid = 6;
      case 6: {
        if (tag == 50) {
         parse_fyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fyid().data(), this->fyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Request.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Request.User)
  return false;
#undef DO_
}

void Request_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Request.User)
  // optional string suid = 1;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suid(), output);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // repeated int64 category = 3;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->category(i), output);
  }

  // repeated string searchKeyWords = 4;
  for (int i = 0; i < this->searchkeywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->searchkeywords(i).data(), this->searchkeywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "searchkeywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->searchkeywords(i), output);
  }

  // optional string yyid = 5;
  if (has_yyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yyid().data(), this->yyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->yyid(), output);
  }

  // optional string fyid = 6;
  if (has_fyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fyid().data(), this->fyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Request.User)
}

::google::protobuf::uint8* Request_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Request.User)
  // optional string suid = 1;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->suid(), target);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // repeated int64 category = 3;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->category(i), target);
  }

  // repeated string searchKeyWords = 4;
  for (int i = 0; i < this->searchkeywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchkeywords(i).data(), this->searchkeywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchkeywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->searchkeywords(i), target);
  }

  // optional string yyid = 5;
  if (has_yyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yyid().data(), this->yyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->yyid(), target);
  }

  // optional string fyid = 6;
  if (has_fyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fyid().data(), this->fyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Request.User)
  return target;
}

int Request_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string suid = 1;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suid());
    }

    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string yyid = 5;
    if (has_yyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yyid());
    }

    // optional string fyid = 6;
    if (has_fyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fyid());
    }

  }
  // repeated int64 category = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  // repeated string searchKeyWords = 4;
  total_size += 1 * this->searchkeywords_size();
  for (int i = 0; i < this->searchkeywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->searchkeywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_User::MergeFrom(const Request_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  category_.MergeFrom(from.category_);
  searchkeywords_.MergeFrom(from.searchkeywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_yyid()) {
      set_yyid(from.yyid());
    }
    if (from.has_fyid()) {
      set_fyid(from.fyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_User::CopyFrom(const Request_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_User::IsInitialized() const {

  return true;
}

void Request_User::Swap(Request_User* other) {
  if (other != this) {
    std::swap(suid_, other->suid_);
    std::swap(version_, other->version_);
    category_.Swap(&other->category_);
    searchkeywords_.Swap(&other->searchkeywords_);
    std::swap(yyid_, other->yyid_);
    std::swap(fyid_, other->fyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_User_descriptor_;
  metadata.reflection = Request_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kVersionFieldNumber;
const int Request::kBididFieldNumber;
const int Request::kIsTestFieldNumber;
const int Request::kSiteFieldNumber;
const int Request::kDeviceFieldNumber;
const int Request::kUserFieldNumber;
const int Request::kImpressionFieldNumber;
const int Request::kExcludeAdCategoryFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Request)
}

void Request::InitAsDefaultInstance() {
  site_ = const_cast< ::sohuadx::Request_Site*>(&::sohuadx::Request_Site::default_instance());
  device_ = const_cast< ::sohuadx::Request_Device*>(&::sohuadx::Request_Device::default_instance());
  user_ = const_cast< ::sohuadx::Request_User*>(&::sohuadx::Request_User::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  istest_ = 0u;
  site_ = NULL;
  device_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:sohuadx.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidid_;
  }
  if (this != default_instance_) {
    delete site_;
    delete device_;
    delete user_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(version_, istest_);
    if (has_bidid()) {
      if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bidid_->clear();
      }
    }
    if (has_site()) {
      if (site_ != NULL) site_->::sohuadx::Request_Site::Clear();
    }
    if (has_device()) {
      if (device_ != NULL) device_->::sohuadx::Request_Device::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::sohuadx::Request_User::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  impression_.Clear();
  excludeadcategory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bidid;
        break;
      }

      // required string bidid = 2;
      case 2: {
        if (tag == 18) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isTest;
        break;
      }

      // optional uint32 isTest = 3;
      case 3: {
        if (tag == 24) {
         parse_isTest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &istest_)));
          set_has_istest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_site;
        break;
      }

      // optional .sohuadx.Request.Site site = 4;
      case 4: {
        if (tag == 34) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device;
        break;
      }

      // optional .sohuadx.Request.Device device = 5;
      case 5: {
        if (tag == 42) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user;
        break;
      }

      // optional .sohuadx.Request.User user = 6;
      case 6: {
        if (tag == 50) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_impression;
        break;
      }

      // repeated .sohuadx.Request.Impression impression = 7;
      case 7: {
        if (tag == 58) {
         parse_impression:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_impression()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_impression;
        if (input->ExpectTag(66)) goto parse_excludeAdCategory;
        break;
      }

      // repeated string excludeAdCategory = 8;
      case 8: {
        if (tag == 66) {
         parse_excludeAdCategory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excludeadcategory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excludeadcategory(this->excludeadcategory_size() - 1).data(),
            this->excludeadcategory(this->excludeadcategory_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "excludeadcategory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_excludeAdCategory;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Request)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required string bidid = 2;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bidid(), output);
  }

  // optional uint32 isTest = 3;
  if (has_istest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->istest(), output);
  }

  // optional .sohuadx.Request.Site site = 4;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->site(), output);
  }

  // optional .sohuadx.Request.Device device = 5;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device(), output);
  }

  // optional .sohuadx.Request.User user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->user(), output);
  }

  // repeated .sohuadx.Request.Impression impression = 7;
  for (int i = 0; i < this->impression_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->impression(i), output);
  }

  // repeated string excludeAdCategory = 8;
  for (int i = 0; i < this->excludeadcategory_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->excludeadcategory(i).data(), this->excludeadcategory(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "excludeadcategory");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->excludeadcategory(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Request)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required string bidid = 2;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bidid(), target);
  }

  // optional uint32 isTest = 3;
  if (has_istest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->istest(), target);
  }

  // optional .sohuadx.Request.Site site = 4;
  if (has_site()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->site(), target);
  }

  // optional .sohuadx.Request.Device device = 5;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device(), target);
  }

  // optional .sohuadx.Request.User user = 6;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->user(), target);
  }

  // repeated .sohuadx.Request.Impression impression = 7;
  for (int i = 0; i < this->impression_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->impression(i), target);
  }

  // repeated string excludeAdCategory = 8;
  for (int i = 0; i < this->excludeadcategory_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excludeadcategory(i).data(), this->excludeadcategory(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excludeadcategory");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->excludeadcategory(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required string bidid = 2;
    if (has_bidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidid());
    }

    // optional uint32 isTest = 3;
    if (has_istest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->istest());
    }

    // optional .sohuadx.Request.Site site = 4;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site());
    }

    // optional .sohuadx.Request.Device device = 5;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional .sohuadx.Request.User user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  // repeated .sohuadx.Request.Impression impression = 7;
  total_size += 1 * this->impression_size();
  for (int i = 0; i < this->impression_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->impression(i));
  }

  // repeated string excludeAdCategory = 8;
  total_size += 1 * this->excludeadcategory_size();
  for (int i = 0; i < this->excludeadcategory_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excludeadcategory(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  impression_.MergeFrom(from.impression_);
  excludeadcategory_.MergeFrom(from.excludeadcategory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bidid()) {
      set_bidid(from.bidid());
    }
    if (from.has_istest()) {
      set_istest(from.istest());
    }
    if (from.has_site()) {
      mutable_site()->::sohuadx::Request_Site::MergeFrom(from.site());
    }
    if (from.has_device()) {
      mutable_device()->::sohuadx::Request_Device::MergeFrom(from.device());
    }
    if (from.has_user()) {
      mutable_user()->::sohuadx::Request_User::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bidid_, other->bidid_);
    std::swap(istest_, other->istest_);
    std::swap(site_, other->site_);
    std::swap(device_, other->device_);
    std::swap(user_, other->user_);
    impression_.Swap(&other->impression_);
    excludeadcategory_.Swap(&other->excludeadcategory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response_Bid::kPriceFieldNumber;
const int Response_Bid::kAdurlFieldNumber;
const int Response_Bid::kExtFieldNumber;
const int Response_Bid::kClickParaFieldNumber;
const int Response_Bid::kDisplayParaFieldNumber;
const int Response_Bid::kAdParaFieldNumber;
const int Response_Bid::kDisplayMonitorFieldNumber;
const int Response_Bid::kClickMonitorFieldNumber;
const int Response_Bid::kAdmUrlFieldNumber;
#endif  // !_MSC_VER

Response_Bid::Response_Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Response.Bid)
}

void Response_Bid::InitAsDefaultInstance() {
}

Response_Bid::Response_Bid(const Response_Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Response.Bid)
}

void Response_Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  price_ = 0u;
  adurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clickpara_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displaypara_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adpara_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displaymonitor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clickmonitor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adm_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_Bid::~Response_Bid() {
  // @@protoc_insertion_point(destructor:sohuadx.Response.Bid)
  SharedDtor();
}

void Response_Bid::SharedDtor() {
  if (adurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adurl_;
  }
  if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ext_;
  }
  if (clickpara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clickpara_;
  }
  if (displaypara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displaypara_;
  }
  if (adpara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adpara_;
  }
  if (displaymonitor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displaymonitor_;
  }
  if (clickmonitor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clickmonitor_;
  }
  if (adm_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adm_url_;
  }
  if (this != default_instance_) {
  }
}

void Response_Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_Bid_descriptor_;
}

const Response_Bid& Response_Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Response_Bid* Response_Bid::default_instance_ = NULL;

Response_Bid* Response_Bid::New() const {
  return new Response_Bid;
}

void Response_Bid::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    price_ = 0u;
    if (has_adurl()) {
      if (adurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adurl_->clear();
      }
    }
    if (has_ext()) {
      if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ext_->clear();
      }
    }
    if (has_clickpara()) {
      if (clickpara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clickpara_->clear();
      }
    }
    if (has_displaypara()) {
      if (displaypara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        displaypara_->clear();
      }
    }
    if (has_adpara()) {
      if (adpara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adpara_->clear();
      }
    }
    if (has_displaymonitor()) {
      if (displaymonitor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        displaymonitor_->clear();
      }
    }
    if (has_clickmonitor()) {
      if (clickmonitor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clickmonitor_->clear();
      }
    }
  }
  if (has_adm_url()) {
    if (adm_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      adm_url_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Response.Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 price = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_adurl;
        break;
      }

      // required string adurl = 2;
      case 2: {
        if (tag == 18) {
         parse_adurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adurl().data(), this->adurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ext;
        break;
      }

      // optional string ext = 3;
      case 3: {
        if (tag == 26) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_clickPara;
        break;
      }

      // optional string clickPara = 4;
      case 4: {
        if (tag == 34) {
         parse_clickPara:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clickpara()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clickpara().data(), this->clickpara().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clickpara");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_displayPara;
        break;
      }

      // optional string displayPara = 5;
      case 5: {
        if (tag == 42) {
         parse_displayPara:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displaypara()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displaypara().data(), this->displaypara().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "displaypara");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adPara;
        break;
      }

      // optional string adPara = 6;
      case 6: {
        if (tag == 50) {
         parse_adPara:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adpara()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adpara().data(), this->adpara().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adpara");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_displayMonitor;
        break;
      }

      // optional string displayMonitor = 7;
      case 7: {
        if (tag == 58) {
         parse_displayMonitor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displaymonitor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displaymonitor().data(), this->displaymonitor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "displaymonitor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_clickMonitor;
        break;
      }

      // optional string clickMonitor = 8;
      case 8: {
        if (tag == 66) {
         parse_clickMonitor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clickmonitor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clickmonitor().data(), this->clickmonitor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clickmonitor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_adm_url;
        break;
      }

      // optional string adm_url = 9;
      case 9: {
        if (tag == 74) {
         parse_adm_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adm_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adm_url().data(), this->adm_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adm_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Response.Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Response.Bid)
  return false;
#undef DO_
}

void Response_Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Response.Bid)
  // required uint32 price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->price(), output);
  }

  // required string adurl = 2;
  if (has_adurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adurl().data(), this->adurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->adurl(), output);
  }

  // optional string ext = 3;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ext(), output);
  }

  // optional string clickPara = 4;
  if (has_clickpara()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clickpara().data(), this->clickpara().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clickpara");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clickpara(), output);
  }

  // optional string displayPara = 5;
  if (has_displaypara()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaypara().data(), this->displaypara().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displaypara");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->displaypara(), output);
  }

  // optional string adPara = 6;
  if (has_adpara()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adpara().data(), this->adpara().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adpara");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->adpara(), output);
  }

  // optional string displayMonitor = 7;
  if (has_displaymonitor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymonitor().data(), this->displaymonitor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displaymonitor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->displaymonitor(), output);
  }

  // optional string clickMonitor = 8;
  if (has_clickmonitor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clickmonitor().data(), this->clickmonitor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clickmonitor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->clickmonitor(), output);
  }

  // optional string adm_url = 9;
  if (has_adm_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm_url().data(), this->adm_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adm_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->adm_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Response.Bid)
}

::google::protobuf::uint8* Response_Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Response.Bid)
  // required uint32 price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->price(), target);
  }

  // required string adurl = 2;
  if (has_adurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adurl().data(), this->adurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->adurl(), target);
  }

  // optional string ext = 3;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ext(), target);
  }

  // optional string clickPara = 4;
  if (has_clickpara()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clickpara().data(), this->clickpara().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clickpara");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clickpara(), target);
  }

  // optional string displayPara = 5;
  if (has_displaypara()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaypara().data(), this->displaypara().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displaypara");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->displaypara(), target);
  }

  // optional string adPara = 6;
  if (has_adpara()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adpara().data(), this->adpara().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adpara");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->adpara(), target);
  }

  // optional string displayMonitor = 7;
  if (has_displaymonitor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymonitor().data(), this->displaymonitor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displaymonitor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->displaymonitor(), target);
  }

  // optional string clickMonitor = 8;
  if (has_clickmonitor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clickmonitor().data(), this->clickmonitor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clickmonitor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->clickmonitor(), target);
  }

  // optional string adm_url = 9;
  if (has_adm_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm_url().data(), this->adm_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adm_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->adm_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Response.Bid)
  return target;
}

int Response_Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required string adurl = 2;
    if (has_adurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adurl());
    }

    // optional string ext = 3;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext());
    }

    // optional string clickPara = 4;
    if (has_clickpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clickpara());
    }

    // optional string displayPara = 5;
    if (has_displaypara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displaypara());
    }

    // optional string adPara = 6;
    if (has_adpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adpara());
    }

    // optional string displayMonitor = 7;
    if (has_displaymonitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displaymonitor());
    }

    // optional string clickMonitor = 8;
    if (has_clickmonitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clickmonitor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string adm_url = 9;
    if (has_adm_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adm_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_Bid::MergeFrom(const Response_Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_adurl()) {
      set_adurl(from.adurl());
    }
    if (from.has_ext()) {
      set_ext(from.ext());
    }
    if (from.has_clickpara()) {
      set_clickpara(from.clickpara());
    }
    if (from.has_displaypara()) {
      set_displaypara(from.displaypara());
    }
    if (from.has_adpara()) {
      set_adpara(from.adpara());
    }
    if (from.has_displaymonitor()) {
      set_displaymonitor(from.displaymonitor());
    }
    if (from.has_clickmonitor()) {
      set_clickmonitor(from.clickmonitor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adm_url()) {
      set_adm_url(from.adm_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_Bid::CopyFrom(const Response_Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Response_Bid::Swap(Response_Bid* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(adurl_, other->adurl_);
    std::swap(ext_, other->ext_);
    std::swap(clickpara_, other->clickpara_);
    std::swap(displaypara_, other->displaypara_);
    std::swap(adpara_, other->adpara_);
    std::swap(displaymonitor_, other->displaymonitor_);
    std::swap(clickmonitor_, other->clickmonitor_);
    std::swap(adm_url_, other->adm_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_Bid_descriptor_;
  metadata.reflection = Response_Bid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_SeatBid::kIdxFieldNumber;
const int Response_SeatBid::kBidFieldNumber;
#endif  // !_MSC_VER

Response_SeatBid::Response_SeatBid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Response.SeatBid)
}

void Response_SeatBid::InitAsDefaultInstance() {
}

Response_SeatBid::Response_SeatBid(const Response_SeatBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Response.SeatBid)
}

void Response_SeatBid::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_SeatBid::~Response_SeatBid() {
  // @@protoc_insertion_point(destructor:sohuadx.Response.SeatBid)
  SharedDtor();
}

void Response_SeatBid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_SeatBid_descriptor_;
}

const Response_SeatBid& Response_SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Response_SeatBid* Response_SeatBid::default_instance_ = NULL;

Response_SeatBid* Response_SeatBid::New() const {
  return new Response_SeatBid;
}

void Response_SeatBid::Clear() {
  idx_ = 0u;
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Response.SeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // repeated .sohuadx.Response.Bid bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Response.SeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Response.SeatBid)
  return false;
#undef DO_
}

void Response_SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Response.SeatBid)
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // repeated .sohuadx.Response.Bid bid = 2;
  for (int i = 0; i < this->bid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Response.SeatBid)
}

::google::protobuf::uint8* Response_SeatBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Response.SeatBid)
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // repeated .sohuadx.Response.Bid bid = 2;
  for (int i = 0; i < this->bid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Response.SeatBid)
  return target;
}

int Response_SeatBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  // repeated .sohuadx.Response.Bid bid = 2;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_SeatBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_SeatBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_SeatBid::MergeFrom(const Response_SeatBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bid_.MergeFrom(from.bid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_SeatBid::CopyFrom(const Response_SeatBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SeatBid::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;
  return true;
}

void Response_SeatBid::Swap(Response_SeatBid* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    bid_.Swap(&other->bid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_SeatBid_descriptor_;
  metadata.reflection = Response_SeatBid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response::kVersionFieldNumber;
const int Response::kBididFieldNumber;
const int Response::kSeatbidFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sohuadx.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sohuadx.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:sohuadx.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidid_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sohuRTB_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    version_ = 0u;
    if (has_bidid()) {
      if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bidid_->clear();
      }
    }
  }
  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sohuadx.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bidid;
        break;
      }

      // required string bidid = 2;
      case 2: {
        if (tag == 18) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_seatbid;
        break;
      }

      // repeated .sohuadx.Response.SeatBid seatbid = 3;
      case 3: {
        if (tag == 26) {
         parse_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seatbid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_seatbid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sohuadx.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sohuadx.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sohuadx.Response)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required string bidid = 2;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bidid(), output);
  }

  // repeated .sohuadx.Response.SeatBid seatbid = 3;
  for (int i = 0; i < this->seatbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seatbid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sohuadx.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sohuadx.Response)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required string bidid = 2;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bidid(), target);
  }

  // repeated .sohuadx.Response.SeatBid seatbid = 3;
  for (int i = 0; i < this->seatbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seatbid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sohuadx.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required string bidid = 2;
    if (has_bidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidid());
    }

  }
  // repeated .sohuadx.Response.SeatBid seatbid = 3;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bidid()) {
      set_bidid(from.bidid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbid())) return false;
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bidid_, other->bidid_);
    seatbid_.Swap(&other->seatbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sohuadx

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tanx-bidding.proto

#ifndef PROTOBUF_tanx_2dbidding_2eproto__INCLUDED
#define PROTOBUF_tanx_2dbidding_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Tanx {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tanx_2dbidding_2eproto();
void protobuf_AssignDesc_tanx_2dbidding_2eproto();
void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

class BidRequest;
class BidRequest_Content;
class BidRequest_AdzInfo;
class BidRequest_AdzInfo_BuyerRule;
class BidRequest_AdzInfo_Video;
class BidRequest_AdzInfo_Deal;
class BidRequest_UserAttribute;
class BidRequest_PrivateInfo;
class BidRequest_Mobile;
class BidRequest_Mobile_Device;
class BidRequest_Mobile_AppCategory;
class BidRequest_Mobile_NativeAdTemplate;
class BidRequest_Mobile_NativeAdTemplate_Area;
class BidRequest_Mobile_NativeAdTemplate_Area_Creative;
class BidRequest_ContentCategory;
class BidRequest_Video;
class BidRequest_Video_Content;
class BidRequest_Deal;
class BidRequest_Deal_PreferredDeal;
class BidRequest_Deal_PrivateAuction;
class BidRequest_Deal_PrivateAuction_BuyerRule;
class BidRequest_CrowdCategory;
class BidResponse;
class BidResponse_Ads;
class BidResponse_Ads_Video;
class BidResult;
class BidResult_Res;
class MobileCreative;
class MobileCreative_Creative;
class MobileCreative_Creative_Attr;
class MobileCreative_Creative_TrackingEvents;
class MobileCreative_Area;

enum BidRequest_AdzInfo_Deal_DealType {
  BidRequest_AdzInfo_Deal_DealType_UNKNOWN_DEAL_TYPE = 0,
  BidRequest_AdzInfo_Deal_DealType_PRIVATE_AUCTION = 1,
  BidRequest_AdzInfo_Deal_DealType_PREFERRED_DEAL = 2,
  BidRequest_AdzInfo_Deal_DealType_DIRECT_BUY = 3
};
bool BidRequest_AdzInfo_Deal_DealType_IsValid(int value);
const BidRequest_AdzInfo_Deal_DealType BidRequest_AdzInfo_Deal_DealType_DealType_MIN = BidRequest_AdzInfo_Deal_DealType_UNKNOWN_DEAL_TYPE;
const BidRequest_AdzInfo_Deal_DealType BidRequest_AdzInfo_Deal_DealType_DealType_MAX = BidRequest_AdzInfo_Deal_DealType_DIRECT_BUY;
const int BidRequest_AdzInfo_Deal_DealType_DealType_ARRAYSIZE = BidRequest_AdzInfo_Deal_DealType_DealType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Deal_DealType_descriptor();
inline const ::std::string& BidRequest_AdzInfo_Deal_DealType_Name(BidRequest_AdzInfo_Deal_DealType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdzInfo_Deal_DealType_descriptor(), value);
}
inline bool BidRequest_AdzInfo_Deal_DealType_Parse(
    const ::std::string& name, BidRequest_AdzInfo_Deal_DealType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdzInfo_Deal_DealType>(
    BidRequest_AdzInfo_Deal_DealType_descriptor(), name, value);
}
enum BidRequest_AdzInfo_Location {
  BidRequest_AdzInfo_Location_NA = 0,
  BidRequest_AdzInfo_Location_FIRST_VIEW = 1,
  BidRequest_AdzInfo_Location_OTHER_VIEW = 2
};
bool BidRequest_AdzInfo_Location_IsValid(int value);
const BidRequest_AdzInfo_Location BidRequest_AdzInfo_Location_Location_MIN = BidRequest_AdzInfo_Location_NA;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo_Location_Location_MAX = BidRequest_AdzInfo_Location_OTHER_VIEW;
const int BidRequest_AdzInfo_Location_Location_ARRAYSIZE = BidRequest_AdzInfo_Location_Location_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Location_descriptor();
inline const ::std::string& BidRequest_AdzInfo_Location_Name(BidRequest_AdzInfo_Location value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdzInfo_Location_descriptor(), value);
}
inline bool BidRequest_AdzInfo_Location_Parse(
    const ::std::string& name, BidRequest_AdzInfo_Location* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdzInfo_Location>(
    BidRequest_AdzInfo_Location_descriptor(), name, value);
}
enum BidRequest_AdzInfo_ViewScreen {
  BidRequest_AdzInfo_ViewScreen_SCREEN_NA = 0,
  BidRequest_AdzInfo_ViewScreen_SCREEN_FIRST = 1,
  BidRequest_AdzInfo_ViewScreen_SCREEN_SECOND = 2,
  BidRequest_AdzInfo_ViewScreen_SCREEN_THIRD = 3,
  BidRequest_AdzInfo_ViewScreen_SCREEN_FOURTH = 4,
  BidRequest_AdzInfo_ViewScreen_SCREEN_FIFTH = 5,
  BidRequest_AdzInfo_ViewScreen_SCREEN_OTHER = 6
};
bool BidRequest_AdzInfo_ViewScreen_IsValid(int value);
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo_ViewScreen_ViewScreen_MIN = BidRequest_AdzInfo_ViewScreen_SCREEN_NA;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo_ViewScreen_ViewScreen_MAX = BidRequest_AdzInfo_ViewScreen_SCREEN_OTHER;
const int BidRequest_AdzInfo_ViewScreen_ViewScreen_ARRAYSIZE = BidRequest_AdzInfo_ViewScreen_ViewScreen_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_ViewScreen_descriptor();
inline const ::std::string& BidRequest_AdzInfo_ViewScreen_Name(BidRequest_AdzInfo_ViewScreen value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdzInfo_ViewScreen_descriptor(), value);
}
inline bool BidRequest_AdzInfo_ViewScreen_Parse(
    const ::std::string& name, BidRequest_AdzInfo_ViewScreen* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdzInfo_ViewScreen>(
    BidRequest_AdzInfo_ViewScreen_descriptor(), name, value);
}
enum BidRequest_Mobile_Device_ScreenOrientation {
  BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_UNKNOWN = 0,
  BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_PORTRAIT = 1,
  BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_LANDSCAPE = 2
};
bool BidRequest_Mobile_Device_ScreenOrientation_IsValid(int value);
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MIN = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_UNKNOWN;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MAX = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_LANDSCAPE;
const int BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_ARRAYSIZE = BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_Device_ScreenOrientation_descriptor();
inline const ::std::string& BidRequest_Mobile_Device_ScreenOrientation_Name(BidRequest_Mobile_Device_ScreenOrientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Mobile_Device_ScreenOrientation_descriptor(), value);
}
inline bool BidRequest_Mobile_Device_ScreenOrientation_Parse(
    const ::std::string& name, BidRequest_Mobile_Device_ScreenOrientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Mobile_Device_ScreenOrientation>(
    BidRequest_Mobile_Device_ScreenOrientation_descriptor(), name, value);
}
enum BidRequest_Video_VideoFormat {
  BidRequest_Video_VideoFormat_VIDEO_FLASH = 0,
  BidRequest_Video_VideoFormat_VIDEO_HTML5 = 1
};
bool BidRequest_Video_VideoFormat_IsValid(int value);
const BidRequest_Video_VideoFormat BidRequest_Video_VideoFormat_VideoFormat_MIN = BidRequest_Video_VideoFormat_VIDEO_FLASH;
const BidRequest_Video_VideoFormat BidRequest_Video_VideoFormat_VideoFormat_MAX = BidRequest_Video_VideoFormat_VIDEO_HTML5;
const int BidRequest_Video_VideoFormat_VideoFormat_ARRAYSIZE = BidRequest_Video_VideoFormat_VideoFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor();
inline const ::std::string& BidRequest_Video_VideoFormat_Name(BidRequest_Video_VideoFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Video_VideoFormat_descriptor(), value);
}
inline bool BidRequest_Video_VideoFormat_Parse(
    const ::std::string& name, BidRequest_Video_VideoFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Video_VideoFormat>(
    BidRequest_Video_VideoFormat_descriptor(), name, value);
}
// ===================================================================

class BidRequest_Content : public ::google::protobuf::Message {
 public:
  BidRequest_Content();
  virtual ~BidRequest_Content();

  BidRequest_Content(const BidRequest_Content& from);

  inline BidRequest_Content& operator=(const BidRequest_Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Content& default_instance();

  void Swap(BidRequest_Content* other);

  // implements Message ----------------------------------------------

  BidRequest_Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Content& from);
  void MergeFrom(const BidRequest_Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // repeated string keywords = 3;
  inline int keywords_size() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 3;
  inline const ::std::string& keywords(int index) const;
  inline ::std::string* mutable_keywords(int index);
  inline void set_keywords(int index, const ::std::string& value);
  inline void set_keywords(int index, const char* value);
  inline void set_keywords(int index, const char* value, size_t size);
  inline ::std::string* add_keywords();
  inline void add_keywords(const ::std::string& value);
  inline void add_keywords(const char* value);
  inline void add_keywords(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keywords() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keywords();

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Content)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_duration();
  inline void clear_has_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keywords_;
  ::google::protobuf::int32 duration_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Content* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdzInfo_BuyerRule : public ::google::protobuf::Message {
 public:
  BidRequest_AdzInfo_BuyerRule();
  virtual ~BidRequest_AdzInfo_BuyerRule();

  BidRequest_AdzInfo_BuyerRule(const BidRequest_AdzInfo_BuyerRule& from);

  inline BidRequest_AdzInfo_BuyerRule& operator=(const BidRequest_AdzInfo_BuyerRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdzInfo_BuyerRule& default_instance();

  void Swap(BidRequest_AdzInfo_BuyerRule* other);

  // implements Message ----------------------------------------------

  BidRequest_AdzInfo_BuyerRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdzInfo_BuyerRule& from);
  void MergeFrom(const BidRequest_AdzInfo_BuyerRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 advertiser_ids = 1;
  inline bool has_advertiser_ids() const;
  inline void clear_advertiser_ids();
  static const int kAdvertiserIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 advertiser_ids() const;
  inline void set_advertiser_ids(::google::protobuf::uint32 value);

  // optional uint32 min_cpm_price = 2;
  inline bool has_min_cpm_price() const;
  inline void clear_min_cpm_price();
  static const int kMinCpmPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 min_cpm_price() const;
  inline void set_min_cpm_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.AdzInfo.BuyerRule)
 private:
  inline void set_has_advertiser_ids();
  inline void clear_has_advertiser_ids();
  inline void set_has_min_cpm_price();
  inline void clear_has_min_cpm_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 advertiser_ids_;
  ::google::protobuf::uint32 min_cpm_price_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdzInfo_BuyerRule* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdzInfo_Video : public ::google::protobuf::Message {
 public:
  BidRequest_AdzInfo_Video();
  virtual ~BidRequest_AdzInfo_Video();

  BidRequest_AdzInfo_Video(const BidRequest_AdzInfo_Video& from);

  inline BidRequest_AdzInfo_Video& operator=(const BidRequest_AdzInfo_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdzInfo_Video& default_instance();

  void Swap(BidRequest_AdzInfo_Video* other);

  // implements Message ----------------------------------------------

  BidRequest_AdzInfo_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdzInfo_Video& from);
  void MergeFrom(const BidRequest_AdzInfo_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 videoad_start_delay = 1;
  inline bool has_videoad_start_delay() const;
  inline void clear_videoad_start_delay();
  static const int kVideoadStartDelayFieldNumber = 1;
  inline ::google::protobuf::int32 videoad_start_delay() const;
  inline void set_videoad_start_delay(::google::protobuf::int32 value);

  // optional int32 videoad_section_start_delay = 2;
  inline bool has_videoad_section_start_delay() const;
  inline void clear_videoad_section_start_delay();
  static const int kVideoadSectionStartDelayFieldNumber = 2;
  inline ::google::protobuf::int32 videoad_section_start_delay() const;
  inline void set_videoad_section_start_delay(::google::protobuf::int32 value);

  // optional int32 min_ad_duration = 3;
  inline bool has_min_ad_duration() const;
  inline void clear_min_ad_duration();
  static const int kMinAdDurationFieldNumber = 3;
  inline ::google::protobuf::int32 min_ad_duration() const;
  inline void set_min_ad_duration(::google::protobuf::int32 value);

  // optional int32 max_ad_duration = 4;
  inline bool has_max_ad_duration() const;
  inline void clear_max_ad_duration();
  static const int kMaxAdDurationFieldNumber = 4;
  inline ::google::protobuf::int32 max_ad_duration() const;
  inline void set_max_ad_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.AdzInfo.Video)
 private:
  inline void set_has_videoad_start_delay();
  inline void clear_has_videoad_start_delay();
  inline void set_has_videoad_section_start_delay();
  inline void clear_has_videoad_section_start_delay();
  inline void set_has_min_ad_duration();
  inline void clear_has_min_ad_duration();
  inline void set_has_max_ad_duration();
  inline void clear_has_max_ad_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 videoad_start_delay_;
  ::google::protobuf::int32 videoad_section_start_delay_;
  ::google::protobuf::int32 min_ad_duration_;
  ::google::protobuf::int32 max_ad_duration_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdzInfo_Video* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdzInfo_Deal : public ::google::protobuf::Message {
 public:
  BidRequest_AdzInfo_Deal();
  virtual ~BidRequest_AdzInfo_Deal();

  BidRequest_AdzInfo_Deal(const BidRequest_AdzInfo_Deal& from);

  inline BidRequest_AdzInfo_Deal& operator=(const BidRequest_AdzInfo_Deal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdzInfo_Deal& default_instance();

  void Swap(BidRequest_AdzInfo_Deal* other);

  // implements Message ----------------------------------------------

  BidRequest_AdzInfo_Deal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdzInfo_Deal& from);
  void MergeFrom(const BidRequest_AdzInfo_Deal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_AdzInfo_Deal_DealType DealType;
  static const DealType UNKNOWN_DEAL_TYPE = BidRequest_AdzInfo_Deal_DealType_UNKNOWN_DEAL_TYPE;
  static const DealType PRIVATE_AUCTION = BidRequest_AdzInfo_Deal_DealType_PRIVATE_AUCTION;
  static const DealType PREFERRED_DEAL = BidRequest_AdzInfo_Deal_DealType_PREFERRED_DEAL;
  static const DealType DIRECT_BUY = BidRequest_AdzInfo_Deal_DealType_DIRECT_BUY;
  static inline bool DealType_IsValid(int value) {
    return BidRequest_AdzInfo_Deal_DealType_IsValid(value);
  }
  static const DealType DealType_MIN =
    BidRequest_AdzInfo_Deal_DealType_DealType_MIN;
  static const DealType DealType_MAX =
    BidRequest_AdzInfo_Deal_DealType_DealType_MAX;
  static const int DealType_ARRAYSIZE =
    BidRequest_AdzInfo_Deal_DealType_DealType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DealType_descriptor() {
    return BidRequest_AdzInfo_Deal_DealType_descriptor();
  }
  static inline const ::std::string& DealType_Name(DealType value) {
    return BidRequest_AdzInfo_Deal_DealType_Name(value);
  }
  static inline bool DealType_Parse(const ::std::string& name,
      DealType* value) {
    return BidRequest_AdzInfo_Deal_DealType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 dealid = 1;
  inline bool has_dealid() const;
  inline void clear_dealid();
  static const int kDealidFieldNumber = 1;
  inline ::google::protobuf::uint32 dealid() const;
  inline void set_dealid(::google::protobuf::uint32 value);

  // required .Tanx.BidRequest.AdzInfo.Deal.DealType deal_type = 2;
  inline bool has_deal_type() const;
  inline void clear_deal_type();
  static const int kDealTypeFieldNumber = 2;
  inline ::Tanx::BidRequest_AdzInfo_Deal_DealType deal_type() const;
  inline void set_deal_type(::Tanx::BidRequest_AdzInfo_Deal_DealType value);

  // repeated uint32 advertiser_ids = 3;
  inline int advertiser_ids_size() const;
  inline void clear_advertiser_ids();
  static const int kAdvertiserIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 advertiser_ids(int index) const;
  inline void set_advertiser_ids(int index, ::google::protobuf::uint32 value);
  inline void add_advertiser_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      advertiser_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_advertiser_ids();

  // optional uint32 price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.AdzInfo.Deal)
 private:
  inline void set_has_dealid();
  inline void clear_has_dealid();
  inline void set_has_deal_type();
  inline void clear_has_deal_type();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dealid_;
  int deal_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > advertiser_ids_;
  ::google::protobuf::uint32 price_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdzInfo_Deal* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdzInfo : public ::google::protobuf::Message {
 public:
  BidRequest_AdzInfo();
  virtual ~BidRequest_AdzInfo();

  BidRequest_AdzInfo(const BidRequest_AdzInfo& from);

  inline BidRequest_AdzInfo& operator=(const BidRequest_AdzInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdzInfo& default_instance();

  void Swap(BidRequest_AdzInfo* other);

  // implements Message ----------------------------------------------

  BidRequest_AdzInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdzInfo& from);
  void MergeFrom(const BidRequest_AdzInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_AdzInfo_BuyerRule BuyerRule;
  typedef BidRequest_AdzInfo_Video Video;
  typedef BidRequest_AdzInfo_Deal Deal;

  typedef BidRequest_AdzInfo_Location Location;
  static const Location NA = BidRequest_AdzInfo_Location_NA;
  static const Location FIRST_VIEW = BidRequest_AdzInfo_Location_FIRST_VIEW;
  static const Location OTHER_VIEW = BidRequest_AdzInfo_Location_OTHER_VIEW;
  static inline bool Location_IsValid(int value) {
    return BidRequest_AdzInfo_Location_IsValid(value);
  }
  static const Location Location_MIN =
    BidRequest_AdzInfo_Location_Location_MIN;
  static const Location Location_MAX =
    BidRequest_AdzInfo_Location_Location_MAX;
  static const int Location_ARRAYSIZE =
    BidRequest_AdzInfo_Location_Location_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Location_descriptor() {
    return BidRequest_AdzInfo_Location_descriptor();
  }
  static inline const ::std::string& Location_Name(Location value) {
    return BidRequest_AdzInfo_Location_Name(value);
  }
  static inline bool Location_Parse(const ::std::string& name,
      Location* value) {
    return BidRequest_AdzInfo_Location_Parse(name, value);
  }

  typedef BidRequest_AdzInfo_ViewScreen ViewScreen;
  static const ViewScreen SCREEN_NA = BidRequest_AdzInfo_ViewScreen_SCREEN_NA;
  static const ViewScreen SCREEN_FIRST = BidRequest_AdzInfo_ViewScreen_SCREEN_FIRST;
  static const ViewScreen SCREEN_SECOND = BidRequest_AdzInfo_ViewScreen_SCREEN_SECOND;
  static const ViewScreen SCREEN_THIRD = BidRequest_AdzInfo_ViewScreen_SCREEN_THIRD;
  static const ViewScreen SCREEN_FOURTH = BidRequest_AdzInfo_ViewScreen_SCREEN_FOURTH;
  static const ViewScreen SCREEN_FIFTH = BidRequest_AdzInfo_ViewScreen_SCREEN_FIFTH;
  static const ViewScreen SCREEN_OTHER = BidRequest_AdzInfo_ViewScreen_SCREEN_OTHER;
  static inline bool ViewScreen_IsValid(int value) {
    return BidRequest_AdzInfo_ViewScreen_IsValid(value);
  }
  static const ViewScreen ViewScreen_MIN =
    BidRequest_AdzInfo_ViewScreen_ViewScreen_MIN;
  static const ViewScreen ViewScreen_MAX =
    BidRequest_AdzInfo_ViewScreen_ViewScreen_MAX;
  static const int ViewScreen_ARRAYSIZE =
    BidRequest_AdzInfo_ViewScreen_ViewScreen_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ViewScreen_descriptor() {
    return BidRequest_AdzInfo_ViewScreen_descriptor();
  }
  static inline const ::std::string& ViewScreen_Name(ViewScreen value) {
    return BidRequest_AdzInfo_ViewScreen_Name(value);
  }
  static inline bool ViewScreen_Parse(const ::std::string& name,
      ViewScreen* value) {
    return BidRequest_AdzInfo_ViewScreen_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline const ::std::string& pid() const;
  inline void set_pid(const ::std::string& value);
  inline void set_pid(const char* value);
  inline void set_pid(const char* value, size_t size);
  inline ::std::string* mutable_pid();
  inline ::std::string* release_pid();
  inline void set_allocated_pid(::std::string* pid);

  // optional string publisher_id = 11;
  inline bool has_publisher_id() const;
  inline void clear_publisher_id();
  static const int kPublisherIdFieldNumber = 11;
  inline const ::std::string& publisher_id() const;
  inline void set_publisher_id(const ::std::string& value);
  inline void set_publisher_id(const char* value);
  inline void set_publisher_id(const char* value, size_t size);
  inline ::std::string* mutable_publisher_id();
  inline ::std::string* release_publisher_id();
  inline void set_allocated_publisher_id(::std::string* publisher_id);

  // optional string size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline const ::std::string& size() const;
  inline void set_size(const ::std::string& value);
  inline void set_size(const char* value);
  inline void set_size(const char* value, size_t size);
  inline ::std::string* mutable_size();
  inline ::std::string* release_size();
  inline void set_allocated_size(::std::string* size);

  // optional uint32 ad_bid_count = 4 [default = 2];
  inline bool has_ad_bid_count() const;
  inline void clear_ad_bid_count();
  static const int kAdBidCountFieldNumber = 4;
  inline ::google::protobuf::uint32 ad_bid_count() const;
  inline void set_ad_bid_count(::google::protobuf::uint32 value);

  // repeated uint32 view_type = 5;
  inline int view_type_size() const;
  inline void clear_view_type();
  static const int kViewTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 view_type(int index) const;
  inline void set_view_type(int index, ::google::protobuf::uint32 value);
  inline void add_view_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      view_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_view_type();

  // repeated uint32 excluded_filter = 6;
  inline int excluded_filter_size() const;
  inline void clear_excluded_filter();
  static const int kExcludedFilterFieldNumber = 6;
  inline ::google::protobuf::uint32 excluded_filter(int index) const;
  inline void set_excluded_filter(int index, ::google::protobuf::uint32 value);
  inline void add_excluded_filter(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      excluded_filter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_excluded_filter();

  // optional uint32 min_cpm_price = 7;
  inline bool has_min_cpm_price() const;
  inline void clear_min_cpm_price();
  static const int kMinCpmPriceFieldNumber = 7;
  inline ::google::protobuf::uint32 min_cpm_price() const;
  inline void set_min_cpm_price(::google::protobuf::uint32 value);

  // optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
  inline bool has_adz_location() const;
  inline void clear_adz_location();
  static const int kAdzLocationFieldNumber = 8;
  inline ::Tanx::BidRequest_AdzInfo_Location adz_location() const;
  inline void set_adz_location(::Tanx::BidRequest_AdzInfo_Location value);

  // optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
  inline bool has_view_screen() const;
  inline void clear_view_screen();
  static const int kViewScreenFieldNumber = 9;
  inline ::Tanx::BidRequest_AdzInfo_ViewScreen view_screen() const;
  inline void set_view_screen(::Tanx::BidRequest_AdzInfo_ViewScreen value);

  // optional uint32 page_session_ad_idx = 10;
  inline bool has_page_session_ad_idx() const;
  inline void clear_page_session_ad_idx();
  static const int kPageSessionAdIdxFieldNumber = 10;
  inline ::google::protobuf::uint32 page_session_ad_idx() const;
  inline void set_page_session_ad_idx(::google::protobuf::uint32 value);

  // repeated uint32 api = 12;
  inline int api_size() const;
  inline void clear_api();
  static const int kApiFieldNumber = 12;
  inline ::google::protobuf::uint32 api(int index) const;
  inline void set_api(int index, ::google::protobuf::uint32 value);
  inline void add_api(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      api() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_api();

  // repeated .Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
  inline int buyer_rules_size() const;
  inline void clear_buyer_rules();
  static const int kBuyerRulesFieldNumber = 13;
  inline const ::Tanx::BidRequest_AdzInfo_BuyerRule& buyer_rules(int index) const;
  inline ::Tanx::BidRequest_AdzInfo_BuyerRule* mutable_buyer_rules(int index);
  inline ::Tanx::BidRequest_AdzInfo_BuyerRule* add_buyer_rules();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_BuyerRule >&
      buyer_rules() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_BuyerRule >*
      mutable_buyer_rules();

  // optional uint32 allowed_creative_level = 14;
  inline bool has_allowed_creative_level() const;
  inline void clear_allowed_creative_level();
  static const int kAllowedCreativeLevelFieldNumber = 14;
  inline ::google::protobuf::uint32 allowed_creative_level() const;
  inline void set_allowed_creative_level(::google::protobuf::uint32 value);

  // repeated string publisher_filter_id = 15;
  inline int publisher_filter_id_size() const;
  inline void clear_publisher_filter_id();
  static const int kPublisherFilterIdFieldNumber = 15;
  inline const ::std::string& publisher_filter_id(int index) const;
  inline ::std::string* mutable_publisher_filter_id(int index);
  inline void set_publisher_filter_id(int index, const ::std::string& value);
  inline void set_publisher_filter_id(int index, const char* value);
  inline void set_publisher_filter_id(int index, const char* value, size_t size);
  inline ::std::string* add_publisher_filter_id();
  inline void add_publisher_filter_id(const ::std::string& value);
  inline void add_publisher_filter_id(const char* value);
  inline void add_publisher_filter_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& publisher_filter_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_publisher_filter_id();

  // optional bool auto_expandable = 16 [default = false];
  inline bool has_auto_expandable() const;
  inline void clear_auto_expandable();
  static const int kAutoExpandableFieldNumber = 16;
  inline bool auto_expandable() const;
  inline void set_auto_expandable(bool value);

  // optional bool trigger_expandable = 17 [default = false];
  inline bool has_trigger_expandable() const;
  inline void clear_trigger_expandable();
  static const int kTriggerExpandableFieldNumber = 17;
  inline bool trigger_expandable() const;
  inline void set_trigger_expandable(bool value);

  // optional bool impression_repeatable = 18 [default = false];
  inline bool has_impression_repeatable() const;
  inline void clear_impression_repeatable();
  static const int kImpressionRepeatableFieldNumber = 18;
  inline bool impression_repeatable() const;
  inline void set_impression_repeatable(bool value);

  // optional .Tanx.BidRequest.AdzInfo.Video video = 19;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 19;
  inline const ::Tanx::BidRequest_AdzInfo_Video& video() const;
  inline ::Tanx::BidRequest_AdzInfo_Video* mutable_video();
  inline ::Tanx::BidRequest_AdzInfo_Video* release_video();
  inline void set_allocated_video(::Tanx::BidRequest_AdzInfo_Video* video);

  // optional string campaign_date = 20;
  inline bool has_campaign_date() const;
  inline void clear_campaign_date();
  static const int kCampaignDateFieldNumber = 20;
  inline const ::std::string& campaign_date() const;
  inline void set_campaign_date(const ::std::string& value);
  inline void set_campaign_date(const char* value);
  inline void set_campaign_date(const char* value, size_t size);
  inline ::std::string* mutable_campaign_date();
  inline ::std::string* release_campaign_date();
  inline void set_allocated_campaign_date(::std::string* campaign_date);

  // repeated .Tanx.BidRequest.AdzInfo.Deal deals = 21;
  inline int deals_size() const;
  inline void clear_deals();
  static const int kDealsFieldNumber = 21;
  inline const ::Tanx::BidRequest_AdzInfo_Deal& deals(int index) const;
  inline ::Tanx::BidRequest_AdzInfo_Deal* mutable_deals(int index);
  inline ::Tanx::BidRequest_AdzInfo_Deal* add_deals();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_Deal >&
      deals() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_Deal >*
      mutable_deals();

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.AdzInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_publisher_id();
  inline void clear_has_publisher_id();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_ad_bid_count();
  inline void clear_has_ad_bid_count();
  inline void set_has_min_cpm_price();
  inline void clear_has_min_cpm_price();
  inline void set_has_adz_location();
  inline void clear_has_adz_location();
  inline void set_has_view_screen();
  inline void clear_has_view_screen();
  inline void set_has_page_session_ad_idx();
  inline void clear_has_page_session_ad_idx();
  inline void set_has_allowed_creative_level();
  inline void clear_has_allowed_creative_level();
  inline void set_has_auto_expandable();
  inline void clear_has_auto_expandable();
  inline void set_has_trigger_expandable();
  inline void clear_has_trigger_expandable();
  inline void set_has_impression_repeatable();
  inline void clear_has_impression_repeatable();
  inline void set_has_video();
  inline void clear_has_video();
  inline void set_has_campaign_date();
  inline void clear_has_campaign_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pid_;
  ::std::string* publisher_id_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 ad_bid_count_;
  ::std::string* size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > view_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > excluded_filter_;
  ::google::protobuf::uint32 min_cpm_price_;
  int adz_location_;
  int view_screen_;
  ::google::protobuf::uint32 page_session_ad_idx_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > api_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_BuyerRule > buyer_rules_;
  ::google::protobuf::RepeatedPtrField< ::std::string> publisher_filter_id_;
  ::google::protobuf::uint32 allowed_creative_level_;
  bool auto_expandable_;
  bool trigger_expandable_;
  bool impression_repeatable_;
  ::Tanx::BidRequest_AdzInfo_Video* video_;
  ::std::string* campaign_date_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_Deal > deals_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdzInfo* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_UserAttribute : public ::google::protobuf::Message {
 public:
  BidRequest_UserAttribute();
  virtual ~BidRequest_UserAttribute();

  BidRequest_UserAttribute(const BidRequest_UserAttribute& from);

  inline BidRequest_UserAttribute& operator=(const BidRequest_UserAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_UserAttribute& default_instance();

  void Swap(BidRequest_UserAttribute* other);

  // implements Message ----------------------------------------------

  BidRequest_UserAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_UserAttribute& from);
  void MergeFrom(const BidRequest_UserAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.UserAttribute)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 timestamp_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_UserAttribute* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_PrivateInfo : public ::google::protobuf::Message {
 public:
  BidRequest_PrivateInfo();
  virtual ~BidRequest_PrivateInfo();

  BidRequest_PrivateInfo(const BidRequest_PrivateInfo& from);

  inline BidRequest_PrivateInfo& operator=(const BidRequest_PrivateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_PrivateInfo& default_instance();

  void Swap(BidRequest_PrivateInfo* other);

  // implements Message ----------------------------------------------

  BidRequest_PrivateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_PrivateInfo& from);
  void MergeFrom(const BidRequest_PrivateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tanx_cnaui = 1;
  inline bool has_tanx_cnaui() const;
  inline void clear_tanx_cnaui();
  static const int kTanxCnauiFieldNumber = 1;
  inline const ::std::string& tanx_cnaui() const;
  inline void set_tanx_cnaui(const ::std::string& value);
  inline void set_tanx_cnaui(const char* value);
  inline void set_tanx_cnaui(const char* value, size_t size);
  inline ::std::string* mutable_tanx_cnaui();
  inline ::std::string* release_tanx_cnaui();
  inline void set_allocated_tanx_cnaui(::std::string* tanx_cnaui);

  // optional string risk_control = 2;
  inline bool has_risk_control() const;
  inline void clear_risk_control();
  static const int kRiskControlFieldNumber = 2;
  inline const ::std::string& risk_control() const;
  inline void set_risk_control(const ::std::string& value);
  inline void set_risk_control(const char* value);
  inline void set_risk_control(const char* value, size_t size);
  inline ::std::string* mutable_risk_control();
  inline ::std::string* release_risk_control();
  inline void set_allocated_risk_control(::std::string* risk_control);

  // optional string nick_name = 3;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.PrivateInfo)
 private:
  inline void set_has_tanx_cnaui();
  inline void clear_has_tanx_cnaui();
  inline void set_has_risk_control();
  inline void clear_has_risk_control();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tanx_cnaui_;
  ::std::string* risk_control_;
  ::std::string* nick_name_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_PrivateInfo* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile_Device : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile_Device();
  virtual ~BidRequest_Mobile_Device();

  BidRequest_Mobile_Device(const BidRequest_Mobile_Device& from);

  inline BidRequest_Mobile_Device& operator=(const BidRequest_Mobile_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile_Device& default_instance();

  void Swap(BidRequest_Mobile_Device* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile_Device& from);
  void MergeFrom(const BidRequest_Mobile_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Mobile_Device_ScreenOrientation ScreenOrientation;
  static const ScreenOrientation SCREEN_ORIENTATION_UNKNOWN = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_UNKNOWN;
  static const ScreenOrientation SCREEN_ORIENTATION_PORTRAIT = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_PORTRAIT;
  static const ScreenOrientation SCREEN_ORIENTATION_LANDSCAPE = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_LANDSCAPE;
  static inline bool ScreenOrientation_IsValid(int value) {
    return BidRequest_Mobile_Device_ScreenOrientation_IsValid(value);
  }
  static const ScreenOrientation ScreenOrientation_MIN =
    BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MIN;
  static const ScreenOrientation ScreenOrientation_MAX =
    BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MAX;
  static const int ScreenOrientation_ARRAYSIZE =
    BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScreenOrientation_descriptor() {
    return BidRequest_Mobile_Device_ScreenOrientation_descriptor();
  }
  static inline const ::std::string& ScreenOrientation_Name(ScreenOrientation value) {
    return BidRequest_Mobile_Device_ScreenOrientation_Name(value);
  }
  static inline bool ScreenOrientation_Parse(const ::std::string& name,
      ScreenOrientation* value) {
    return BidRequest_Mobile_Device_ScreenOrientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string platform = 1;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 1;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string brand = 2;
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 2;
  inline const ::std::string& brand() const;
  inline void set_brand(const ::std::string& value);
  inline void set_brand(const char* value);
  inline void set_brand(const char* value, size_t size);
  inline ::std::string* mutable_brand();
  inline ::std::string* release_brand();
  inline void set_allocated_brand(::std::string* brand);

  // optional string model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string os = 4;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 4;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // optional string os_version = 5;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 5;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  inline void set_allocated_os_version(::std::string* os_version);

  // optional uint32 network = 6;
  inline bool has_network() const;
  inline void clear_network();
  static const int kNetworkFieldNumber = 6;
  inline ::google::protobuf::uint32 network() const;
  inline void set_network(::google::protobuf::uint32 value);

  // optional int32 operator = 7;
  inline bool has_operator_() const;
  inline void clear_operator_();
  static const int kOperatorFieldNumber = 7;
  inline ::google::protobuf::int32 operator_() const;
  inline void set_operator_(::google::protobuf::int32 value);

  // optional string longitude = 8;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 8;
  inline const ::std::string& longitude() const;
  inline void set_longitude(const ::std::string& value);
  inline void set_longitude(const char* value);
  inline void set_longitude(const char* value, size_t size);
  inline ::std::string* mutable_longitude();
  inline ::std::string* release_longitude();
  inline void set_allocated_longitude(::std::string* longitude);

  // optional string latitude = 9;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 9;
  inline const ::std::string& latitude() const;
  inline void set_latitude(const ::std::string& value);
  inline void set_latitude(const char* value);
  inline void set_latitude(const char* value, size_t size);
  inline ::std::string* mutable_latitude();
  inline ::std::string* release_latitude();
  inline void set_allocated_latitude(::std::string* latitude);

  // optional string device_size = 10;
  inline bool has_device_size() const;
  inline void clear_device_size();
  static const int kDeviceSizeFieldNumber = 10;
  inline const ::std::string& device_size() const;
  inline void set_device_size(const ::std::string& value);
  inline void set_device_size(const char* value);
  inline void set_device_size(const char* value, size_t size);
  inline ::std::string* mutable_device_size();
  inline ::std::string* release_device_size();
  inline void set_allocated_device_size(::std::string* device_size);

  // optional string device_id = 11;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 11;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional int32 device_pixel_ratio = 12 [default = 1000];
  inline bool has_device_pixel_ratio() const;
  inline void clear_device_pixel_ratio();
  static const int kDevicePixelRatioFieldNumber = 12;
  inline ::google::protobuf::int32 device_pixel_ratio() const;
  inline void set_device_pixel_ratio(::google::protobuf::int32 value);

  // optional .Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
  inline bool has_screen_orientation() const;
  inline void clear_screen_orientation();
  static const int kScreenOrientationFieldNumber = 13;
  inline ::Tanx::BidRequest_Mobile_Device_ScreenOrientation screen_orientation() const;
  inline void set_screen_orientation(::Tanx::BidRequest_Mobile_Device_ScreenOrientation value);

  // optional string android_id = 14;
  inline bool has_android_id() const;
  inline void clear_android_id();
  static const int kAndroidIdFieldNumber = 14;
  inline const ::std::string& android_id() const;
  inline void set_android_id(const ::std::string& value);
  inline void set_android_id(const char* value);
  inline void set_android_id(const char* value, size_t size);
  inline ::std::string* mutable_android_id();
  inline ::std::string* release_android_id();
  inline void set_allocated_android_id(::std::string* android_id);

  // optional string idfa = 15;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 15;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  inline void set_allocated_idfa(::std::string* idfa);

  // optional string imei = 16;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 16;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // optional string mac = 17;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 17;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Mobile.Device)
 private:
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_operator_();
  inline void clear_has_operator_();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_device_size();
  inline void clear_has_device_size();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_device_pixel_ratio();
  inline void clear_has_device_pixel_ratio();
  inline void set_has_screen_orientation();
  inline void clear_has_screen_orientation();
  inline void set_has_android_id();
  inline void clear_has_android_id();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_mac();
  inline void clear_has_mac();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* platform_;
  ::std::string* brand_;
  ::std::string* model_;
  ::std::string* os_;
  ::std::string* os_version_;
  ::google::protobuf::uint32 network_;
  ::google::protobuf::int32 operator__;
  ::std::string* longitude_;
  ::std::string* latitude_;
  ::std::string* device_size_;
  ::std::string* device_id_;
  ::google::protobuf::int32 device_pixel_ratio_;
  int screen_orientation_;
  ::std::string* android_id_;
  ::std::string* idfa_;
  ::std::string* imei_;
  ::std::string* mac_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile_Device* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile_AppCategory : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile_AppCategory();
  virtual ~BidRequest_Mobile_AppCategory();

  BidRequest_Mobile_AppCategory(const BidRequest_Mobile_AppCategory& from);

  inline BidRequest_Mobile_AppCategory& operator=(const BidRequest_Mobile_AppCategory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile_AppCategory& default_instance();

  void Swap(BidRequest_Mobile_AppCategory* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile_AppCategory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile_AppCategory& from);
  void MergeFrom(const BidRequest_Mobile_AppCategory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 confidence_level = 2;
  inline bool has_confidence_level() const;
  inline void clear_confidence_level();
  static const int kConfidenceLevelFieldNumber = 2;
  inline ::google::protobuf::int32 confidence_level() const;
  inline void set_confidence_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Mobile.AppCategory)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_confidence_level();
  inline void clear_has_confidence_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 confidence_level_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile_AppCategory* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile_NativeAdTemplate_Area_Creative : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile_NativeAdTemplate_Area_Creative();
  virtual ~BidRequest_Mobile_NativeAdTemplate_Area_Creative();

  BidRequest_Mobile_NativeAdTemplate_Area_Creative(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from);

  inline BidRequest_Mobile_NativeAdTemplate_Area_Creative& operator=(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile_NativeAdTemplate_Area_Creative& default_instance();

  void Swap(BidRequest_Mobile_NativeAdTemplate_Area_Creative* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile_NativeAdTemplate_Area_Creative* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from);
  void MergeFrom(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 required_fields = 1;
  inline int required_fields_size() const;
  inline void clear_required_fields();
  static const int kRequiredFieldsFieldNumber = 1;
  inline ::google::protobuf::int32 required_fields(int index) const;
  inline void set_required_fields(int index, ::google::protobuf::int32 value);
  inline void add_required_fields(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      required_fields() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_required_fields();

  // repeated int32 recommended_fields = 2;
  inline int recommended_fields_size() const;
  inline void clear_recommended_fields();
  static const int kRecommendedFieldsFieldNumber = 2;
  inline ::google::protobuf::int32 recommended_fields(int index) const;
  inline void set_recommended_fields(int index, ::google::protobuf::int32 value);
  inline void add_recommended_fields(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recommended_fields() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recommended_fields();

  // optional int32 title_max_safe_length = 3;
  inline bool has_title_max_safe_length() const;
  inline void clear_title_max_safe_length();
  static const int kTitleMaxSafeLengthFieldNumber = 3;
  inline ::google::protobuf::int32 title_max_safe_length() const;
  inline void set_title_max_safe_length(::google::protobuf::int32 value);

  // optional int32 ad_words_max_safe_length = 4;
  inline bool has_ad_words_max_safe_length() const;
  inline void clear_ad_words_max_safe_length();
  static const int kAdWordsMaxSafeLengthFieldNumber = 4;
  inline ::google::protobuf::int32 ad_words_max_safe_length() const;
  inline void set_ad_words_max_safe_length(::google::protobuf::int32 value);

  // optional string image_size = 5;
  inline bool has_image_size() const;
  inline void clear_image_size();
  static const int kImageSizeFieldNumber = 5;
  inline const ::std::string& image_size() const;
  inline void set_image_size(const ::std::string& value);
  inline void set_image_size(const char* value);
  inline void set_image_size(const char* value, size_t size);
  inline ::std::string* mutable_image_size();
  inline ::std::string* release_image_size();
  inline void set_allocated_image_size(::std::string* image_size);

  // repeated int32 action_fields = 6;
  inline int action_fields_size() const;
  inline void clear_action_fields();
  static const int kActionFieldsFieldNumber = 6;
  inline ::google::protobuf::int32 action_fields(int index) const;
  inline void set_action_fields(int index, ::google::protobuf::int32 value);
  inline void add_action_fields(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      action_fields() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_action_fields();

  // repeated int32 multichoice_fields = 7;
  inline int multichoice_fields_size() const;
  inline void clear_multichoice_fields();
  static const int kMultichoiceFieldsFieldNumber = 7;
  inline ::google::protobuf::int32 multichoice_fields(int index) const;
  inline void set_multichoice_fields(int index, ::google::protobuf::int32 value);
  inline void add_multichoice_fields(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      multichoice_fields() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_multichoice_fields();

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
 private:
  inline void set_has_title_max_safe_length();
  inline void clear_has_title_max_safe_length();
  inline void set_has_ad_words_max_safe_length();
  inline void clear_has_ad_words_max_safe_length();
  inline void set_has_image_size();
  inline void clear_has_image_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > required_fields_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recommended_fields_;
  ::google::protobuf::int32 title_max_safe_length_;
  ::google::protobuf::int32 ad_words_max_safe_length_;
  ::std::string* image_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > action_fields_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > multichoice_fields_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile_NativeAdTemplate_Area_Creative* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile_NativeAdTemplate_Area : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile_NativeAdTemplate_Area();
  virtual ~BidRequest_Mobile_NativeAdTemplate_Area();

  BidRequest_Mobile_NativeAdTemplate_Area(const BidRequest_Mobile_NativeAdTemplate_Area& from);

  inline BidRequest_Mobile_NativeAdTemplate_Area& operator=(const BidRequest_Mobile_NativeAdTemplate_Area& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile_NativeAdTemplate_Area& default_instance();

  void Swap(BidRequest_Mobile_NativeAdTemplate_Area* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile_NativeAdTemplate_Area* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile_NativeAdTemplate_Area& from);
  void MergeFrom(const BidRequest_Mobile_NativeAdTemplate_Area& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Mobile_NativeAdTemplate_Area_Creative Creative;

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 creative_count = 2;
  inline bool has_creative_count() const;
  inline void clear_creative_count();
  static const int kCreativeCountFieldNumber = 2;
  inline ::google::protobuf::int32 creative_count() const;
  inline void set_creative_count(::google::protobuf::int32 value);

  // optional .Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
  inline bool has_creative() const;
  inline void clear_creative();
  static const int kCreativeFieldNumber = 3;
  inline const ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative& creative() const;
  inline ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* mutable_creative();
  inline ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* release_creative();
  inline void set_allocated_creative(::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* creative);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_creative_count();
  inline void clear_has_creative_count();
  inline void set_has_creative();
  inline void clear_has_creative();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 creative_count_;
  ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* creative_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile_NativeAdTemplate_Area* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile_NativeAdTemplate : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile_NativeAdTemplate();
  virtual ~BidRequest_Mobile_NativeAdTemplate();

  BidRequest_Mobile_NativeAdTemplate(const BidRequest_Mobile_NativeAdTemplate& from);

  inline BidRequest_Mobile_NativeAdTemplate& operator=(const BidRequest_Mobile_NativeAdTemplate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile_NativeAdTemplate& default_instance();

  void Swap(BidRequest_Mobile_NativeAdTemplate* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile_NativeAdTemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile_NativeAdTemplate& from);
  void MergeFrom(const BidRequest_Mobile_NativeAdTemplate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Mobile_NativeAdTemplate_Area Area;

  // accessors -------------------------------------------------------

  // required string native_template_id = 1;
  inline bool has_native_template_id() const;
  inline void clear_native_template_id();
  static const int kNativeTemplateIdFieldNumber = 1;
  inline const ::std::string& native_template_id() const;
  inline void set_native_template_id(const ::std::string& value);
  inline void set_native_template_id(const char* value);
  inline void set_native_template_id(const char* value, size_t size);
  inline ::std::string* mutable_native_template_id();
  inline ::std::string* release_native_template_id();
  inline void set_allocated_native_template_id(::std::string* native_template_id);

  // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
  inline int areas_size() const;
  inline void clear_areas();
  static const int kAreasFieldNumber = 2;
  inline const ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area& areas(int index) const;
  inline ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area* mutable_areas(int index);
  inline ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area* add_areas();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area >&
      areas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area >*
      mutable_areas();

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Mobile.NativeAdTemplate)
 private:
  inline void set_has_native_template_id();
  inline void clear_has_native_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* native_template_id_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area > areas_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile_NativeAdTemplate* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile();
  virtual ~BidRequest_Mobile();

  BidRequest_Mobile(const BidRequest_Mobile& from);

  inline BidRequest_Mobile& operator=(const BidRequest_Mobile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile& default_instance();

  void Swap(BidRequest_Mobile* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile& from);
  void MergeFrom(const BidRequest_Mobile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Mobile_Device Device;
  typedef BidRequest_Mobile_AppCategory AppCategory;
  typedef BidRequest_Mobile_NativeAdTemplate NativeAdTemplate;

  // accessors -------------------------------------------------------

  // optional bool is_app = 1;
  inline bool has_is_app() const;
  inline void clear_is_app();
  static const int kIsAppFieldNumber = 1;
  inline bool is_app() const;
  inline void set_is_app(bool value);

  // optional uint32 ad_num = 2;
  inline bool has_ad_num() const;
  inline void clear_ad_num();
  static const int kAdNumFieldNumber = 2;
  inline ::google::protobuf::uint32 ad_num() const;
  inline void set_ad_num(::google::protobuf::uint32 value);

  // repeated string ad_keyword = 3;
  inline int ad_keyword_size() const;
  inline void clear_ad_keyword();
  static const int kAdKeywordFieldNumber = 3;
  inline const ::std::string& ad_keyword(int index) const;
  inline ::std::string* mutable_ad_keyword(int index);
  inline void set_ad_keyword(int index, const ::std::string& value);
  inline void set_ad_keyword(int index, const char* value);
  inline void set_ad_keyword(int index, const char* value, size_t size);
  inline ::std::string* add_ad_keyword();
  inline void add_ad_keyword(const ::std::string& value);
  inline void add_ad_keyword(const char* value);
  inline void add_ad_keyword(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ad_keyword() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ad_keyword();

  // optional bool is_fullscreen = 4;
  inline bool has_is_fullscreen() const;
  inline void clear_is_fullscreen();
  static const int kIsFullscreenFieldNumber = 4;
  inline bool is_fullscreen() const;
  inline void set_is_fullscreen(bool value);

  // optional string package_name = 5;
  inline bool has_package_name() const;
  inline void clear_package_name();
  static const int kPackageNameFieldNumber = 5;
  inline const ::std::string& package_name() const;
  inline void set_package_name(const ::std::string& value);
  inline void set_package_name(const char* value);
  inline void set_package_name(const char* value, size_t size);
  inline ::std::string* mutable_package_name();
  inline ::std::string* release_package_name();
  inline void set_allocated_package_name(::std::string* package_name);

  // optional .Tanx.BidRequest.Mobile.Device device = 6;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 6;
  inline const ::Tanx::BidRequest_Mobile_Device& device() const;
  inline ::Tanx::BidRequest_Mobile_Device* mutable_device();
  inline ::Tanx::BidRequest_Mobile_Device* release_device();
  inline void set_allocated_device(::Tanx::BidRequest_Mobile_Device* device);

  // repeated string native_template_id = 7;
  inline int native_template_id_size() const;
  inline void clear_native_template_id();
  static const int kNativeTemplateIdFieldNumber = 7;
  inline const ::std::string& native_template_id(int index) const;
  inline ::std::string* mutable_native_template_id(int index);
  inline void set_native_template_id(int index, const ::std::string& value);
  inline void set_native_template_id(int index, const char* value);
  inline void set_native_template_id(int index, const char* value, size_t size);
  inline ::std::string* add_native_template_id();
  inline void add_native_template_id(const ::std::string& value);
  inline void add_native_template_id(const char* value);
  inline void add_native_template_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& native_template_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_native_template_id();

  // repeated int32 landing_type = 8;
  inline int landing_type_size() const;
  inline void clear_landing_type();
  static const int kLandingTypeFieldNumber = 8;
  inline ::google::protobuf::int32 landing_type(int index) const;
  inline void set_landing_type(int index, ::google::protobuf::int32 value);
  inline void add_landing_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      landing_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_landing_type();

  // optional string app_name = 9;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 9;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const char* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // repeated .Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
  inline int app_categories_size() const;
  inline void clear_app_categories();
  static const int kAppCategoriesFieldNumber = 10;
  inline const ::Tanx::BidRequest_Mobile_AppCategory& app_categories(int index) const;
  inline ::Tanx::BidRequest_Mobile_AppCategory* mutable_app_categories(int index);
  inline ::Tanx::BidRequest_Mobile_AppCategory* add_app_categories();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_AppCategory >&
      app_categories() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_AppCategory >*
      mutable_app_categories();

  // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
  inline int native_ad_template_size() const;
  inline void clear_native_ad_template();
  static const int kNativeAdTemplateFieldNumber = 11;
  inline const ::Tanx::BidRequest_Mobile_NativeAdTemplate& native_ad_template(int index) const;
  inline ::Tanx::BidRequest_Mobile_NativeAdTemplate* mutable_native_ad_template(int index);
  inline ::Tanx::BidRequest_Mobile_NativeAdTemplate* add_native_ad_template();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate >&
      native_ad_template() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate >*
      mutable_native_ad_template();

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Mobile)
 private:
  inline void set_has_is_app();
  inline void clear_has_is_app();
  inline void set_has_ad_num();
  inline void clear_has_ad_num();
  inline void set_has_is_fullscreen();
  inline void clear_has_is_fullscreen();
  inline void set_has_package_name();
  inline void clear_has_package_name();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_app_name();
  inline void clear_has_app_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ad_num_;
  bool is_app_;
  bool is_fullscreen_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ad_keyword_;
  ::std::string* package_name_;
  ::Tanx::BidRequest_Mobile_Device* device_;
  ::google::protobuf::RepeatedPtrField< ::std::string> native_template_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > landing_type_;
  ::std::string* app_name_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_AppCategory > app_categories_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate > native_ad_template_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_ContentCategory : public ::google::protobuf::Message {
 public:
  BidRequest_ContentCategory();
  virtual ~BidRequest_ContentCategory();

  BidRequest_ContentCategory(const BidRequest_ContentCategory& from);

  inline BidRequest_ContentCategory& operator=(const BidRequest_ContentCategory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_ContentCategory& default_instance();

  void Swap(BidRequest_ContentCategory* other);

  // implements Message ----------------------------------------------

  BidRequest_ContentCategory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_ContentCategory& from);
  void MergeFrom(const BidRequest_ContentCategory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 confidence_level = 2;
  inline bool has_confidence_level() const;
  inline void clear_confidence_level();
  static const int kConfidenceLevelFieldNumber = 2;
  inline ::google::protobuf::int32 confidence_level() const;
  inline void set_confidence_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.ContentCategory)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_confidence_level();
  inline void clear_has_confidence_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 confidence_level_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_ContentCategory* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Video_Content : public ::google::protobuf::Message {
 public:
  BidRequest_Video_Content();
  virtual ~BidRequest_Video_Content();

  BidRequest_Video_Content(const BidRequest_Video_Content& from);

  inline BidRequest_Video_Content& operator=(const BidRequest_Video_Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Video_Content& default_instance();

  void Swap(BidRequest_Video_Content* other);

  // implements Message ----------------------------------------------

  BidRequest_Video_Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Video_Content& from);
  void MergeFrom(const BidRequest_Video_Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // repeated string keywords = 3;
  inline int keywords_size() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 3;
  inline const ::std::string& keywords(int index) const;
  inline ::std::string* mutable_keywords(int index);
  inline void set_keywords(int index, const ::std::string& value);
  inline void set_keywords(int index, const char* value);
  inline void set_keywords(int index, const char* value, size_t size);
  inline ::std::string* add_keywords();
  inline void add_keywords(const ::std::string& value);
  inline void add_keywords(const char* value);
  inline void add_keywords(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keywords() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keywords();

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Video.Content)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_duration();
  inline void clear_has_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keywords_;
  ::google::protobuf::int32 duration_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Video_Content* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Video : public ::google::protobuf::Message {
 public:
  BidRequest_Video();
  virtual ~BidRequest_Video();

  BidRequest_Video(const BidRequest_Video& from);

  inline BidRequest_Video& operator=(const BidRequest_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Video& default_instance();

  void Swap(BidRequest_Video* other);

  // implements Message ----------------------------------------------

  BidRequest_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Video& from);
  void MergeFrom(const BidRequest_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Video_Content Content;

  typedef BidRequest_Video_VideoFormat VideoFormat;
  static const VideoFormat VIDEO_FLASH = BidRequest_Video_VideoFormat_VIDEO_FLASH;
  static const VideoFormat VIDEO_HTML5 = BidRequest_Video_VideoFormat_VIDEO_HTML5;
  static inline bool VideoFormat_IsValid(int value) {
    return BidRequest_Video_VideoFormat_IsValid(value);
  }
  static const VideoFormat VideoFormat_MIN =
    BidRequest_Video_VideoFormat_VideoFormat_MIN;
  static const VideoFormat VideoFormat_MAX =
    BidRequest_Video_VideoFormat_VideoFormat_MAX;
  static const int VideoFormat_ARRAYSIZE =
    BidRequest_Video_VideoFormat_VideoFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoFormat_descriptor() {
    return BidRequest_Video_VideoFormat_descriptor();
  }
  static inline const ::std::string& VideoFormat_Name(VideoFormat value) {
    return BidRequest_Video_VideoFormat_Name(value);
  }
  static inline bool VideoFormat_Parse(const ::std::string& name,
      VideoFormat* value) {
    return BidRequest_Video_VideoFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
  inline int video_format_size() const;
  inline void clear_video_format();
  static const int kVideoFormatFieldNumber = 1;
  inline ::Tanx::BidRequest_Video_VideoFormat video_format(int index) const;
  inline void set_video_format(int index, ::Tanx::BidRequest_Video_VideoFormat value);
  inline void add_video_format(::Tanx::BidRequest_Video_VideoFormat value);
  inline const ::google::protobuf::RepeatedField<int>& video_format() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_video_format();

  // optional .Tanx.BidRequest.Video.Content content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::Tanx::BidRequest_Video_Content& content() const;
  inline ::Tanx::BidRequest_Video_Content* mutable_content();
  inline ::Tanx::BidRequest_Video_Content* release_content();
  inline void set_allocated_content(::Tanx::BidRequest_Video_Content* content);

  // optional int32 videoad_start_delay = 3;
  inline bool has_videoad_start_delay() const;
  inline void clear_videoad_start_delay();
  static const int kVideoadStartDelayFieldNumber = 3;
  inline ::google::protobuf::int32 videoad_start_delay() const;
  inline void set_videoad_start_delay(::google::protobuf::int32 value);

  // optional int32 videoad_section_start_delay = 4;
  inline bool has_videoad_section_start_delay() const;
  inline void clear_videoad_section_start_delay();
  static const int kVideoadSectionStartDelayFieldNumber = 4;
  inline ::google::protobuf::int32 videoad_section_start_delay() const;
  inline void set_videoad_section_start_delay(::google::protobuf::int32 value);

  // optional int32 min_ad_duration = 5;
  inline bool has_min_ad_duration() const;
  inline void clear_min_ad_duration();
  static const int kMinAdDurationFieldNumber = 5;
  inline ::google::protobuf::int32 min_ad_duration() const;
  inline void set_min_ad_duration(::google::protobuf::int32 value);

  // optional int32 max_ad_duration = 6;
  inline bool has_max_ad_duration() const;
  inline void clear_max_ad_duration();
  static const int kMaxAdDurationFieldNumber = 6;
  inline ::google::protobuf::int32 max_ad_duration() const;
  inline void set_max_ad_duration(::google::protobuf::int32 value);

  // optional string protocol = 7;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 7;
  inline const ::std::string& protocol() const;
  inline void set_protocol(const ::std::string& value);
  inline void set_protocol(const char* value);
  inline void set_protocol(const char* value, size_t size);
  inline ::std::string* mutable_protocol();
  inline ::std::string* release_protocol();
  inline void set_allocated_protocol(::std::string* protocol);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Video)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_videoad_start_delay();
  inline void clear_has_videoad_start_delay();
  inline void set_has_videoad_section_start_delay();
  inline void clear_has_videoad_section_start_delay();
  inline void set_has_min_ad_duration();
  inline void clear_has_min_ad_duration();
  inline void set_has_max_ad_duration();
  inline void clear_has_max_ad_duration();
  inline void set_has_protocol();
  inline void clear_has_protocol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> video_format_;
  ::Tanx::BidRequest_Video_Content* content_;
  ::google::protobuf::int32 videoad_start_delay_;
  ::google::protobuf::int32 videoad_section_start_delay_;
  ::google::protobuf::int32 min_ad_duration_;
  ::google::protobuf::int32 max_ad_duration_;
  ::std::string* protocol_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Video* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Deal_PreferredDeal : public ::google::protobuf::Message {
 public:
  BidRequest_Deal_PreferredDeal();
  virtual ~BidRequest_Deal_PreferredDeal();

  BidRequest_Deal_PreferredDeal(const BidRequest_Deal_PreferredDeal& from);

  inline BidRequest_Deal_PreferredDeal& operator=(const BidRequest_Deal_PreferredDeal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Deal_PreferredDeal& default_instance();

  void Swap(BidRequest_Deal_PreferredDeal* other);

  // implements Message ----------------------------------------------

  BidRequest_Deal_PreferredDeal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Deal_PreferredDeal& from);
  void MergeFrom(const BidRequest_Deal_PreferredDeal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dealid = 1;
  inline bool has_dealid() const;
  inline void clear_dealid();
  static const int kDealidFieldNumber = 1;
  inline ::google::protobuf::uint32 dealid() const;
  inline void set_dealid(::google::protobuf::uint32 value);

  // repeated uint32 advertiser_ids = 2;
  inline int advertiser_ids_size() const;
  inline void clear_advertiser_ids();
  static const int kAdvertiserIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 advertiser_ids(int index) const;
  inline void set_advertiser_ids(int index, ::google::protobuf::uint32 value);
  inline void add_advertiser_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      advertiser_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_advertiser_ids();

  // optional uint32 fix_cpm_price = 3;
  inline bool has_fix_cpm_price() const;
  inline void clear_fix_cpm_price();
  static const int kFixCpmPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 fix_cpm_price() const;
  inline void set_fix_cpm_price(::google::protobuf::uint32 value);

  // optional bool is_direct_buy = 4 [default = false];
  inline bool has_is_direct_buy() const;
  inline void clear_is_direct_buy();
  static const int kIsDirectBuyFieldNumber = 4;
  inline bool is_direct_buy() const;
  inline void set_is_direct_buy(bool value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Deal.PreferredDeal)
 private:
  inline void set_has_dealid();
  inline void clear_has_dealid();
  inline void set_has_fix_cpm_price();
  inline void clear_has_fix_cpm_price();
  inline void set_has_is_direct_buy();
  inline void clear_has_is_direct_buy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > advertiser_ids_;
  ::google::protobuf::uint32 dealid_;
  ::google::protobuf::uint32 fix_cpm_price_;
  bool is_direct_buy_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Deal_PreferredDeal* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Deal_PrivateAuction_BuyerRule : public ::google::protobuf::Message {
 public:
  BidRequest_Deal_PrivateAuction_BuyerRule();
  virtual ~BidRequest_Deal_PrivateAuction_BuyerRule();

  BidRequest_Deal_PrivateAuction_BuyerRule(const BidRequest_Deal_PrivateAuction_BuyerRule& from);

  inline BidRequest_Deal_PrivateAuction_BuyerRule& operator=(const BidRequest_Deal_PrivateAuction_BuyerRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Deal_PrivateAuction_BuyerRule& default_instance();

  void Swap(BidRequest_Deal_PrivateAuction_BuyerRule* other);

  // implements Message ----------------------------------------------

  BidRequest_Deal_PrivateAuction_BuyerRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Deal_PrivateAuction_BuyerRule& from);
  void MergeFrom(const BidRequest_Deal_PrivateAuction_BuyerRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 advertiser_ids = 1;
  inline int advertiser_ids_size() const;
  inline void clear_advertiser_ids();
  static const int kAdvertiserIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 advertiser_ids(int index) const;
  inline void set_advertiser_ids(int index, ::google::protobuf::uint32 value);
  inline void add_advertiser_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      advertiser_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_advertiser_ids();

  // optional uint32 min_cpm_price = 2;
  inline bool has_min_cpm_price() const;
  inline void clear_min_cpm_price();
  static const int kMinCpmPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 min_cpm_price() const;
  inline void set_min_cpm_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
 private:
  inline void set_has_min_cpm_price();
  inline void clear_has_min_cpm_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > advertiser_ids_;
  ::google::protobuf::uint32 min_cpm_price_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Deal_PrivateAuction_BuyerRule* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Deal_PrivateAuction : public ::google::protobuf::Message {
 public:
  BidRequest_Deal_PrivateAuction();
  virtual ~BidRequest_Deal_PrivateAuction();

  BidRequest_Deal_PrivateAuction(const BidRequest_Deal_PrivateAuction& from);

  inline BidRequest_Deal_PrivateAuction& operator=(const BidRequest_Deal_PrivateAuction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Deal_PrivateAuction& default_instance();

  void Swap(BidRequest_Deal_PrivateAuction* other);

  // implements Message ----------------------------------------------

  BidRequest_Deal_PrivateAuction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Deal_PrivateAuction& from);
  void MergeFrom(const BidRequest_Deal_PrivateAuction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Deal_PrivateAuction_BuyerRule BuyerRule;

  // accessors -------------------------------------------------------

  // required uint32 dealid = 1;
  inline bool has_dealid() const;
  inline void clear_dealid();
  static const int kDealidFieldNumber = 1;
  inline ::google::protobuf::uint32 dealid() const;
  inline void set_dealid(::google::protobuf::uint32 value);

  // repeated .Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
  inline int buyer_rules_size() const;
  inline void clear_buyer_rules();
  static const int kBuyerRulesFieldNumber = 2;
  inline const ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule& buyer_rules(int index) const;
  inline ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule* mutable_buyer_rules(int index);
  inline ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule* add_buyer_rules();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule >&
      buyer_rules() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule >*
      mutable_buyer_rules();

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Deal.PrivateAuction)
 private:
  inline void set_has_dealid();
  inline void clear_has_dealid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule > buyer_rules_;
  ::google::protobuf::uint32 dealid_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Deal_PrivateAuction* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Deal : public ::google::protobuf::Message {
 public:
  BidRequest_Deal();
  virtual ~BidRequest_Deal();

  BidRequest_Deal(const BidRequest_Deal& from);

  inline BidRequest_Deal& operator=(const BidRequest_Deal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Deal& default_instance();

  void Swap(BidRequest_Deal* other);

  // implements Message ----------------------------------------------

  BidRequest_Deal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Deal& from);
  void MergeFrom(const BidRequest_Deal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Deal_PreferredDeal PreferredDeal;
  typedef BidRequest_Deal_PrivateAuction PrivateAuction;

  // accessors -------------------------------------------------------

  // optional .Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
  inline bool has_prefer_deal() const;
  inline void clear_prefer_deal();
  static const int kPreferDealFieldNumber = 1;
  inline const ::Tanx::BidRequest_Deal_PreferredDeal& prefer_deal() const;
  inline ::Tanx::BidRequest_Deal_PreferredDeal* mutable_prefer_deal();
  inline ::Tanx::BidRequest_Deal_PreferredDeal* release_prefer_deal();
  inline void set_allocated_prefer_deal(::Tanx::BidRequest_Deal_PreferredDeal* prefer_deal);

  // optional .Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
  inline bool has_priv_auc() const;
  inline void clear_priv_auc();
  static const int kPrivAucFieldNumber = 2;
  inline const ::Tanx::BidRequest_Deal_PrivateAuction& priv_auc() const;
  inline ::Tanx::BidRequest_Deal_PrivateAuction* mutable_priv_auc();
  inline ::Tanx::BidRequest_Deal_PrivateAuction* release_priv_auc();
  inline void set_allocated_priv_auc(::Tanx::BidRequest_Deal_PrivateAuction* priv_auc);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.Deal)
 private:
  inline void set_has_prefer_deal();
  inline void clear_has_prefer_deal();
  inline void set_has_priv_auc();
  inline void clear_has_priv_auc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Tanx::BidRequest_Deal_PreferredDeal* prefer_deal_;
  ::Tanx::BidRequest_Deal_PrivateAuction* priv_auc_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Deal* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_CrowdCategory : public ::google::protobuf::Message {
 public:
  BidRequest_CrowdCategory();
  virtual ~BidRequest_CrowdCategory();

  BidRequest_CrowdCategory(const BidRequest_CrowdCategory& from);

  inline BidRequest_CrowdCategory& operator=(const BidRequest_CrowdCategory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_CrowdCategory& default_instance();

  void Swap(BidRequest_CrowdCategory* other);

  // implements Message ----------------------------------------------

  BidRequest_CrowdCategory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_CrowdCategory& from);
  void MergeFrom(const BidRequest_CrowdCategory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint32 confidence_level = 2;
  inline bool has_confidence_level() const;
  inline void clear_confidence_level();
  static const int kConfidenceLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 confidence_level() const;
  inline void set_confidence_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest.CrowdCategory)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_confidence_level();
  inline void clear_has_confidence_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 confidence_level_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_CrowdCategory* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest : public ::google::protobuf::Message {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest& default_instance();

  void Swap(BidRequest* other);

  // implements Message ----------------------------------------------

  BidRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Content Content;
  typedef BidRequest_AdzInfo AdzInfo;
  typedef BidRequest_UserAttribute UserAttribute;
  typedef BidRequest_PrivateInfo PrivateInfo;
  typedef BidRequest_Mobile Mobile;
  typedef BidRequest_ContentCategory ContentCategory;
  typedef BidRequest_Video Video;
  typedef BidRequest_Deal Deal;
  typedef BidRequest_CrowdCategory CrowdCategory;

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required string bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline const ::std::string& bid() const;
  inline void set_bid(const ::std::string& value);
  inline void set_bid(const char* value);
  inline void set_bid(const char* value, size_t size);
  inline ::std::string* mutable_bid();
  inline ::std::string* release_bid();
  inline void set_allocated_bid(::std::string* bid);

  // optional uint32 is_test = 11 [default = 0];
  inline bool has_is_test() const;
  inline void clear_is_test();
  static const int kIsTestFieldNumber = 11;
  inline ::google::protobuf::uint32 is_test() const;
  inline void set_is_test(::google::protobuf::uint32 value);

  // optional uint32 is_ping = 12 [default = 0];
  inline bool has_is_ping() const;
  inline void clear_is_ping();
  static const int kIsPingFieldNumber = 12;
  inline ::google::protobuf::uint32 is_ping() const;
  inline void set_is_ping(::google::protobuf::uint32 value);

  // optional string tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline const ::std::string& tid() const;
  inline void set_tid(const ::std::string& value);
  inline void set_tid(const char* value);
  inline void set_tid(const char* value, size_t size);
  inline ::std::string* mutable_tid();
  inline ::std::string* release_tid();
  inline void set_allocated_tid(::std::string* tid);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string user_agent = 5;
  inline bool has_user_agent() const;
  inline void clear_user_agent();
  static const int kUserAgentFieldNumber = 5;
  inline const ::std::string& user_agent() const;
  inline void set_user_agent(const ::std::string& value);
  inline void set_user_agent(const char* value);
  inline void set_user_agent(const char* value, size_t size);
  inline ::std::string* mutable_user_agent();
  inline ::std::string* release_user_agent();
  inline void set_allocated_user_agent(::std::string* user_agent);

  // optional int32 timezone_offset = 13;
  inline bool has_timezone_offset() const;
  inline void clear_timezone_offset();
  static const int kTimezoneOffsetFieldNumber = 13;
  inline ::google::protobuf::int32 timezone_offset() const;
  inline void set_timezone_offset(::google::protobuf::int32 value);

  // repeated int32 user_vertical = 14;
  inline int user_vertical_size() const;
  inline void clear_user_vertical();
  static const int kUserVerticalFieldNumber = 14;
  inline ::google::protobuf::int32 user_vertical(int index) const;
  inline void set_user_vertical(int index, ::google::protobuf::int32 value);
  inline void add_user_vertical(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      user_vertical() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_user_vertical();

  // optional uint32 tid_version = 19;
  inline bool has_tid_version() const;
  inline void clear_tid_version();
  static const int kTidVersionFieldNumber = 19;
  inline ::google::protobuf::uint32 tid_version() const;
  inline void set_tid_version(::google::protobuf::uint32 value);

  // repeated string excluded_click_through_url = 6;
  inline int excluded_click_through_url_size() const;
  inline void clear_excluded_click_through_url();
  static const int kExcludedClickThroughUrlFieldNumber = 6;
  inline const ::std::string& excluded_click_through_url(int index) const;
  inline ::std::string* mutable_excluded_click_through_url(int index);
  inline void set_excluded_click_through_url(int index, const ::std::string& value);
  inline void set_excluded_click_through_url(int index, const char* value);
  inline void set_excluded_click_through_url(int index, const char* value, size_t size);
  inline ::std::string* add_excluded_click_through_url();
  inline void add_excluded_click_through_url(const ::std::string& value);
  inline void add_excluded_click_through_url(const char* value);
  inline void add_excluded_click_through_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& excluded_click_through_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_excluded_click_through_url();

  // optional string url = 7;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 7;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional uint32 category = 8;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 8;
  inline ::google::protobuf::uint32 category() const;
  inline void set_category(::google::protobuf::uint32 value);

  // optional uint32 adx_type = 9 [default = 0];
  inline bool has_adx_type() const;
  inline void clear_adx_type();
  static const int kAdxTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 adx_type() const;
  inline void set_adx_type(::google::protobuf::uint32 value);

  // optional string anonymous_id = 15;
  inline bool has_anonymous_id() const;
  inline void clear_anonymous_id();
  static const int kAnonymousIdFieldNumber = 15;
  inline const ::std::string& anonymous_id() const;
  inline void set_anonymous_id(const ::std::string& value);
  inline void set_anonymous_id(const char* value);
  inline void set_anonymous_id(const char* value, size_t size);
  inline ::std::string* mutable_anonymous_id();
  inline ::std::string* release_anonymous_id();
  inline void set_allocated_anonymous_id(::std::string* anonymous_id);

  // optional string detected_language = 16;
  inline bool has_detected_language() const;
  inline void clear_detected_language();
  static const int kDetectedLanguageFieldNumber = 16;
  inline const ::std::string& detected_language() const;
  inline void set_detected_language(const ::std::string& value);
  inline void set_detected_language(const char* value);
  inline void set_detected_language(const char* value, size_t size);
  inline ::std::string* mutable_detected_language();
  inline ::std::string* release_detected_language();
  inline void set_allocated_detected_language(::std::string* detected_language);

  // optional int32 category_version = 18;
  inline bool has_category_version() const;
  inline void clear_category_version();
  static const int kCategoryVersionFieldNumber = 18;
  inline ::google::protobuf::int32 category_version() const;
  inline void set_category_version(::google::protobuf::int32 value);

  // optional .Tanx.BidRequest.Content content = 32;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 32;
  inline const ::Tanx::BidRequest_Content& content() const;
  inline ::Tanx::BidRequest_Content* mutable_content();
  inline ::Tanx::BidRequest_Content* release_content();
  inline void set_allocated_content(::Tanx::BidRequest_Content* content);

  // repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
  inline int adzinfo_size() const;
  inline void clear_adzinfo();
  static const int kAdzinfoFieldNumber = 10;
  inline const ::Tanx::BidRequest_AdzInfo& adzinfo(int index) const;
  inline ::Tanx::BidRequest_AdzInfo* mutable_adzinfo(int index);
  inline ::Tanx::BidRequest_AdzInfo* add_adzinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo >&
      adzinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo >*
      mutable_adzinfo();

  // repeated int32 excluded_sensitive_category = 17;
  inline int excluded_sensitive_category_size() const;
  inline void clear_excluded_sensitive_category();
  static const int kExcludedSensitiveCategoryFieldNumber = 17;
  inline ::google::protobuf::int32 excluded_sensitive_category(int index) const;
  inline void set_excluded_sensitive_category(int index, ::google::protobuf::int32 value);
  inline void add_excluded_sensitive_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      excluded_sensitive_category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_excluded_sensitive_category();

  // repeated int32 excluded_ad_category = 20;
  inline int excluded_ad_category_size() const;
  inline void clear_excluded_ad_category();
  static const int kExcludedAdCategoryFieldNumber = 20;
  inline ::google::protobuf::int32 excluded_ad_category(int index) const;
  inline void set_excluded_ad_category(int index, ::google::protobuf::int32 value);
  inline void add_excluded_ad_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      excluded_ad_category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_excluded_ad_category();

  // optional string hosted_match_data = 21;
  inline bool has_hosted_match_data() const;
  inline void clear_hosted_match_data();
  static const int kHostedMatchDataFieldNumber = 21;
  inline const ::std::string& hosted_match_data() const;
  inline void set_hosted_match_data(const ::std::string& value);
  inline void set_hosted_match_data(const char* value);
  inline void set_hosted_match_data(const char* value, size_t size);
  inline ::std::string* mutable_hosted_match_data();
  inline ::std::string* release_hosted_match_data();
  inline void set_allocated_hosted_match_data(::std::string* hosted_match_data);

  // repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
  inline int user_attribute_size() const;
  inline void clear_user_attribute();
  static const int kUserAttributeFieldNumber = 22;
  inline const ::Tanx::BidRequest_UserAttribute& user_attribute(int index) const;
  inline ::Tanx::BidRequest_UserAttribute* mutable_user_attribute(int index);
  inline ::Tanx::BidRequest_UserAttribute* add_user_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_UserAttribute >&
      user_attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_UserAttribute >*
      mutable_user_attribute();

  // optional string page_session_id = 23;
  inline bool has_page_session_id() const;
  inline void clear_page_session_id();
  static const int kPageSessionIdFieldNumber = 23;
  inline const ::std::string& page_session_id() const;
  inline void set_page_session_id(const ::std::string& value);
  inline void set_page_session_id(const char* value);
  inline void set_page_session_id(const char* value, size_t size);
  inline ::std::string* mutable_page_session_id();
  inline ::std::string* release_page_session_id();
  inline void set_allocated_page_session_id(::std::string* page_session_id);

  // repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
  inline int private_info_size() const;
  inline void clear_private_info();
  static const int kPrivateInfoFieldNumber = 24;
  inline const ::Tanx::BidRequest_PrivateInfo& private_info(int index) const;
  inline ::Tanx::BidRequest_PrivateInfo* mutable_private_info(int index);
  inline ::Tanx::BidRequest_PrivateInfo* add_private_info();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_PrivateInfo >&
      private_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_PrivateInfo >*
      mutable_private_info();

  // optional .Tanx.BidRequest.Mobile mobile = 25;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 25;
  inline const ::Tanx::BidRequest_Mobile& mobile() const;
  inline ::Tanx::BidRequest_Mobile* mutable_mobile();
  inline ::Tanx::BidRequest_Mobile* release_mobile();
  inline void set_allocated_mobile(::Tanx::BidRequest_Mobile* mobile);

  // repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
  inline int content_categories_size() const;
  inline void clear_content_categories();
  static const int kContentCategoriesFieldNumber = 26;
  inline const ::Tanx::BidRequest_ContentCategory& content_categories(int index) const;
  inline ::Tanx::BidRequest_ContentCategory* mutable_content_categories(int index);
  inline ::Tanx::BidRequest_ContentCategory* add_content_categories();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_ContentCategory >&
      content_categories() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_ContentCategory >*
      mutable_content_categories();

  // optional .Tanx.BidRequest.Video video = 27;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 27;
  inline const ::Tanx::BidRequest_Video& video() const;
  inline ::Tanx::BidRequest_Video* mutable_video();
  inline ::Tanx::BidRequest_Video* release_video();
  inline void set_allocated_video(::Tanx::BidRequest_Video* video);

  // optional string aid = 28;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 28;
  inline const ::std::string& aid() const;
  inline void set_aid(const ::std::string& value);
  inline void set_aid(const char* value);
  inline void set_aid(const char* value, size_t size);
  inline ::std::string* mutable_aid();
  inline ::std::string* release_aid();
  inline void set_allocated_aid(::std::string* aid);

  // repeated .Tanx.BidRequest.Deal deals = 29;
  inline int deals_size() const;
  inline void clear_deals();
  static const int kDealsFieldNumber = 29;
  inline const ::Tanx::BidRequest_Deal& deals(int index) const;
  inline ::Tanx::BidRequest_Deal* mutable_deals(int index);
  inline ::Tanx::BidRequest_Deal* add_deals();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal >&
      deals() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal >*
      mutable_deals();

  // repeated .Tanx.BidRequest.CrowdCategory crowd_category = 30;
  inline int crowd_category_size() const;
  inline void clear_crowd_category();
  static const int kCrowdCategoryFieldNumber = 30;
  inline const ::Tanx::BidRequest_CrowdCategory& crowd_category(int index) const;
  inline ::Tanx::BidRequest_CrowdCategory* mutable_crowd_category(int index);
  inline ::Tanx::BidRequest_CrowdCategory* add_crowd_category();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_CrowdCategory >&
      crowd_category() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_CrowdCategory >*
      mutable_crowd_category();

  // optional bool is_predicted_to_be_ignored = 31 [default = false];
  inline bool has_is_predicted_to_be_ignored() const;
  inline void clear_is_predicted_to_be_ignored();
  static const int kIsPredictedToBeIgnoredFieldNumber = 31;
  inline bool is_predicted_to_be_ignored() const;
  inline void set_is_predicted_to_be_ignored(bool value);

  // optional bool https_required = 33 [default = false];
  inline bool has_https_required() const;
  inline void clear_https_required();
  static const int kHttpsRequiredFieldNumber = 33;
  inline bool https_required() const;
  inline void set_https_required(bool value);

  // @@protoc_insertion_point(class_scope:Tanx.BidRequest)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_is_test();
  inline void clear_has_is_test();
  inline void set_has_is_ping();
  inline void clear_has_is_ping();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_user_agent();
  inline void clear_has_user_agent();
  inline void set_has_timezone_offset();
  inline void clear_has_timezone_offset();
  inline void set_has_tid_version();
  inline void clear_has_tid_version();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_adx_type();
  inline void clear_has_adx_type();
  inline void set_has_anonymous_id();
  inline void clear_has_anonymous_id();
  inline void set_has_detected_language();
  inline void clear_has_detected_language();
  inline void set_has_category_version();
  inline void clear_has_category_version();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_hosted_match_data();
  inline void clear_has_hosted_match_data();
  inline void set_has_page_session_id();
  inline void clear_has_page_session_id();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_video();
  inline void clear_has_video();
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_is_predicted_to_be_ignored();
  inline void clear_has_is_predicted_to_be_ignored();
  inline void set_has_https_required();
  inline void clear_has_https_required();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* bid_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::uint32 is_test_;
  ::std::string* tid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 is_ping_;
  ::google::protobuf::int32 timezone_offset_;
  ::std::string* user_agent_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > user_vertical_;
  ::google::protobuf::RepeatedPtrField< ::std::string> excluded_click_through_url_;
  ::google::protobuf::uint32 tid_version_;
  ::google::protobuf::uint32 category_;
  ::std::string* url_;
  ::std::string* anonymous_id_;
  ::google::protobuf::uint32 adx_type_;
  ::google::protobuf::int32 category_version_;
  ::std::string* detected_language_;
  ::Tanx::BidRequest_Content* content_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo > adzinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > excluded_sensitive_category_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > excluded_ad_category_;
  ::std::string* hosted_match_data_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_UserAttribute > user_attribute_;
  ::std::string* page_session_id_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_PrivateInfo > private_info_;
  ::Tanx::BidRequest_Mobile* mobile_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_ContentCategory > content_categories_;
  ::Tanx::BidRequest_Video* video_;
  ::std::string* aid_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal > deals_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_CrowdCategory > crowd_category_;
  bool is_predicted_to_be_ignored_;
  bool https_required_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_Ads_Video : public ::google::protobuf::Message {
 public:
  BidResponse_Ads_Video();
  virtual ~BidResponse_Ads_Video();

  BidResponse_Ads_Video(const BidResponse_Ads_Video& from);

  inline BidResponse_Ads_Video& operator=(const BidResponse_Ads_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_Ads_Video& default_instance();

  void Swap(BidResponse_Ads_Video* other);

  // implements Message ----------------------------------------------

  BidResponse_Ads_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_Ads_Video& from);
  void MergeFrom(const BidResponse_Ads_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 duration = 1;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 1;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // repeated string event_start = 3;
  inline int event_start_size() const;
  inline void clear_event_start();
  static const int kEventStartFieldNumber = 3;
  inline const ::std::string& event_start(int index) const;
  inline ::std::string* mutable_event_start(int index);
  inline void set_event_start(int index, const ::std::string& value);
  inline void set_event_start(int index, const char* value);
  inline void set_event_start(int index, const char* value, size_t size);
  inline ::std::string* add_event_start();
  inline void add_event_start(const ::std::string& value);
  inline void add_event_start(const char* value);
  inline void add_event_start(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& event_start() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_event_start();

  // repeated string event_midpoint = 4;
  inline int event_midpoint_size() const;
  inline void clear_event_midpoint();
  static const int kEventMidpointFieldNumber = 4;
  inline const ::std::string& event_midpoint(int index) const;
  inline ::std::string* mutable_event_midpoint(int index);
  inline void set_event_midpoint(int index, const ::std::string& value);
  inline void set_event_midpoint(int index, const char* value);
  inline void set_event_midpoint(int index, const char* value, size_t size);
  inline ::std::string* add_event_midpoint();
  inline void add_event_midpoint(const ::std::string& value);
  inline void add_event_midpoint(const char* value);
  inline void add_event_midpoint(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& event_midpoint() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_event_midpoint();

  // repeated string event_complete = 5;
  inline int event_complete_size() const;
  inline void clear_event_complete();
  static const int kEventCompleteFieldNumber = 5;
  inline const ::std::string& event_complete(int index) const;
  inline ::std::string* mutable_event_complete(int index);
  inline void set_event_complete(int index, const ::std::string& value);
  inline void set_event_complete(int index, const char* value);
  inline void set_event_complete(int index, const char* value, size_t size);
  inline ::std::string* add_event_complete();
  inline void add_event_complete(const ::std::string& value);
  inline void add_event_complete(const char* value);
  inline void add_event_complete(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& event_complete() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_event_complete();

  // @@protoc_insertion_point(class_scope:Tanx.BidResponse.Ads.Video)
 private:
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> event_start_;
  ::google::protobuf::RepeatedPtrField< ::std::string> event_midpoint_;
  ::google::protobuf::RepeatedPtrField< ::std::string> event_complete_;
  ::google::protobuf::int32 duration_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_Ads_Video* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_Ads : public ::google::protobuf::Message {
 public:
  BidResponse_Ads();
  virtual ~BidResponse_Ads();

  BidResponse_Ads(const BidResponse_Ads& from);

  inline BidResponse_Ads& operator=(const BidResponse_Ads& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_Ads& default_instance();

  void Swap(BidResponse_Ads* other);

  // implements Message ----------------------------------------------

  BidResponse_Ads* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_Ads& from);
  void MergeFrom(const BidResponse_Ads& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_Ads_Video Video;

  // accessors -------------------------------------------------------

  // required uint32 adzinfo_id = 1;
  inline bool has_adzinfo_id() const;
  inline void clear_adzinfo_id();
  static const int kAdzinfoIdFieldNumber = 1;
  inline ::google::protobuf::uint32 adzinfo_id() const;
  inline void set_adzinfo_id(::google::protobuf::uint32 value);

  // required uint32 max_cpm_price = 2;
  inline bool has_max_cpm_price() const;
  inline void clear_max_cpm_price();
  static const int kMaxCpmPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 max_cpm_price() const;
  inline void set_max_cpm_price(::google::protobuf::uint32 value);

  // optional uint32 ad_bid_count_idx = 3;
  inline bool has_ad_bid_count_idx() const;
  inline void clear_ad_bid_count_idx();
  static const int kAdBidCountIdxFieldNumber = 3;
  inline ::google::protobuf::uint32 ad_bid_count_idx() const;
  inline void set_ad_bid_count_idx(::google::protobuf::uint32 value);

  // optional string html_snippet = 4;
  inline bool has_html_snippet() const;
  inline void clear_html_snippet();
  static const int kHtmlSnippetFieldNumber = 4;
  inline const ::std::string& html_snippet() const;
  inline void set_html_snippet(const ::std::string& value);
  inline void set_html_snippet(const char* value);
  inline void set_html_snippet(const char* value, size_t size);
  inline ::std::string* mutable_html_snippet();
  inline ::std::string* release_html_snippet();
  inline void set_allocated_html_snippet(::std::string* html_snippet);

  // repeated string click_through_url = 5;
  inline int click_through_url_size() const;
  inline void clear_click_through_url();
  static const int kClickThroughUrlFieldNumber = 5;
  inline const ::std::string& click_through_url(int index) const;
  inline ::std::string* mutable_click_through_url(int index);
  inline void set_click_through_url(int index, const ::std::string& value);
  inline void set_click_through_url(int index, const char* value);
  inline void set_click_through_url(int index, const char* value, size_t size);
  inline ::std::string* add_click_through_url();
  inline void add_click_through_url(const ::std::string& value);
  inline void add_click_through_url(const char* value);
  inline void add_click_through_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& click_through_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_click_through_url();

  // repeated int32 category = 6;
  inline int category_size() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 6;
  inline ::google::protobuf::int32 category(int index) const;
  inline void set_category(int index, ::google::protobuf::int32 value);
  inline void add_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_category();

  // repeated int32 creative_type = 7;
  inline int creative_type_size() const;
  inline void clear_creative_type();
  static const int kCreativeTypeFieldNumber = 7;
  inline ::google::protobuf::int32 creative_type(int index) const;
  inline void set_creative_type(int index, ::google::protobuf::int32 value);
  inline void add_creative_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      creative_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_creative_type();

  // optional string network_guid = 8;
  inline bool has_network_guid() const;
  inline void clear_network_guid();
  static const int kNetworkGuidFieldNumber = 8;
  inline const ::std::string& network_guid() const;
  inline void set_network_guid(const ::std::string& value);
  inline void set_network_guid(const char* value);
  inline void set_network_guid(const char* value, size_t size);
  inline ::std::string* mutable_network_guid();
  inline ::std::string* release_network_guid();
  inline void set_allocated_network_guid(::std::string* network_guid);

  // optional string extend_data = 9;
  inline bool has_extend_data() const;
  inline void clear_extend_data();
  static const int kExtendDataFieldNumber = 9;
  inline const ::std::string& extend_data() const;
  inline void set_extend_data(const ::std::string& value);
  inline void set_extend_data(const char* value);
  inline void set_extend_data(const char* value, size_t size);
  inline ::std::string* mutable_extend_data();
  inline ::std::string* release_extend_data();
  inline void set_allocated_extend_data(::std::string* extend_data);

  // repeated string destination_url = 10;
  inline int destination_url_size() const;
  inline void clear_destination_url();
  static const int kDestinationUrlFieldNumber = 10;
  inline const ::std::string& destination_url(int index) const;
  inline ::std::string* mutable_destination_url(int index);
  inline void set_destination_url(int index, const ::std::string& value);
  inline void set_destination_url(int index, const char* value);
  inline void set_destination_url(int index, const char* value, size_t size);
  inline ::std::string* add_destination_url();
  inline void add_destination_url(const ::std::string& value);
  inline void add_destination_url(const char* value);
  inline void add_destination_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& destination_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_destination_url();

  // optional string creative_id = 11;
  inline bool has_creative_id() const;
  inline void clear_creative_id();
  static const int kCreativeIdFieldNumber = 11;
  inline const ::std::string& creative_id() const;
  inline void set_creative_id(const ::std::string& value);
  inline void set_creative_id(const char* value);
  inline void set_creative_id(const char* value, size_t size);
  inline ::std::string* mutable_creative_id();
  inline ::std::string* release_creative_id();
  inline void set_allocated_creative_id(::std::string* creative_id);

  // optional string resource_address = 12;
  inline bool has_resource_address() const;
  inline void clear_resource_address();
  static const int kResourceAddressFieldNumber = 12;
  inline const ::std::string& resource_address() const;
  inline void set_resource_address(const ::std::string& value);
  inline void set_resource_address(const char* value);
  inline void set_resource_address(const char* value, size_t size);
  inline ::std::string* mutable_resource_address();
  inline ::std::string* release_resource_address();
  inline void set_allocated_resource_address(::std::string* resource_address);

  // optional string feedback_address = 13;
  inline bool has_feedback_address() const;
  inline void clear_feedback_address();
  static const int kFeedbackAddressFieldNumber = 13;
  inline const ::std::string& feedback_address() const;
  inline void set_feedback_address(const ::std::string& value);
  inline void set_feedback_address(const char* value);
  inline void set_feedback_address(const char* value, size_t size);
  inline ::std::string* mutable_feedback_address();
  inline ::std::string* release_feedback_address();
  inline void set_allocated_feedback_address(::std::string* feedback_address);

  // optional string video_snippet = 14;
  inline bool has_video_snippet() const;
  inline void clear_video_snippet();
  static const int kVideoSnippetFieldNumber = 14;
  inline const ::std::string& video_snippet() const;
  inline void set_video_snippet(const ::std::string& value);
  inline void set_video_snippet(const char* value);
  inline void set_video_snippet(const char* value, size_t size);
  inline ::std::string* mutable_video_snippet();
  inline ::std::string* release_video_snippet();
  inline void set_allocated_video_snippet(::std::string* video_snippet);

  // optional .Tanx.MobileCreative mobile_creative = 15;
  inline bool has_mobile_creative() const;
  inline void clear_mobile_creative();
  static const int kMobileCreativeFieldNumber = 15;
  inline const ::Tanx::MobileCreative& mobile_creative() const;
  inline ::Tanx::MobileCreative* mutable_mobile_creative();
  inline ::Tanx::MobileCreative* release_mobile_creative();
  inline void set_allocated_mobile_creative(::Tanx::MobileCreative* mobile_creative);

  // optional uint32 dealid = 16;
  inline bool has_dealid() const;
  inline void clear_dealid();
  static const int kDealidFieldNumber = 16;
  inline ::google::protobuf::uint32 dealid() const;
  inline void set_dealid(::google::protobuf::uint32 value);

  // repeated uint32 advertiser_ids = 17;
  inline int advertiser_ids_size() const;
  inline void clear_advertiser_ids();
  static const int kAdvertiserIdsFieldNumber = 17;
  inline ::google::protobuf::uint32 advertiser_ids(int index) const;
  inline void set_advertiser_ids(int index, ::google::protobuf::uint32 value);
  inline void add_advertiser_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      advertiser_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_advertiser_ids();

  // optional string download_complete = 18;
  inline bool has_download_complete() const;
  inline void clear_download_complete();
  static const int kDownloadCompleteFieldNumber = 18;
  inline const ::std::string& download_complete() const;
  inline void set_download_complete(const ::std::string& value);
  inline void set_download_complete(const char* value);
  inline void set_download_complete(const char* value, size_t size);
  inline ::std::string* mutable_download_complete();
  inline ::std::string* release_download_complete();
  inline void set_allocated_download_complete(::std::string* download_complete);

  // optional string winnotice_address = 19;
  inline bool has_winnotice_address() const;
  inline void clear_winnotice_address();
  static const int kWinnoticeAddressFieldNumber = 19;
  inline const ::std::string& winnotice_address() const;
  inline void set_winnotice_address(const ::std::string& value);
  inline void set_winnotice_address(const char* value);
  inline void set_winnotice_address(const char* value, size_t size);
  inline ::std::string* mutable_winnotice_address();
  inline ::std::string* release_winnotice_address();
  inline void set_allocated_winnotice_address(::std::string* winnotice_address);

  // optional int32 creative_adaptive_type = 20;
  inline bool has_creative_adaptive_type() const;
  inline void clear_creative_adaptive_type();
  static const int kCreativeAdaptiveTypeFieldNumber = 20;
  inline ::google::protobuf::int32 creative_adaptive_type() const;
  inline void set_creative_adaptive_type(::google::protobuf::int32 value);

  // repeated string deeplink_url = 21;
  inline int deeplink_url_size() const;
  inline void clear_deeplink_url();
  static const int kDeeplinkUrlFieldNumber = 21;
  inline const ::std::string& deeplink_url(int index) const;
  inline ::std::string* mutable_deeplink_url(int index);
  inline void set_deeplink_url(int index, const ::std::string& value);
  inline void set_deeplink_url(int index, const char* value);
  inline void set_deeplink_url(int index, const char* value, size_t size);
  inline ::std::string* add_deeplink_url();
  inline void add_deeplink_url(const ::std::string& value);
  inline void add_deeplink_url(const char* value);
  inline void add_deeplink_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& deeplink_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deeplink_url();

  // repeated string impression_tracking_url = 22;
  inline int impression_tracking_url_size() const;
  inline void clear_impression_tracking_url();
  static const int kImpressionTrackingUrlFieldNumber = 22;
  inline const ::std::string& impression_tracking_url(int index) const;
  inline ::std::string* mutable_impression_tracking_url(int index);
  inline void set_impression_tracking_url(int index, const ::std::string& value);
  inline void set_impression_tracking_url(int index, const char* value);
  inline void set_impression_tracking_url(int index, const char* value, size_t size);
  inline ::std::string* add_impression_tracking_url();
  inline void add_impression_tracking_url(const ::std::string& value);
  inline void add_impression_tracking_url(const char* value);
  inline void add_impression_tracking_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& impression_tracking_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impression_tracking_url();

  // repeated string click_tracking_url = 23;
  inline int click_tracking_url_size() const;
  inline void clear_click_tracking_url();
  static const int kClickTrackingUrlFieldNumber = 23;
  inline const ::std::string& click_tracking_url(int index) const;
  inline ::std::string* mutable_click_tracking_url(int index);
  inline void set_click_tracking_url(int index, const ::std::string& value);
  inline void set_click_tracking_url(int index, const char* value);
  inline void set_click_tracking_url(int index, const char* value, size_t size);
  inline ::std::string* add_click_tracking_url();
  inline void add_click_tracking_url(const ::std::string& value);
  inline void add_click_tracking_url(const char* value);
  inline void add_click_tracking_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& click_tracking_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_click_tracking_url();

  // optional .Tanx.BidResponse.Ads.Video video = 24;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 24;
  inline const ::Tanx::BidResponse_Ads_Video& video() const;
  inline ::Tanx::BidResponse_Ads_Video* mutable_video();
  inline ::Tanx::BidResponse_Ads_Video* release_video();
  inline void set_allocated_video(::Tanx::BidResponse_Ads_Video* video);

  // repeated int32 api = 25;
  inline int api_size() const;
  inline void clear_api();
  static const int kApiFieldNumber = 25;
  inline ::google::protobuf::int32 api(int index) const;
  inline void set_api(int index, ::google::protobuf::int32 value);
  inline void add_api(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      api() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_api();

  // optional string mime_type = 26;
  inline bool has_mime_type() const;
  inline void clear_mime_type();
  static const int kMimeTypeFieldNumber = 26;
  inline const ::std::string& mime_type() const;
  inline void set_mime_type(const ::std::string& value);
  inline void set_mime_type(const char* value);
  inline void set_mime_type(const char* value, size_t size);
  inline ::std::string* mutable_mime_type();
  inline ::std::string* release_mime_type();
  inline void set_allocated_mime_type(::std::string* mime_type);

  // optional string campaign_date = 27;
  inline bool has_campaign_date() const;
  inline void clear_campaign_date();
  static const int kCampaignDateFieldNumber = 27;
  inline const ::std::string& campaign_date() const;
  inline void set_campaign_date(const ::std::string& value);
  inline void set_campaign_date(const char* value);
  inline void set_campaign_date(const char* value, size_t size);
  inline ::std::string* mutable_campaign_date();
  inline ::std::string* release_campaign_date();
  inline void set_allocated_campaign_date(::std::string* campaign_date);

  // @@protoc_insertion_point(class_scope:Tanx.BidResponse.Ads)
 private:
  inline void set_has_adzinfo_id();
  inline void clear_has_adzinfo_id();
  inline void set_has_max_cpm_price();
  inline void clear_has_max_cpm_price();
  inline void set_has_ad_bid_count_idx();
  inline void clear_has_ad_bid_count_idx();
  inline void set_has_html_snippet();
  inline void clear_has_html_snippet();
  inline void set_has_network_guid();
  inline void clear_has_network_guid();
  inline void set_has_extend_data();
  inline void clear_has_extend_data();
  inline void set_has_creative_id();
  inline void clear_has_creative_id();
  inline void set_has_resource_address();
  inline void clear_has_resource_address();
  inline void set_has_feedback_address();
  inline void clear_has_feedback_address();
  inline void set_has_video_snippet();
  inline void clear_has_video_snippet();
  inline void set_has_mobile_creative();
  inline void clear_has_mobile_creative();
  inline void set_has_dealid();
  inline void clear_has_dealid();
  inline void set_has_download_complete();
  inline void clear_has_download_complete();
  inline void set_has_winnotice_address();
  inline void clear_has_winnotice_address();
  inline void set_has_creative_adaptive_type();
  inline void clear_has_creative_adaptive_type();
  inline void set_has_video();
  inline void clear_has_video();
  inline void set_has_mime_type();
  inline void clear_has_mime_type();
  inline void set_has_campaign_date();
  inline void clear_has_campaign_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 adzinfo_id_;
  ::google::protobuf::uint32 max_cpm_price_;
  ::std::string* html_snippet_;
  ::google::protobuf::RepeatedPtrField< ::std::string> click_through_url_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > category_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > creative_type_;
  ::std::string* network_guid_;
  ::std::string* extend_data_;
  ::google::protobuf::uint32 ad_bid_count_idx_;
  ::google::protobuf::uint32 dealid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> destination_url_;
  ::std::string* creative_id_;
  ::std::string* resource_address_;
  ::std::string* feedback_address_;
  ::std::string* video_snippet_;
  ::Tanx::MobileCreative* mobile_creative_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > advertiser_ids_;
  ::std::string* download_complete_;
  ::std::string* winnotice_address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deeplink_url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impression_tracking_url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> click_tracking_url_;
  ::Tanx::BidResponse_Ads_Video* video_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > api_;
  ::std::string* mime_type_;
  ::std::string* campaign_date_;
  ::google::protobuf::int32 creative_adaptive_type_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_Ads* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse : public ::google::protobuf::Message {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();

  void Swap(BidResponse* other);

  // implements Message ----------------------------------------------

  BidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_Ads Ads;

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required string bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline const ::std::string& bid() const;
  inline void set_bid(const ::std::string& value);
  inline void set_bid(const char* value);
  inline void set_bid(const char* value, size_t size);
  inline ::std::string* mutable_bid();
  inline ::std::string* release_bid();
  inline void set_allocated_bid(::std::string* bid);

  // repeated .Tanx.BidResponse.Ads ads = 3;
  inline int ads_size() const;
  inline void clear_ads();
  static const int kAdsFieldNumber = 3;
  inline const ::Tanx::BidResponse_Ads& ads(int index) const;
  inline ::Tanx::BidResponse_Ads* mutable_ads(int index);
  inline ::Tanx::BidResponse_Ads* add_ads();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidResponse_Ads >&
      ads() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidResponse_Ads >*
      mutable_ads();

  // optional bool is_recognized_user = 4 [default = false];
  inline bool has_is_recognized_user() const;
  inline void clear_is_recognized_user();
  static const int kIsRecognizedUserFieldNumber = 4;
  inline bool is_recognized_user() const;
  inline void set_is_recognized_user(bool value);

  // @@protoc_insertion_point(class_scope:Tanx.BidResponse)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_is_recognized_user();
  inline void clear_has_is_recognized_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bid_;
  ::google::protobuf::int32 version_;
  bool is_recognized_user_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidResponse_Ads > ads_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// -------------------------------------------------------------------

class BidResult_Res : public ::google::protobuf::Message {
 public:
  BidResult_Res();
  virtual ~BidResult_Res();

  BidResult_Res(const BidResult_Res& from);

  inline BidResult_Res& operator=(const BidResult_Res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResult_Res& default_instance();

  void Swap(BidResult_Res* other);

  // implements Message ----------------------------------------------

  BidResult_Res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResult_Res& from);
  void MergeFrom(const BidResult_Res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 adzinfo_id = 1;
  inline bool has_adzinfo_id() const;
  inline void clear_adzinfo_id();
  static const int kAdzinfoIdFieldNumber = 1;
  inline ::google::protobuf::uint32 adzinfo_id() const;
  inline void set_adzinfo_id(::google::protobuf::uint32 value);

  // optional uint32 ad_bid_count_idx = 2;
  inline bool has_ad_bid_count_idx() const;
  inline void clear_ad_bid_count_idx();
  static const int kAdBidCountIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 ad_bid_count_idx() const;
  inline void set_ad_bid_count_idx(::google::protobuf::uint32 value);

  // optional int32 result_code = 3 [default = 0];
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::google::protobuf::int32 result_code() const;
  inline void set_result_code(::google::protobuf::int32 value);

  // optional uint32 result_price = 4;
  inline bool has_result_price() const;
  inline void clear_result_price();
  static const int kResultPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 result_price() const;
  inline void set_result_price(::google::protobuf::uint32 value);

  // optional string extend_data = 5;
  inline bool has_extend_data() const;
  inline void clear_extend_data();
  static const int kExtendDataFieldNumber = 5;
  inline const ::std::string& extend_data() const;
  inline void set_extend_data(const ::std::string& value);
  inline void set_extend_data(const char* value);
  inline void set_extend_data(const char* value, size_t size);
  inline ::std::string* mutable_extend_data();
  inline ::std::string* release_extend_data();
  inline void set_allocated_extend_data(::std::string* extend_data);

  // @@protoc_insertion_point(class_scope:Tanx.BidResult.Res)
 private:
  inline void set_has_adzinfo_id();
  inline void clear_has_adzinfo_id();
  inline void set_has_ad_bid_count_idx();
  inline void clear_has_ad_bid_count_idx();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_price();
  inline void clear_has_result_price();
  inline void set_has_extend_data();
  inline void clear_has_extend_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 adzinfo_id_;
  ::google::protobuf::uint32 ad_bid_count_idx_;
  ::google::protobuf::int32 result_code_;
  ::google::protobuf::uint32 result_price_;
  ::std::string* extend_data_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResult_Res* default_instance_;
};
// -------------------------------------------------------------------

class BidResult : public ::google::protobuf::Message {
 public:
  BidResult();
  virtual ~BidResult();

  BidResult(const BidResult& from);

  inline BidResult& operator=(const BidResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResult& default_instance();

  void Swap(BidResult* other);

  // implements Message ----------------------------------------------

  BidResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResult& from);
  void MergeFrom(const BidResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResult_Res Res;

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required string bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline const ::std::string& bid() const;
  inline void set_bid(const ::std::string& value);
  inline void set_bid(const char* value);
  inline void set_bid(const char* value, size_t size);
  inline ::std::string* mutable_bid();
  inline ::std::string* release_bid();
  inline void set_allocated_bid(::std::string* bid);

  // repeated .Tanx.BidResult.Res res = 3;
  inline int res_size() const;
  inline void clear_res();
  static const int kResFieldNumber = 3;
  inline const ::Tanx::BidResult_Res& res(int index) const;
  inline ::Tanx::BidResult_Res* mutable_res(int index);
  inline ::Tanx::BidResult_Res* add_res();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidResult_Res >&
      res() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidResult_Res >*
      mutable_res();

  // @@protoc_insertion_point(class_scope:Tanx.BidResult)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_bid();
  inline void clear_has_bid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bid_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::BidResult_Res > res_;
  ::google::protobuf::int32 version_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResult* default_instance_;
};
// -------------------------------------------------------------------

class MobileCreative_Creative_Attr : public ::google::protobuf::Message {
 public:
  MobileCreative_Creative_Attr();
  virtual ~MobileCreative_Creative_Attr();

  MobileCreative_Creative_Attr(const MobileCreative_Creative_Attr& from);

  inline MobileCreative_Creative_Attr& operator=(const MobileCreative_Creative_Attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileCreative_Creative_Attr& default_instance();

  void Swap(MobileCreative_Creative_Attr* other);

  // implements Message ----------------------------------------------

  MobileCreative_Creative_Attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileCreative_Creative_Attr& from);
  void MergeFrom(const MobileCreative_Creative_Attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Tanx.MobileCreative.Creative.Attr)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static MobileCreative_Creative_Attr* default_instance_;
};
// -------------------------------------------------------------------

class MobileCreative_Creative_TrackingEvents : public ::google::protobuf::Message {
 public:
  MobileCreative_Creative_TrackingEvents();
  virtual ~MobileCreative_Creative_TrackingEvents();

  MobileCreative_Creative_TrackingEvents(const MobileCreative_Creative_TrackingEvents& from);

  inline MobileCreative_Creative_TrackingEvents& operator=(const MobileCreative_Creative_TrackingEvents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileCreative_Creative_TrackingEvents& default_instance();

  void Swap(MobileCreative_Creative_TrackingEvents* other);

  // implements Message ----------------------------------------------

  MobileCreative_Creative_TrackingEvents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileCreative_Creative_TrackingEvents& from);
  void MergeFrom(const MobileCreative_Creative_TrackingEvents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string impression_event = 1;
  inline int impression_event_size() const;
  inline void clear_impression_event();
  static const int kImpressionEventFieldNumber = 1;
  inline const ::std::string& impression_event(int index) const;
  inline ::std::string* mutable_impression_event(int index);
  inline void set_impression_event(int index, const ::std::string& value);
  inline void set_impression_event(int index, const char* value);
  inline void set_impression_event(int index, const char* value, size_t size);
  inline ::std::string* add_impression_event();
  inline void add_impression_event(const ::std::string& value);
  inline void add_impression_event(const char* value);
  inline void add_impression_event(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& impression_event() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impression_event();

  // repeated string click_event = 2;
  inline int click_event_size() const;
  inline void clear_click_event();
  static const int kClickEventFieldNumber = 2;
  inline const ::std::string& click_event(int index) const;
  inline ::std::string* mutable_click_event(int index);
  inline void set_click_event(int index, const ::std::string& value);
  inline void set_click_event(int index, const char* value);
  inline void set_click_event(int index, const char* value, size_t size);
  inline ::std::string* add_click_event();
  inline void add_click_event(const ::std::string& value);
  inline void add_click_event(const char* value);
  inline void add_click_event(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& click_event() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_click_event();

  // repeated string download_complete_event = 3;
  inline int download_complete_event_size() const;
  inline void clear_download_complete_event();
  static const int kDownloadCompleteEventFieldNumber = 3;
  inline const ::std::string& download_complete_event(int index) const;
  inline ::std::string* mutable_download_complete_event(int index);
  inline void set_download_complete_event(int index, const ::std::string& value);
  inline void set_download_complete_event(int index, const char* value);
  inline void set_download_complete_event(int index, const char* value, size_t size);
  inline ::std::string* add_download_complete_event();
  inline void add_download_complete_event(const ::std::string& value);
  inline void add_download_complete_event(const char* value);
  inline void add_download_complete_event(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& download_complete_event() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_download_complete_event();

  // @@protoc_insertion_point(class_scope:Tanx.MobileCreative.Creative.TrackingEvents)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impression_event_;
  ::google::protobuf::RepeatedPtrField< ::std::string> click_event_;
  ::google::protobuf::RepeatedPtrField< ::std::string> download_complete_event_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static MobileCreative_Creative_TrackingEvents* default_instance_;
};
// -------------------------------------------------------------------

class MobileCreative_Creative : public ::google::protobuf::Message {
 public:
  MobileCreative_Creative();
  virtual ~MobileCreative_Creative();

  MobileCreative_Creative(const MobileCreative_Creative& from);

  inline MobileCreative_Creative& operator=(const MobileCreative_Creative& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileCreative_Creative& default_instance();

  void Swap(MobileCreative_Creative* other);

  // implements Message ----------------------------------------------

  MobileCreative_Creative* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileCreative_Creative& from);
  void MergeFrom(const MobileCreative_Creative& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileCreative_Creative_Attr Attr;
  typedef MobileCreative_Creative_TrackingEvents TrackingEvents;

  // accessors -------------------------------------------------------

  // optional string img_url = 1;
  inline bool has_img_url() const;
  inline void clear_img_url();
  static const int kImgUrlFieldNumber = 1;
  inline const ::std::string& img_url() const;
  inline void set_img_url(const ::std::string& value);
  inline void set_img_url(const char* value);
  inline void set_img_url(const char* value, size_t size);
  inline ::std::string* mutable_img_url();
  inline ::std::string* release_img_url();
  inline void set_allocated_img_url(::std::string* img_url);

  // optional string img_size = 2;
  inline bool has_img_size() const;
  inline void clear_img_size();
  static const int kImgSizeFieldNumber = 2;
  inline const ::std::string& img_size() const;
  inline void set_img_size(const ::std::string& value);
  inline void set_img_size(const char* value);
  inline void set_img_size(const char* value, size_t size);
  inline ::std::string* mutable_img_size();
  inline ::std::string* release_img_size();
  inline void set_allocated_img_size(::std::string* img_size);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string click_url = 4;
  inline bool has_click_url() const;
  inline void clear_click_url();
  static const int kClickUrlFieldNumber = 4;
  inline const ::std::string& click_url() const;
  inline void set_click_url(const ::std::string& value);
  inline void set_click_url(const char* value);
  inline void set_click_url(const char* value, size_t size);
  inline ::std::string* mutable_click_url();
  inline ::std::string* release_click_url();
  inline void set_allocated_click_url(::std::string* click_url);

  // optional string destination_url = 5;
  inline bool has_destination_url() const;
  inline void clear_destination_url();
  static const int kDestinationUrlFieldNumber = 5;
  inline const ::std::string& destination_url() const;
  inline void set_destination_url(const ::std::string& value);
  inline void set_destination_url(const char* value);
  inline void set_destination_url(const char* value, size_t size);
  inline ::std::string* mutable_destination_url();
  inline ::std::string* release_destination_url();
  inline void set_allocated_destination_url(::std::string* destination_url);

  // repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 6;
  inline const ::Tanx::MobileCreative_Creative_Attr& attr(int index) const;
  inline ::Tanx::MobileCreative_Creative_Attr* mutable_attr(int index);
  inline ::Tanx::MobileCreative_Creative_Attr* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative_Attr >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative_Attr >*
      mutable_attr();

  // optional string creative_id = 7;
  inline bool has_creative_id() const;
  inline void clear_creative_id();
  static const int kCreativeIdFieldNumber = 7;
  inline const ::std::string& creative_id() const;
  inline void set_creative_id(const ::std::string& value);
  inline void set_creative_id(const char* value);
  inline void set_creative_id(const char* value, size_t size);
  inline ::std::string* mutable_creative_id();
  inline ::std::string* release_creative_id();
  inline void set_allocated_creative_id(::std::string* creative_id);

  // repeated int32 category = 8;
  inline int category_size() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 8;
  inline ::google::protobuf::int32 category(int index) const;
  inline void set_category(int index, ::google::protobuf::int32 value);
  inline void add_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_category();

  // optional .Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
  inline bool has_tracking_events() const;
  inline void clear_tracking_events();
  static const int kTrackingEventsFieldNumber = 9;
  inline const ::Tanx::MobileCreative_Creative_TrackingEvents& tracking_events() const;
  inline ::Tanx::MobileCreative_Creative_TrackingEvents* mutable_tracking_events();
  inline ::Tanx::MobileCreative_Creative_TrackingEvents* release_tracking_events();
  inline void set_allocated_tracking_events(::Tanx::MobileCreative_Creative_TrackingEvents* tracking_events);

  // @@protoc_insertion_point(class_scope:Tanx.MobileCreative.Creative)
 private:
  inline void set_has_img_url();
  inline void clear_has_img_url();
  inline void set_has_img_size();
  inline void clear_has_img_size();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_click_url();
  inline void clear_has_click_url();
  inline void set_has_destination_url();
  inline void clear_has_destination_url();
  inline void set_has_creative_id();
  inline void clear_has_creative_id();
  inline void set_has_tracking_events();
  inline void clear_has_tracking_events();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* img_url_;
  ::std::string* img_size_;
  ::std::string* title_;
  ::std::string* click_url_;
  ::std::string* destination_url_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative_Attr > attr_;
  ::std::string* creative_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > category_;
  ::Tanx::MobileCreative_Creative_TrackingEvents* tracking_events_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static MobileCreative_Creative* default_instance_;
};
// -------------------------------------------------------------------

class MobileCreative_Area : public ::google::protobuf::Message {
 public:
  MobileCreative_Area();
  virtual ~MobileCreative_Area();

  MobileCreative_Area(const MobileCreative_Area& from);

  inline MobileCreative_Area& operator=(const MobileCreative_Area& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileCreative_Area& default_instance();

  void Swap(MobileCreative_Area* other);

  // implements Message ----------------------------------------------

  MobileCreative_Area* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileCreative_Area& from);
  void MergeFrom(const MobileCreative_Area& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .Tanx.MobileCreative.Creative creatives = 2;
  inline int creatives_size() const;
  inline void clear_creatives();
  static const int kCreativesFieldNumber = 2;
  inline const ::Tanx::MobileCreative_Creative& creatives(int index) const;
  inline ::Tanx::MobileCreative_Creative* mutable_creatives(int index);
  inline ::Tanx::MobileCreative_Creative* add_creatives();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative >&
      creatives() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative >*
      mutable_creatives();

  // @@protoc_insertion_point(class_scope:Tanx.MobileCreative.Area)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative > creatives_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static MobileCreative_Area* default_instance_;
};
// -------------------------------------------------------------------

class MobileCreative : public ::google::protobuf::Message {
 public:
  MobileCreative();
  virtual ~MobileCreative();

  MobileCreative(const MobileCreative& from);

  inline MobileCreative& operator=(const MobileCreative& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileCreative& default_instance();

  void Swap(MobileCreative* other);

  // implements Message ----------------------------------------------

  MobileCreative* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileCreative& from);
  void MergeFrom(const MobileCreative& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileCreative_Creative Creative;
  typedef MobileCreative_Area Area;

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required string bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline const ::std::string& bid() const;
  inline void set_bid(const ::std::string& value);
  inline void set_bid(const char* value);
  inline void set_bid(const char* value, size_t size);
  inline ::std::string* mutable_bid();
  inline ::std::string* release_bid();
  inline void set_allocated_bid(::std::string* bid);

  // optional uint32 view_type = 3;
  inline bool has_view_type() const;
  inline void clear_view_type();
  static const int kViewTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 view_type() const;
  inline void set_view_type(::google::protobuf::uint32 value);

  // repeated .Tanx.MobileCreative.Creative creatives = 4;
  inline int creatives_size() const;
  inline void clear_creatives();
  static const int kCreativesFieldNumber = 4;
  inline const ::Tanx::MobileCreative_Creative& creatives(int index) const;
  inline ::Tanx::MobileCreative_Creative* mutable_creatives(int index);
  inline ::Tanx::MobileCreative_Creative* add_creatives();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative >&
      creatives() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative >*
      mutable_creatives();

  // optional string native_template_id = 5;
  inline bool has_native_template_id() const;
  inline void clear_native_template_id();
  static const int kNativeTemplateIdFieldNumber = 5;
  inline const ::std::string& native_template_id() const;
  inline void set_native_template_id(const ::std::string& value);
  inline void set_native_template_id(const char* value);
  inline void set_native_template_id(const char* value, size_t size);
  inline ::std::string* mutable_native_template_id();
  inline ::std::string* release_native_template_id();
  inline void set_allocated_native_template_id(::std::string* native_template_id);

  // repeated .Tanx.MobileCreative.Area areas = 6;
  inline int areas_size() const;
  inline void clear_areas();
  static const int kAreasFieldNumber = 6;
  inline const ::Tanx::MobileCreative_Area& areas(int index) const;
  inline ::Tanx::MobileCreative_Area* mutable_areas(int index);
  inline ::Tanx::MobileCreative_Area* add_areas();
  inline const ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Area >&
      areas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Area >*
      mutable_areas();

  // @@protoc_insertion_point(class_scope:Tanx.MobileCreative)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_view_type();
  inline void clear_has_view_type();
  inline void set_has_native_template_id();
  inline void clear_has_native_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bid_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::uint32 view_type_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative > creatives_;
  ::std::string* native_template_id_;
  ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Area > areas_;
  friend void  protobuf_AddDesc_tanx_2dbidding_2eproto();
  friend void protobuf_AssignDesc_tanx_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_tanx_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static MobileCreative* default_instance_;
};
// ===================================================================


// ===================================================================

// BidRequest_Content

// optional string title = 1;
inline bool BidRequest_Content::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Content::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Content::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Content::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& BidRequest_Content::title() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Content.title)
  return *title_;
}
inline void BidRequest_Content::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Content.title)
}
inline void BidRequest_Content::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Content.title)
}
inline void BidRequest_Content::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Content.title)
}
inline ::std::string* BidRequest_Content::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Content.title)
  return title_;
}
inline ::std::string* BidRequest_Content::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Content::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Content.title)
}

// optional int32 duration = 2;
inline bool BidRequest_Content::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Content::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Content::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Content::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 BidRequest_Content::duration() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Content.duration)
  return duration_;
}
inline void BidRequest_Content::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Content.duration)
}

// repeated string keywords = 3;
inline int BidRequest_Content::keywords_size() const {
  return keywords_.size();
}
inline void BidRequest_Content::clear_keywords() {
  keywords_.Clear();
}
inline const ::std::string& BidRequest_Content::keywords(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Content.keywords)
  return keywords_.Get(index);
}
inline ::std::string* BidRequest_Content::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Content.keywords)
  return keywords_.Mutable(index);
}
inline void BidRequest_Content::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Content.keywords)
  keywords_.Mutable(index)->assign(value);
}
inline void BidRequest_Content::set_keywords(int index, const char* value) {
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Content.keywords)
}
inline void BidRequest_Content::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Content.keywords)
}
inline ::std::string* BidRequest_Content::add_keywords() {
  return keywords_.Add();
}
inline void BidRequest_Content::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Content.keywords)
}
inline void BidRequest_Content::add_keywords(const char* value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidRequest.Content.keywords)
}
inline void BidRequest_Content::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidRequest.Content.keywords)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Content::keywords() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Content.keywords)
  return keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Content::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Content.keywords)
  return &keywords_;
}

// -------------------------------------------------------------------

// BidRequest_AdzInfo_BuyerRule

// optional uint32 advertiser_ids = 1;
inline bool BidRequest_AdzInfo_BuyerRule::has_advertiser_ids() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_AdzInfo_BuyerRule::set_has_advertiser_ids() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_AdzInfo_BuyerRule::clear_has_advertiser_ids() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_AdzInfo_BuyerRule::clear_advertiser_ids() {
  advertiser_ids_ = 0u;
  clear_has_advertiser_ids();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo_BuyerRule::advertiser_ids() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.BuyerRule.advertiser_ids)
  return advertiser_ids_;
}
inline void BidRequest_AdzInfo_BuyerRule::set_advertiser_ids(::google::protobuf::uint32 value) {
  set_has_advertiser_ids();
  advertiser_ids_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.BuyerRule.advertiser_ids)
}

// optional uint32 min_cpm_price = 2;
inline bool BidRequest_AdzInfo_BuyerRule::has_min_cpm_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdzInfo_BuyerRule::set_has_min_cpm_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdzInfo_BuyerRule::clear_has_min_cpm_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdzInfo_BuyerRule::clear_min_cpm_price() {
  min_cpm_price_ = 0u;
  clear_has_min_cpm_price();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo_BuyerRule::min_cpm_price() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.BuyerRule.min_cpm_price)
  return min_cpm_price_;
}
inline void BidRequest_AdzInfo_BuyerRule::set_min_cpm_price(::google::protobuf::uint32 value) {
  set_has_min_cpm_price();
  min_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.BuyerRule.min_cpm_price)
}

// -------------------------------------------------------------------

// BidRequest_AdzInfo_Video

// optional int32 videoad_start_delay = 1;
inline bool BidRequest_AdzInfo_Video::has_videoad_start_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_AdzInfo_Video::set_has_videoad_start_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_AdzInfo_Video::clear_has_videoad_start_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_AdzInfo_Video::clear_videoad_start_delay() {
  videoad_start_delay_ = 0;
  clear_has_videoad_start_delay();
}
inline ::google::protobuf::int32 BidRequest_AdzInfo_Video::videoad_start_delay() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.Video.videoad_start_delay)
  return videoad_start_delay_;
}
inline void BidRequest_AdzInfo_Video::set_videoad_start_delay(::google::protobuf::int32 value) {
  set_has_videoad_start_delay();
  videoad_start_delay_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.Video.videoad_start_delay)
}

// optional int32 videoad_section_start_delay = 2;
inline bool BidRequest_AdzInfo_Video::has_videoad_section_start_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdzInfo_Video::set_has_videoad_section_start_delay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdzInfo_Video::clear_has_videoad_section_start_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdzInfo_Video::clear_videoad_section_start_delay() {
  videoad_section_start_delay_ = 0;
  clear_has_videoad_section_start_delay();
}
inline ::google::protobuf::int32 BidRequest_AdzInfo_Video::videoad_section_start_delay() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.Video.videoad_section_start_delay)
  return videoad_section_start_delay_;
}
inline void BidRequest_AdzInfo_Video::set_videoad_section_start_delay(::google::protobuf::int32 value) {
  set_has_videoad_section_start_delay();
  videoad_section_start_delay_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.Video.videoad_section_start_delay)
}

// optional int32 min_ad_duration = 3;
inline bool BidRequest_AdzInfo_Video::has_min_ad_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_AdzInfo_Video::set_has_min_ad_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_AdzInfo_Video::clear_has_min_ad_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_AdzInfo_Video::clear_min_ad_duration() {
  min_ad_duration_ = 0;
  clear_has_min_ad_duration();
}
inline ::google::protobuf::int32 BidRequest_AdzInfo_Video::min_ad_duration() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.Video.min_ad_duration)
  return min_ad_duration_;
}
inline void BidRequest_AdzInfo_Video::set_min_ad_duration(::google::protobuf::int32 value) {
  set_has_min_ad_duration();
  min_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.Video.min_ad_duration)
}

// optional int32 max_ad_duration = 4;
inline bool BidRequest_AdzInfo_Video::has_max_ad_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_AdzInfo_Video::set_has_max_ad_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_AdzInfo_Video::clear_has_max_ad_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_AdzInfo_Video::clear_max_ad_duration() {
  max_ad_duration_ = 0;
  clear_has_max_ad_duration();
}
inline ::google::protobuf::int32 BidRequest_AdzInfo_Video::max_ad_duration() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.Video.max_ad_duration)
  return max_ad_duration_;
}
inline void BidRequest_AdzInfo_Video::set_max_ad_duration(::google::protobuf::int32 value) {
  set_has_max_ad_duration();
  max_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.Video.max_ad_duration)
}

// -------------------------------------------------------------------

// BidRequest_AdzInfo_Deal

// required uint32 dealid = 1;
inline bool BidRequest_AdzInfo_Deal::has_dealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_AdzInfo_Deal::set_has_dealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_AdzInfo_Deal::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_AdzInfo_Deal::clear_dealid() {
  dealid_ = 0u;
  clear_has_dealid();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo_Deal::dealid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.Deal.dealid)
  return dealid_;
}
inline void BidRequest_AdzInfo_Deal::set_dealid(::google::protobuf::uint32 value) {
  set_has_dealid();
  dealid_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.Deal.dealid)
}

// required .Tanx.BidRequest.AdzInfo.Deal.DealType deal_type = 2;
inline bool BidRequest_AdzInfo_Deal::has_deal_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdzInfo_Deal::set_has_deal_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdzInfo_Deal::clear_has_deal_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdzInfo_Deal::clear_deal_type() {
  deal_type_ = 0;
  clear_has_deal_type();
}
inline ::Tanx::BidRequest_AdzInfo_Deal_DealType BidRequest_AdzInfo_Deal::deal_type() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.Deal.deal_type)
  return static_cast< ::Tanx::BidRequest_AdzInfo_Deal_DealType >(deal_type_);
}
inline void BidRequest_AdzInfo_Deal::set_deal_type(::Tanx::BidRequest_AdzInfo_Deal_DealType value) {
  assert(::Tanx::BidRequest_AdzInfo_Deal_DealType_IsValid(value));
  set_has_deal_type();
  deal_type_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.Deal.deal_type)
}

// repeated uint32 advertiser_ids = 3;
inline int BidRequest_AdzInfo_Deal::advertiser_ids_size() const {
  return advertiser_ids_.size();
}
inline void BidRequest_AdzInfo_Deal::clear_advertiser_ids() {
  advertiser_ids_.Clear();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo_Deal::advertiser_ids(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.Deal.advertiser_ids)
  return advertiser_ids_.Get(index);
}
inline void BidRequest_AdzInfo_Deal::set_advertiser_ids(int index, ::google::protobuf::uint32 value) {
  advertiser_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.Deal.advertiser_ids)
}
inline void BidRequest_AdzInfo_Deal::add_advertiser_ids(::google::protobuf::uint32 value) {
  advertiser_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.AdzInfo.Deal.advertiser_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_AdzInfo_Deal::advertiser_ids() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.AdzInfo.Deal.advertiser_ids)
  return advertiser_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_AdzInfo_Deal::mutable_advertiser_ids() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.AdzInfo.Deal.advertiser_ids)
  return &advertiser_ids_;
}

// optional uint32 price = 4;
inline bool BidRequest_AdzInfo_Deal::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_AdzInfo_Deal::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_AdzInfo_Deal::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_AdzInfo_Deal::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo_Deal::price() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.Deal.price)
  return price_;
}
inline void BidRequest_AdzInfo_Deal::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.Deal.price)
}

// -------------------------------------------------------------------

// BidRequest_AdzInfo

// required uint32 id = 1;
inline bool BidRequest_AdzInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_AdzInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_AdzInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_AdzInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo::id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.id)
  return id_;
}
inline void BidRequest_AdzInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.id)
}

// required string pid = 2;
inline bool BidRequest_AdzInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdzInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdzInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdzInfo::clear_pid() {
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_->clear();
  }
  clear_has_pid();
}
inline const ::std::string& BidRequest_AdzInfo::pid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.pid)
  return *pid_;
}
inline void BidRequest_AdzInfo::set_pid(const ::std::string& value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.pid)
}
inline void BidRequest_AdzInfo::set_pid(const char* value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.AdzInfo.pid)
}
inline void BidRequest_AdzInfo::set_pid(const char* value, size_t size) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  pid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.AdzInfo.pid)
}
inline ::std::string* BidRequest_AdzInfo::mutable_pid() {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.AdzInfo.pid)
  return pid_;
}
inline ::std::string* BidRequest_AdzInfo::release_pid() {
  clear_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pid_;
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_AdzInfo::set_allocated_pid(::std::string* pid) {
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pid_;
  }
  if (pid) {
    set_has_pid();
    pid_ = pid;
  } else {
    clear_has_pid();
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.AdzInfo.pid)
}

// optional string publisher_id = 11;
inline bool BidRequest_AdzInfo::has_publisher_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_AdzInfo::set_has_publisher_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_AdzInfo::clear_has_publisher_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_AdzInfo::clear_publisher_id() {
  if (publisher_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisher_id_->clear();
  }
  clear_has_publisher_id();
}
inline const ::std::string& BidRequest_AdzInfo::publisher_id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.publisher_id)
  return *publisher_id_;
}
inline void BidRequest_AdzInfo::set_publisher_id(const ::std::string& value) {
  set_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisher_id_ = new ::std::string;
  }
  publisher_id_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.publisher_id)
}
inline void BidRequest_AdzInfo::set_publisher_id(const char* value) {
  set_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisher_id_ = new ::std::string;
  }
  publisher_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.AdzInfo.publisher_id)
}
inline void BidRequest_AdzInfo::set_publisher_id(const char* value, size_t size) {
  set_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisher_id_ = new ::std::string;
  }
  publisher_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.AdzInfo.publisher_id)
}
inline ::std::string* BidRequest_AdzInfo::mutable_publisher_id() {
  set_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisher_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.AdzInfo.publisher_id)
  return publisher_id_;
}
inline ::std::string* BidRequest_AdzInfo::release_publisher_id() {
  clear_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = publisher_id_;
    publisher_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_AdzInfo::set_allocated_publisher_id(::std::string* publisher_id) {
  if (publisher_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete publisher_id_;
  }
  if (publisher_id) {
    set_has_publisher_id();
    publisher_id_ = publisher_id;
  } else {
    clear_has_publisher_id();
    publisher_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.AdzInfo.publisher_id)
}

// optional string size = 3;
inline bool BidRequest_AdzInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_AdzInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_AdzInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_AdzInfo::clear_size() {
  if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    size_->clear();
  }
  clear_has_size();
}
inline const ::std::string& BidRequest_AdzInfo::size() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.size)
  return *size_;
}
inline void BidRequest_AdzInfo::set_size(const ::std::string& value) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    size_ = new ::std::string;
  }
  size_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.size)
}
inline void BidRequest_AdzInfo::set_size(const char* value) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    size_ = new ::std::string;
  }
  size_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.AdzInfo.size)
}
inline void BidRequest_AdzInfo::set_size(const char* value, size_t size) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    size_ = new ::std::string;
  }
  size_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.AdzInfo.size)
}
inline ::std::string* BidRequest_AdzInfo::mutable_size() {
  set_has_size();
  if (size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    size_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.AdzInfo.size)
  return size_;
}
inline ::std::string* BidRequest_AdzInfo::release_size() {
  clear_has_size();
  if (size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = size_;
    size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_AdzInfo::set_allocated_size(::std::string* size) {
  if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete size_;
  }
  if (size) {
    set_has_size();
    size_ = size;
  } else {
    clear_has_size();
    size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.AdzInfo.size)
}

// optional uint32 ad_bid_count = 4 [default = 2];
inline bool BidRequest_AdzInfo::has_ad_bid_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_AdzInfo::set_has_ad_bid_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_AdzInfo::clear_has_ad_bid_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_AdzInfo::clear_ad_bid_count() {
  ad_bid_count_ = 2u;
  clear_has_ad_bid_count();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo::ad_bid_count() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.ad_bid_count)
  return ad_bid_count_;
}
inline void BidRequest_AdzInfo::set_ad_bid_count(::google::protobuf::uint32 value) {
  set_has_ad_bid_count();
  ad_bid_count_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.ad_bid_count)
}

// repeated uint32 view_type = 5;
inline int BidRequest_AdzInfo::view_type_size() const {
  return view_type_.size();
}
inline void BidRequest_AdzInfo::clear_view_type() {
  view_type_.Clear();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo::view_type(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.view_type)
  return view_type_.Get(index);
}
inline void BidRequest_AdzInfo::set_view_type(int index, ::google::protobuf::uint32 value) {
  view_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.view_type)
}
inline void BidRequest_AdzInfo::add_view_type(::google::protobuf::uint32 value) {
  view_type_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.AdzInfo.view_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_AdzInfo::view_type() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.AdzInfo.view_type)
  return view_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_AdzInfo::mutable_view_type() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.AdzInfo.view_type)
  return &view_type_;
}

// repeated uint32 excluded_filter = 6;
inline int BidRequest_AdzInfo::excluded_filter_size() const {
  return excluded_filter_.size();
}
inline void BidRequest_AdzInfo::clear_excluded_filter() {
  excluded_filter_.Clear();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo::excluded_filter(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.excluded_filter)
  return excluded_filter_.Get(index);
}
inline void BidRequest_AdzInfo::set_excluded_filter(int index, ::google::protobuf::uint32 value) {
  excluded_filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.excluded_filter)
}
inline void BidRequest_AdzInfo::add_excluded_filter(::google::protobuf::uint32 value) {
  excluded_filter_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.AdzInfo.excluded_filter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_AdzInfo::excluded_filter() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.AdzInfo.excluded_filter)
  return excluded_filter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_AdzInfo::mutable_excluded_filter() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.AdzInfo.excluded_filter)
  return &excluded_filter_;
}

// optional uint32 min_cpm_price = 7;
inline bool BidRequest_AdzInfo::has_min_cpm_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_AdzInfo::set_has_min_cpm_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_AdzInfo::clear_has_min_cpm_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_AdzInfo::clear_min_cpm_price() {
  min_cpm_price_ = 0u;
  clear_has_min_cpm_price();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo::min_cpm_price() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.min_cpm_price)
  return min_cpm_price_;
}
inline void BidRequest_AdzInfo::set_min_cpm_price(::google::protobuf::uint32 value) {
  set_has_min_cpm_price();
  min_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.min_cpm_price)
}

// optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
inline bool BidRequest_AdzInfo::has_adz_location() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_AdzInfo::set_has_adz_location() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_AdzInfo::clear_has_adz_location() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_AdzInfo::clear_adz_location() {
  adz_location_ = 0;
  clear_has_adz_location();
}
inline ::Tanx::BidRequest_AdzInfo_Location BidRequest_AdzInfo::adz_location() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.adz_location)
  return static_cast< ::Tanx::BidRequest_AdzInfo_Location >(adz_location_);
}
inline void BidRequest_AdzInfo::set_adz_location(::Tanx::BidRequest_AdzInfo_Location value) {
  assert(::Tanx::BidRequest_AdzInfo_Location_IsValid(value));
  set_has_adz_location();
  adz_location_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.adz_location)
}

// optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
inline bool BidRequest_AdzInfo::has_view_screen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_AdzInfo::set_has_view_screen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_AdzInfo::clear_has_view_screen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_AdzInfo::clear_view_screen() {
  view_screen_ = 0;
  clear_has_view_screen();
}
inline ::Tanx::BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::view_screen() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.view_screen)
  return static_cast< ::Tanx::BidRequest_AdzInfo_ViewScreen >(view_screen_);
}
inline void BidRequest_AdzInfo::set_view_screen(::Tanx::BidRequest_AdzInfo_ViewScreen value) {
  assert(::Tanx::BidRequest_AdzInfo_ViewScreen_IsValid(value));
  set_has_view_screen();
  view_screen_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.view_screen)
}

// optional uint32 page_session_ad_idx = 10;
inline bool BidRequest_AdzInfo::has_page_session_ad_idx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_AdzInfo::set_has_page_session_ad_idx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_AdzInfo::clear_has_page_session_ad_idx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_AdzInfo::clear_page_session_ad_idx() {
  page_session_ad_idx_ = 0u;
  clear_has_page_session_ad_idx();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo::page_session_ad_idx() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.page_session_ad_idx)
  return page_session_ad_idx_;
}
inline void BidRequest_AdzInfo::set_page_session_ad_idx(::google::protobuf::uint32 value) {
  set_has_page_session_ad_idx();
  page_session_ad_idx_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.page_session_ad_idx)
}

// repeated uint32 api = 12;
inline int BidRequest_AdzInfo::api_size() const {
  return api_.size();
}
inline void BidRequest_AdzInfo::clear_api() {
  api_.Clear();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo::api(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.api)
  return api_.Get(index);
}
inline void BidRequest_AdzInfo::set_api(int index, ::google::protobuf::uint32 value) {
  api_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.api)
}
inline void BidRequest_AdzInfo::add_api(::google::protobuf::uint32 value) {
  api_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.AdzInfo.api)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_AdzInfo::api() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.AdzInfo.api)
  return api_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_AdzInfo::mutable_api() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.AdzInfo.api)
  return &api_;
}

// repeated .Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
inline int BidRequest_AdzInfo::buyer_rules_size() const {
  return buyer_rules_.size();
}
inline void BidRequest_AdzInfo::clear_buyer_rules() {
  buyer_rules_.Clear();
}
inline const ::Tanx::BidRequest_AdzInfo_BuyerRule& BidRequest_AdzInfo::buyer_rules(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.buyer_rules)
  return buyer_rules_.Get(index);
}
inline ::Tanx::BidRequest_AdzInfo_BuyerRule* BidRequest_AdzInfo::mutable_buyer_rules(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.AdzInfo.buyer_rules)
  return buyer_rules_.Mutable(index);
}
inline ::Tanx::BidRequest_AdzInfo_BuyerRule* BidRequest_AdzInfo::add_buyer_rules() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.AdzInfo.buyer_rules)
  return buyer_rules_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_BuyerRule >&
BidRequest_AdzInfo::buyer_rules() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.AdzInfo.buyer_rules)
  return buyer_rules_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_BuyerRule >*
BidRequest_AdzInfo::mutable_buyer_rules() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.AdzInfo.buyer_rules)
  return &buyer_rules_;
}

// optional uint32 allowed_creative_level = 14;
inline bool BidRequest_AdzInfo::has_allowed_creative_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_AdzInfo::set_has_allowed_creative_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_AdzInfo::clear_has_allowed_creative_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_AdzInfo::clear_allowed_creative_level() {
  allowed_creative_level_ = 0u;
  clear_has_allowed_creative_level();
}
inline ::google::protobuf::uint32 BidRequest_AdzInfo::allowed_creative_level() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.allowed_creative_level)
  return allowed_creative_level_;
}
inline void BidRequest_AdzInfo::set_allowed_creative_level(::google::protobuf::uint32 value) {
  set_has_allowed_creative_level();
  allowed_creative_level_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.allowed_creative_level)
}

// repeated string publisher_filter_id = 15;
inline int BidRequest_AdzInfo::publisher_filter_id_size() const {
  return publisher_filter_id_.size();
}
inline void BidRequest_AdzInfo::clear_publisher_filter_id() {
  publisher_filter_id_.Clear();
}
inline const ::std::string& BidRequest_AdzInfo::publisher_filter_id(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.publisher_filter_id)
  return publisher_filter_id_.Get(index);
}
inline ::std::string* BidRequest_AdzInfo::mutable_publisher_filter_id(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.AdzInfo.publisher_filter_id)
  return publisher_filter_id_.Mutable(index);
}
inline void BidRequest_AdzInfo::set_publisher_filter_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.publisher_filter_id)
  publisher_filter_id_.Mutable(index)->assign(value);
}
inline void BidRequest_AdzInfo::set_publisher_filter_id(int index, const char* value) {
  publisher_filter_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
inline void BidRequest_AdzInfo::set_publisher_filter_id(int index, const char* value, size_t size) {
  publisher_filter_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
inline ::std::string* BidRequest_AdzInfo::add_publisher_filter_id() {
  return publisher_filter_id_.Add();
}
inline void BidRequest_AdzInfo::add_publisher_filter_id(const ::std::string& value) {
  publisher_filter_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
inline void BidRequest_AdzInfo::add_publisher_filter_id(const char* value) {
  publisher_filter_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
inline void BidRequest_AdzInfo::add_publisher_filter_id(const char* value, size_t size) {
  publisher_filter_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdzInfo::publisher_filter_id() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.AdzInfo.publisher_filter_id)
  return publisher_filter_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdzInfo::mutable_publisher_filter_id() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.AdzInfo.publisher_filter_id)
  return &publisher_filter_id_;
}

// optional bool auto_expandable = 16 [default = false];
inline bool BidRequest_AdzInfo::has_auto_expandable() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest_AdzInfo::set_has_auto_expandable() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest_AdzInfo::clear_has_auto_expandable() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest_AdzInfo::clear_auto_expandable() {
  auto_expandable_ = false;
  clear_has_auto_expandable();
}
inline bool BidRequest_AdzInfo::auto_expandable() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.auto_expandable)
  return auto_expandable_;
}
inline void BidRequest_AdzInfo::set_auto_expandable(bool value) {
  set_has_auto_expandable();
  auto_expandable_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.auto_expandable)
}

// optional bool trigger_expandable = 17 [default = false];
inline bool BidRequest_AdzInfo::has_trigger_expandable() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidRequest_AdzInfo::set_has_trigger_expandable() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidRequest_AdzInfo::clear_has_trigger_expandable() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidRequest_AdzInfo::clear_trigger_expandable() {
  trigger_expandable_ = false;
  clear_has_trigger_expandable();
}
inline bool BidRequest_AdzInfo::trigger_expandable() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.trigger_expandable)
  return trigger_expandable_;
}
inline void BidRequest_AdzInfo::set_trigger_expandable(bool value) {
  set_has_trigger_expandable();
  trigger_expandable_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.trigger_expandable)
}

// optional bool impression_repeatable = 18 [default = false];
inline bool BidRequest_AdzInfo::has_impression_repeatable() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest_AdzInfo::set_has_impression_repeatable() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest_AdzInfo::clear_has_impression_repeatable() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest_AdzInfo::clear_impression_repeatable() {
  impression_repeatable_ = false;
  clear_has_impression_repeatable();
}
inline bool BidRequest_AdzInfo::impression_repeatable() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.impression_repeatable)
  return impression_repeatable_;
}
inline void BidRequest_AdzInfo::set_impression_repeatable(bool value) {
  set_has_impression_repeatable();
  impression_repeatable_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.impression_repeatable)
}

// optional .Tanx.BidRequest.AdzInfo.Video video = 19;
inline bool BidRequest_AdzInfo::has_video() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BidRequest_AdzInfo::set_has_video() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BidRequest_AdzInfo::clear_has_video() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BidRequest_AdzInfo::clear_video() {
  if (video_ != NULL) video_->::Tanx::BidRequest_AdzInfo_Video::Clear();
  clear_has_video();
}
inline const ::Tanx::BidRequest_AdzInfo_Video& BidRequest_AdzInfo::video() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::Tanx::BidRequest_AdzInfo_Video* BidRequest_AdzInfo::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::Tanx::BidRequest_AdzInfo_Video;
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.AdzInfo.video)
  return video_;
}
inline ::Tanx::BidRequest_AdzInfo_Video* BidRequest_AdzInfo::release_video() {
  clear_has_video();
  ::Tanx::BidRequest_AdzInfo_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void BidRequest_AdzInfo::set_allocated_video(::Tanx::BidRequest_AdzInfo_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.AdzInfo.video)
}

// optional string campaign_date = 20;
inline bool BidRequest_AdzInfo::has_campaign_date() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidRequest_AdzInfo::set_has_campaign_date() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidRequest_AdzInfo::clear_has_campaign_date() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidRequest_AdzInfo::clear_campaign_date() {
  if (campaign_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_->clear();
  }
  clear_has_campaign_date();
}
inline const ::std::string& BidRequest_AdzInfo::campaign_date() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.campaign_date)
  return *campaign_date_;
}
inline void BidRequest_AdzInfo::set_campaign_date(const ::std::string& value) {
  set_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_ = new ::std::string;
  }
  campaign_date_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.AdzInfo.campaign_date)
}
inline void BidRequest_AdzInfo::set_campaign_date(const char* value) {
  set_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_ = new ::std::string;
  }
  campaign_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.AdzInfo.campaign_date)
}
inline void BidRequest_AdzInfo::set_campaign_date(const char* value, size_t size) {
  set_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_ = new ::std::string;
  }
  campaign_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.AdzInfo.campaign_date)
}
inline ::std::string* BidRequest_AdzInfo::mutable_campaign_date() {
  set_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.AdzInfo.campaign_date)
  return campaign_date_;
}
inline ::std::string* BidRequest_AdzInfo::release_campaign_date() {
  clear_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = campaign_date_;
    campaign_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_AdzInfo::set_allocated_campaign_date(::std::string* campaign_date) {
  if (campaign_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete campaign_date_;
  }
  if (campaign_date) {
    set_has_campaign_date();
    campaign_date_ = campaign_date;
  } else {
    clear_has_campaign_date();
    campaign_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.AdzInfo.campaign_date)
}

// repeated .Tanx.BidRequest.AdzInfo.Deal deals = 21;
inline int BidRequest_AdzInfo::deals_size() const {
  return deals_.size();
}
inline void BidRequest_AdzInfo::clear_deals() {
  deals_.Clear();
}
inline const ::Tanx::BidRequest_AdzInfo_Deal& BidRequest_AdzInfo::deals(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.AdzInfo.deals)
  return deals_.Get(index);
}
inline ::Tanx::BidRequest_AdzInfo_Deal* BidRequest_AdzInfo::mutable_deals(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.AdzInfo.deals)
  return deals_.Mutable(index);
}
inline ::Tanx::BidRequest_AdzInfo_Deal* BidRequest_AdzInfo::add_deals() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.AdzInfo.deals)
  return deals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_Deal >&
BidRequest_AdzInfo::deals() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.AdzInfo.deals)
  return deals_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo_Deal >*
BidRequest_AdzInfo::mutable_deals() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.AdzInfo.deals)
  return &deals_;
}

// -------------------------------------------------------------------

// BidRequest_UserAttribute

// required uint32 id = 1;
inline bool BidRequest_UserAttribute::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_UserAttribute::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_UserAttribute::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_UserAttribute::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BidRequest_UserAttribute::id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.UserAttribute.id)
  return id_;
}
inline void BidRequest_UserAttribute::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.UserAttribute.id)
}

// optional uint32 timestamp = 2;
inline bool BidRequest_UserAttribute::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_UserAttribute::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_UserAttribute::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_UserAttribute::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 BidRequest_UserAttribute::timestamp() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.UserAttribute.timestamp)
  return timestamp_;
}
inline void BidRequest_UserAttribute::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.UserAttribute.timestamp)
}

// -------------------------------------------------------------------

// BidRequest_PrivateInfo

// optional string tanx_cnaui = 1;
inline bool BidRequest_PrivateInfo::has_tanx_cnaui() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_PrivateInfo::set_has_tanx_cnaui() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_PrivateInfo::clear_has_tanx_cnaui() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_PrivateInfo::clear_tanx_cnaui() {
  if (tanx_cnaui_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tanx_cnaui_->clear();
  }
  clear_has_tanx_cnaui();
}
inline const ::std::string& BidRequest_PrivateInfo::tanx_cnaui() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.PrivateInfo.tanx_cnaui)
  return *tanx_cnaui_;
}
inline void BidRequest_PrivateInfo::set_tanx_cnaui(const ::std::string& value) {
  set_has_tanx_cnaui();
  if (tanx_cnaui_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tanx_cnaui_ = new ::std::string;
  }
  tanx_cnaui_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.PrivateInfo.tanx_cnaui)
}
inline void BidRequest_PrivateInfo::set_tanx_cnaui(const char* value) {
  set_has_tanx_cnaui();
  if (tanx_cnaui_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tanx_cnaui_ = new ::std::string;
  }
  tanx_cnaui_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.PrivateInfo.tanx_cnaui)
}
inline void BidRequest_PrivateInfo::set_tanx_cnaui(const char* value, size_t size) {
  set_has_tanx_cnaui();
  if (tanx_cnaui_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tanx_cnaui_ = new ::std::string;
  }
  tanx_cnaui_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.PrivateInfo.tanx_cnaui)
}
inline ::std::string* BidRequest_PrivateInfo::mutable_tanx_cnaui() {
  set_has_tanx_cnaui();
  if (tanx_cnaui_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tanx_cnaui_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.PrivateInfo.tanx_cnaui)
  return tanx_cnaui_;
}
inline ::std::string* BidRequest_PrivateInfo::release_tanx_cnaui() {
  clear_has_tanx_cnaui();
  if (tanx_cnaui_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tanx_cnaui_;
    tanx_cnaui_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_PrivateInfo::set_allocated_tanx_cnaui(::std::string* tanx_cnaui) {
  if (tanx_cnaui_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tanx_cnaui_;
  }
  if (tanx_cnaui) {
    set_has_tanx_cnaui();
    tanx_cnaui_ = tanx_cnaui;
  } else {
    clear_has_tanx_cnaui();
    tanx_cnaui_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.PrivateInfo.tanx_cnaui)
}

// optional string risk_control = 2;
inline bool BidRequest_PrivateInfo::has_risk_control() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_PrivateInfo::set_has_risk_control() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_PrivateInfo::clear_has_risk_control() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_PrivateInfo::clear_risk_control() {
  if (risk_control_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    risk_control_->clear();
  }
  clear_has_risk_control();
}
inline const ::std::string& BidRequest_PrivateInfo::risk_control() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.PrivateInfo.risk_control)
  return *risk_control_;
}
inline void BidRequest_PrivateInfo::set_risk_control(const ::std::string& value) {
  set_has_risk_control();
  if (risk_control_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    risk_control_ = new ::std::string;
  }
  risk_control_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.PrivateInfo.risk_control)
}
inline void BidRequest_PrivateInfo::set_risk_control(const char* value) {
  set_has_risk_control();
  if (risk_control_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    risk_control_ = new ::std::string;
  }
  risk_control_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.PrivateInfo.risk_control)
}
inline void BidRequest_PrivateInfo::set_risk_control(const char* value, size_t size) {
  set_has_risk_control();
  if (risk_control_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    risk_control_ = new ::std::string;
  }
  risk_control_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.PrivateInfo.risk_control)
}
inline ::std::string* BidRequest_PrivateInfo::mutable_risk_control() {
  set_has_risk_control();
  if (risk_control_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    risk_control_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.PrivateInfo.risk_control)
  return risk_control_;
}
inline ::std::string* BidRequest_PrivateInfo::release_risk_control() {
  clear_has_risk_control();
  if (risk_control_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = risk_control_;
    risk_control_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_PrivateInfo::set_allocated_risk_control(::std::string* risk_control) {
  if (risk_control_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete risk_control_;
  }
  if (risk_control) {
    set_has_risk_control();
    risk_control_ = risk_control;
  } else {
    clear_has_risk_control();
    risk_control_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.PrivateInfo.risk_control)
}

// optional string nick_name = 3;
inline bool BidRequest_PrivateInfo::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_PrivateInfo::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_PrivateInfo::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_PrivateInfo::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& BidRequest_PrivateInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.PrivateInfo.nick_name)
  return *nick_name_;
}
inline void BidRequest_PrivateInfo::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.PrivateInfo.nick_name)
}
inline void BidRequest_PrivateInfo::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.PrivateInfo.nick_name)
}
inline void BidRequest_PrivateInfo::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.PrivateInfo.nick_name)
}
inline ::std::string* BidRequest_PrivateInfo::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.PrivateInfo.nick_name)
  return nick_name_;
}
inline ::std::string* BidRequest_PrivateInfo::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_PrivateInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.PrivateInfo.nick_name)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_Device

// optional string platform = 1;
inline bool BidRequest_Mobile_Device::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Mobile_Device::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Mobile_Device::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& BidRequest_Mobile_Device::platform() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.platform)
  return *platform_;
}
inline void BidRequest_Mobile_Device::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.platform)
}
inline void BidRequest_Mobile_Device::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.platform)
}
inline void BidRequest_Mobile_Device::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.platform)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.platform)
  return platform_;
}
inline ::std::string* BidRequest_Mobile_Device::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.platform)
}

// optional string brand = 2;
inline bool BidRequest_Mobile_Device::has_brand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_brand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Mobile_Device::clear_has_brand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Mobile_Device::clear_brand() {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_->clear();
  }
  clear_has_brand();
}
inline const ::std::string& BidRequest_Mobile_Device::brand() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.brand)
  return *brand_;
}
inline void BidRequest_Mobile_Device::set_brand(const ::std::string& value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.brand)
}
inline void BidRequest_Mobile_Device::set_brand(const char* value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.brand)
}
inline void BidRequest_Mobile_Device::set_brand(const char* value, size_t size) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.brand)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_brand() {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.brand)
  return brand_;
}
inline ::std::string* BidRequest_Mobile_Device::release_brand() {
  clear_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = brand_;
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_brand(::std::string* brand) {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (brand) {
    set_has_brand();
    brand_ = brand;
  } else {
    clear_has_brand();
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.brand)
}

// optional string model = 3;
inline bool BidRequest_Mobile_Device::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Mobile_Device::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Mobile_Device::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& BidRequest_Mobile_Device::model() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.model)
  return *model_;
}
inline void BidRequest_Mobile_Device::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.model)
}
inline void BidRequest_Mobile_Device::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.model)
}
inline void BidRequest_Mobile_Device::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.model)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.model)
  return model_;
}
inline ::std::string* BidRequest_Mobile_Device::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.model)
}

// optional string os = 4;
inline bool BidRequest_Mobile_Device::has_os() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_os() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Mobile_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Mobile_Device::clear_os() {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& BidRequest_Mobile_Device::os() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.os)
  return *os_;
}
inline void BidRequest_Mobile_Device::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.os)
}
inline void BidRequest_Mobile_Device::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.os)
}
inline void BidRequest_Mobile_Device::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.os)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.os)
  return os_;
}
inline ::std::string* BidRequest_Mobile_Device::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.os)
}

// optional string os_version = 5;
inline bool BidRequest_Mobile_Device::has_os_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_os_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Mobile_Device::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Mobile_Device::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& BidRequest_Mobile_Device::os_version() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.os_version)
  return *os_version_;
}
inline void BidRequest_Mobile_Device::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.os_version)
}
inline void BidRequest_Mobile_Device::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.os_version)
}
inline void BidRequest_Mobile_Device::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.os_version)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.os_version)
  return os_version_;
}
inline ::std::string* BidRequest_Mobile_Device::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_os_version(::std::string* os_version) {
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (os_version) {
    set_has_os_version();
    os_version_ = os_version;
  } else {
    clear_has_os_version();
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.os_version)
}

// optional uint32 network = 6;
inline bool BidRequest_Mobile_Device::has_network() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_network() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Mobile_Device::clear_has_network() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Mobile_Device::clear_network() {
  network_ = 0u;
  clear_has_network();
}
inline ::google::protobuf::uint32 BidRequest_Mobile_Device::network() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.network)
  return network_;
}
inline void BidRequest_Mobile_Device::set_network(::google::protobuf::uint32 value) {
  set_has_network();
  network_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.network)
}

// optional int32 operator = 7;
inline bool BidRequest_Mobile_Device::has_operator_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_operator_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Mobile_Device::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Mobile_Device::clear_operator_() {
  operator__ = 0;
  clear_has_operator_();
}
inline ::google::protobuf::int32 BidRequest_Mobile_Device::operator_() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.operator)
  return operator__;
}
inline void BidRequest_Mobile_Device::set_operator_(::google::protobuf::int32 value) {
  set_has_operator_();
  operator__ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.operator)
}

// optional string longitude = 8;
inline bool BidRequest_Mobile_Device::has_longitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_longitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Mobile_Device::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Mobile_Device::clear_longitude() {
  if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_->clear();
  }
  clear_has_longitude();
}
inline const ::std::string& BidRequest_Mobile_Device::longitude() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.longitude)
  return *longitude_;
}
inline void BidRequest_Mobile_Device::set_longitude(const ::std::string& value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.longitude)
}
inline void BidRequest_Mobile_Device::set_longitude(const char* value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.longitude)
}
inline void BidRequest_Mobile_Device::set_longitude(const char* value, size_t size) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.longitude)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_longitude() {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.longitude)
  return longitude_;
}
inline ::std::string* BidRequest_Mobile_Device::release_longitude() {
  clear_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = longitude_;
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_longitude(::std::string* longitude) {
  if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longitude_;
  }
  if (longitude) {
    set_has_longitude();
    longitude_ = longitude;
  } else {
    clear_has_longitude();
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.longitude)
}

// optional string latitude = 9;
inline bool BidRequest_Mobile_Device::has_latitude() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_latitude() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Mobile_Device::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Mobile_Device::clear_latitude() {
  if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_->clear();
  }
  clear_has_latitude();
}
inline const ::std::string& BidRequest_Mobile_Device::latitude() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.latitude)
  return *latitude_;
}
inline void BidRequest_Mobile_Device::set_latitude(const ::std::string& value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.latitude)
}
inline void BidRequest_Mobile_Device::set_latitude(const char* value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.latitude)
}
inline void BidRequest_Mobile_Device::set_latitude(const char* value, size_t size) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.latitude)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_latitude() {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.latitude)
  return latitude_;
}
inline ::std::string* BidRequest_Mobile_Device::release_latitude() {
  clear_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = latitude_;
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_latitude(::std::string* latitude) {
  if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latitude_;
  }
  if (latitude) {
    set_has_latitude();
    latitude_ = latitude;
  } else {
    clear_has_latitude();
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.latitude)
}

// optional string device_size = 10;
inline bool BidRequest_Mobile_Device::has_device_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_device_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Mobile_Device::clear_has_device_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Mobile_Device::clear_device_size() {
  if (device_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_size_->clear();
  }
  clear_has_device_size();
}
inline const ::std::string& BidRequest_Mobile_Device::device_size() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.device_size)
  return *device_size_;
}
inline void BidRequest_Mobile_Device::set_device_size(const ::std::string& value) {
  set_has_device_size();
  if (device_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_size_ = new ::std::string;
  }
  device_size_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.device_size)
}
inline void BidRequest_Mobile_Device::set_device_size(const char* value) {
  set_has_device_size();
  if (device_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_size_ = new ::std::string;
  }
  device_size_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.device_size)
}
inline void BidRequest_Mobile_Device::set_device_size(const char* value, size_t size) {
  set_has_device_size();
  if (device_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_size_ = new ::std::string;
  }
  device_size_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.device_size)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_device_size() {
  set_has_device_size();
  if (device_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_size_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.device_size)
  return device_size_;
}
inline ::std::string* BidRequest_Mobile_Device::release_device_size() {
  clear_has_device_size();
  if (device_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_size_;
    device_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_device_size(::std::string* device_size) {
  if (device_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_size_;
  }
  if (device_size) {
    set_has_device_size();
    device_size_ = device_size;
  } else {
    clear_has_device_size();
    device_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.device_size)
}

// optional string device_id = 11;
inline bool BidRequest_Mobile_Device::has_device_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_device_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Mobile_Device::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Mobile_Device::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& BidRequest_Mobile_Device::device_id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.device_id)
  return *device_id_;
}
inline void BidRequest_Mobile_Device::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.device_id)
}
inline void BidRequest_Mobile_Device::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.device_id)
}
inline void BidRequest_Mobile_Device::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.device_id)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.device_id)
  return device_id_;
}
inline ::std::string* BidRequest_Mobile_Device::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.device_id)
}

// optional int32 device_pixel_ratio = 12 [default = 1000];
inline bool BidRequest_Mobile_Device::has_device_pixel_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_device_pixel_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Mobile_Device::clear_has_device_pixel_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Mobile_Device::clear_device_pixel_ratio() {
  device_pixel_ratio_ = 1000;
  clear_has_device_pixel_ratio();
}
inline ::google::protobuf::int32 BidRequest_Mobile_Device::device_pixel_ratio() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.device_pixel_ratio)
  return device_pixel_ratio_;
}
inline void BidRequest_Mobile_Device::set_device_pixel_ratio(::google::protobuf::int32 value) {
  set_has_device_pixel_ratio();
  device_pixel_ratio_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.device_pixel_ratio)
}

// optional .Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
inline bool BidRequest_Mobile_Device::has_screen_orientation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_screen_orientation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_Mobile_Device::clear_has_screen_orientation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_Mobile_Device::clear_screen_orientation() {
  screen_orientation_ = 0;
  clear_has_screen_orientation();
}
inline ::Tanx::BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::screen_orientation() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.screen_orientation)
  return static_cast< ::Tanx::BidRequest_Mobile_Device_ScreenOrientation >(screen_orientation_);
}
inline void BidRequest_Mobile_Device::set_screen_orientation(::Tanx::BidRequest_Mobile_Device_ScreenOrientation value) {
  assert(::Tanx::BidRequest_Mobile_Device_ScreenOrientation_IsValid(value));
  set_has_screen_orientation();
  screen_orientation_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.screen_orientation)
}

// optional string android_id = 14;
inline bool BidRequest_Mobile_Device::has_android_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_android_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_Mobile_Device::clear_has_android_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_Mobile_Device::clear_android_id() {
  if (android_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_id_->clear();
  }
  clear_has_android_id();
}
inline const ::std::string& BidRequest_Mobile_Device::android_id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.android_id)
  return *android_id_;
}
inline void BidRequest_Mobile_Device::set_android_id(const ::std::string& value) {
  set_has_android_id();
  if (android_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_id_ = new ::std::string;
  }
  android_id_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.android_id)
}
inline void BidRequest_Mobile_Device::set_android_id(const char* value) {
  set_has_android_id();
  if (android_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_id_ = new ::std::string;
  }
  android_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.android_id)
}
inline void BidRequest_Mobile_Device::set_android_id(const char* value, size_t size) {
  set_has_android_id();
  if (android_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_id_ = new ::std::string;
  }
  android_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.android_id)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_android_id() {
  set_has_android_id();
  if (android_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    android_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.android_id)
  return android_id_;
}
inline ::std::string* BidRequest_Mobile_Device::release_android_id() {
  clear_has_android_id();
  if (android_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = android_id_;
    android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_android_id(::std::string* android_id) {
  if (android_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete android_id_;
  }
  if (android_id) {
    set_has_android_id();
    android_id_ = android_id;
  } else {
    clear_has_android_id();
    android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.android_id)
}

// optional string idfa = 15;
inline bool BidRequest_Mobile_Device::has_idfa() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_idfa() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest_Mobile_Device::clear_has_idfa() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest_Mobile_Device::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& BidRequest_Mobile_Device::idfa() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.idfa)
  return *idfa_;
}
inline void BidRequest_Mobile_Device::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.idfa)
}
inline void BidRequest_Mobile_Device::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.idfa)
}
inline void BidRequest_Mobile_Device::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.idfa)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idfa_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.idfa)
  return idfa_;
}
inline ::std::string* BidRequest_Mobile_Device::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_idfa(::std::string* idfa) {
  if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idfa_;
  }
  if (idfa) {
    set_has_idfa();
    idfa_ = idfa;
  } else {
    clear_has_idfa();
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.idfa)
}

// optional string imei = 16;
inline bool BidRequest_Mobile_Device::has_imei() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_imei() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest_Mobile_Device::clear_has_imei() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest_Mobile_Device::clear_imei() {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& BidRequest_Mobile_Device::imei() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.imei)
  return *imei_;
}
inline void BidRequest_Mobile_Device::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.imei)
}
inline void BidRequest_Mobile_Device::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.imei)
}
inline void BidRequest_Mobile_Device::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.imei)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.imei)
  return imei_;
}
inline ::std::string* BidRequest_Mobile_Device::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.imei)
}

// optional string mac = 17;
inline bool BidRequest_Mobile_Device::has_mac() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_mac() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidRequest_Mobile_Device::clear_has_mac() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidRequest_Mobile_Device::clear_mac() {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& BidRequest_Mobile_Device::mac() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.Device.mac)
  return *mac_;
}
inline void BidRequest_Mobile_Device::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.Device.mac)
}
inline void BidRequest_Mobile_Device::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.Device.mac)
}
inline void BidRequest_Mobile_Device::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.Device.mac)
}
inline ::std::string* BidRequest_Mobile_Device::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.Device.mac)
  return mac_;
}
inline ::std::string* BidRequest_Mobile_Device::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.Device.mac)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_AppCategory

// required int32 id = 1;
inline bool BidRequest_Mobile_AppCategory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Mobile_AppCategory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Mobile_AppCategory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Mobile_AppCategory::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BidRequest_Mobile_AppCategory::id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.AppCategory.id)
  return id_;
}
inline void BidRequest_Mobile_AppCategory::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.AppCategory.id)
}

// required int32 confidence_level = 2;
inline bool BidRequest_Mobile_AppCategory::has_confidence_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Mobile_AppCategory::set_has_confidence_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Mobile_AppCategory::clear_has_confidence_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Mobile_AppCategory::clear_confidence_level() {
  confidence_level_ = 0;
  clear_has_confidence_level();
}
inline ::google::protobuf::int32 BidRequest_Mobile_AppCategory::confidence_level() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.AppCategory.confidence_level)
  return confidence_level_;
}
inline void BidRequest_Mobile_AppCategory::set_confidence_level(::google::protobuf::int32 value) {
  set_has_confidence_level();
  confidence_level_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.AppCategory.confidence_level)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_NativeAdTemplate_Area_Creative

// repeated int32 required_fields = 1;
inline int BidRequest_Mobile_NativeAdTemplate_Area_Creative::required_fields_size() const {
  return required_fields_.size();
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_required_fields() {
  required_fields_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::required_fields(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
  return required_fields_.Get(index);
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_required_fields(int index, ::google::protobuf::int32 value) {
  required_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::add_required_fields(::google::protobuf::int32 value) {
  required_fields_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile_NativeAdTemplate_Area_Creative::required_fields() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
  return required_fields_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_required_fields() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
  return &required_fields_;
}

// repeated int32 recommended_fields = 2;
inline int BidRequest_Mobile_NativeAdTemplate_Area_Creative::recommended_fields_size() const {
  return recommended_fields_.size();
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_recommended_fields() {
  recommended_fields_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::recommended_fields(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
  return recommended_fields_.Get(index);
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_recommended_fields(int index, ::google::protobuf::int32 value) {
  recommended_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::add_recommended_fields(::google::protobuf::int32 value) {
  recommended_fields_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile_NativeAdTemplate_Area_Creative::recommended_fields() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
  return recommended_fields_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_recommended_fields() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
  return &recommended_fields_;
}

// optional int32 title_max_safe_length = 3;
inline bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::has_title_max_safe_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_has_title_max_safe_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_has_title_max_safe_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_title_max_safe_length() {
  title_max_safe_length_ = 0;
  clear_has_title_max_safe_length();
}
inline ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::title_max_safe_length() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.title_max_safe_length)
  return title_max_safe_length_;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_title_max_safe_length(::google::protobuf::int32 value) {
  set_has_title_max_safe_length();
  title_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.title_max_safe_length)
}

// optional int32 ad_words_max_safe_length = 4;
inline bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::has_ad_words_max_safe_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_has_ad_words_max_safe_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_has_ad_words_max_safe_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_ad_words_max_safe_length() {
  ad_words_max_safe_length_ = 0;
  clear_has_ad_words_max_safe_length();
}
inline ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::ad_words_max_safe_length() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.ad_words_max_safe_length)
  return ad_words_max_safe_length_;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_ad_words_max_safe_length(::google::protobuf::int32 value) {
  set_has_ad_words_max_safe_length();
  ad_words_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.ad_words_max_safe_length)
}

// optional string image_size = 5;
inline bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::has_image_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_has_image_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_has_image_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_image_size() {
  if (image_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_size_->clear();
  }
  clear_has_image_size();
}
inline const ::std::string& BidRequest_Mobile_NativeAdTemplate_Area_Creative::image_size() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
  return *image_size_;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_image_size(const ::std::string& value) {
  set_has_image_size();
  if (image_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_size_ = new ::std::string;
  }
  image_size_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_image_size(const char* value) {
  set_has_image_size();
  if (image_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_size_ = new ::std::string;
  }
  image_size_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_image_size(const char* value, size_t size) {
  set_has_image_size();
  if (image_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_size_ = new ::std::string;
  }
  image_size_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
}
inline ::std::string* BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_image_size() {
  set_has_image_size();
  if (image_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_size_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
  return image_size_;
}
inline ::std::string* BidRequest_Mobile_NativeAdTemplate_Area_Creative::release_image_size() {
  clear_has_image_size();
  if (image_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_size_;
    image_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_allocated_image_size(::std::string* image_size) {
  if (image_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_size_;
  }
  if (image_size) {
    set_has_image_size();
    image_size_ = image_size;
  } else {
    clear_has_image_size();
    image_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
}

// repeated int32 action_fields = 6;
inline int BidRequest_Mobile_NativeAdTemplate_Area_Creative::action_fields_size() const {
  return action_fields_.size();
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_action_fields() {
  action_fields_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::action_fields(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
  return action_fields_.Get(index);
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_action_fields(int index, ::google::protobuf::int32 value) {
  action_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::add_action_fields(::google::protobuf::int32 value) {
  action_fields_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile_NativeAdTemplate_Area_Creative::action_fields() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
  return action_fields_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_action_fields() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
  return &action_fields_;
}

// repeated int32 multichoice_fields = 7;
inline int BidRequest_Mobile_NativeAdTemplate_Area_Creative::multichoice_fields_size() const {
  return multichoice_fields_.size();
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_multichoice_fields() {
  multichoice_fields_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::multichoice_fields(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
  return multichoice_fields_.Get(index);
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_multichoice_fields(int index, ::google::protobuf::int32 value) {
  multichoice_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
}
inline void BidRequest_Mobile_NativeAdTemplate_Area_Creative::add_multichoice_fields(::google::protobuf::int32 value) {
  multichoice_fields_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile_NativeAdTemplate_Area_Creative::multichoice_fields() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
  return multichoice_fields_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_multichoice_fields() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
  return &multichoice_fields_;
}

// -------------------------------------------------------------------

// BidRequest_Mobile_NativeAdTemplate_Area

// required int32 id = 1;
inline bool BidRequest_Mobile_NativeAdTemplate_Area::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area::id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.id)
  return id_;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.id)
}

// optional int32 creative_count = 2;
inline bool BidRequest_Mobile_NativeAdTemplate_Area::has_creative_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::set_has_creative_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::clear_has_creative_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::clear_creative_count() {
  creative_count_ = 0;
  clear_has_creative_count();
}
inline ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area::creative_count() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative_count)
  return creative_count_;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::set_creative_count(::google::protobuf::int32 value) {
  set_has_creative_count();
  creative_count_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative_count)
}

// optional .Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
inline bool BidRequest_Mobile_NativeAdTemplate_Area::has_creative() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::set_has_creative() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::clear_has_creative() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::clear_creative() {
  if (creative_ != NULL) creative_->::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative::Clear();
  clear_has_creative();
}
inline const ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative& BidRequest_Mobile_NativeAdTemplate_Area::creative() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative)
  return creative_ != NULL ? *creative_ : *default_instance_->creative_;
}
inline ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* BidRequest_Mobile_NativeAdTemplate_Area::mutable_creative() {
  set_has_creative();
  if (creative_ == NULL) creative_ = new ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative;
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative)
  return creative_;
}
inline ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* BidRequest_Mobile_NativeAdTemplate_Area::release_creative() {
  clear_has_creative();
  ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* temp = creative_;
  creative_ = NULL;
  return temp;
}
inline void BidRequest_Mobile_NativeAdTemplate_Area::set_allocated_creative(::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* creative) {
  delete creative_;
  creative_ = creative;
  if (creative) {
    set_has_creative();
  } else {
    clear_has_creative();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_NativeAdTemplate

// required string native_template_id = 1;
inline bool BidRequest_Mobile_NativeAdTemplate::has_native_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Mobile_NativeAdTemplate::set_has_native_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Mobile_NativeAdTemplate::clear_has_native_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Mobile_NativeAdTemplate::clear_native_template_id() {
  if (native_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_->clear();
  }
  clear_has_native_template_id();
}
inline const ::std::string& BidRequest_Mobile_NativeAdTemplate::native_template_id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
  return *native_template_id_;
}
inline void BidRequest_Mobile_NativeAdTemplate::set_native_template_id(const ::std::string& value) {
  set_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_ = new ::std::string;
  }
  native_template_id_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
}
inline void BidRequest_Mobile_NativeAdTemplate::set_native_template_id(const char* value) {
  set_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_ = new ::std::string;
  }
  native_template_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
}
inline void BidRequest_Mobile_NativeAdTemplate::set_native_template_id(const char* value, size_t size) {
  set_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_ = new ::std::string;
  }
  native_template_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
}
inline ::std::string* BidRequest_Mobile_NativeAdTemplate::mutable_native_template_id() {
  set_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
  return native_template_id_;
}
inline ::std::string* BidRequest_Mobile_NativeAdTemplate::release_native_template_id() {
  clear_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = native_template_id_;
    native_template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile_NativeAdTemplate::set_allocated_native_template_id(::std::string* native_template_id) {
  if (native_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete native_template_id_;
  }
  if (native_template_id) {
    set_has_native_template_id();
    native_template_id_ = native_template_id;
  } else {
    clear_has_native_template_id();
    native_template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
}

// repeated .Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
inline int BidRequest_Mobile_NativeAdTemplate::areas_size() const {
  return areas_.size();
}
inline void BidRequest_Mobile_NativeAdTemplate::clear_areas() {
  areas_.Clear();
}
inline const ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area& BidRequest_Mobile_NativeAdTemplate::areas(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return areas_.Get(index);
}
inline ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area* BidRequest_Mobile_NativeAdTemplate::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return areas_.Mutable(index);
}
inline ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area* BidRequest_Mobile_NativeAdTemplate::add_areas() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return areas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area >&
BidRequest_Mobile_NativeAdTemplate::areas() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return areas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area >*
BidRequest_Mobile_NativeAdTemplate::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return &areas_;
}

// -------------------------------------------------------------------

// BidRequest_Mobile

// optional bool is_app = 1;
inline bool BidRequest_Mobile::has_is_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Mobile::set_has_is_app() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Mobile::clear_has_is_app() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Mobile::clear_is_app() {
  is_app_ = false;
  clear_has_is_app();
}
inline bool BidRequest_Mobile::is_app() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.is_app)
  return is_app_;
}
inline void BidRequest_Mobile::set_is_app(bool value) {
  set_has_is_app();
  is_app_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.is_app)
}

// optional uint32 ad_num = 2;
inline bool BidRequest_Mobile::has_ad_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Mobile::set_has_ad_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Mobile::clear_has_ad_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Mobile::clear_ad_num() {
  ad_num_ = 0u;
  clear_has_ad_num();
}
inline ::google::protobuf::uint32 BidRequest_Mobile::ad_num() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.ad_num)
  return ad_num_;
}
inline void BidRequest_Mobile::set_ad_num(::google::protobuf::uint32 value) {
  set_has_ad_num();
  ad_num_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.ad_num)
}

// repeated string ad_keyword = 3;
inline int BidRequest_Mobile::ad_keyword_size() const {
  return ad_keyword_.size();
}
inline void BidRequest_Mobile::clear_ad_keyword() {
  ad_keyword_.Clear();
}
inline const ::std::string& BidRequest_Mobile::ad_keyword(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.ad_keyword)
  return ad_keyword_.Get(index);
}
inline ::std::string* BidRequest_Mobile::mutable_ad_keyword(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.ad_keyword)
  return ad_keyword_.Mutable(index);
}
inline void BidRequest_Mobile::set_ad_keyword(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.ad_keyword)
  ad_keyword_.Mutable(index)->assign(value);
}
inline void BidRequest_Mobile::set_ad_keyword(int index, const char* value) {
  ad_keyword_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.ad_keyword)
}
inline void BidRequest_Mobile::set_ad_keyword(int index, const char* value, size_t size) {
  ad_keyword_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.ad_keyword)
}
inline ::std::string* BidRequest_Mobile::add_ad_keyword() {
  return ad_keyword_.Add();
}
inline void BidRequest_Mobile::add_ad_keyword(const ::std::string& value) {
  ad_keyword_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.ad_keyword)
}
inline void BidRequest_Mobile::add_ad_keyword(const char* value) {
  ad_keyword_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidRequest.Mobile.ad_keyword)
}
inline void BidRequest_Mobile::add_ad_keyword(const char* value, size_t size) {
  ad_keyword_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidRequest.Mobile.ad_keyword)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Mobile::ad_keyword() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.ad_keyword)
  return ad_keyword_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Mobile::mutable_ad_keyword() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.ad_keyword)
  return &ad_keyword_;
}

// optional bool is_fullscreen = 4;
inline bool BidRequest_Mobile::has_is_fullscreen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Mobile::set_has_is_fullscreen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Mobile::clear_has_is_fullscreen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Mobile::clear_is_fullscreen() {
  is_fullscreen_ = false;
  clear_has_is_fullscreen();
}
inline bool BidRequest_Mobile::is_fullscreen() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.is_fullscreen)
  return is_fullscreen_;
}
inline void BidRequest_Mobile::set_is_fullscreen(bool value) {
  set_has_is_fullscreen();
  is_fullscreen_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.is_fullscreen)
}

// optional string package_name = 5;
inline bool BidRequest_Mobile::has_package_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Mobile::set_has_package_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Mobile::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Mobile::clear_package_name() {
  if (package_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_name_->clear();
  }
  clear_has_package_name();
}
inline const ::std::string& BidRequest_Mobile::package_name() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.package_name)
  return *package_name_;
}
inline void BidRequest_Mobile::set_package_name(const ::std::string& value) {
  set_has_package_name();
  if (package_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.package_name)
}
inline void BidRequest_Mobile::set_package_name(const char* value) {
  set_has_package_name();
  if (package_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.package_name)
}
inline void BidRequest_Mobile::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  if (package_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.package_name)
}
inline ::std::string* BidRequest_Mobile::mutable_package_name() {
  set_has_package_name();
  if (package_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.package_name)
  return package_name_;
}
inline ::std::string* BidRequest_Mobile::release_package_name() {
  clear_has_package_name();
  if (package_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = package_name_;
    package_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_package_name(::std::string* package_name) {
  if (package_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete package_name_;
  }
  if (package_name) {
    set_has_package_name();
    package_name_ = package_name;
  } else {
    clear_has_package_name();
    package_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.package_name)
}

// optional .Tanx.BidRequest.Mobile.Device device = 6;
inline bool BidRequest_Mobile::has_device() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Mobile::set_has_device() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Mobile::clear_has_device() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Mobile::clear_device() {
  if (device_ != NULL) device_->::Tanx::BidRequest_Mobile_Device::Clear();
  clear_has_device();
}
inline const ::Tanx::BidRequest_Mobile_Device& BidRequest_Mobile::device() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::Tanx::BidRequest_Mobile_Device* BidRequest_Mobile::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::Tanx::BidRequest_Mobile_Device;
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.device)
  return device_;
}
inline ::Tanx::BidRequest_Mobile_Device* BidRequest_Mobile::release_device() {
  clear_has_device();
  ::Tanx::BidRequest_Mobile_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidRequest_Mobile::set_allocated_device(::Tanx::BidRequest_Mobile_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.device)
}

// repeated string native_template_id = 7;
inline int BidRequest_Mobile::native_template_id_size() const {
  return native_template_id_.size();
}
inline void BidRequest_Mobile::clear_native_template_id() {
  native_template_id_.Clear();
}
inline const ::std::string& BidRequest_Mobile::native_template_id(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.native_template_id)
  return native_template_id_.Get(index);
}
inline ::std::string* BidRequest_Mobile::mutable_native_template_id(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.native_template_id)
  return native_template_id_.Mutable(index);
}
inline void BidRequest_Mobile::set_native_template_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.native_template_id)
  native_template_id_.Mutable(index)->assign(value);
}
inline void BidRequest_Mobile::set_native_template_id(int index, const char* value) {
  native_template_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.native_template_id)
}
inline void BidRequest_Mobile::set_native_template_id(int index, const char* value, size_t size) {
  native_template_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.native_template_id)
}
inline ::std::string* BidRequest_Mobile::add_native_template_id() {
  return native_template_id_.Add();
}
inline void BidRequest_Mobile::add_native_template_id(const ::std::string& value) {
  native_template_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.native_template_id)
}
inline void BidRequest_Mobile::add_native_template_id(const char* value) {
  native_template_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidRequest.Mobile.native_template_id)
}
inline void BidRequest_Mobile::add_native_template_id(const char* value, size_t size) {
  native_template_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidRequest.Mobile.native_template_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Mobile::native_template_id() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.native_template_id)
  return native_template_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Mobile::mutable_native_template_id() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.native_template_id)
  return &native_template_id_;
}

// repeated int32 landing_type = 8;
inline int BidRequest_Mobile::landing_type_size() const {
  return landing_type_.size();
}
inline void BidRequest_Mobile::clear_landing_type() {
  landing_type_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Mobile::landing_type(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.landing_type)
  return landing_type_.Get(index);
}
inline void BidRequest_Mobile::set_landing_type(int index, ::google::protobuf::int32 value) {
  landing_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.landing_type)
}
inline void BidRequest_Mobile::add_landing_type(::google::protobuf::int32 value) {
  landing_type_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.landing_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile::landing_type() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.landing_type)
  return landing_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile::mutable_landing_type() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.landing_type)
  return &landing_type_;
}

// optional string app_name = 9;
inline bool BidRequest_Mobile::has_app_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Mobile::set_has_app_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Mobile::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Mobile::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& BidRequest_Mobile::app_name() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.app_name)
  return *app_name_;
}
inline void BidRequest_Mobile::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Mobile.app_name)
}
inline void BidRequest_Mobile::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Mobile.app_name)
}
inline void BidRequest_Mobile::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Mobile.app_name)
}
inline ::std::string* BidRequest_Mobile::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.app_name)
  return app_name_;
}
inline ::std::string* BidRequest_Mobile::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Mobile.app_name)
}

// repeated .Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
inline int BidRequest_Mobile::app_categories_size() const {
  return app_categories_.size();
}
inline void BidRequest_Mobile::clear_app_categories() {
  app_categories_.Clear();
}
inline const ::Tanx::BidRequest_Mobile_AppCategory& BidRequest_Mobile::app_categories(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.app_categories)
  return app_categories_.Get(index);
}
inline ::Tanx::BidRequest_Mobile_AppCategory* BidRequest_Mobile::mutable_app_categories(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.app_categories)
  return app_categories_.Mutable(index);
}
inline ::Tanx::BidRequest_Mobile_AppCategory* BidRequest_Mobile::add_app_categories() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.app_categories)
  return app_categories_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_AppCategory >&
BidRequest_Mobile::app_categories() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.app_categories)
  return app_categories_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_AppCategory >*
BidRequest_Mobile::mutable_app_categories() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.app_categories)
  return &app_categories_;
}

// repeated .Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
inline int BidRequest_Mobile::native_ad_template_size() const {
  return native_ad_template_.size();
}
inline void BidRequest_Mobile::clear_native_ad_template() {
  native_ad_template_.Clear();
}
inline const ::Tanx::BidRequest_Mobile_NativeAdTemplate& BidRequest_Mobile::native_ad_template(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Mobile.native_ad_template)
  return native_ad_template_.Get(index);
}
inline ::Tanx::BidRequest_Mobile_NativeAdTemplate* BidRequest_Mobile::mutable_native_ad_template(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Mobile.native_ad_template)
  return native_ad_template_.Mutable(index);
}
inline ::Tanx::BidRequest_Mobile_NativeAdTemplate* BidRequest_Mobile::add_native_ad_template() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Mobile.native_ad_template)
  return native_ad_template_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate >&
BidRequest_Mobile::native_ad_template() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Mobile.native_ad_template)
  return native_ad_template_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Mobile_NativeAdTemplate >*
BidRequest_Mobile::mutable_native_ad_template() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Mobile.native_ad_template)
  return &native_ad_template_;
}

// -------------------------------------------------------------------

// BidRequest_ContentCategory

// required int32 id = 1;
inline bool BidRequest_ContentCategory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_ContentCategory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_ContentCategory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_ContentCategory::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BidRequest_ContentCategory::id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.ContentCategory.id)
  return id_;
}
inline void BidRequest_ContentCategory::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.ContentCategory.id)
}

// required int32 confidence_level = 2;
inline bool BidRequest_ContentCategory::has_confidence_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_ContentCategory::set_has_confidence_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_ContentCategory::clear_has_confidence_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_ContentCategory::clear_confidence_level() {
  confidence_level_ = 0;
  clear_has_confidence_level();
}
inline ::google::protobuf::int32 BidRequest_ContentCategory::confidence_level() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.ContentCategory.confidence_level)
  return confidence_level_;
}
inline void BidRequest_ContentCategory::set_confidence_level(::google::protobuf::int32 value) {
  set_has_confidence_level();
  confidence_level_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.ContentCategory.confidence_level)
}

// -------------------------------------------------------------------

// BidRequest_Video_Content

// optional string title = 1;
inline bool BidRequest_Video_Content::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Video_Content::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Video_Content::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Video_Content::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& BidRequest_Video_Content::title() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.Content.title)
  return *title_;
}
inline void BidRequest_Video_Content::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Video.Content.title)
}
inline void BidRequest_Video_Content::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Video.Content.title)
}
inline void BidRequest_Video_Content::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Video.Content.title)
}
inline ::std::string* BidRequest_Video_Content::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Video.Content.title)
  return title_;
}
inline ::std::string* BidRequest_Video_Content::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Video_Content::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Video.Content.title)
}

// optional int32 duration = 2;
inline bool BidRequest_Video_Content::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Video_Content::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Video_Content::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Video_Content::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 BidRequest_Video_Content::duration() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.Content.duration)
  return duration_;
}
inline void BidRequest_Video_Content::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Video.Content.duration)
}

// repeated string keywords = 3;
inline int BidRequest_Video_Content::keywords_size() const {
  return keywords_.size();
}
inline void BidRequest_Video_Content::clear_keywords() {
  keywords_.Clear();
}
inline const ::std::string& BidRequest_Video_Content::keywords(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.Content.keywords)
  return keywords_.Get(index);
}
inline ::std::string* BidRequest_Video_Content::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Video.Content.keywords)
  return keywords_.Mutable(index);
}
inline void BidRequest_Video_Content::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Video.Content.keywords)
  keywords_.Mutable(index)->assign(value);
}
inline void BidRequest_Video_Content::set_keywords(int index, const char* value) {
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Video.Content.keywords)
}
inline void BidRequest_Video_Content::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Video.Content.keywords)
}
inline ::std::string* BidRequest_Video_Content::add_keywords() {
  return keywords_.Add();
}
inline void BidRequest_Video_Content::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Video.Content.keywords)
}
inline void BidRequest_Video_Content::add_keywords(const char* value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidRequest.Video.Content.keywords)
}
inline void BidRequest_Video_Content::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidRequest.Video.Content.keywords)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Video_Content::keywords() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Video.Content.keywords)
  return keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Video_Content::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Video.Content.keywords)
  return &keywords_;
}

// -------------------------------------------------------------------

// BidRequest_Video

// repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
inline int BidRequest_Video::video_format_size() const {
  return video_format_.size();
}
inline void BidRequest_Video::clear_video_format() {
  video_format_.Clear();
}
inline ::Tanx::BidRequest_Video_VideoFormat BidRequest_Video::video_format(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.video_format)
  return static_cast< ::Tanx::BidRequest_Video_VideoFormat >(video_format_.Get(index));
}
inline void BidRequest_Video::set_video_format(int index, ::Tanx::BidRequest_Video_VideoFormat value) {
  assert(::Tanx::BidRequest_Video_VideoFormat_IsValid(value));
  video_format_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Video.video_format)
}
inline void BidRequest_Video::add_video_format(::Tanx::BidRequest_Video_VideoFormat value) {
  assert(::Tanx::BidRequest_Video_VideoFormat_IsValid(value));
  video_format_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Video.video_format)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Video::video_format() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Video.video_format)
  return video_format_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Video::mutable_video_format() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Video.video_format)
  return &video_format_;
}

// optional .Tanx.BidRequest.Video.Content content = 2;
inline bool BidRequest_Video::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Video::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Video::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Video::clear_content() {
  if (content_ != NULL) content_->::Tanx::BidRequest_Video_Content::Clear();
  clear_has_content();
}
inline const ::Tanx::BidRequest_Video_Content& BidRequest_Video::content() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::Tanx::BidRequest_Video_Content* BidRequest_Video::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::Tanx::BidRequest_Video_Content;
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Video.content)
  return content_;
}
inline ::Tanx::BidRequest_Video_Content* BidRequest_Video::release_content() {
  clear_has_content();
  ::Tanx::BidRequest_Video_Content* temp = content_;
  content_ = NULL;
  return temp;
}
inline void BidRequest_Video::set_allocated_content(::Tanx::BidRequest_Video_Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Video.content)
}

// optional int32 videoad_start_delay = 3;
inline bool BidRequest_Video::has_videoad_start_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Video::set_has_videoad_start_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Video::clear_has_videoad_start_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Video::clear_videoad_start_delay() {
  videoad_start_delay_ = 0;
  clear_has_videoad_start_delay();
}
inline ::google::protobuf::int32 BidRequest_Video::videoad_start_delay() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.videoad_start_delay)
  return videoad_start_delay_;
}
inline void BidRequest_Video::set_videoad_start_delay(::google::protobuf::int32 value) {
  set_has_videoad_start_delay();
  videoad_start_delay_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Video.videoad_start_delay)
}

// optional int32 videoad_section_start_delay = 4;
inline bool BidRequest_Video::has_videoad_section_start_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Video::set_has_videoad_section_start_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Video::clear_has_videoad_section_start_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Video::clear_videoad_section_start_delay() {
  videoad_section_start_delay_ = 0;
  clear_has_videoad_section_start_delay();
}
inline ::google::protobuf::int32 BidRequest_Video::videoad_section_start_delay() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.videoad_section_start_delay)
  return videoad_section_start_delay_;
}
inline void BidRequest_Video::set_videoad_section_start_delay(::google::protobuf::int32 value) {
  set_has_videoad_section_start_delay();
  videoad_section_start_delay_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Video.videoad_section_start_delay)
}

// optional int32 min_ad_duration = 5;
inline bool BidRequest_Video::has_min_ad_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Video::set_has_min_ad_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Video::clear_has_min_ad_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Video::clear_min_ad_duration() {
  min_ad_duration_ = 0;
  clear_has_min_ad_duration();
}
inline ::google::protobuf::int32 BidRequest_Video::min_ad_duration() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.min_ad_duration)
  return min_ad_duration_;
}
inline void BidRequest_Video::set_min_ad_duration(::google::protobuf::int32 value) {
  set_has_min_ad_duration();
  min_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Video.min_ad_duration)
}

// optional int32 max_ad_duration = 6;
inline bool BidRequest_Video::has_max_ad_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Video::set_has_max_ad_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Video::clear_has_max_ad_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Video::clear_max_ad_duration() {
  max_ad_duration_ = 0;
  clear_has_max_ad_duration();
}
inline ::google::protobuf::int32 BidRequest_Video::max_ad_duration() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.max_ad_duration)
  return max_ad_duration_;
}
inline void BidRequest_Video::set_max_ad_duration(::google::protobuf::int32 value) {
  set_has_max_ad_duration();
  max_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Video.max_ad_duration)
}

// optional string protocol = 7;
inline bool BidRequest_Video::has_protocol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Video::set_has_protocol() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Video::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Video::clear_protocol() {
  if (protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_->clear();
  }
  clear_has_protocol();
}
inline const ::std::string& BidRequest_Video::protocol() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Video.protocol)
  return *protocol_;
}
inline void BidRequest_Video::set_protocol(const ::std::string& value) {
  set_has_protocol();
  if (protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_ = new ::std::string;
  }
  protocol_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Video.protocol)
}
inline void BidRequest_Video::set_protocol(const char* value) {
  set_has_protocol();
  if (protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_ = new ::std::string;
  }
  protocol_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.Video.protocol)
}
inline void BidRequest_Video::set_protocol(const char* value, size_t size) {
  set_has_protocol();
  if (protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_ = new ::std::string;
  }
  protocol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.Video.protocol)
}
inline ::std::string* BidRequest_Video::mutable_protocol() {
  set_has_protocol();
  if (protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Video.protocol)
  return protocol_;
}
inline ::std::string* BidRequest_Video::release_protocol() {
  clear_has_protocol();
  if (protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = protocol_;
    protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Video::set_allocated_protocol(::std::string* protocol) {
  if (protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocol_;
  }
  if (protocol) {
    set_has_protocol();
    protocol_ = protocol;
  } else {
    clear_has_protocol();
    protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Video.protocol)
}

// -------------------------------------------------------------------

// BidRequest_Deal_PreferredDeal

// required uint32 dealid = 1;
inline bool BidRequest_Deal_PreferredDeal::has_dealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Deal_PreferredDeal::set_has_dealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Deal_PreferredDeal::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Deal_PreferredDeal::clear_dealid() {
  dealid_ = 0u;
  clear_has_dealid();
}
inline ::google::protobuf::uint32 BidRequest_Deal_PreferredDeal::dealid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.PreferredDeal.dealid)
  return dealid_;
}
inline void BidRequest_Deal_PreferredDeal::set_dealid(::google::protobuf::uint32 value) {
  set_has_dealid();
  dealid_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Deal.PreferredDeal.dealid)
}

// repeated uint32 advertiser_ids = 2;
inline int BidRequest_Deal_PreferredDeal::advertiser_ids_size() const {
  return advertiser_ids_.size();
}
inline void BidRequest_Deal_PreferredDeal::clear_advertiser_ids() {
  advertiser_ids_.Clear();
}
inline ::google::protobuf::uint32 BidRequest_Deal_PreferredDeal::advertiser_ids(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
  return advertiser_ids_.Get(index);
}
inline void BidRequest_Deal_PreferredDeal::set_advertiser_ids(int index, ::google::protobuf::uint32 value) {
  advertiser_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
}
inline void BidRequest_Deal_PreferredDeal::add_advertiser_ids(::google::protobuf::uint32 value) {
  advertiser_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_Deal_PreferredDeal::advertiser_ids() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
  return advertiser_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_Deal_PreferredDeal::mutable_advertiser_ids() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
  return &advertiser_ids_;
}

// optional uint32 fix_cpm_price = 3;
inline bool BidRequest_Deal_PreferredDeal::has_fix_cpm_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Deal_PreferredDeal::set_has_fix_cpm_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Deal_PreferredDeal::clear_has_fix_cpm_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Deal_PreferredDeal::clear_fix_cpm_price() {
  fix_cpm_price_ = 0u;
  clear_has_fix_cpm_price();
}
inline ::google::protobuf::uint32 BidRequest_Deal_PreferredDeal::fix_cpm_price() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.PreferredDeal.fix_cpm_price)
  return fix_cpm_price_;
}
inline void BidRequest_Deal_PreferredDeal::set_fix_cpm_price(::google::protobuf::uint32 value) {
  set_has_fix_cpm_price();
  fix_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Deal.PreferredDeal.fix_cpm_price)
}

// optional bool is_direct_buy = 4 [default = false];
inline bool BidRequest_Deal_PreferredDeal::has_is_direct_buy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Deal_PreferredDeal::set_has_is_direct_buy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Deal_PreferredDeal::clear_has_is_direct_buy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Deal_PreferredDeal::clear_is_direct_buy() {
  is_direct_buy_ = false;
  clear_has_is_direct_buy();
}
inline bool BidRequest_Deal_PreferredDeal::is_direct_buy() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.PreferredDeal.is_direct_buy)
  return is_direct_buy_;
}
inline void BidRequest_Deal_PreferredDeal::set_is_direct_buy(bool value) {
  set_has_is_direct_buy();
  is_direct_buy_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Deal.PreferredDeal.is_direct_buy)
}

// -------------------------------------------------------------------

// BidRequest_Deal_PrivateAuction_BuyerRule

// repeated uint32 advertiser_ids = 1;
inline int BidRequest_Deal_PrivateAuction_BuyerRule::advertiser_ids_size() const {
  return advertiser_ids_.size();
}
inline void BidRequest_Deal_PrivateAuction_BuyerRule::clear_advertiser_ids() {
  advertiser_ids_.Clear();
}
inline ::google::protobuf::uint32 BidRequest_Deal_PrivateAuction_BuyerRule::advertiser_ids(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
  return advertiser_ids_.Get(index);
}
inline void BidRequest_Deal_PrivateAuction_BuyerRule::set_advertiser_ids(int index, ::google::protobuf::uint32 value) {
  advertiser_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
}
inline void BidRequest_Deal_PrivateAuction_BuyerRule::add_advertiser_ids(::google::protobuf::uint32 value) {
  advertiser_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_Deal_PrivateAuction_BuyerRule::advertiser_ids() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
  return advertiser_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_Deal_PrivateAuction_BuyerRule::mutable_advertiser_ids() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
  return &advertiser_ids_;
}

// optional uint32 min_cpm_price = 2;
inline bool BidRequest_Deal_PrivateAuction_BuyerRule::has_min_cpm_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Deal_PrivateAuction_BuyerRule::set_has_min_cpm_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Deal_PrivateAuction_BuyerRule::clear_has_min_cpm_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Deal_PrivateAuction_BuyerRule::clear_min_cpm_price() {
  min_cpm_price_ = 0u;
  clear_has_min_cpm_price();
}
inline ::google::protobuf::uint32 BidRequest_Deal_PrivateAuction_BuyerRule::min_cpm_price() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.min_cpm_price)
  return min_cpm_price_;
}
inline void BidRequest_Deal_PrivateAuction_BuyerRule::set_min_cpm_price(::google::protobuf::uint32 value) {
  set_has_min_cpm_price();
  min_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.min_cpm_price)
}

// -------------------------------------------------------------------

// BidRequest_Deal_PrivateAuction

// required uint32 dealid = 1;
inline bool BidRequest_Deal_PrivateAuction::has_dealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Deal_PrivateAuction::set_has_dealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Deal_PrivateAuction::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Deal_PrivateAuction::clear_dealid() {
  dealid_ = 0u;
  clear_has_dealid();
}
inline ::google::protobuf::uint32 BidRequest_Deal_PrivateAuction::dealid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.PrivateAuction.dealid)
  return dealid_;
}
inline void BidRequest_Deal_PrivateAuction::set_dealid(::google::protobuf::uint32 value) {
  set_has_dealid();
  dealid_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.Deal.PrivateAuction.dealid)
}

// repeated .Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
inline int BidRequest_Deal_PrivateAuction::buyer_rules_size() const {
  return buyer_rules_.size();
}
inline void BidRequest_Deal_PrivateAuction::clear_buyer_rules() {
  buyer_rules_.Clear();
}
inline const ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule& BidRequest_Deal_PrivateAuction::buyer_rules(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return buyer_rules_.Get(index);
}
inline ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule* BidRequest_Deal_PrivateAuction::mutable_buyer_rules(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return buyer_rules_.Mutable(index);
}
inline ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule* BidRequest_Deal_PrivateAuction::add_buyer_rules() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return buyer_rules_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule >&
BidRequest_Deal_PrivateAuction::buyer_rules() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return buyer_rules_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule >*
BidRequest_Deal_PrivateAuction::mutable_buyer_rules() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return &buyer_rules_;
}

// -------------------------------------------------------------------

// BidRequest_Deal

// optional .Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
inline bool BidRequest_Deal::has_prefer_deal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Deal::set_has_prefer_deal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Deal::clear_has_prefer_deal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Deal::clear_prefer_deal() {
  if (prefer_deal_ != NULL) prefer_deal_->::Tanx::BidRequest_Deal_PreferredDeal::Clear();
  clear_has_prefer_deal();
}
inline const ::Tanx::BidRequest_Deal_PreferredDeal& BidRequest_Deal::prefer_deal() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.prefer_deal)
  return prefer_deal_ != NULL ? *prefer_deal_ : *default_instance_->prefer_deal_;
}
inline ::Tanx::BidRequest_Deal_PreferredDeal* BidRequest_Deal::mutable_prefer_deal() {
  set_has_prefer_deal();
  if (prefer_deal_ == NULL) prefer_deal_ = new ::Tanx::BidRequest_Deal_PreferredDeal;
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Deal.prefer_deal)
  return prefer_deal_;
}
inline ::Tanx::BidRequest_Deal_PreferredDeal* BidRequest_Deal::release_prefer_deal() {
  clear_has_prefer_deal();
  ::Tanx::BidRequest_Deal_PreferredDeal* temp = prefer_deal_;
  prefer_deal_ = NULL;
  return temp;
}
inline void BidRequest_Deal::set_allocated_prefer_deal(::Tanx::BidRequest_Deal_PreferredDeal* prefer_deal) {
  delete prefer_deal_;
  prefer_deal_ = prefer_deal;
  if (prefer_deal) {
    set_has_prefer_deal();
  } else {
    clear_has_prefer_deal();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Deal.prefer_deal)
}

// optional .Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
inline bool BidRequest_Deal::has_priv_auc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Deal::set_has_priv_auc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Deal::clear_has_priv_auc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Deal::clear_priv_auc() {
  if (priv_auc_ != NULL) priv_auc_->::Tanx::BidRequest_Deal_PrivateAuction::Clear();
  clear_has_priv_auc();
}
inline const ::Tanx::BidRequest_Deal_PrivateAuction& BidRequest_Deal::priv_auc() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.Deal.priv_auc)
  return priv_auc_ != NULL ? *priv_auc_ : *default_instance_->priv_auc_;
}
inline ::Tanx::BidRequest_Deal_PrivateAuction* BidRequest_Deal::mutable_priv_auc() {
  set_has_priv_auc();
  if (priv_auc_ == NULL) priv_auc_ = new ::Tanx::BidRequest_Deal_PrivateAuction;
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.Deal.priv_auc)
  return priv_auc_;
}
inline ::Tanx::BidRequest_Deal_PrivateAuction* BidRequest_Deal::release_priv_auc() {
  clear_has_priv_auc();
  ::Tanx::BidRequest_Deal_PrivateAuction* temp = priv_auc_;
  priv_auc_ = NULL;
  return temp;
}
inline void BidRequest_Deal::set_allocated_priv_auc(::Tanx::BidRequest_Deal_PrivateAuction* priv_auc) {
  delete priv_auc_;
  priv_auc_ = priv_auc;
  if (priv_auc) {
    set_has_priv_auc();
  } else {
    clear_has_priv_auc();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.Deal.priv_auc)
}

// -------------------------------------------------------------------

// BidRequest_CrowdCategory

// required int32 id = 1;
inline bool BidRequest_CrowdCategory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_CrowdCategory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_CrowdCategory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_CrowdCategory::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BidRequest_CrowdCategory::id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.CrowdCategory.id)
  return id_;
}
inline void BidRequest_CrowdCategory::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.CrowdCategory.id)
}

// optional uint32 confidence_level = 2;
inline bool BidRequest_CrowdCategory::has_confidence_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_CrowdCategory::set_has_confidence_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_CrowdCategory::clear_has_confidence_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_CrowdCategory::clear_confidence_level() {
  confidence_level_ = 0u;
  clear_has_confidence_level();
}
inline ::google::protobuf::uint32 BidRequest_CrowdCategory::confidence_level() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.CrowdCategory.confidence_level)
  return confidence_level_;
}
inline void BidRequest_CrowdCategory::set_confidence_level(::google::protobuf::uint32 value) {
  set_has_confidence_level();
  confidence_level_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.CrowdCategory.confidence_level)
}

// -------------------------------------------------------------------

// BidRequest

// required int32 version = 1;
inline bool BidRequest::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 BidRequest::version() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.version)
  return version_;
}
inline void BidRequest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.version)
}

// required string bid = 2;
inline bool BidRequest::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest::clear_bid() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_->clear();
  }
  clear_has_bid();
}
inline const ::std::string& BidRequest::bid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.bid)
  return *bid_;
}
inline void BidRequest::set_bid(const ::std::string& value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.bid)
}
inline void BidRequest::set_bid(const char* value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.bid)
}
inline void BidRequest::set_bid(const char* value, size_t size) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.bid)
}
inline ::std::string* BidRequest::mutable_bid() {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.bid)
  return bid_;
}
inline ::std::string* BidRequest::release_bid() {
  clear_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_;
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_bid(::std::string* bid) {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (bid) {
    set_has_bid();
    bid_ = bid;
  } else {
    clear_has_bid();
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.bid)
}

// optional uint32 is_test = 11 [default = 0];
inline bool BidRequest::has_is_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest::set_has_is_test() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest::clear_has_is_test() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest::clear_is_test() {
  is_test_ = 0u;
  clear_has_is_test();
}
inline ::google::protobuf::uint32 BidRequest::is_test() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.is_test)
  return is_test_;
}
inline void BidRequest::set_is_test(::google::protobuf::uint32 value) {
  set_has_is_test();
  is_test_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.is_test)
}

// optional uint32 is_ping = 12 [default = 0];
inline bool BidRequest::has_is_ping() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest::set_has_is_ping() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest::clear_has_is_ping() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest::clear_is_ping() {
  is_ping_ = 0u;
  clear_has_is_ping();
}
inline ::google::protobuf::uint32 BidRequest::is_ping() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.is_ping)
  return is_ping_;
}
inline void BidRequest::set_is_ping(::google::protobuf::uint32 value) {
  set_has_is_ping();
  is_ping_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.is_ping)
}

// optional string tid = 3;
inline bool BidRequest::has_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest::set_has_tid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest::clear_has_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest::clear_tid() {
  if (tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_->clear();
  }
  clear_has_tid();
}
inline const ::std::string& BidRequest::tid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.tid)
  return *tid_;
}
inline void BidRequest::set_tid(const ::std::string& value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.tid)
}
inline void BidRequest::set_tid(const char* value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.tid)
}
inline void BidRequest::set_tid(const char* value, size_t size) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_ = new ::std::string;
  }
  tid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.tid)
}
inline ::std::string* BidRequest::mutable_tid() {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.tid)
  return tid_;
}
inline ::std::string* BidRequest::release_tid() {
  clear_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tid_;
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_tid(::std::string* tid) {
  if (tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tid_;
  }
  if (tid) {
    set_has_tid();
    tid_ = tid;
  } else {
    clear_has_tid();
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.tid)
}

// optional string ip = 4;
inline bool BidRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BidRequest::ip() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.ip)
  return *ip_;
}
inline void BidRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.ip)
}
inline void BidRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.ip)
}
inline void BidRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.ip)
}
inline ::std::string* BidRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.ip)
  return ip_;
}
inline ::std::string* BidRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.ip)
}

// optional string user_agent = 5;
inline bool BidRequest::has_user_agent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest::set_has_user_agent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest::clear_user_agent() {
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_->clear();
  }
  clear_has_user_agent();
}
inline const ::std::string& BidRequest::user_agent() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.user_agent)
  return *user_agent_;
}
inline void BidRequest::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.user_agent)
}
inline void BidRequest::set_user_agent(const char* value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.user_agent)
}
inline void BidRequest::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.user_agent)
}
inline ::std::string* BidRequest::mutable_user_agent() {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.user_agent)
  return user_agent_;
}
inline ::std::string* BidRequest::release_user_agent() {
  clear_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_agent_;
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_agent_;
  }
  if (user_agent) {
    set_has_user_agent();
    user_agent_ = user_agent;
  } else {
    clear_has_user_agent();
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.user_agent)
}

// optional int32 timezone_offset = 13;
inline bool BidRequest::has_timezone_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest::set_has_timezone_offset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest::clear_has_timezone_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest::clear_timezone_offset() {
  timezone_offset_ = 0;
  clear_has_timezone_offset();
}
inline ::google::protobuf::int32 BidRequest::timezone_offset() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.timezone_offset)
  return timezone_offset_;
}
inline void BidRequest::set_timezone_offset(::google::protobuf::int32 value) {
  set_has_timezone_offset();
  timezone_offset_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.timezone_offset)
}

// repeated int32 user_vertical = 14;
inline int BidRequest::user_vertical_size() const {
  return user_vertical_.size();
}
inline void BidRequest::clear_user_vertical() {
  user_vertical_.Clear();
}
inline ::google::protobuf::int32 BidRequest::user_vertical(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.user_vertical)
  return user_vertical_.Get(index);
}
inline void BidRequest::set_user_vertical(int index, ::google::protobuf::int32 value) {
  user_vertical_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.user_vertical)
}
inline void BidRequest::add_user_vertical(::google::protobuf::int32 value) {
  user_vertical_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.user_vertical)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::user_vertical() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.user_vertical)
  return user_vertical_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_user_vertical() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.user_vertical)
  return &user_vertical_;
}

// optional uint32 tid_version = 19;
inline bool BidRequest::has_tid_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest::set_has_tid_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest::clear_has_tid_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest::clear_tid_version() {
  tid_version_ = 0u;
  clear_has_tid_version();
}
inline ::google::protobuf::uint32 BidRequest::tid_version() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.tid_version)
  return tid_version_;
}
inline void BidRequest::set_tid_version(::google::protobuf::uint32 value) {
  set_has_tid_version();
  tid_version_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.tid_version)
}

// repeated string excluded_click_through_url = 6;
inline int BidRequest::excluded_click_through_url_size() const {
  return excluded_click_through_url_.size();
}
inline void BidRequest::clear_excluded_click_through_url() {
  excluded_click_through_url_.Clear();
}
inline const ::std::string& BidRequest::excluded_click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.excluded_click_through_url)
  return excluded_click_through_url_.Get(index);
}
inline ::std::string* BidRequest::mutable_excluded_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.excluded_click_through_url)
  return excluded_click_through_url_.Mutable(index);
}
inline void BidRequest::set_excluded_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.excluded_click_through_url)
  excluded_click_through_url_.Mutable(index)->assign(value);
}
inline void BidRequest::set_excluded_click_through_url(int index, const char* value) {
  excluded_click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.excluded_click_through_url)
}
inline void BidRequest::set_excluded_click_through_url(int index, const char* value, size_t size) {
  excluded_click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.excluded_click_through_url)
}
inline ::std::string* BidRequest::add_excluded_click_through_url() {
  return excluded_click_through_url_.Add();
}
inline void BidRequest::add_excluded_click_through_url(const ::std::string& value) {
  excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.excluded_click_through_url)
}
inline void BidRequest::add_excluded_click_through_url(const char* value) {
  excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidRequest.excluded_click_through_url)
}
inline void BidRequest::add_excluded_click_through_url(const char* value, size_t size) {
  excluded_click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidRequest.excluded_click_through_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::excluded_click_through_url() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.excluded_click_through_url)
  return excluded_click_through_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_excluded_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.excluded_click_through_url)
  return &excluded_click_through_url_;
}

// optional string url = 7;
inline bool BidRequest::has_url() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest::set_has_url() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidRequest::url() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.url)
  return *url_;
}
inline void BidRequest::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.url)
}
inline void BidRequest::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.url)
}
inline void BidRequest::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.url)
}
inline ::std::string* BidRequest::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.url)
  return url_;
}
inline ::std::string* BidRequest::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.url)
}

// optional uint32 category = 8;
inline bool BidRequest::has_category() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest::set_has_category() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest::clear_has_category() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest::clear_category() {
  category_ = 0u;
  clear_has_category();
}
inline ::google::protobuf::uint32 BidRequest::category() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.category)
  return category_;
}
inline void BidRequest::set_category(::google::protobuf::uint32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.category)
}

// optional uint32 adx_type = 9 [default = 0];
inline bool BidRequest::has_adx_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest::set_has_adx_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest::clear_has_adx_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest::clear_adx_type() {
  adx_type_ = 0u;
  clear_has_adx_type();
}
inline ::google::protobuf::uint32 BidRequest::adx_type() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.adx_type)
  return adx_type_;
}
inline void BidRequest::set_adx_type(::google::protobuf::uint32 value) {
  set_has_adx_type();
  adx_type_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.adx_type)
}

// optional string anonymous_id = 15;
inline bool BidRequest::has_anonymous_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest::set_has_anonymous_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest::clear_has_anonymous_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest::clear_anonymous_id() {
  if (anonymous_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_->clear();
  }
  clear_has_anonymous_id();
}
inline const ::std::string& BidRequest::anonymous_id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.anonymous_id)
  return *anonymous_id_;
}
inline void BidRequest::set_anonymous_id(const ::std::string& value) {
  set_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_ = new ::std::string;
  }
  anonymous_id_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.anonymous_id)
}
inline void BidRequest::set_anonymous_id(const char* value) {
  set_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_ = new ::std::string;
  }
  anonymous_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.anonymous_id)
}
inline void BidRequest::set_anonymous_id(const char* value, size_t size) {
  set_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_ = new ::std::string;
  }
  anonymous_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.anonymous_id)
}
inline ::std::string* BidRequest::mutable_anonymous_id() {
  set_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.anonymous_id)
  return anonymous_id_;
}
inline ::std::string* BidRequest::release_anonymous_id() {
  clear_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = anonymous_id_;
    anonymous_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_anonymous_id(::std::string* anonymous_id) {
  if (anonymous_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete anonymous_id_;
  }
  if (anonymous_id) {
    set_has_anonymous_id();
    anonymous_id_ = anonymous_id;
  } else {
    clear_has_anonymous_id();
    anonymous_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.anonymous_id)
}

// optional string detected_language = 16;
inline bool BidRequest::has_detected_language() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest::set_has_detected_language() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest::clear_has_detected_language() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest::clear_detected_language() {
  if (detected_language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detected_language_->clear();
  }
  clear_has_detected_language();
}
inline const ::std::string& BidRequest::detected_language() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.detected_language)
  return *detected_language_;
}
inline void BidRequest::set_detected_language(const ::std::string& value) {
  set_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detected_language_ = new ::std::string;
  }
  detected_language_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.detected_language)
}
inline void BidRequest::set_detected_language(const char* value) {
  set_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detected_language_ = new ::std::string;
  }
  detected_language_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.detected_language)
}
inline void BidRequest::set_detected_language(const char* value, size_t size) {
  set_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detected_language_ = new ::std::string;
  }
  detected_language_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.detected_language)
}
inline ::std::string* BidRequest::mutable_detected_language() {
  set_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detected_language_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.detected_language)
  return detected_language_;
}
inline ::std::string* BidRequest::release_detected_language() {
  clear_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = detected_language_;
    detected_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_detected_language(::std::string* detected_language) {
  if (detected_language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detected_language_;
  }
  if (detected_language) {
    set_has_detected_language();
    detected_language_ = detected_language;
  } else {
    clear_has_detected_language();
    detected_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.detected_language)
}

// optional int32 category_version = 18;
inline bool BidRequest::has_category_version() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidRequest::set_has_category_version() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidRequest::clear_has_category_version() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidRequest::clear_category_version() {
  category_version_ = 0;
  clear_has_category_version();
}
inline ::google::protobuf::int32 BidRequest::category_version() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.category_version)
  return category_version_;
}
inline void BidRequest::set_category_version(::google::protobuf::int32 value) {
  set_has_category_version();
  category_version_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.category_version)
}

// optional .Tanx.BidRequest.Content content = 32;
inline bool BidRequest::has_content() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest::set_has_content() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest::clear_content() {
  if (content_ != NULL) content_->::Tanx::BidRequest_Content::Clear();
  clear_has_content();
}
inline const ::Tanx::BidRequest_Content& BidRequest::content() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::Tanx::BidRequest_Content* BidRequest::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::Tanx::BidRequest_Content;
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.content)
  return content_;
}
inline ::Tanx::BidRequest_Content* BidRequest::release_content() {
  clear_has_content();
  ::Tanx::BidRequest_Content* temp = content_;
  content_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_content(::Tanx::BidRequest_Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.content)
}

// repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
inline int BidRequest::adzinfo_size() const {
  return adzinfo_.size();
}
inline void BidRequest::clear_adzinfo() {
  adzinfo_.Clear();
}
inline const ::Tanx::BidRequest_AdzInfo& BidRequest::adzinfo(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.adzinfo)
  return adzinfo_.Get(index);
}
inline ::Tanx::BidRequest_AdzInfo* BidRequest::mutable_adzinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.adzinfo)
  return adzinfo_.Mutable(index);
}
inline ::Tanx::BidRequest_AdzInfo* BidRequest::add_adzinfo() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.adzinfo)
  return adzinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo >&
BidRequest::adzinfo() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.adzinfo)
  return adzinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_AdzInfo >*
BidRequest::mutable_adzinfo() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.adzinfo)
  return &adzinfo_;
}

// repeated int32 excluded_sensitive_category = 17;
inline int BidRequest::excluded_sensitive_category_size() const {
  return excluded_sensitive_category_.size();
}
inline void BidRequest::clear_excluded_sensitive_category() {
  excluded_sensitive_category_.Clear();
}
inline ::google::protobuf::int32 BidRequest::excluded_sensitive_category(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.excluded_sensitive_category)
  return excluded_sensitive_category_.Get(index);
}
inline void BidRequest::set_excluded_sensitive_category(int index, ::google::protobuf::int32 value) {
  excluded_sensitive_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.excluded_sensitive_category)
}
inline void BidRequest::add_excluded_sensitive_category(::google::protobuf::int32 value) {
  excluded_sensitive_category_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.excluded_sensitive_category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::excluded_sensitive_category() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.excluded_sensitive_category)
  return excluded_sensitive_category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_excluded_sensitive_category() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.excluded_sensitive_category)
  return &excluded_sensitive_category_;
}

// repeated int32 excluded_ad_category = 20;
inline int BidRequest::excluded_ad_category_size() const {
  return excluded_ad_category_.size();
}
inline void BidRequest::clear_excluded_ad_category() {
  excluded_ad_category_.Clear();
}
inline ::google::protobuf::int32 BidRequest::excluded_ad_category(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.excluded_ad_category)
  return excluded_ad_category_.Get(index);
}
inline void BidRequest::set_excluded_ad_category(int index, ::google::protobuf::int32 value) {
  excluded_ad_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.excluded_ad_category)
}
inline void BidRequest::add_excluded_ad_category(::google::protobuf::int32 value) {
  excluded_ad_category_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.excluded_ad_category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::excluded_ad_category() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.excluded_ad_category)
  return excluded_ad_category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_excluded_ad_category() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.excluded_ad_category)
  return &excluded_ad_category_;
}

// optional string hosted_match_data = 21;
inline bool BidRequest::has_hosted_match_data() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BidRequest::set_has_hosted_match_data() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BidRequest::clear_has_hosted_match_data() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BidRequest::clear_hosted_match_data() {
  if (hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_->clear();
  }
  clear_has_hosted_match_data();
}
inline const ::std::string& BidRequest::hosted_match_data() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.hosted_match_data)
  return *hosted_match_data_;
}
inline void BidRequest::set_hosted_match_data(const ::std::string& value) {
  set_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_ = new ::std::string;
  }
  hosted_match_data_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.hosted_match_data)
}
inline void BidRequest::set_hosted_match_data(const char* value) {
  set_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_ = new ::std::string;
  }
  hosted_match_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.hosted_match_data)
}
inline void BidRequest::set_hosted_match_data(const char* value, size_t size) {
  set_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_ = new ::std::string;
  }
  hosted_match_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.hosted_match_data)
}
inline ::std::string* BidRequest::mutable_hosted_match_data() {
  set_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.hosted_match_data)
  return hosted_match_data_;
}
inline ::std::string* BidRequest::release_hosted_match_data() {
  clear_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hosted_match_data_;
    hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_hosted_match_data(::std::string* hosted_match_data) {
  if (hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hosted_match_data_;
  }
  if (hosted_match_data) {
    set_has_hosted_match_data();
    hosted_match_data_ = hosted_match_data;
  } else {
    clear_has_hosted_match_data();
    hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.hosted_match_data)
}

// repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
inline int BidRequest::user_attribute_size() const {
  return user_attribute_.size();
}
inline void BidRequest::clear_user_attribute() {
  user_attribute_.Clear();
}
inline const ::Tanx::BidRequest_UserAttribute& BidRequest::user_attribute(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.user_attribute)
  return user_attribute_.Get(index);
}
inline ::Tanx::BidRequest_UserAttribute* BidRequest::mutable_user_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.user_attribute)
  return user_attribute_.Mutable(index);
}
inline ::Tanx::BidRequest_UserAttribute* BidRequest::add_user_attribute() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.user_attribute)
  return user_attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_UserAttribute >&
BidRequest::user_attribute() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.user_attribute)
  return user_attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_UserAttribute >*
BidRequest::mutable_user_attribute() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.user_attribute)
  return &user_attribute_;
}

// optional string page_session_id = 23;
inline bool BidRequest::has_page_session_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BidRequest::set_has_page_session_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BidRequest::clear_has_page_session_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BidRequest::clear_page_session_id() {
  if (page_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_session_id_->clear();
  }
  clear_has_page_session_id();
}
inline const ::std::string& BidRequest::page_session_id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.page_session_id)
  return *page_session_id_;
}
inline void BidRequest::set_page_session_id(const ::std::string& value) {
  set_has_page_session_id();
  if (page_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_session_id_ = new ::std::string;
  }
  page_session_id_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.page_session_id)
}
inline void BidRequest::set_page_session_id(const char* value) {
  set_has_page_session_id();
  if (page_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_session_id_ = new ::std::string;
  }
  page_session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.page_session_id)
}
inline void BidRequest::set_page_session_id(const char* value, size_t size) {
  set_has_page_session_id();
  if (page_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_session_id_ = new ::std::string;
  }
  page_session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.page_session_id)
}
inline ::std::string* BidRequest::mutable_page_session_id() {
  set_has_page_session_id();
  if (page_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.page_session_id)
  return page_session_id_;
}
inline ::std::string* BidRequest::release_page_session_id() {
  clear_has_page_session_id();
  if (page_session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = page_session_id_;
    page_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_page_session_id(::std::string* page_session_id) {
  if (page_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_session_id_;
  }
  if (page_session_id) {
    set_has_page_session_id();
    page_session_id_ = page_session_id;
  } else {
    clear_has_page_session_id();
    page_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.page_session_id)
}

// repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
inline int BidRequest::private_info_size() const {
  return private_info_.size();
}
inline void BidRequest::clear_private_info() {
  private_info_.Clear();
}
inline const ::Tanx::BidRequest_PrivateInfo& BidRequest::private_info(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.private_info)
  return private_info_.Get(index);
}
inline ::Tanx::BidRequest_PrivateInfo* BidRequest::mutable_private_info(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.private_info)
  return private_info_.Mutable(index);
}
inline ::Tanx::BidRequest_PrivateInfo* BidRequest::add_private_info() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.private_info)
  return private_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_PrivateInfo >&
BidRequest::private_info() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.private_info)
  return private_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_PrivateInfo >*
BidRequest::mutable_private_info() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.private_info)
  return &private_info_;
}

// optional .Tanx.BidRequest.Mobile mobile = 25;
inline bool BidRequest::has_mobile() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BidRequest::set_has_mobile() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BidRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BidRequest::clear_mobile() {
  if (mobile_ != NULL) mobile_->::Tanx::BidRequest_Mobile::Clear();
  clear_has_mobile();
}
inline const ::Tanx::BidRequest_Mobile& BidRequest::mobile() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.mobile)
  return mobile_ != NULL ? *mobile_ : *default_instance_->mobile_;
}
inline ::Tanx::BidRequest_Mobile* BidRequest::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == NULL) mobile_ = new ::Tanx::BidRequest_Mobile;
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.mobile)
  return mobile_;
}
inline ::Tanx::BidRequest_Mobile* BidRequest::release_mobile() {
  clear_has_mobile();
  ::Tanx::BidRequest_Mobile* temp = mobile_;
  mobile_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_mobile(::Tanx::BidRequest_Mobile* mobile) {
  delete mobile_;
  mobile_ = mobile;
  if (mobile) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.mobile)
}

// repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
inline int BidRequest::content_categories_size() const {
  return content_categories_.size();
}
inline void BidRequest::clear_content_categories() {
  content_categories_.Clear();
}
inline const ::Tanx::BidRequest_ContentCategory& BidRequest::content_categories(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.content_categories)
  return content_categories_.Get(index);
}
inline ::Tanx::BidRequest_ContentCategory* BidRequest::mutable_content_categories(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.content_categories)
  return content_categories_.Mutable(index);
}
inline ::Tanx::BidRequest_ContentCategory* BidRequest::add_content_categories() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.content_categories)
  return content_categories_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_ContentCategory >&
BidRequest::content_categories() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.content_categories)
  return content_categories_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_ContentCategory >*
BidRequest::mutable_content_categories() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.content_categories)
  return &content_categories_;
}

// optional .Tanx.BidRequest.Video video = 27;
inline bool BidRequest::has_video() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BidRequest::set_has_video() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BidRequest::clear_has_video() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BidRequest::clear_video() {
  if (video_ != NULL) video_->::Tanx::BidRequest_Video::Clear();
  clear_has_video();
}
inline const ::Tanx::BidRequest_Video& BidRequest::video() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::Tanx::BidRequest_Video* BidRequest::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::Tanx::BidRequest_Video;
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.video)
  return video_;
}
inline ::Tanx::BidRequest_Video* BidRequest::release_video() {
  clear_has_video();
  ::Tanx::BidRequest_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_video(::Tanx::BidRequest_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.video)
}

// optional string aid = 28;
inline bool BidRequest::has_aid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BidRequest::set_has_aid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BidRequest::clear_has_aid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BidRequest::clear_aid() {
  if (aid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aid_->clear();
  }
  clear_has_aid();
}
inline const ::std::string& BidRequest::aid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.aid)
  return *aid_;
}
inline void BidRequest::set_aid(const ::std::string& value) {
  set_has_aid();
  if (aid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aid_ = new ::std::string;
  }
  aid_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.aid)
}
inline void BidRequest::set_aid(const char* value) {
  set_has_aid();
  if (aid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aid_ = new ::std::string;
  }
  aid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidRequest.aid)
}
inline void BidRequest::set_aid(const char* value, size_t size) {
  set_has_aid();
  if (aid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aid_ = new ::std::string;
  }
  aid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidRequest.aid)
}
inline ::std::string* BidRequest::mutable_aid() {
  set_has_aid();
  if (aid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.aid)
  return aid_;
}
inline ::std::string* BidRequest::release_aid() {
  clear_has_aid();
  if (aid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = aid_;
    aid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_aid(::std::string* aid) {
  if (aid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete aid_;
  }
  if (aid) {
    set_has_aid();
    aid_ = aid;
  } else {
    clear_has_aid();
    aid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidRequest.aid)
}

// repeated .Tanx.BidRequest.Deal deals = 29;
inline int BidRequest::deals_size() const {
  return deals_.size();
}
inline void BidRequest::clear_deals() {
  deals_.Clear();
}
inline const ::Tanx::BidRequest_Deal& BidRequest::deals(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.deals)
  return deals_.Get(index);
}
inline ::Tanx::BidRequest_Deal* BidRequest::mutable_deals(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.deals)
  return deals_.Mutable(index);
}
inline ::Tanx::BidRequest_Deal* BidRequest::add_deals() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.deals)
  return deals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal >&
BidRequest::deals() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.deals)
  return deals_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_Deal >*
BidRequest::mutable_deals() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.deals)
  return &deals_;
}

// repeated .Tanx.BidRequest.CrowdCategory crowd_category = 30;
inline int BidRequest::crowd_category_size() const {
  return crowd_category_.size();
}
inline void BidRequest::clear_crowd_category() {
  crowd_category_.Clear();
}
inline const ::Tanx::BidRequest_CrowdCategory& BidRequest::crowd_category(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.crowd_category)
  return crowd_category_.Get(index);
}
inline ::Tanx::BidRequest_CrowdCategory* BidRequest::mutable_crowd_category(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidRequest.crowd_category)
  return crowd_category_.Mutable(index);
}
inline ::Tanx::BidRequest_CrowdCategory* BidRequest::add_crowd_category() {
  // @@protoc_insertion_point(field_add:Tanx.BidRequest.crowd_category)
  return crowd_category_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_CrowdCategory >&
BidRequest::crowd_category() const {
  // @@protoc_insertion_point(field_list:Tanx.BidRequest.crowd_category)
  return crowd_category_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidRequest_CrowdCategory >*
BidRequest::mutable_crowd_category() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidRequest.crowd_category)
  return &crowd_category_;
}

// optional bool is_predicted_to_be_ignored = 31 [default = false];
inline bool BidRequest::has_is_predicted_to_be_ignored() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BidRequest::set_has_is_predicted_to_be_ignored() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BidRequest::clear_has_is_predicted_to_be_ignored() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BidRequest::clear_is_predicted_to_be_ignored() {
  is_predicted_to_be_ignored_ = false;
  clear_has_is_predicted_to_be_ignored();
}
inline bool BidRequest::is_predicted_to_be_ignored() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.is_predicted_to_be_ignored)
  return is_predicted_to_be_ignored_;
}
inline void BidRequest::set_is_predicted_to_be_ignored(bool value) {
  set_has_is_predicted_to_be_ignored();
  is_predicted_to_be_ignored_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.is_predicted_to_be_ignored)
}

// optional bool https_required = 33 [default = false];
inline bool BidRequest::has_https_required() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_https_required() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BidRequest::clear_has_https_required() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BidRequest::clear_https_required() {
  https_required_ = false;
  clear_has_https_required();
}
inline bool BidRequest::https_required() const {
  // @@protoc_insertion_point(field_get:Tanx.BidRequest.https_required)
  return https_required_;
}
inline void BidRequest::set_https_required(bool value) {
  set_has_https_required();
  https_required_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidRequest.https_required)
}

// -------------------------------------------------------------------

// BidResponse_Ads_Video

// optional int32 duration = 1;
inline bool BidResponse_Ads_Video::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_Ads_Video::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_Ads_Video::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_Ads_Video::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 BidResponse_Ads_Video::duration() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.Video.duration)
  return duration_;
}
inline void BidResponse_Ads_Video::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.Video.duration)
}

// optional string url = 2;
inline bool BidResponse_Ads_Video::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_Ads_Video::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_Ads_Video::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_Ads_Video::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidResponse_Ads_Video::url() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.Video.url)
  return *url_;
}
inline void BidResponse_Ads_Video::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.Video.url)
}
inline void BidResponse_Ads_Video::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.Video.url)
}
inline void BidResponse_Ads_Video::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.Video.url)
}
inline ::std::string* BidResponse_Ads_Video::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.Video.url)
  return url_;
}
inline ::std::string* BidResponse_Ads_Video::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads_Video::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.Video.url)
}

// repeated string event_start = 3;
inline int BidResponse_Ads_Video::event_start_size() const {
  return event_start_.size();
}
inline void BidResponse_Ads_Video::clear_event_start() {
  event_start_.Clear();
}
inline const ::std::string& BidResponse_Ads_Video::event_start(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.Video.event_start)
  return event_start_.Get(index);
}
inline ::std::string* BidResponse_Ads_Video::mutable_event_start(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.Video.event_start)
  return event_start_.Mutable(index);
}
inline void BidResponse_Ads_Video::set_event_start(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.Video.event_start)
  event_start_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads_Video::set_event_start(int index, const char* value) {
  event_start_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.Video.event_start)
}
inline void BidResponse_Ads_Video::set_event_start(int index, const char* value, size_t size) {
  event_start_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.Video.event_start)
}
inline ::std::string* BidResponse_Ads_Video::add_event_start() {
  return event_start_.Add();
}
inline void BidResponse_Ads_Video::add_event_start(const ::std::string& value) {
  event_start_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.Video.event_start)
}
inline void BidResponse_Ads_Video::add_event_start(const char* value) {
  event_start_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidResponse.Ads.Video.event_start)
}
inline void BidResponse_Ads_Video::add_event_start(const char* value, size_t size) {
  event_start_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidResponse.Ads.Video.event_start)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads_Video::event_start() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.Video.event_start)
  return event_start_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads_Video::mutable_event_start() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.Video.event_start)
  return &event_start_;
}

// repeated string event_midpoint = 4;
inline int BidResponse_Ads_Video::event_midpoint_size() const {
  return event_midpoint_.size();
}
inline void BidResponse_Ads_Video::clear_event_midpoint() {
  event_midpoint_.Clear();
}
inline const ::std::string& BidResponse_Ads_Video::event_midpoint(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.Video.event_midpoint)
  return event_midpoint_.Get(index);
}
inline ::std::string* BidResponse_Ads_Video::mutable_event_midpoint(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.Video.event_midpoint)
  return event_midpoint_.Mutable(index);
}
inline void BidResponse_Ads_Video::set_event_midpoint(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.Video.event_midpoint)
  event_midpoint_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads_Video::set_event_midpoint(int index, const char* value) {
  event_midpoint_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.Video.event_midpoint)
}
inline void BidResponse_Ads_Video::set_event_midpoint(int index, const char* value, size_t size) {
  event_midpoint_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.Video.event_midpoint)
}
inline ::std::string* BidResponse_Ads_Video::add_event_midpoint() {
  return event_midpoint_.Add();
}
inline void BidResponse_Ads_Video::add_event_midpoint(const ::std::string& value) {
  event_midpoint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.Video.event_midpoint)
}
inline void BidResponse_Ads_Video::add_event_midpoint(const char* value) {
  event_midpoint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidResponse.Ads.Video.event_midpoint)
}
inline void BidResponse_Ads_Video::add_event_midpoint(const char* value, size_t size) {
  event_midpoint_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidResponse.Ads.Video.event_midpoint)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads_Video::event_midpoint() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.Video.event_midpoint)
  return event_midpoint_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads_Video::mutable_event_midpoint() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.Video.event_midpoint)
  return &event_midpoint_;
}

// repeated string event_complete = 5;
inline int BidResponse_Ads_Video::event_complete_size() const {
  return event_complete_.size();
}
inline void BidResponse_Ads_Video::clear_event_complete() {
  event_complete_.Clear();
}
inline const ::std::string& BidResponse_Ads_Video::event_complete(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.Video.event_complete)
  return event_complete_.Get(index);
}
inline ::std::string* BidResponse_Ads_Video::mutable_event_complete(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.Video.event_complete)
  return event_complete_.Mutable(index);
}
inline void BidResponse_Ads_Video::set_event_complete(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.Video.event_complete)
  event_complete_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads_Video::set_event_complete(int index, const char* value) {
  event_complete_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.Video.event_complete)
}
inline void BidResponse_Ads_Video::set_event_complete(int index, const char* value, size_t size) {
  event_complete_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.Video.event_complete)
}
inline ::std::string* BidResponse_Ads_Video::add_event_complete() {
  return event_complete_.Add();
}
inline void BidResponse_Ads_Video::add_event_complete(const ::std::string& value) {
  event_complete_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.Video.event_complete)
}
inline void BidResponse_Ads_Video::add_event_complete(const char* value) {
  event_complete_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidResponse.Ads.Video.event_complete)
}
inline void BidResponse_Ads_Video::add_event_complete(const char* value, size_t size) {
  event_complete_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidResponse.Ads.Video.event_complete)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads_Video::event_complete() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.Video.event_complete)
  return event_complete_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads_Video::mutable_event_complete() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.Video.event_complete)
  return &event_complete_;
}

// -------------------------------------------------------------------

// BidResponse_Ads

// required uint32 adzinfo_id = 1;
inline bool BidResponse_Ads::has_adzinfo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_Ads::set_has_adzinfo_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_Ads::clear_has_adzinfo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_Ads::clear_adzinfo_id() {
  adzinfo_id_ = 0u;
  clear_has_adzinfo_id();
}
inline ::google::protobuf::uint32 BidResponse_Ads::adzinfo_id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.adzinfo_id)
  return adzinfo_id_;
}
inline void BidResponse_Ads::set_adzinfo_id(::google::protobuf::uint32 value) {
  set_has_adzinfo_id();
  adzinfo_id_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.adzinfo_id)
}

// required uint32 max_cpm_price = 2;
inline bool BidResponse_Ads::has_max_cpm_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_Ads::set_has_max_cpm_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_Ads::clear_has_max_cpm_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_Ads::clear_max_cpm_price() {
  max_cpm_price_ = 0u;
  clear_has_max_cpm_price();
}
inline ::google::protobuf::uint32 BidResponse_Ads::max_cpm_price() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.max_cpm_price)
  return max_cpm_price_;
}
inline void BidResponse_Ads::set_max_cpm_price(::google::protobuf::uint32 value) {
  set_has_max_cpm_price();
  max_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.max_cpm_price)
}

// optional uint32 ad_bid_count_idx = 3;
inline bool BidResponse_Ads::has_ad_bid_count_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_Ads::set_has_ad_bid_count_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_Ads::clear_has_ad_bid_count_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_Ads::clear_ad_bid_count_idx() {
  ad_bid_count_idx_ = 0u;
  clear_has_ad_bid_count_idx();
}
inline ::google::protobuf::uint32 BidResponse_Ads::ad_bid_count_idx() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.ad_bid_count_idx)
  return ad_bid_count_idx_;
}
inline void BidResponse_Ads::set_ad_bid_count_idx(::google::protobuf::uint32 value) {
  set_has_ad_bid_count_idx();
  ad_bid_count_idx_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.ad_bid_count_idx)
}

// optional string html_snippet = 4;
inline bool BidResponse_Ads::has_html_snippet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_Ads::set_has_html_snippet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_Ads::clear_has_html_snippet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_Ads::clear_html_snippet() {
  if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_->clear();
  }
  clear_has_html_snippet();
}
inline const ::std::string& BidResponse_Ads::html_snippet() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.html_snippet)
  return *html_snippet_;
}
inline void BidResponse_Ads::set_html_snippet(const ::std::string& value) {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_ = new ::std::string;
  }
  html_snippet_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.html_snippet)
}
inline void BidResponse_Ads::set_html_snippet(const char* value) {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_ = new ::std::string;
  }
  html_snippet_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.html_snippet)
}
inline void BidResponse_Ads::set_html_snippet(const char* value, size_t size) {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_ = new ::std::string;
  }
  html_snippet_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.html_snippet)
}
inline ::std::string* BidResponse_Ads::mutable_html_snippet() {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.html_snippet)
  return html_snippet_;
}
inline ::std::string* BidResponse_Ads::release_html_snippet() {
  clear_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = html_snippet_;
    html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_html_snippet(::std::string* html_snippet) {
  if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete html_snippet_;
  }
  if (html_snippet) {
    set_has_html_snippet();
    html_snippet_ = html_snippet;
  } else {
    clear_has_html_snippet();
    html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.html_snippet)
}

// repeated string click_through_url = 5;
inline int BidResponse_Ads::click_through_url_size() const {
  return click_through_url_.size();
}
inline void BidResponse_Ads::clear_click_through_url() {
  click_through_url_.Clear();
}
inline const ::std::string& BidResponse_Ads::click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.click_through_url)
  return click_through_url_.Get(index);
}
inline ::std::string* BidResponse_Ads::mutable_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.click_through_url)
  return click_through_url_.Mutable(index);
}
inline void BidResponse_Ads::set_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.click_through_url)
  click_through_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads::set_click_through_url(int index, const char* value) {
  click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.click_through_url)
}
inline void BidResponse_Ads::set_click_through_url(int index, const char* value, size_t size) {
  click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.click_through_url)
}
inline ::std::string* BidResponse_Ads::add_click_through_url() {
  return click_through_url_.Add();
}
inline void BidResponse_Ads::add_click_through_url(const ::std::string& value) {
  click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.click_through_url)
}
inline void BidResponse_Ads::add_click_through_url(const char* value) {
  click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidResponse.Ads.click_through_url)
}
inline void BidResponse_Ads::add_click_through_url(const char* value, size_t size) {
  click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidResponse.Ads.click_through_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads::click_through_url() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.click_through_url)
  return click_through_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads::mutable_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.click_through_url)
  return &click_through_url_;
}

// repeated int32 category = 6;
inline int BidResponse_Ads::category_size() const {
  return category_.size();
}
inline void BidResponse_Ads::clear_category() {
  category_.Clear();
}
inline ::google::protobuf::int32 BidResponse_Ads::category(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.category)
  return category_.Get(index);
}
inline void BidResponse_Ads::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.category)
}
inline void BidResponse_Ads::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ads::category() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.category)
  return category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ads::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.category)
  return &category_;
}

// repeated int32 creative_type = 7;
inline int BidResponse_Ads::creative_type_size() const {
  return creative_type_.size();
}
inline void BidResponse_Ads::clear_creative_type() {
  creative_type_.Clear();
}
inline ::google::protobuf::int32 BidResponse_Ads::creative_type(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.creative_type)
  return creative_type_.Get(index);
}
inline void BidResponse_Ads::set_creative_type(int index, ::google::protobuf::int32 value) {
  creative_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.creative_type)
}
inline void BidResponse_Ads::add_creative_type(::google::protobuf::int32 value) {
  creative_type_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.creative_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ads::creative_type() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.creative_type)
  return creative_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ads::mutable_creative_type() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.creative_type)
  return &creative_type_;
}

// optional string network_guid = 8;
inline bool BidResponse_Ads::has_network_guid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidResponse_Ads::set_has_network_guid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidResponse_Ads::clear_has_network_guid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidResponse_Ads::clear_network_guid() {
  if (network_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_guid_->clear();
  }
  clear_has_network_guid();
}
inline const ::std::string& BidResponse_Ads::network_guid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.network_guid)
  return *network_guid_;
}
inline void BidResponse_Ads::set_network_guid(const ::std::string& value) {
  set_has_network_guid();
  if (network_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_guid_ = new ::std::string;
  }
  network_guid_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.network_guid)
}
inline void BidResponse_Ads::set_network_guid(const char* value) {
  set_has_network_guid();
  if (network_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_guid_ = new ::std::string;
  }
  network_guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.network_guid)
}
inline void BidResponse_Ads::set_network_guid(const char* value, size_t size) {
  set_has_network_guid();
  if (network_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_guid_ = new ::std::string;
  }
  network_guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.network_guid)
}
inline ::std::string* BidResponse_Ads::mutable_network_guid() {
  set_has_network_guid();
  if (network_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.network_guid)
  return network_guid_;
}
inline ::std::string* BidResponse_Ads::release_network_guid() {
  clear_has_network_guid();
  if (network_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = network_guid_;
    network_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_network_guid(::std::string* network_guid) {
  if (network_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete network_guid_;
  }
  if (network_guid) {
    set_has_network_guid();
    network_guid_ = network_guid;
  } else {
    clear_has_network_guid();
    network_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.network_guid)
}

// optional string extend_data = 9;
inline bool BidResponse_Ads::has_extend_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidResponse_Ads::set_has_extend_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidResponse_Ads::clear_has_extend_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidResponse_Ads::clear_extend_data() {
  if (extend_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_->clear();
  }
  clear_has_extend_data();
}
inline const ::std::string& BidResponse_Ads::extend_data() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.extend_data)
  return *extend_data_;
}
inline void BidResponse_Ads::set_extend_data(const ::std::string& value) {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_ = new ::std::string;
  }
  extend_data_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.extend_data)
}
inline void BidResponse_Ads::set_extend_data(const char* value) {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_ = new ::std::string;
  }
  extend_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.extend_data)
}
inline void BidResponse_Ads::set_extend_data(const char* value, size_t size) {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_ = new ::std::string;
  }
  extend_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.extend_data)
}
inline ::std::string* BidResponse_Ads::mutable_extend_data() {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.extend_data)
  return extend_data_;
}
inline ::std::string* BidResponse_Ads::release_extend_data() {
  clear_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extend_data_;
    extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_extend_data(::std::string* extend_data) {
  if (extend_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extend_data_;
  }
  if (extend_data) {
    set_has_extend_data();
    extend_data_ = extend_data;
  } else {
    clear_has_extend_data();
    extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.extend_data)
}

// repeated string destination_url = 10;
inline int BidResponse_Ads::destination_url_size() const {
  return destination_url_.size();
}
inline void BidResponse_Ads::clear_destination_url() {
  destination_url_.Clear();
}
inline const ::std::string& BidResponse_Ads::destination_url(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.destination_url)
  return destination_url_.Get(index);
}
inline ::std::string* BidResponse_Ads::mutable_destination_url(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.destination_url)
  return destination_url_.Mutable(index);
}
inline void BidResponse_Ads::set_destination_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.destination_url)
  destination_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads::set_destination_url(int index, const char* value) {
  destination_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.destination_url)
}
inline void BidResponse_Ads::set_destination_url(int index, const char* value, size_t size) {
  destination_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.destination_url)
}
inline ::std::string* BidResponse_Ads::add_destination_url() {
  return destination_url_.Add();
}
inline void BidResponse_Ads::add_destination_url(const ::std::string& value) {
  destination_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.destination_url)
}
inline void BidResponse_Ads::add_destination_url(const char* value) {
  destination_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidResponse.Ads.destination_url)
}
inline void BidResponse_Ads::add_destination_url(const char* value, size_t size) {
  destination_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidResponse.Ads.destination_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads::destination_url() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.destination_url)
  return destination_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads::mutable_destination_url() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.destination_url)
  return &destination_url_;
}

// optional string creative_id = 11;
inline bool BidResponse_Ads::has_creative_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidResponse_Ads::set_has_creative_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidResponse_Ads::clear_has_creative_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidResponse_Ads::clear_creative_id() {
  if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_->clear();
  }
  clear_has_creative_id();
}
inline const ::std::string& BidResponse_Ads::creative_id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.creative_id)
  return *creative_id_;
}
inline void BidResponse_Ads::set_creative_id(const ::std::string& value) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.creative_id)
}
inline void BidResponse_Ads::set_creative_id(const char* value) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.creative_id)
}
inline void BidResponse_Ads::set_creative_id(const char* value, size_t size) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.creative_id)
}
inline ::std::string* BidResponse_Ads::mutable_creative_id() {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.creative_id)
  return creative_id_;
}
inline ::std::string* BidResponse_Ads::release_creative_id() {
  clear_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creative_id_;
    creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_creative_id(::std::string* creative_id) {
  if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creative_id_;
  }
  if (creative_id) {
    set_has_creative_id();
    creative_id_ = creative_id;
  } else {
    clear_has_creative_id();
    creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.creative_id)
}

// optional string resource_address = 12;
inline bool BidResponse_Ads::has_resource_address() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidResponse_Ads::set_has_resource_address() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidResponse_Ads::clear_has_resource_address() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidResponse_Ads::clear_resource_address() {
  if (resource_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_address_->clear();
  }
  clear_has_resource_address();
}
inline const ::std::string& BidResponse_Ads::resource_address() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.resource_address)
  return *resource_address_;
}
inline void BidResponse_Ads::set_resource_address(const ::std::string& value) {
  set_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_address_ = new ::std::string;
  }
  resource_address_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.resource_address)
}
inline void BidResponse_Ads::set_resource_address(const char* value) {
  set_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_address_ = new ::std::string;
  }
  resource_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.resource_address)
}
inline void BidResponse_Ads::set_resource_address(const char* value, size_t size) {
  set_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_address_ = new ::std::string;
  }
  resource_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.resource_address)
}
inline ::std::string* BidResponse_Ads::mutable_resource_address() {
  set_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.resource_address)
  return resource_address_;
}
inline ::std::string* BidResponse_Ads::release_resource_address() {
  clear_has_resource_address();
  if (resource_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resource_address_;
    resource_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_resource_address(::std::string* resource_address) {
  if (resource_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_address_;
  }
  if (resource_address) {
    set_has_resource_address();
    resource_address_ = resource_address;
  } else {
    clear_has_resource_address();
    resource_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.resource_address)
}

// optional string feedback_address = 13;
inline bool BidResponse_Ads::has_feedback_address() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidResponse_Ads::set_has_feedback_address() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidResponse_Ads::clear_has_feedback_address() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidResponse_Ads::clear_feedback_address() {
  if (feedback_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_address_->clear();
  }
  clear_has_feedback_address();
}
inline const ::std::string& BidResponse_Ads::feedback_address() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.feedback_address)
  return *feedback_address_;
}
inline void BidResponse_Ads::set_feedback_address(const ::std::string& value) {
  set_has_feedback_address();
  if (feedback_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_address_ = new ::std::string;
  }
  feedback_address_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.feedback_address)
}
inline void BidResponse_Ads::set_feedback_address(const char* value) {
  set_has_feedback_address();
  if (feedback_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_address_ = new ::std::string;
  }
  feedback_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.feedback_address)
}
inline void BidResponse_Ads::set_feedback_address(const char* value, size_t size) {
  set_has_feedback_address();
  if (feedback_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_address_ = new ::std::string;
  }
  feedback_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.feedback_address)
}
inline ::std::string* BidResponse_Ads::mutable_feedback_address() {
  set_has_feedback_address();
  if (feedback_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feedback_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.feedback_address)
  return feedback_address_;
}
inline ::std::string* BidResponse_Ads::release_feedback_address() {
  clear_has_feedback_address();
  if (feedback_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = feedback_address_;
    feedback_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_feedback_address(::std::string* feedback_address) {
  if (feedback_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feedback_address_;
  }
  if (feedback_address) {
    set_has_feedback_address();
    feedback_address_ = feedback_address;
  } else {
    clear_has_feedback_address();
    feedback_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.feedback_address)
}

// optional string video_snippet = 14;
inline bool BidResponse_Ads::has_video_snippet() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidResponse_Ads::set_has_video_snippet() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidResponse_Ads::clear_has_video_snippet() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidResponse_Ads::clear_video_snippet() {
  if (video_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_snippet_->clear();
  }
  clear_has_video_snippet();
}
inline const ::std::string& BidResponse_Ads::video_snippet() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.video_snippet)
  return *video_snippet_;
}
inline void BidResponse_Ads::set_video_snippet(const ::std::string& value) {
  set_has_video_snippet();
  if (video_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_snippet_ = new ::std::string;
  }
  video_snippet_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.video_snippet)
}
inline void BidResponse_Ads::set_video_snippet(const char* value) {
  set_has_video_snippet();
  if (video_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_snippet_ = new ::std::string;
  }
  video_snippet_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.video_snippet)
}
inline void BidResponse_Ads::set_video_snippet(const char* value, size_t size) {
  set_has_video_snippet();
  if (video_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_snippet_ = new ::std::string;
  }
  video_snippet_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.video_snippet)
}
inline ::std::string* BidResponse_Ads::mutable_video_snippet() {
  set_has_video_snippet();
  if (video_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_snippet_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.video_snippet)
  return video_snippet_;
}
inline ::std::string* BidResponse_Ads::release_video_snippet() {
  clear_has_video_snippet();
  if (video_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = video_snippet_;
    video_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_video_snippet(::std::string* video_snippet) {
  if (video_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_snippet_;
  }
  if (video_snippet) {
    set_has_video_snippet();
    video_snippet_ = video_snippet;
  } else {
    clear_has_video_snippet();
    video_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.video_snippet)
}

// optional .Tanx.MobileCreative mobile_creative = 15;
inline bool BidResponse_Ads::has_mobile_creative() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidResponse_Ads::set_has_mobile_creative() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidResponse_Ads::clear_has_mobile_creative() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidResponse_Ads::clear_mobile_creative() {
  if (mobile_creative_ != NULL) mobile_creative_->::Tanx::MobileCreative::Clear();
  clear_has_mobile_creative();
}
inline const ::Tanx::MobileCreative& BidResponse_Ads::mobile_creative() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.mobile_creative)
  return mobile_creative_ != NULL ? *mobile_creative_ : *default_instance_->mobile_creative_;
}
inline ::Tanx::MobileCreative* BidResponse_Ads::mutable_mobile_creative() {
  set_has_mobile_creative();
  if (mobile_creative_ == NULL) mobile_creative_ = new ::Tanx::MobileCreative;
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.mobile_creative)
  return mobile_creative_;
}
inline ::Tanx::MobileCreative* BidResponse_Ads::release_mobile_creative() {
  clear_has_mobile_creative();
  ::Tanx::MobileCreative* temp = mobile_creative_;
  mobile_creative_ = NULL;
  return temp;
}
inline void BidResponse_Ads::set_allocated_mobile_creative(::Tanx::MobileCreative* mobile_creative) {
  delete mobile_creative_;
  mobile_creative_ = mobile_creative;
  if (mobile_creative) {
    set_has_mobile_creative();
  } else {
    clear_has_mobile_creative();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.mobile_creative)
}

// optional uint32 dealid = 16;
inline bool BidResponse_Ads::has_dealid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidResponse_Ads::set_has_dealid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidResponse_Ads::clear_has_dealid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidResponse_Ads::clear_dealid() {
  dealid_ = 0u;
  clear_has_dealid();
}
inline ::google::protobuf::uint32 BidResponse_Ads::dealid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.dealid)
  return dealid_;
}
inline void BidResponse_Ads::set_dealid(::google::protobuf::uint32 value) {
  set_has_dealid();
  dealid_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.dealid)
}

// repeated uint32 advertiser_ids = 17;
inline int BidResponse_Ads::advertiser_ids_size() const {
  return advertiser_ids_.size();
}
inline void BidResponse_Ads::clear_advertiser_ids() {
  advertiser_ids_.Clear();
}
inline ::google::protobuf::uint32 BidResponse_Ads::advertiser_ids(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.advertiser_ids)
  return advertiser_ids_.Get(index);
}
inline void BidResponse_Ads::set_advertiser_ids(int index, ::google::protobuf::uint32 value) {
  advertiser_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.advertiser_ids)
}
inline void BidResponse_Ads::add_advertiser_ids(::google::protobuf::uint32 value) {
  advertiser_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.advertiser_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidResponse_Ads::advertiser_ids() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.advertiser_ids)
  return advertiser_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidResponse_Ads::mutable_advertiser_ids() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.advertiser_ids)
  return &advertiser_ids_;
}

// optional string download_complete = 18;
inline bool BidResponse_Ads::has_download_complete() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidResponse_Ads::set_has_download_complete() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidResponse_Ads::clear_has_download_complete() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidResponse_Ads::clear_download_complete() {
  if (download_complete_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_complete_->clear();
  }
  clear_has_download_complete();
}
inline const ::std::string& BidResponse_Ads::download_complete() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.download_complete)
  return *download_complete_;
}
inline void BidResponse_Ads::set_download_complete(const ::std::string& value) {
  set_has_download_complete();
  if (download_complete_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_complete_ = new ::std::string;
  }
  download_complete_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.download_complete)
}
inline void BidResponse_Ads::set_download_complete(const char* value) {
  set_has_download_complete();
  if (download_complete_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_complete_ = new ::std::string;
  }
  download_complete_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.download_complete)
}
inline void BidResponse_Ads::set_download_complete(const char* value, size_t size) {
  set_has_download_complete();
  if (download_complete_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_complete_ = new ::std::string;
  }
  download_complete_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.download_complete)
}
inline ::std::string* BidResponse_Ads::mutable_download_complete() {
  set_has_download_complete();
  if (download_complete_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_complete_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.download_complete)
  return download_complete_;
}
inline ::std::string* BidResponse_Ads::release_download_complete() {
  clear_has_download_complete();
  if (download_complete_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = download_complete_;
    download_complete_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_download_complete(::std::string* download_complete) {
  if (download_complete_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_complete_;
  }
  if (download_complete) {
    set_has_download_complete();
    download_complete_ = download_complete;
  } else {
    clear_has_download_complete();
    download_complete_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.download_complete)
}

// optional string winnotice_address = 19;
inline bool BidResponse_Ads::has_winnotice_address() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BidResponse_Ads::set_has_winnotice_address() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BidResponse_Ads::clear_has_winnotice_address() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BidResponse_Ads::clear_winnotice_address() {
  if (winnotice_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winnotice_address_->clear();
  }
  clear_has_winnotice_address();
}
inline const ::std::string& BidResponse_Ads::winnotice_address() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.winnotice_address)
  return *winnotice_address_;
}
inline void BidResponse_Ads::set_winnotice_address(const ::std::string& value) {
  set_has_winnotice_address();
  if (winnotice_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winnotice_address_ = new ::std::string;
  }
  winnotice_address_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.winnotice_address)
}
inline void BidResponse_Ads::set_winnotice_address(const char* value) {
  set_has_winnotice_address();
  if (winnotice_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winnotice_address_ = new ::std::string;
  }
  winnotice_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.winnotice_address)
}
inline void BidResponse_Ads::set_winnotice_address(const char* value, size_t size) {
  set_has_winnotice_address();
  if (winnotice_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winnotice_address_ = new ::std::string;
  }
  winnotice_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.winnotice_address)
}
inline ::std::string* BidResponse_Ads::mutable_winnotice_address() {
  set_has_winnotice_address();
  if (winnotice_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winnotice_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.winnotice_address)
  return winnotice_address_;
}
inline ::std::string* BidResponse_Ads::release_winnotice_address() {
  clear_has_winnotice_address();
  if (winnotice_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = winnotice_address_;
    winnotice_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_winnotice_address(::std::string* winnotice_address) {
  if (winnotice_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete winnotice_address_;
  }
  if (winnotice_address) {
    set_has_winnotice_address();
    winnotice_address_ = winnotice_address;
  } else {
    clear_has_winnotice_address();
    winnotice_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.winnotice_address)
}

// optional int32 creative_adaptive_type = 20;
inline bool BidResponse_Ads::has_creative_adaptive_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidResponse_Ads::set_has_creative_adaptive_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidResponse_Ads::clear_has_creative_adaptive_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidResponse_Ads::clear_creative_adaptive_type() {
  creative_adaptive_type_ = 0;
  clear_has_creative_adaptive_type();
}
inline ::google::protobuf::int32 BidResponse_Ads::creative_adaptive_type() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.creative_adaptive_type)
  return creative_adaptive_type_;
}
inline void BidResponse_Ads::set_creative_adaptive_type(::google::protobuf::int32 value) {
  set_has_creative_adaptive_type();
  creative_adaptive_type_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.creative_adaptive_type)
}

// repeated string deeplink_url = 21;
inline int BidResponse_Ads::deeplink_url_size() const {
  return deeplink_url_.size();
}
inline void BidResponse_Ads::clear_deeplink_url() {
  deeplink_url_.Clear();
}
inline const ::std::string& BidResponse_Ads::deeplink_url(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.deeplink_url)
  return deeplink_url_.Get(index);
}
inline ::std::string* BidResponse_Ads::mutable_deeplink_url(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.deeplink_url)
  return deeplink_url_.Mutable(index);
}
inline void BidResponse_Ads::set_deeplink_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.deeplink_url)
  deeplink_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads::set_deeplink_url(int index, const char* value) {
  deeplink_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.deeplink_url)
}
inline void BidResponse_Ads::set_deeplink_url(int index, const char* value, size_t size) {
  deeplink_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.deeplink_url)
}
inline ::std::string* BidResponse_Ads::add_deeplink_url() {
  return deeplink_url_.Add();
}
inline void BidResponse_Ads::add_deeplink_url(const ::std::string& value) {
  deeplink_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.deeplink_url)
}
inline void BidResponse_Ads::add_deeplink_url(const char* value) {
  deeplink_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidResponse.Ads.deeplink_url)
}
inline void BidResponse_Ads::add_deeplink_url(const char* value, size_t size) {
  deeplink_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidResponse.Ads.deeplink_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads::deeplink_url() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.deeplink_url)
  return deeplink_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads::mutable_deeplink_url() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.deeplink_url)
  return &deeplink_url_;
}

// repeated string impression_tracking_url = 22;
inline int BidResponse_Ads::impression_tracking_url_size() const {
  return impression_tracking_url_.size();
}
inline void BidResponse_Ads::clear_impression_tracking_url() {
  impression_tracking_url_.Clear();
}
inline const ::std::string& BidResponse_Ads::impression_tracking_url(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.impression_tracking_url)
  return impression_tracking_url_.Get(index);
}
inline ::std::string* BidResponse_Ads::mutable_impression_tracking_url(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.impression_tracking_url)
  return impression_tracking_url_.Mutable(index);
}
inline void BidResponse_Ads::set_impression_tracking_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.impression_tracking_url)
  impression_tracking_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads::set_impression_tracking_url(int index, const char* value) {
  impression_tracking_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.impression_tracking_url)
}
inline void BidResponse_Ads::set_impression_tracking_url(int index, const char* value, size_t size) {
  impression_tracking_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.impression_tracking_url)
}
inline ::std::string* BidResponse_Ads::add_impression_tracking_url() {
  return impression_tracking_url_.Add();
}
inline void BidResponse_Ads::add_impression_tracking_url(const ::std::string& value) {
  impression_tracking_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.impression_tracking_url)
}
inline void BidResponse_Ads::add_impression_tracking_url(const char* value) {
  impression_tracking_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidResponse.Ads.impression_tracking_url)
}
inline void BidResponse_Ads::add_impression_tracking_url(const char* value, size_t size) {
  impression_tracking_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidResponse.Ads.impression_tracking_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads::impression_tracking_url() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.impression_tracking_url)
  return impression_tracking_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads::mutable_impression_tracking_url() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.impression_tracking_url)
  return &impression_tracking_url_;
}

// repeated string click_tracking_url = 23;
inline int BidResponse_Ads::click_tracking_url_size() const {
  return click_tracking_url_.size();
}
inline void BidResponse_Ads::clear_click_tracking_url() {
  click_tracking_url_.Clear();
}
inline const ::std::string& BidResponse_Ads::click_tracking_url(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.click_tracking_url)
  return click_tracking_url_.Get(index);
}
inline ::std::string* BidResponse_Ads::mutable_click_tracking_url(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.click_tracking_url)
  return click_tracking_url_.Mutable(index);
}
inline void BidResponse_Ads::set_click_tracking_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.click_tracking_url)
  click_tracking_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads::set_click_tracking_url(int index, const char* value) {
  click_tracking_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.click_tracking_url)
}
inline void BidResponse_Ads::set_click_tracking_url(int index, const char* value, size_t size) {
  click_tracking_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.click_tracking_url)
}
inline ::std::string* BidResponse_Ads::add_click_tracking_url() {
  return click_tracking_url_.Add();
}
inline void BidResponse_Ads::add_click_tracking_url(const ::std::string& value) {
  click_tracking_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.click_tracking_url)
}
inline void BidResponse_Ads::add_click_tracking_url(const char* value) {
  click_tracking_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.BidResponse.Ads.click_tracking_url)
}
inline void BidResponse_Ads::add_click_tracking_url(const char* value, size_t size) {
  click_tracking_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.BidResponse.Ads.click_tracking_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads::click_tracking_url() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.click_tracking_url)
  return click_tracking_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads::mutable_click_tracking_url() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.click_tracking_url)
  return &click_tracking_url_;
}

// optional .Tanx.BidResponse.Ads.Video video = 24;
inline bool BidResponse_Ads::has_video() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BidResponse_Ads::set_has_video() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BidResponse_Ads::clear_has_video() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BidResponse_Ads::clear_video() {
  if (video_ != NULL) video_->::Tanx::BidResponse_Ads_Video::Clear();
  clear_has_video();
}
inline const ::Tanx::BidResponse_Ads_Video& BidResponse_Ads::video() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::Tanx::BidResponse_Ads_Video* BidResponse_Ads::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::Tanx::BidResponse_Ads_Video;
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.video)
  return video_;
}
inline ::Tanx::BidResponse_Ads_Video* BidResponse_Ads::release_video() {
  clear_has_video();
  ::Tanx::BidResponse_Ads_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void BidResponse_Ads::set_allocated_video(::Tanx::BidResponse_Ads_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.video)
}

// repeated int32 api = 25;
inline int BidResponse_Ads::api_size() const {
  return api_.size();
}
inline void BidResponse_Ads::clear_api() {
  api_.Clear();
}
inline ::google::protobuf::int32 BidResponse_Ads::api(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.api)
  return api_.Get(index);
}
inline void BidResponse_Ads::set_api(int index, ::google::protobuf::int32 value) {
  api_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.api)
}
inline void BidResponse_Ads::add_api(::google::protobuf::int32 value) {
  api_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.Ads.api)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ads::api() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.Ads.api)
  return api_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ads::mutable_api() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.Ads.api)
  return &api_;
}

// optional string mime_type = 26;
inline bool BidResponse_Ads::has_mime_type() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BidResponse_Ads::set_has_mime_type() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BidResponse_Ads::clear_has_mime_type() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BidResponse_Ads::clear_mime_type() {
  if (mime_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mime_type_->clear();
  }
  clear_has_mime_type();
}
inline const ::std::string& BidResponse_Ads::mime_type() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.mime_type)
  return *mime_type_;
}
inline void BidResponse_Ads::set_mime_type(const ::std::string& value) {
  set_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mime_type_ = new ::std::string;
  }
  mime_type_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.mime_type)
}
inline void BidResponse_Ads::set_mime_type(const char* value) {
  set_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mime_type_ = new ::std::string;
  }
  mime_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.mime_type)
}
inline void BidResponse_Ads::set_mime_type(const char* value, size_t size) {
  set_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mime_type_ = new ::std::string;
  }
  mime_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.mime_type)
}
inline ::std::string* BidResponse_Ads::mutable_mime_type() {
  set_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mime_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.mime_type)
  return mime_type_;
}
inline ::std::string* BidResponse_Ads::release_mime_type() {
  clear_has_mime_type();
  if (mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mime_type_;
    mime_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mime_type_;
  }
  if (mime_type) {
    set_has_mime_type();
    mime_type_ = mime_type;
  } else {
    clear_has_mime_type();
    mime_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.mime_type)
}

// optional string campaign_date = 27;
inline bool BidResponse_Ads::has_campaign_date() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BidResponse_Ads::set_has_campaign_date() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BidResponse_Ads::clear_has_campaign_date() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BidResponse_Ads::clear_campaign_date() {
  if (campaign_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_->clear();
  }
  clear_has_campaign_date();
}
inline const ::std::string& BidResponse_Ads::campaign_date() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.Ads.campaign_date)
  return *campaign_date_;
}
inline void BidResponse_Ads::set_campaign_date(const ::std::string& value) {
  set_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_ = new ::std::string;
  }
  campaign_date_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.Ads.campaign_date)
}
inline void BidResponse_Ads::set_campaign_date(const char* value) {
  set_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_ = new ::std::string;
  }
  campaign_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.Ads.campaign_date)
}
inline void BidResponse_Ads::set_campaign_date(const char* value, size_t size) {
  set_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_ = new ::std::string;
  }
  campaign_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.Ads.campaign_date)
}
inline ::std::string* BidResponse_Ads::mutable_campaign_date() {
  set_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    campaign_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.Ads.campaign_date)
  return campaign_date_;
}
inline ::std::string* BidResponse_Ads::release_campaign_date() {
  clear_has_campaign_date();
  if (campaign_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = campaign_date_;
    campaign_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_campaign_date(::std::string* campaign_date) {
  if (campaign_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete campaign_date_;
  }
  if (campaign_date) {
    set_has_campaign_date();
    campaign_date_ = campaign_date;
  } else {
    clear_has_campaign_date();
    campaign_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.Ads.campaign_date)
}

// -------------------------------------------------------------------

// BidResponse

// required int32 version = 1;
inline bool BidResponse::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 BidResponse::version() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.version)
  return version_;
}
inline void BidResponse::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.version)
}

// required string bid = 2;
inline bool BidResponse::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse::clear_bid() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_->clear();
  }
  clear_has_bid();
}
inline const ::std::string& BidResponse::bid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.bid)
  return *bid_;
}
inline void BidResponse::set_bid(const ::std::string& value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.bid)
}
inline void BidResponse::set_bid(const char* value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResponse.bid)
}
inline void BidResponse::set_bid(const char* value, size_t size) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResponse.bid)
}
inline ::std::string* BidResponse::mutable_bid() {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.bid)
  return bid_;
}
inline ::std::string* BidResponse::release_bid() {
  clear_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_;
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_bid(::std::string* bid) {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (bid) {
    set_has_bid();
    bid_ = bid;
  } else {
    clear_has_bid();
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResponse.bid)
}

// repeated .Tanx.BidResponse.Ads ads = 3;
inline int BidResponse::ads_size() const {
  return ads_.size();
}
inline void BidResponse::clear_ads() {
  ads_.Clear();
}
inline const ::Tanx::BidResponse_Ads& BidResponse::ads(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.ads)
  return ads_.Get(index);
}
inline ::Tanx::BidResponse_Ads* BidResponse::mutable_ads(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResponse.ads)
  return ads_.Mutable(index);
}
inline ::Tanx::BidResponse_Ads* BidResponse::add_ads() {
  // @@protoc_insertion_point(field_add:Tanx.BidResponse.ads)
  return ads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidResponse_Ads >&
BidResponse::ads() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResponse.ads)
  return ads_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidResponse_Ads >*
BidResponse::mutable_ads() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResponse.ads)
  return &ads_;
}

// optional bool is_recognized_user = 4 [default = false];
inline bool BidResponse::has_is_recognized_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse::set_has_is_recognized_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse::clear_has_is_recognized_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse::clear_is_recognized_user() {
  is_recognized_user_ = false;
  clear_has_is_recognized_user();
}
inline bool BidResponse::is_recognized_user() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResponse.is_recognized_user)
  return is_recognized_user_;
}
inline void BidResponse::set_is_recognized_user(bool value) {
  set_has_is_recognized_user();
  is_recognized_user_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResponse.is_recognized_user)
}

// -------------------------------------------------------------------

// BidResult_Res

// required uint32 adzinfo_id = 1;
inline bool BidResult_Res::has_adzinfo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResult_Res::set_has_adzinfo_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResult_Res::clear_has_adzinfo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResult_Res::clear_adzinfo_id() {
  adzinfo_id_ = 0u;
  clear_has_adzinfo_id();
}
inline ::google::protobuf::uint32 BidResult_Res::adzinfo_id() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResult.Res.adzinfo_id)
  return adzinfo_id_;
}
inline void BidResult_Res::set_adzinfo_id(::google::protobuf::uint32 value) {
  set_has_adzinfo_id();
  adzinfo_id_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResult.Res.adzinfo_id)
}

// optional uint32 ad_bid_count_idx = 2;
inline bool BidResult_Res::has_ad_bid_count_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResult_Res::set_has_ad_bid_count_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResult_Res::clear_has_ad_bid_count_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResult_Res::clear_ad_bid_count_idx() {
  ad_bid_count_idx_ = 0u;
  clear_has_ad_bid_count_idx();
}
inline ::google::protobuf::uint32 BidResult_Res::ad_bid_count_idx() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResult.Res.ad_bid_count_idx)
  return ad_bid_count_idx_;
}
inline void BidResult_Res::set_ad_bid_count_idx(::google::protobuf::uint32 value) {
  set_has_ad_bid_count_idx();
  ad_bid_count_idx_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResult.Res.ad_bid_count_idx)
}

// optional int32 result_code = 3 [default = 0];
inline bool BidResult_Res::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResult_Res::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResult_Res::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResult_Res::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::google::protobuf::int32 BidResult_Res::result_code() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResult.Res.result_code)
  return result_code_;
}
inline void BidResult_Res::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResult.Res.result_code)
}

// optional uint32 result_price = 4;
inline bool BidResult_Res::has_result_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResult_Res::set_has_result_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResult_Res::clear_has_result_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResult_Res::clear_result_price() {
  result_price_ = 0u;
  clear_has_result_price();
}
inline ::google::protobuf::uint32 BidResult_Res::result_price() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResult.Res.result_price)
  return result_price_;
}
inline void BidResult_Res::set_result_price(::google::protobuf::uint32 value) {
  set_has_result_price();
  result_price_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResult.Res.result_price)
}

// optional string extend_data = 5;
inline bool BidResult_Res::has_extend_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResult_Res::set_has_extend_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResult_Res::clear_has_extend_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResult_Res::clear_extend_data() {
  if (extend_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_->clear();
  }
  clear_has_extend_data();
}
inline const ::std::string& BidResult_Res::extend_data() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResult.Res.extend_data)
  return *extend_data_;
}
inline void BidResult_Res::set_extend_data(const ::std::string& value) {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_ = new ::std::string;
  }
  extend_data_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResult.Res.extend_data)
}
inline void BidResult_Res::set_extend_data(const char* value) {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_ = new ::std::string;
  }
  extend_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResult.Res.extend_data)
}
inline void BidResult_Res::set_extend_data(const char* value, size_t size) {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_ = new ::std::string;
  }
  extend_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResult.Res.extend_data)
}
inline ::std::string* BidResult_Res::mutable_extend_data() {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResult.Res.extend_data)
  return extend_data_;
}
inline ::std::string* BidResult_Res::release_extend_data() {
  clear_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extend_data_;
    extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResult_Res::set_allocated_extend_data(::std::string* extend_data) {
  if (extend_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extend_data_;
  }
  if (extend_data) {
    set_has_extend_data();
    extend_data_ = extend_data;
  } else {
    clear_has_extend_data();
    extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResult.Res.extend_data)
}

// -------------------------------------------------------------------

// BidResult

// required int32 version = 1;
inline bool BidResult::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResult::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResult::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResult::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 BidResult::version() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResult.version)
  return version_;
}
inline void BidResult::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Tanx.BidResult.version)
}

// required string bid = 2;
inline bool BidResult::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResult::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResult::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResult::clear_bid() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_->clear();
  }
  clear_has_bid();
}
inline const ::std::string& BidResult::bid() const {
  // @@protoc_insertion_point(field_get:Tanx.BidResult.bid)
  return *bid_;
}
inline void BidResult::set_bid(const ::std::string& value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.BidResult.bid)
}
inline void BidResult::set_bid(const char* value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.BidResult.bid)
}
inline void BidResult::set_bid(const char* value, size_t size) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.BidResult.bid)
}
inline ::std::string* BidResult::mutable_bid() {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.BidResult.bid)
  return bid_;
}
inline ::std::string* BidResult::release_bid() {
  clear_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_;
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResult::set_allocated_bid(::std::string* bid) {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (bid) {
    set_has_bid();
    bid_ = bid;
  } else {
    clear_has_bid();
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.BidResult.bid)
}

// repeated .Tanx.BidResult.Res res = 3;
inline int BidResult::res_size() const {
  return res_.size();
}
inline void BidResult::clear_res() {
  res_.Clear();
}
inline const ::Tanx::BidResult_Res& BidResult::res(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.BidResult.res)
  return res_.Get(index);
}
inline ::Tanx::BidResult_Res* BidResult::mutable_res(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.BidResult.res)
  return res_.Mutable(index);
}
inline ::Tanx::BidResult_Res* BidResult::add_res() {
  // @@protoc_insertion_point(field_add:Tanx.BidResult.res)
  return res_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::BidResult_Res >&
BidResult::res() const {
  // @@protoc_insertion_point(field_list:Tanx.BidResult.res)
  return res_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::BidResult_Res >*
BidResult::mutable_res() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.BidResult.res)
  return &res_;
}

// -------------------------------------------------------------------

// MobileCreative_Creative_Attr

// required string name = 1;
inline bool MobileCreative_Creative_Attr::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileCreative_Creative_Attr::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileCreative_Creative_Attr::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileCreative_Creative_Attr::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MobileCreative_Creative_Attr::name() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.Attr.name)
  return *name_;
}
inline void MobileCreative_Creative_Attr::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.Attr.name)
}
inline void MobileCreative_Creative_Attr::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.Attr.name)
}
inline void MobileCreative_Creative_Attr::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.Attr.name)
}
inline ::std::string* MobileCreative_Creative_Attr::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.Attr.name)
  return name_;
}
inline ::std::string* MobileCreative_Creative_Attr::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative_Creative_Attr::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.Creative.Attr.name)
}

// required string value = 2;
inline bool MobileCreative_Creative_Attr::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileCreative_Creative_Attr::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileCreative_Creative_Attr::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileCreative_Creative_Attr::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MobileCreative_Creative_Attr::value() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.Attr.value)
  return *value_;
}
inline void MobileCreative_Creative_Attr::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.Attr.value)
}
inline void MobileCreative_Creative_Attr::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.Attr.value)
}
inline void MobileCreative_Creative_Attr::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.Attr.value)
}
inline ::std::string* MobileCreative_Creative_Attr::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.Attr.value)
  return value_;
}
inline ::std::string* MobileCreative_Creative_Attr::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative_Creative_Attr::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.Creative.Attr.value)
}

// -------------------------------------------------------------------

// MobileCreative_Creative_TrackingEvents

// repeated string impression_event = 1;
inline int MobileCreative_Creative_TrackingEvents::impression_event_size() const {
  return impression_event_.size();
}
inline void MobileCreative_Creative_TrackingEvents::clear_impression_event() {
  impression_event_.Clear();
}
inline const ::std::string& MobileCreative_Creative_TrackingEvents::impression_event(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  return impression_event_.Get(index);
}
inline ::std::string* MobileCreative_Creative_TrackingEvents::mutable_impression_event(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  return impression_event_.Mutable(index);
}
inline void MobileCreative_Creative_TrackingEvents::set_impression_event(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  impression_event_.Mutable(index)->assign(value);
}
inline void MobileCreative_Creative_TrackingEvents::set_impression_event(int index, const char* value) {
  impression_event_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
inline void MobileCreative_Creative_TrackingEvents::set_impression_event(int index, const char* value, size_t size) {
  impression_event_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
inline ::std::string* MobileCreative_Creative_TrackingEvents::add_impression_event() {
  return impression_event_.Add();
}
inline void MobileCreative_Creative_TrackingEvents::add_impression_event(const ::std::string& value) {
  impression_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
inline void MobileCreative_Creative_TrackingEvents::add_impression_event(const char* value) {
  impression_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
inline void MobileCreative_Creative_TrackingEvents::add_impression_event(const char* value, size_t size) {
  impression_event_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileCreative_Creative_TrackingEvents::impression_event() const {
  // @@protoc_insertion_point(field_list:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  return impression_event_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileCreative_Creative_TrackingEvents::mutable_impression_event() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  return &impression_event_;
}

// repeated string click_event = 2;
inline int MobileCreative_Creative_TrackingEvents::click_event_size() const {
  return click_event_.size();
}
inline void MobileCreative_Creative_TrackingEvents::clear_click_event() {
  click_event_.Clear();
}
inline const ::std::string& MobileCreative_Creative_TrackingEvents::click_event(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  return click_event_.Get(index);
}
inline ::std::string* MobileCreative_Creative_TrackingEvents::mutable_click_event(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  return click_event_.Mutable(index);
}
inline void MobileCreative_Creative_TrackingEvents::set_click_event(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  click_event_.Mutable(index)->assign(value);
}
inline void MobileCreative_Creative_TrackingEvents::set_click_event(int index, const char* value) {
  click_event_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
inline void MobileCreative_Creative_TrackingEvents::set_click_event(int index, const char* value, size_t size) {
  click_event_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
inline ::std::string* MobileCreative_Creative_TrackingEvents::add_click_event() {
  return click_event_.Add();
}
inline void MobileCreative_Creative_TrackingEvents::add_click_event(const ::std::string& value) {
  click_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
inline void MobileCreative_Creative_TrackingEvents::add_click_event(const char* value) {
  click_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
inline void MobileCreative_Creative_TrackingEvents::add_click_event(const char* value, size_t size) {
  click_event_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileCreative_Creative_TrackingEvents::click_event() const {
  // @@protoc_insertion_point(field_list:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  return click_event_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileCreative_Creative_TrackingEvents::mutable_click_event() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  return &click_event_;
}

// repeated string download_complete_event = 3;
inline int MobileCreative_Creative_TrackingEvents::download_complete_event_size() const {
  return download_complete_event_.size();
}
inline void MobileCreative_Creative_TrackingEvents::clear_download_complete_event() {
  download_complete_event_.Clear();
}
inline const ::std::string& MobileCreative_Creative_TrackingEvents::download_complete_event(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  return download_complete_event_.Get(index);
}
inline ::std::string* MobileCreative_Creative_TrackingEvents::mutable_download_complete_event(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  return download_complete_event_.Mutable(index);
}
inline void MobileCreative_Creative_TrackingEvents::set_download_complete_event(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  download_complete_event_.Mutable(index)->assign(value);
}
inline void MobileCreative_Creative_TrackingEvents::set_download_complete_event(int index, const char* value) {
  download_complete_event_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
inline void MobileCreative_Creative_TrackingEvents::set_download_complete_event(int index, const char* value, size_t size) {
  download_complete_event_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
inline ::std::string* MobileCreative_Creative_TrackingEvents::add_download_complete_event() {
  return download_complete_event_.Add();
}
inline void MobileCreative_Creative_TrackingEvents::add_download_complete_event(const ::std::string& value) {
  download_complete_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
inline void MobileCreative_Creative_TrackingEvents::add_download_complete_event(const char* value) {
  download_complete_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
inline void MobileCreative_Creative_TrackingEvents::add_download_complete_event(const char* value, size_t size) {
  download_complete_event_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileCreative_Creative_TrackingEvents::download_complete_event() const {
  // @@protoc_insertion_point(field_list:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  return download_complete_event_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileCreative_Creative_TrackingEvents::mutable_download_complete_event() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  return &download_complete_event_;
}

// -------------------------------------------------------------------

// MobileCreative_Creative

// optional string img_url = 1;
inline bool MobileCreative_Creative::has_img_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileCreative_Creative::set_has_img_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileCreative_Creative::clear_has_img_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileCreative_Creative::clear_img_url() {
  if (img_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_url_->clear();
  }
  clear_has_img_url();
}
inline const ::std::string& MobileCreative_Creative::img_url() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.img_url)
  return *img_url_;
}
inline void MobileCreative_Creative::set_img_url(const ::std::string& value) {
  set_has_img_url();
  if (img_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_url_ = new ::std::string;
  }
  img_url_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.img_url)
}
inline void MobileCreative_Creative::set_img_url(const char* value) {
  set_has_img_url();
  if (img_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_url_ = new ::std::string;
  }
  img_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.img_url)
}
inline void MobileCreative_Creative::set_img_url(const char* value, size_t size) {
  set_has_img_url();
  if (img_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_url_ = new ::std::string;
  }
  img_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.img_url)
}
inline ::std::string* MobileCreative_Creative::mutable_img_url() {
  set_has_img_url();
  if (img_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.img_url)
  return img_url_;
}
inline ::std::string* MobileCreative_Creative::release_img_url() {
  clear_has_img_url();
  if (img_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = img_url_;
    img_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative_Creative::set_allocated_img_url(::std::string* img_url) {
  if (img_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete img_url_;
  }
  if (img_url) {
    set_has_img_url();
    img_url_ = img_url;
  } else {
    clear_has_img_url();
    img_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.Creative.img_url)
}

// optional string img_size = 2;
inline bool MobileCreative_Creative::has_img_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileCreative_Creative::set_has_img_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileCreative_Creative::clear_has_img_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileCreative_Creative::clear_img_size() {
  if (img_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_size_->clear();
  }
  clear_has_img_size();
}
inline const ::std::string& MobileCreative_Creative::img_size() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.img_size)
  return *img_size_;
}
inline void MobileCreative_Creative::set_img_size(const ::std::string& value) {
  set_has_img_size();
  if (img_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_size_ = new ::std::string;
  }
  img_size_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.img_size)
}
inline void MobileCreative_Creative::set_img_size(const char* value) {
  set_has_img_size();
  if (img_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_size_ = new ::std::string;
  }
  img_size_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.img_size)
}
inline void MobileCreative_Creative::set_img_size(const char* value, size_t size) {
  set_has_img_size();
  if (img_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_size_ = new ::std::string;
  }
  img_size_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.img_size)
}
inline ::std::string* MobileCreative_Creative::mutable_img_size() {
  set_has_img_size();
  if (img_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    img_size_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.img_size)
  return img_size_;
}
inline ::std::string* MobileCreative_Creative::release_img_size() {
  clear_has_img_size();
  if (img_size_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = img_size_;
    img_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative_Creative::set_allocated_img_size(::std::string* img_size) {
  if (img_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete img_size_;
  }
  if (img_size) {
    set_has_img_size();
    img_size_ = img_size;
  } else {
    clear_has_img_size();
    img_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.Creative.img_size)
}

// optional string title = 3;
inline bool MobileCreative_Creative::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileCreative_Creative::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileCreative_Creative::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileCreative_Creative::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MobileCreative_Creative::title() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.title)
  return *title_;
}
inline void MobileCreative_Creative::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.title)
}
inline void MobileCreative_Creative::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.title)
}
inline void MobileCreative_Creative::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.title)
}
inline ::std::string* MobileCreative_Creative::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.title)
  return title_;
}
inline ::std::string* MobileCreative_Creative::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative_Creative::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.Creative.title)
}

// optional string click_url = 4;
inline bool MobileCreative_Creative::has_click_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileCreative_Creative::set_has_click_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileCreative_Creative::clear_has_click_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileCreative_Creative::clear_click_url() {
  if (click_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_url_->clear();
  }
  clear_has_click_url();
}
inline const ::std::string& MobileCreative_Creative::click_url() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.click_url)
  return *click_url_;
}
inline void MobileCreative_Creative::set_click_url(const ::std::string& value) {
  set_has_click_url();
  if (click_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_url_ = new ::std::string;
  }
  click_url_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.click_url)
}
inline void MobileCreative_Creative::set_click_url(const char* value) {
  set_has_click_url();
  if (click_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_url_ = new ::std::string;
  }
  click_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.click_url)
}
inline void MobileCreative_Creative::set_click_url(const char* value, size_t size) {
  set_has_click_url();
  if (click_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_url_ = new ::std::string;
  }
  click_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.click_url)
}
inline ::std::string* MobileCreative_Creative::mutable_click_url() {
  set_has_click_url();
  if (click_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.click_url)
  return click_url_;
}
inline ::std::string* MobileCreative_Creative::release_click_url() {
  clear_has_click_url();
  if (click_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = click_url_;
    click_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative_Creative::set_allocated_click_url(::std::string* click_url) {
  if (click_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete click_url_;
  }
  if (click_url) {
    set_has_click_url();
    click_url_ = click_url;
  } else {
    clear_has_click_url();
    click_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.Creative.click_url)
}

// optional string destination_url = 5;
inline bool MobileCreative_Creative::has_destination_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileCreative_Creative::set_has_destination_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileCreative_Creative::clear_has_destination_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileCreative_Creative::clear_destination_url() {
  if (destination_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_url_->clear();
  }
  clear_has_destination_url();
}
inline const ::std::string& MobileCreative_Creative::destination_url() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.destination_url)
  return *destination_url_;
}
inline void MobileCreative_Creative::set_destination_url(const ::std::string& value) {
  set_has_destination_url();
  if (destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_url_ = new ::std::string;
  }
  destination_url_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.destination_url)
}
inline void MobileCreative_Creative::set_destination_url(const char* value) {
  set_has_destination_url();
  if (destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_url_ = new ::std::string;
  }
  destination_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.destination_url)
}
inline void MobileCreative_Creative::set_destination_url(const char* value, size_t size) {
  set_has_destination_url();
  if (destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_url_ = new ::std::string;
  }
  destination_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.destination_url)
}
inline ::std::string* MobileCreative_Creative::mutable_destination_url() {
  set_has_destination_url();
  if (destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.destination_url)
  return destination_url_;
}
inline ::std::string* MobileCreative_Creative::release_destination_url() {
  clear_has_destination_url();
  if (destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = destination_url_;
    destination_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative_Creative::set_allocated_destination_url(::std::string* destination_url) {
  if (destination_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destination_url_;
  }
  if (destination_url) {
    set_has_destination_url();
    destination_url_ = destination_url;
  } else {
    clear_has_destination_url();
    destination_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.Creative.destination_url)
}

// repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
inline int MobileCreative_Creative::attr_size() const {
  return attr_.size();
}
inline void MobileCreative_Creative::clear_attr() {
  attr_.Clear();
}
inline const ::Tanx::MobileCreative_Creative_Attr& MobileCreative_Creative::attr(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.attr)
  return attr_.Get(index);
}
inline ::Tanx::MobileCreative_Creative_Attr* MobileCreative_Creative::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.attr)
  return attr_.Mutable(index);
}
inline ::Tanx::MobileCreative_Creative_Attr* MobileCreative_Creative::add_attr() {
  // @@protoc_insertion_point(field_add:Tanx.MobileCreative.Creative.attr)
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative_Attr >&
MobileCreative_Creative::attr() const {
  // @@protoc_insertion_point(field_list:Tanx.MobileCreative.Creative.attr)
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative_Attr >*
MobileCreative_Creative::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.MobileCreative.Creative.attr)
  return &attr_;
}

// optional string creative_id = 7;
inline bool MobileCreative_Creative::has_creative_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileCreative_Creative::set_has_creative_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileCreative_Creative::clear_has_creative_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileCreative_Creative::clear_creative_id() {
  if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_->clear();
  }
  clear_has_creative_id();
}
inline const ::std::string& MobileCreative_Creative::creative_id() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.creative_id)
  return *creative_id_;
}
inline void MobileCreative_Creative::set_creative_id(const ::std::string& value) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.creative_id)
}
inline void MobileCreative_Creative::set_creative_id(const char* value) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.Creative.creative_id)
}
inline void MobileCreative_Creative::set_creative_id(const char* value, size_t size) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.Creative.creative_id)
}
inline ::std::string* MobileCreative_Creative::mutable_creative_id() {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creative_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.creative_id)
  return creative_id_;
}
inline ::std::string* MobileCreative_Creative::release_creative_id() {
  clear_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creative_id_;
    creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative_Creative::set_allocated_creative_id(::std::string* creative_id) {
  if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creative_id_;
  }
  if (creative_id) {
    set_has_creative_id();
    creative_id_ = creative_id;
  } else {
    clear_has_creative_id();
    creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.Creative.creative_id)
}

// repeated int32 category = 8;
inline int MobileCreative_Creative::category_size() const {
  return category_.size();
}
inline void MobileCreative_Creative::clear_category() {
  category_.Clear();
}
inline ::google::protobuf::int32 MobileCreative_Creative::category(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.category)
  return category_.Get(index);
}
inline void MobileCreative_Creative::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Creative.category)
}
inline void MobileCreative_Creative::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:Tanx.MobileCreative.Creative.category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MobileCreative_Creative::category() const {
  // @@protoc_insertion_point(field_list:Tanx.MobileCreative.Creative.category)
  return category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MobileCreative_Creative::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.MobileCreative.Creative.category)
  return &category_;
}

// optional .Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
inline bool MobileCreative_Creative::has_tracking_events() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileCreative_Creative::set_has_tracking_events() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileCreative_Creative::clear_has_tracking_events() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileCreative_Creative::clear_tracking_events() {
  if (tracking_events_ != NULL) tracking_events_->::Tanx::MobileCreative_Creative_TrackingEvents::Clear();
  clear_has_tracking_events();
}
inline const ::Tanx::MobileCreative_Creative_TrackingEvents& MobileCreative_Creative::tracking_events() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Creative.tracking_events)
  return tracking_events_ != NULL ? *tracking_events_ : *default_instance_->tracking_events_;
}
inline ::Tanx::MobileCreative_Creative_TrackingEvents* MobileCreative_Creative::mutable_tracking_events() {
  set_has_tracking_events();
  if (tracking_events_ == NULL) tracking_events_ = new ::Tanx::MobileCreative_Creative_TrackingEvents;
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Creative.tracking_events)
  return tracking_events_;
}
inline ::Tanx::MobileCreative_Creative_TrackingEvents* MobileCreative_Creative::release_tracking_events() {
  clear_has_tracking_events();
  ::Tanx::MobileCreative_Creative_TrackingEvents* temp = tracking_events_;
  tracking_events_ = NULL;
  return temp;
}
inline void MobileCreative_Creative::set_allocated_tracking_events(::Tanx::MobileCreative_Creative_TrackingEvents* tracking_events) {
  delete tracking_events_;
  tracking_events_ = tracking_events;
  if (tracking_events) {
    set_has_tracking_events();
  } else {
    clear_has_tracking_events();
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.Creative.tracking_events)
}

// -------------------------------------------------------------------

// MobileCreative_Area

// required int32 id = 1;
inline bool MobileCreative_Area::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileCreative_Area::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileCreative_Area::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileCreative_Area::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MobileCreative_Area::id() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Area.id)
  return id_;
}
inline void MobileCreative_Area::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.Area.id)
}

// repeated .Tanx.MobileCreative.Creative creatives = 2;
inline int MobileCreative_Area::creatives_size() const {
  return creatives_.size();
}
inline void MobileCreative_Area::clear_creatives() {
  creatives_.Clear();
}
inline const ::Tanx::MobileCreative_Creative& MobileCreative_Area::creatives(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.Area.creatives)
  return creatives_.Get(index);
}
inline ::Tanx::MobileCreative_Creative* MobileCreative_Area::mutable_creatives(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.Area.creatives)
  return creatives_.Mutable(index);
}
inline ::Tanx::MobileCreative_Creative* MobileCreative_Area::add_creatives() {
  // @@protoc_insertion_point(field_add:Tanx.MobileCreative.Area.creatives)
  return creatives_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative >&
MobileCreative_Area::creatives() const {
  // @@protoc_insertion_point(field_list:Tanx.MobileCreative.Area.creatives)
  return creatives_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative >*
MobileCreative_Area::mutable_creatives() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.MobileCreative.Area.creatives)
  return &creatives_;
}

// -------------------------------------------------------------------

// MobileCreative

// required int32 version = 1;
inline bool MobileCreative::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileCreative::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileCreative::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileCreative::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 MobileCreative::version() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.version)
  return version_;
}
inline void MobileCreative::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.version)
}

// required string bid = 2;
inline bool MobileCreative::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileCreative::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileCreative::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileCreative::clear_bid() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_->clear();
  }
  clear_has_bid();
}
inline const ::std::string& MobileCreative::bid() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.bid)
  return *bid_;
}
inline void MobileCreative::set_bid(const ::std::string& value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.bid)
}
inline void MobileCreative::set_bid(const char* value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.bid)
}
inline void MobileCreative::set_bid(const char* value, size_t size) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.bid)
}
inline ::std::string* MobileCreative::mutable_bid() {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.bid)
  return bid_;
}
inline ::std::string* MobileCreative::release_bid() {
  clear_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_;
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative::set_allocated_bid(::std::string* bid) {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (bid) {
    set_has_bid();
    bid_ = bid;
  } else {
    clear_has_bid();
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.bid)
}

// optional uint32 view_type = 3;
inline bool MobileCreative::has_view_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileCreative::set_has_view_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileCreative::clear_has_view_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileCreative::clear_view_type() {
  view_type_ = 0u;
  clear_has_view_type();
}
inline ::google::protobuf::uint32 MobileCreative::view_type() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.view_type)
  return view_type_;
}
inline void MobileCreative::set_view_type(::google::protobuf::uint32 value) {
  set_has_view_type();
  view_type_ = value;
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.view_type)
}

// repeated .Tanx.MobileCreative.Creative creatives = 4;
inline int MobileCreative::creatives_size() const {
  return creatives_.size();
}
inline void MobileCreative::clear_creatives() {
  creatives_.Clear();
}
inline const ::Tanx::MobileCreative_Creative& MobileCreative::creatives(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.creatives)
  return creatives_.Get(index);
}
inline ::Tanx::MobileCreative_Creative* MobileCreative::mutable_creatives(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.creatives)
  return creatives_.Mutable(index);
}
inline ::Tanx::MobileCreative_Creative* MobileCreative::add_creatives() {
  // @@protoc_insertion_point(field_add:Tanx.MobileCreative.creatives)
  return creatives_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative >&
MobileCreative::creatives() const {
  // @@protoc_insertion_point(field_list:Tanx.MobileCreative.creatives)
  return creatives_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Creative >*
MobileCreative::mutable_creatives() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.MobileCreative.creatives)
  return &creatives_;
}

// optional string native_template_id = 5;
inline bool MobileCreative::has_native_template_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileCreative::set_has_native_template_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileCreative::clear_has_native_template_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileCreative::clear_native_template_id() {
  if (native_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_->clear();
  }
  clear_has_native_template_id();
}
inline const ::std::string& MobileCreative::native_template_id() const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.native_template_id)
  return *native_template_id_;
}
inline void MobileCreative::set_native_template_id(const ::std::string& value) {
  set_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_ = new ::std::string;
  }
  native_template_id_->assign(value);
  // @@protoc_insertion_point(field_set:Tanx.MobileCreative.native_template_id)
}
inline void MobileCreative::set_native_template_id(const char* value) {
  set_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_ = new ::std::string;
  }
  native_template_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Tanx.MobileCreative.native_template_id)
}
inline void MobileCreative::set_native_template_id(const char* value, size_t size) {
  set_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_ = new ::std::string;
  }
  native_template_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tanx.MobileCreative.native_template_id)
}
inline ::std::string* MobileCreative::mutable_native_template_id() {
  set_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    native_template_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.native_template_id)
  return native_template_id_;
}
inline ::std::string* MobileCreative::release_native_template_id() {
  clear_has_native_template_id();
  if (native_template_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = native_template_id_;
    native_template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileCreative::set_allocated_native_template_id(::std::string* native_template_id) {
  if (native_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete native_template_id_;
  }
  if (native_template_id) {
    set_has_native_template_id();
    native_template_id_ = native_template_id;
  } else {
    clear_has_native_template_id();
    native_template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Tanx.MobileCreative.native_template_id)
}

// repeated .Tanx.MobileCreative.Area areas = 6;
inline int MobileCreative::areas_size() const {
  return areas_.size();
}
inline void MobileCreative::clear_areas() {
  areas_.Clear();
}
inline const ::Tanx::MobileCreative_Area& MobileCreative::areas(int index) const {
  // @@protoc_insertion_point(field_get:Tanx.MobileCreative.areas)
  return areas_.Get(index);
}
inline ::Tanx::MobileCreative_Area* MobileCreative::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:Tanx.MobileCreative.areas)
  return areas_.Mutable(index);
}
inline ::Tanx::MobileCreative_Area* MobileCreative::add_areas() {
  // @@protoc_insertion_point(field_add:Tanx.MobileCreative.areas)
  return areas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Area >&
MobileCreative::areas() const {
  // @@protoc_insertion_point(field_list:Tanx.MobileCreative.areas)
  return areas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tanx::MobileCreative_Area >*
MobileCreative::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:Tanx.MobileCreative.areas)
  return &areas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Tanx

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Tanx::BidRequest_AdzInfo_Deal_DealType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tanx::BidRequest_AdzInfo_Deal_DealType>() {
  return ::Tanx::BidRequest_AdzInfo_Deal_DealType_descriptor();
}
template <> struct is_proto_enum< ::Tanx::BidRequest_AdzInfo_Location> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tanx::BidRequest_AdzInfo_Location>() {
  return ::Tanx::BidRequest_AdzInfo_Location_descriptor();
}
template <> struct is_proto_enum< ::Tanx::BidRequest_AdzInfo_ViewScreen> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tanx::BidRequest_AdzInfo_ViewScreen>() {
  return ::Tanx::BidRequest_AdzInfo_ViewScreen_descriptor();
}
template <> struct is_proto_enum< ::Tanx::BidRequest_Mobile_Device_ScreenOrientation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tanx::BidRequest_Mobile_Device_ScreenOrientation>() {
  return ::Tanx::BidRequest_Mobile_Device_ScreenOrientation_descriptor();
}
template <> struct is_proto_enum< ::Tanx::BidRequest_Video_VideoFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tanx::BidRequest_Video_VideoFormat>() {
  return ::Tanx::BidRequest_Video_VideoFormat_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tanx_2dbidding_2eproto__INCLUDED

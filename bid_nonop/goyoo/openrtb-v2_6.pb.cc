// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openrtb-v2_6.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "openrtb-v2_6.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scenario_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scenario_reflection_ = NULL;
const ::google::protobuf::Descriptor* Imp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Imp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Banner_reflection_ = NULL;
const ::google::protobuf::Descriptor* Site_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Site_reflection_ = NULL;
const ::google::protobuf::Descriptor* App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  App_reflection_ = NULL;
const ::google::protobuf::Descriptor* Publisher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Publisher_reflection_ = NULL;
const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Geo_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bid_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContentCategory_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CreativeAttribute_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScenarioType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdmType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NoBidReasonCodes_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_openrtb_2dv2_5f6_2eproto() {
  protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "openrtb-v2_6.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, imp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, wseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, scenario_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  Scenario_descriptor_ = file->message_type(1);
  static const int Scenario_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, info_),
  };
  Scenario_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scenario_descriptor_,
      Scenario::default_instance_,
      Scenario_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scenario));
  Imp_descriptor_ = file->message_type(2);
  static const int Imp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, bidfloor_),
  };
  Imp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Imp_descriptor_,
      Imp::default_instance_,
      Imp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Imp));
  Banner_descriptor_ = file->message_type(3);
  static const int Banner_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, wmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, hmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, wmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, hmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, wtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, battr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, bwords_),
  };
  Banner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Banner_descriptor_,
      Banner::default_instance_,
      Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Banner));
  Site_descriptor_ = file->message_type(4);
  static const int Site_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, sectioncat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, pagecat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, keywords_),
  };
  Site_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Site_descriptor_,
      Site::default_instance_,
      Site_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Site));
  App_descriptor_ = file->message_type(5);
  static const int App_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, storeurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, sectioncat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, pagecat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, paid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, keywords_),
  };
  App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      App_descriptor_,
      App::default_instance_,
      App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(App));
  Publisher_descriptor_ = file->message_type(6);
  static const int Publisher_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, slot_),
  };
  Publisher_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Publisher_descriptor_,
      Publisher::default_instance_,
      Publisher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Publisher));
  Device_descriptor_ = file->message_type(7);
  static const int Device_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, make_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, hwv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, osv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, js_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, androidid_),
  };
  Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Device));
  Geo_descriptor_ = file->message_type(8);
  static const int Geo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, zip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, utcoffset_),
  };
  Geo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Geo_descriptor_,
      Geo::default_instance_,
      Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Geo));
  User_descriptor_ = file->message_type(9);
  static const int User_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, yob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, geo_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  BidResponse_descriptor_ = file->message_type(10);
  static const int BidResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seatbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, process_time_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  SeatBid_descriptor_ = file->message_type(11);
  static const int SeatBid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, seat_),
  };
  SeatBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeatBid_descriptor_,
      SeatBid::default_instance_,
      SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeatBid));
  Bid_descriptor_ = file->message_type(12);
  static const int Bid_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, adm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, adomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, iurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, nurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, crid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, curl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, extiurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, admtype_),
  };
  Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bid_descriptor_,
      Bid::default_instance_,
      Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bid));
  ContentCategory_descriptor_ = file->enum_type(0);
  AdType_descriptor_ = file->enum_type(1);
  CreativeAttribute_descriptor_ = file->enum_type(2);
  AdPosition_descriptor_ = file->enum_type(3);
  ScenarioType_descriptor_ = file->enum_type(4);
  ConnectionType_descriptor_ = file->enum_type(5);
  LocationType_descriptor_ = file->enum_type(6);
  DeviceType_descriptor_ = file->enum_type(7);
  AdmType_descriptor_ = file->enum_type(8);
  NoBidReasonCodes_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_openrtb_2dv2_5f6_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scenario_descriptor_, &Scenario::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Imp_descriptor_, &Imp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Banner_descriptor_, &Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Site_descriptor_, &Site::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    App_descriptor_, &App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Publisher_descriptor_, &Publisher::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Geo_descriptor_, &Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeatBid_descriptor_, &SeatBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bid_descriptor_, &Bid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_openrtb_2dv2_5f6_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete Scenario::default_instance_;
  delete Scenario_reflection_;
  delete Imp::default_instance_;
  delete Imp_reflection_;
  delete Banner::default_instance_;
  delete Banner_reflection_;
  delete Site::default_instance_;
  delete Site_reflection_;
  delete App::default_instance_;
  delete App_reflection_;
  delete Publisher::default_instance_;
  delete Publisher_reflection_;
  delete Device::default_instance_;
  delete Device_reflection_;
  delete Geo::default_instance_;
  delete Geo_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete SeatBid::default_instance_;
  delete SeatBid_reflection_;
  delete Bid::default_instance_;
  delete Bid_reflection_;
}

void protobuf_AddDesc_openrtb_2dv2_5f6_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022openrtb-v2_6.proto\"\333\001\n\nBidRequest\022\n\n\002i"
    "d\030\001 \002(\t\022\021\n\003imp\030\002 \003(\0132\004.Imp\022\023\n\004site\030\003 \001(\013"
    "2\005.Site\022\021\n\003app\030\004 \001(\0132\004.App\022\023\n\004user\030\005 \001(\013"
    "2\005.User\022\027\n\006device\030\006 \001(\0132\007.Device\022\017\n\004test"
    "\030\007 \002(\005:\0010\022\014\n\004tmax\030\010 \002(\005\022\r\n\002at\030\t \002(\005:\0012\022\r"
    "\n\005wseat\030\n \003(\t\022\033\n\010scenario\030\013 \002(\0132\t.Scenar"
    "io\"5\n\010Scenario\022\033\n\004type\030\001 \002(\0162\r.ScenarioT"
    "ype\022\014\n\004info\030\002 \001(\t\"<\n\003Imp\022\n\n\002id\030\001 \002(\t\022\027\n\006"
    "banner\030\002 \002(\0132\007.Banner\022\020\n\010bidfloor\030\003 \002(\002\""
    "\200\002\n\006Banner\022\n\n\002id\030\001 \002(\t\022\t\n\001w\030\002 \001(\005\022\t\n\001h\030\003"
    " \001(\005\022\014\n\004wmax\030\004 \001(\005\022\014\n\004hmax\030\005 \001(\005\022\014\n\004wmin"
    "\030\006 \001(\005\022\014\n\004hmin\030\007 \001(\005\022\026\n\005btype\030\010 \003(\0162\007.Ad"
    "Type\022\026\n\005wtype\030\t \003(\0162\007.AdType\022!\n\005battr\030\n "
    "\003(\0162\022.CreativeAttribute\022\030\n\003pos\030\013 \001(\0162\013.A"
    "dPosition\022\r\n\005mimes\030\014 \003(\t\022\020\n\010keywords\030\r \003"
    "(\t\022\016\n\006bwords\030\016 \003(\t\"\207\002\n\004Site\022\n\n\002id\030\001 \002(\t\022"
    "\014\n\004name\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\035\n\003cat\030\004 \003"
    "(\0162\020.ContentCategory\022$\n\nsectioncat\030\005 \001(\016"
    "2\020.ContentCategory\022!\n\007pagecat\030\006 \001(\0162\020.Co"
    "ntentCategory\022\014\n\004page\030\007 \002(\t\022\013\n\003ref\030\010 \001(\t"
    "\022\016\n\006search\030\t \003(\t\022\021\n\006mobile\030\n \002(\005:\0010\022\035\n\tp"
    "ublisher\030\013 \002(\0132\n.Publisher\022\020\n\010keywords\030\014"
    " \003(\t\"\205\002\n\003App\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\016"
    "\n\006bundle\030\003 \002(\t\022\016\n\006domain\030\004 \001(\t\022\020\n\010storeu"
    "rl\030\005 \001(\t\022\035\n\003cat\030\006 \001(\0162\020.ContentCategory\022"
    "$\n\nsectioncat\030\007 \001(\0162\020.ContentCategory\022!\n"
    "\007pagecat\030\010 \001(\0162\020.ContentCategory\022\013\n\003ver\030"
    "\t \001(\t\022\014\n\004paid\030\n \002(\005\022\035\n\tpublisher\030\013 \002(\0132\n"
    ".Publisher\022\020\n\010keywords\030\014 \003(\t\"p\n\tPublishe"
    "r\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\035\n\003cat\030\003 \003(\016"
    "2\020.ContentCategory\022\016\n\006domain\030\004 \002(\t\022\014\n\004ty"
    "pe\030\005 \001(\t\022\014\n\004slot\030\006 \001(\t\"\316\002\n\006Device\022\n\n\002ua\030"
    "\001 \002(\t\022\021\n\003geo\030\002 \001(\0132\004.Geo\022\n\n\002ip\030\003 \002(\t\022\037\n\n"
    "devicetype\030\004 \002(\0162\013.DeviceType\022\014\n\004make\030\005 "
    "\001(\t\022\r\n\005model\030\006 \001(\t\022\013\n\003hwv\030\007 \001(\t\022\n\n\002os\030\010 "
    "\001(\t\022\013\n\003osv\030\t \001(\t\022\t\n\001w\030\n \002(\005\022\t\n\001h\030\013 \002(\005\022\r"
    "\n\002js\030\014 \001(\005:\0010\022\020\n\010language\030\r \001(\t\0221\n\016conne"
    "ctiontype\030\016 \001(\0162\017.ConnectionType:\010ETHERN"
    "ET\022\014\n\004imei\030\017 \001(\t\022\013\n\003mac\030\020 \001(\t\022\014\n\004idfa\030\021 "
    "\001(\t\022\017\n\007carrier\030\022 \001(\t\022\021\n\tandroidid\030\023 \001(\t\""
    "\220\001\n\003Geo\022\013\n\003lat\030\001 \001(\002\022\013\n\003lon\030\002 \001(\002\022\033\n\004typ"
    "e\030\003 \002(\0162\r.LocationType\022\017\n\007country\030\004 \001(\t\022"
    "\020\n\010province\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\022\013\n\003zip\030\007"
    " \001(\t\022\024\n\tutcoffset\030\010 \001(\005:\0010\"T\n\004User\022\n\n\002id"
    "\030\001 \002(\t\022\013\n\003yob\030\003 \001(\005\022\016\n\006gender\030\004 \001(\t\022\020\n\010k"
    "eywords\030\005 \003(\t\022\021\n\003geo\030\006 \001(\0132\004.Geo\"y\n\013BidR"
    "esponse\022\n\n\002id\030\001 \002(\t\022\031\n\007seatbid\030\002 \003(\0132\010.S"
    "eatBid\022\r\n\005bidid\030\003 \002(\t\022\036\n\003nbr\030\004 \001(\0162\021.NoB"
    "idReasonCodes\022\024\n\014process_time\030\005 \001(\005\"*\n\007S"
    "eatBid\022\021\n\003bid\030\001 \003(\0132\004.Bid\022\014\n\004seat\030\002 \002(\t\""
    "\332\002\n\003Bid\022\n\n\002id\030\001 \002(\t\022\r\n\005impid\030\002 \002(\t\022\r\n\005pr"
    "ice\030\003 \002(\002\022\013\n\003adm\030\004 \002(\t\022\017\n\007adomain\030\005 \002(\t\022"
    "\016\n\006bundle\030\006 \001(\t\022\014\n\004iurl\030\007 \002(\t\022\t\n\001w\030\010 \002(\002"
    "\022\t\n\001h\030\t \002(\002\022\014\n\004adid\030\n \001(\t\022\014\n\004nurl\030\013 \001(\t\022"
    "\013\n\003cid\030\014 \001(\t\022\014\n\004crid\030\r \001(\t\022\035\n\003cat\030\016 \001(\0162"
    "\020.ContentCategory\022 \n\004attr\030\017 \001(\0162\022.Creati"
    "veAttribute\022\014\n\004curl\030\020 \002(\t\022\025\n\004type\030\021 \002(\0162"
    "\007.AdType\022\017\n\007extiurl\030\022 \003(\t\022\016\n\006action\030\023 \001("
    "\t\022\031\n\007admtype\030\024 \002(\0162\010.AdmType*\260\030\n\017Content"
    "Category\022\014\n\007CAT_801\020\241\006\022\017\n\tCAT_80101\020\345\361\004\022"
    "\017\n\tCAT_80102\020\346\361\004\022\017\n\tCAT_80103\020\347\361\004\022\017\n\tCAT"
    "_80106\020\352\361\004\022\017\n\tCAT_80107\020\353\361\004\022\017\n\tCAT_80108"
    "\020\354\361\004\022\017\n\tCAT_80110\020\356\361\004\022\014\n\007CAT_802\020\242\006\022\017\n\tC"
    "AT_80201\020\311\362\004\022\017\n\tCAT_80203\020\313\362\004\022\017\n\tCAT_802"
    "05\020\315\362\004\022\017\n\tCAT_80206\020\316\362\004\022\017\n\tCAT_80207\020\317\362\004"
    "\022\017\n\tCAT_80210\020\322\362\004\022\017\n\tCAT_80212\020\324\362\004\022\017\n\tCA"
    "T_80213\020\325\362\004\022\017\n\tCAT_80214\020\326\362\004\022\017\n\tCAT_8021"
    "5\020\327\362\004\022\017\n\tCAT_80216\020\330\362\004\022\014\n\007CAT_803\020\243\006\022\017\n\t"
    "CAT_80301\020\255\363\004\022\017\n\tCAT_80302\020\256\363\004\022\017\n\tCAT_80"
    "303\020\257\363\004\022\014\n\007CAT_804\020\244\006\022\017\n\tCAT_80401\020\221\364\004\022\017"
    "\n\tCAT_80402\020\222\364\004\022\017\n\tCAT_80403\020\223\364\004\022\017\n\tCAT_"
    "80404\020\224\364\004\022\017\n\tCAT_80405\020\225\364\004\022\014\n\007CAT_805\020\245\006"
    "\022\017\n\tCAT_80501\020\365\364\004\022\017\n\tCAT_80502\020\366\364\004\022\017\n\tCA"
    "T_80503\020\367\364\004\022\017\n\tCAT_80504\020\370\364\004\022\017\n\tCAT_8050"
    "5\020\371\364\004\022\017\n\tCAT_80506\020\372\364\004\022\017\n\tCAT_80507\020\373\364\004\022"
    "\017\n\tCAT_80509\020\375\364\004\022\014\n\007CAT_806\020\246\006\022\017\n\tCAT_80"
    "601\020\331\365\004\022\022\n\013CAT_8060101\020\305\371\353\003\022\022\n\013CAT_80601"
    "02\020\306\371\353\003\022\022\n\013CAT_8060103\020\307\371\353\003\022\022\n\013CAT_80601"
    "04\020\310\371\353\003\022\022\n\013CAT_8060105\020\311\371\353\003\022\022\n\013CAT_80601"
    "06\020\312\371\353\003\022\022\n\013CAT_8060107\020\313\371\353\003\022\022\n\013CAT_80601"
    "08\020\314\371\353\003\022\022\n\013CAT_8060109\020\315\371\353\003\022\017\n\tCAT_80602"
    "\020\332\365\004\022\017\n\tCAT_80603\020\333\365\004\022\017\n\tCAT_80604\020\334\365\004\022\017"
    "\n\tCAT_80605\020\335\365\004\022\017\n\tCAT_80606\020\336\365\004\022\017\n\tCAT_"
    "80607\020\337\365\004\022\017\n\tCAT_80608\020\340\365\004\022\017\n\tCAT_80609\020"
    "\341\365\004\022\014\n\007CAT_808\020\250\006\022\017\n\tCAT_80801\020\241\367\004\022\017\n\tCA"
    "T_80803\020\243\367\004\022\017\n\tCAT_80805\020\245\367\004\022\017\n\tCAT_8080"
    "6\020\246\367\004\022\017\n\tCAT_80808\020\250\367\004\022\017\n\tCAT_80809\020\251\367\004\022"
    "\014\n\007CAT_809\020\251\006\022\017\n\tCAT_80901\020\205\370\004\022\017\n\tCAT_80"
    "902\020\206\370\004\022\014\n\007CAT_810\020\252\006\022\017\n\tCAT_81001\020\351\370\004\022\017"
    "\n\tCAT_81002\020\352\370\004\022\017\n\tCAT_81003\020\353\370\004\022\017\n\tCAT_"
    "81005\020\355\370\004\022\017\n\tCAT_81007\020\357\370\004\022\017\n\tCAT_81008\020"
    "\360\370\004\022\017\n\tCAT_81009\020\361\370\004\022\014\n\007CAT_811\020\253\006\022\017\n\tCA"
    "T_81101\020\315\371\004\022\017\n\tCAT_81102\020\316\371\004\022\017\n\tCAT_8110"
    "3\020\317\371\004\022\017\n\tCAT_81105\020\321\371\004\022\014\n\007CAT_812\020\254\006\022\017\n\t"
    "CAT_81201\020\261\372\004\022\017\n\tCAT_81202\020\262\372\004\022\017\n\tCAT_81"
    "203\020\263\372\004\022\017\n\tCAT_81204\020\264\372\004\022\017\n\tCAT_81206\020\266\372"
    "\004\022\017\n\tCAT_81207\020\267\372\004\022\017\n\tCAT_81208\020\270\372\004\022\017\n\tC"
    "AT_81209\020\271\372\004\022\017\n\tCAT_81210\020\272\372\004\022\017\n\tCAT_812"
    "11\020\273\372\004\022\017\n\tCAT_81212\020\274\372\004\022\017\n\tCAT_81213\020\275\372\004"
    "\022\017\n\tCAT_81214\020\276\372\004\022\017\n\tCAT_81215\020\277\372\004\022\017\n\tCA"
    "T_81216\020\300\372\004\022\017\n\tCAT_81217\020\301\372\004\022\014\n\007CAT_813\020"
    "\255\006\022\017\n\tCAT_81301\020\225\373\004\022\017\n\tCAT_81302\020\226\373\004\022\017\n\t"
    "CAT_81303\020\227\373\004\022\017\n\tCAT_81304\020\230\373\004\022\017\n\tCAT_81"
    "305\020\231\373\004\022\017\n\tCAT_81306\020\232\373\004\022\017\n\tCAT_81307\020\233\373"
    "\004\022\017\n\tCAT_81309\020\235\373\004\022\014\n\007CAT_814\020\256\006\022\017\n\tCAT_"
    "81401\020\371\373\004\022\017\n\tCAT_81402\020\372\373\004\022\017\n\tCAT_81403\020"
    "\373\373\004\022\017\n\tCAT_81405\020\375\373\004\022\014\n\007CAT_815\020\257\006\022\017\n\tCA"
    "T_81501\020\335\374\004\022\017\n\tCAT_81502\020\336\374\004\022\017\n\tCAT_8150"
    "3\020\337\374\004\022\017\n\tCAT_81504\020\340\374\004\022\014\n\007CAT_816\020\260\006\022\017\n\t"
    "CAT_81601\020\301\375\004\022\017\n\tCAT_81602\020\302\375\004\022\017\n\tCAT_81"
    "603\020\303\375\004\022\017\n\tCAT_81604\020\304\375\004\022\017\n\tCAT_81605\020\305\375"
    "\004\022\017\n\tCAT_81606\020\306\375\004\022\017\n\tCAT_81607\020\307\375\004\022\017\n\tC"
    "AT_81608\020\310\375\004\022\017\n\tCAT_81609\020\311\375\004\022\017\n\tCAT_816"
    "10\020\312\375\004\022\014\n\007CAT_817\020\261\006\022\017\n\tCAT_81701\020\245\376\004\022\017\n"
    "\tCAT_81702\020\246\376\004\022\017\n\tCAT_81703\020\247\376\004\022\017\n\tCAT_8"
    "1704\020\250\376\004\022\017\n\tCAT_81705\020\251\376\004\022\017\n\tCAT_81706\020\252"
    "\376\004\022\017\n\tCAT_81707\020\253\376\004\022\017\n\tCAT_81709\020\255\376\004\022\017\n\t"
    "CAT_81710\020\256\376\004\022\017\n\tCAT_81711\020\257\376\004\022\017\n\tCAT_81"
    "712\020\260\376\004\022\017\n\tCAT_81713\020\261\376\004\022\017\n\tCAT_81715\020\263\376"
    "\004\022\017\n\tCAT_81716\020\264\376\004\022\014\n\007CAT_818\020\262\006\022\017\n\tCAT_"
    "81804\020\214\377\004\022\017\n\tCAT_81805\020\215\377\004\022\017\n\tCAT_81816\020"
    "\230\377\004\022\017\n\tCAT_81817\020\231\377\004\022\017\n\tCAT_81822\020\236\377\004\022\017\n"
    "\tCAT_81823\020\237\377\004\022\014\n\007CAT_819\020\263\006\022\017\n\tCAT_8190"
    "1\020\355\377\004\022\017\n\tCAT_81902\020\356\377\004\022\017\n\tCAT_81903\020\357\377\004\022"
    "\014\n\007CAT_820\020\264\006\022\017\n\tCAT_82001\020\321\200\005\022\017\n\tCAT_82"
    "002\020\322\200\005\022\017\n\tCAT_82003\020\323\200\005\022\017\n\tCAT_82005\020\325\200"
    "\005\022\017\n\tCAT_82006\020\326\200\005\022\017\n\tCAT_82008\020\330\200\005\022\017\n\tC"
    "AT_82010\020\332\200\005\022\014\n\007CAT_822\020\266\006\022\017\n\tCAT_82201\020"
    "\231\202\005\022\017\n\tCAT_82202\020\232\202\005\022\017\n\tCAT_82204\020\234\202\005\022\017\n"
    "\tCAT_82207\020\237\202\005\022\017\n\tCAT_82208\020\240\202\005\022\014\n\007CAT_8"
    "23\020\267\006\022\017\n\tCAT_82301\020\375\202\005\022\017\n\tCAT_82302\020\376\202\005\022"
    "\017\n\tCAT_82303\020\377\202\005\022\017\n\tCAT_82304\020\200\203\005\022\017\n\tCAT"
    "_82305\020\201\203\005\022\017\n\tCAT_82306\020\202\203\005\022\017\n\tCAT_82308"
    "\020\204\203\005\022\014\n\007CAT_824\020\270\006\022\014\n\007CAT_825\020\271\006\022\017\n\tCAT_"
    "82501\020\305\204\005\022\017\n\tCAT_82502\020\306\204\005\022\017\n\tCAT_82503\020"
    "\307\204\005\022\017\n\tCAT_82504\020\310\204\005\022\017\n\tCAT_82505\020\311\204\005\022\017\n"
    "\tCAT_82506\020\312\204\005\022\017\n\tCAT_82507\020\313\204\005*1\n\006AdTyp"
    "e\022\010\n\004TEXT\020\001\022\t\n\005IMAGE\020\002\022\006\n\002JS\020\003\022\n\n\006IFRAME"
    "\020\004*\2027\n\021CreativeAttribute\022\r\n\010ATTR_706\020\302\005\022"
    "\020\n\nATTR_70601\020\311\247\004\022\020\n\nATTR_70602\020\312\247\004\022\020\n\nA"
    "TTR_70603\020\313\247\004\022\020\n\nATTR_70699\020\253\250\004\022\r\n\010ATTR_"
    "711\020\307\005\022\020\n\nATTR_71101\020\275\253\004\022\020\n\nATTR_71102\020\276"
    "\253\004\022\020\n\nATTR_71103\020\277\253\004\022\020\n\nATTR_71104\020\300\253\004\022\020"
    "\n\nATTR_71105\020\301\253\004\022\020\n\nATTR_71106\020\302\253\004\022\020\n\nAT"
    "TR_71107\020\303\253\004\022\020\n\nATTR_71108\020\304\253\004\022\020\n\nATTR_7"
    "1109\020\305\253\004\022\020\n\nATTR_71110\020\306\253\004\022\020\n\nATTR_71111"
    "\020\307\253\004\022\020\n\nATTR_71112\020\310\253\004\022\020\n\nATTR_71113\020\311\253\004"
    "\022\020\n\nATTR_71114\020\312\253\004\022\020\n\nATTR_71115\020\313\253\004\022\020\n\n"
    "ATTR_71116\020\314\253\004\022\020\n\nATTR_71117\020\315\253\004\022\020\n\nATTR"
    "_71118\020\316\253\004\022\020\n\nATTR_71119\020\317\253\004\022\020\n\nATTR_711"
    "20\020\320\253\004\022\020\n\nATTR_71121\020\321\253\004\022\020\n\nATTR_71199\020\237"
    "\254\004\022\r\n\010ATTR_720\020\320\005\022\020\n\nATTR_72001\020\301\262\004\022\020\n\nA"
    "TTR_72002\020\302\262\004\022\020\n\nATTR_72003\020\303\262\004\022\020\n\nATTR_"
    "72005\020\305\262\004\022\020\n\nATTR_72006\020\306\262\004\022\020\n\nATTR_7200"
    "7\020\307\262\004\022\020\n\nATTR_72008\020\310\262\004\022\020\n\nATTR_72099\020\243\263"
    "\004\022\r\n\010ATTR_722\020\322\005\022\020\n\nATTR_72201\020\211\264\004\022\020\n\nAT"
    "TR_72202\020\212\264\004\022\020\n\nATTR_72203\020\213\264\004\022\020\n\nATTR_7"
    "2204\020\214\264\004\022\020\n\nATTR_72205\020\215\264\004\022\020\n\nATTR_72206"
    "\020\216\264\004\022\020\n\nATTR_72207\020\217\264\004\022\020\n\nATTR_72208\020\220\264\004"
    "\022\020\n\nATTR_72209\020\221\264\004\022\020\n\nATTR_72210\020\222\264\004\022\020\n\n"
    "ATTR_72211\020\223\264\004\022\020\n\nATTR_72212\020\224\264\004\022\020\n\nATTR"
    "_72299\020\353\264\004\022\r\n\010ATTR_701\020\275\005\022\020\n\nATTR_70101\020"
    "\325\243\004\022\020\n\nATTR_70102\020\326\243\004\022\020\n\nATTR_70103\020\327\243\004\022"
    "\020\n\nATTR_70104\020\330\243\004\022\020\n\nATTR_70105\020\331\243\004\022\020\n\nA"
    "TTR_70106\020\332\243\004\022\020\n\nATTR_70107\020\333\243\004\022\020\n\nATTR_"
    "70108\020\334\243\004\022\020\n\nATTR_70109\020\335\243\004\022\020\n\nATTR_7011"
    "0\020\336\243\004\022\020\n\nATTR_70111\020\337\243\004\022\020\n\nATTR_70199\020\267\244"
    "\004\022\r\n\010ATTR_719\020\317\005\022\020\n\nATTR_71901\020\335\261\004\022\020\n\nAT"
    "TR_71902\020\336\261\004\022\020\n\nATTR_71903\020\337\261\004\022\020\n\nATTR_7"
    "1904\020\340\261\004\022\020\n\nATTR_71905\020\341\261\004\022\020\n\nATTR_71906"
    "\020\342\261\004\022\020\n\nATTR_71907\020\343\261\004\022\020\n\nATTR_71908\020\344\261\004"
    "\022\020\n\nATTR_71909\020\345\261\004\022\020\n\nATTR_71910\020\346\261\004\022\020\n\n"
    "ATTR_71911\020\347\261\004\022\020\n\nATTR_71912\020\350\261\004\022\020\n\nATTR"
    "_71913\020\351\261\004\022\020\n\nATTR_71914\020\352\261\004\022\020\n\nATTR_719"
    "99\020\277\262\004\022\r\n\010ATTR_709\020\305\005\022\020\n\nATTR_70901\020\365\251\004\022"
    "\020\n\nATTR_70902\020\366\251\004\022\020\n\nATTR_70903\020\367\251\004\022\020\n\nA"
    "TTR_70904\020\370\251\004\022\020\n\nATTR_70905\020\371\251\004\022\020\n\nATTR_"
    "70906\020\372\251\004\022\020\n\nATTR_70907\020\373\251\004\022\020\n\nATTR_7090"
    "8\020\374\251\004\022\020\n\nATTR_70909\020\375\251\004\022\020\n\nATTR_70910\020\376\251"
    "\004\022\020\n\nATTR_70911\020\377\251\004\022\020\n\nATTR_70913\020\201\252\004\022\020\n"
    "\nATTR_70915\020\203\252\004\022\020\n\nATTR_70917\020\205\252\004\022\020\n\nATT"
    "R_70918\020\206\252\004\022\020\n\nATTR_70999\020\327\252\004\022\r\n\010ATTR_70"
    "5\020\301\005\022\020\n\nATTR_70501\020\345\246\004\022\020\n\nATTR_70502\020\346\246\004"
    "\022\020\n\nATTR_70503\020\347\246\004\022\020\n\nATTR_70504\020\350\246\004\022\020\n\n"
    "ATTR_70505\020\351\246\004\022\020\n\nATTR_70506\020\352\246\004\022\020\n\nATTR"
    "_70599\020\307\247\004\022\r\n\010ATTR_721\020\321\005\022\020\n\nATTR_72101\020"
    "\245\263\004\022\020\n\nATTR_72102\020\246\263\004\022\020\n\nATTR_72103\020\247\263\004\022"
    "\020\n\nATTR_72104\020\250\263\004\022\020\n\nATTR_72105\020\251\263\004\022\020\n\nA"
    "TTR_72106\020\252\263\004\022\020\n\nATTR_72107\020\253\263\004\022\020\n\nATTR_"
    "72108\020\254\263\004\022\020\n\nATTR_72109\020\255\263\004\022\020\n\nATTR_7211"
    "0\020\256\263\004\022\020\n\nATTR_72111\020\257\263\004\022\020\n\nATTR_72112\020\260\263"
    "\004\022\020\n\nATTR_72113\020\261\263\004\022\020\n\nATTR_72114\020\262\263\004\022\020\n"
    "\nATTR_72115\020\263\263\004\022\020\n\nATTR_72116\020\264\263\004\022\020\n\nATT"
    "R_72117\020\265\263\004\022\020\n\nATTR_72199\020\207\264\004\022\r\n\010ATTR_71"
    "7\020\315\005\022\020\n\nATTR_71701\020\225\260\004\022\020\n\nATTR_71702\020\226\260\004"
    "\022\020\n\nATTR_71703\020\227\260\004\022\020\n\nATTR_71704\020\230\260\004\022\020\n\n"
    "ATTR_71705\020\231\260\004\022\020\n\nATTR_71706\020\232\260\004\022\020\n\nATTR"
    "_71707\020\233\260\004\022\020\n\nATTR_71708\020\234\260\004\022\020\n\nATTR_717"
    "99\020\367\260\004\022\r\n\010ATTR_707\020\303\005\022\020\n\nATTR_70701\020\255\250\004\022"
    "\020\n\nATTR_70702\020\256\250\004\022\020\n\nATTR_70703\020\257\250\004\022\020\n\nA"
    "TTR_70704\020\260\250\004\022\020\n\nATTR_70705\020\261\250\004\022\020\n\nATTR_"
    "70706\020\262\250\004\022\020\n\nATTR_70707\020\263\250\004\022\020\n\nATTR_7070"
    "8\020\264\250\004\022\020\n\nATTR_70709\020\265\250\004\022\020\n\nATTR_70710\020\266\250"
    "\004\022\020\n\nATTR_70711\020\267\250\004\022\020\n\nATTR_70712\020\270\250\004\022\020\n"
    "\nATTR_70713\020\271\250\004\022\020\n\nATTR_70714\020\272\250\004\022\020\n\nATT"
    "R_70799\020\217\251\004\022\r\n\010ATTR_708\020\304\005\022\020\n\nATTR_70801"
    "\020\221\251\004\022\020\n\nATTR_70802\020\222\251\004\022\020\n\nATTR_70803\020\223\251\004"
    "\022\020\n\nATTR_70804\020\224\251\004\022\020\n\nATTR_70805\020\225\251\004\022\020\n\n"
    "ATTR_70806\020\226\251\004\022\020\n\nATTR_70899\020\363\251\004\022\r\n\010ATTR"
    "_723\020\323\005\022\020\n\nATTR_72301\020\355\264\004\022\020\n\nATTR_72302\020"
    "\356\264\004\022\020\n\nATTR_72303\020\357\264\004\022\020\n\nATTR_72304\020\360\264\004\022"
    "\020\n\nATTR_72305\020\361\264\004\022\020\n\nATTR_72306\020\362\264\004\022\020\n\nA"
    "TTR_72307\020\363\264\004\022\020\n\nATTR_72308\020\364\264\004\022\020\n\nATTR_"
    "72309\020\365\264\004\022\020\n\nATTR_72310\020\366\264\004\022\020\n\nATTR_7231"
    "1\020\367\264\004\022\020\n\nATTR_72312\020\370\264\004\022\020\n\nATTR_72313\020\371\264"
    "\004\022\020\n\nATTR_72314\020\372\264\004\022\020\n\nATTR_72315\020\373\264\004\022\020\n"
    "\nATTR_72399\020\317\265\004\022\r\n\010ATTR_725\020\325\005\022\020\n\nATTR_7"
    "2501\020\265\266\004\022\020\n\nATTR_72502\020\266\266\004\022\020\n\nATTR_72503"
    "\020\267\266\004\022\020\n\nATTR_72504\020\270\266\004\022\020\n\nATTR_72505\020\271\266\004"
    "\022\020\n\nATTR_72599\020\227\267\004\022\r\n\010ATTR_799\020\237\006\022\020\n\nATT"
    "R_79901\020\235\360\004\022\r\n\010ATTR_718\020\316\005\022\020\n\nATTR_71801"
    "\020\371\260\004\022\020\n\nATTR_71802\020\372\260\004\022\020\n\nATTR_71803\020\373\260\004"
    "\022\020\n\nATTR_71804\020\374\260\004\022\020\n\nATTR_71805\020\375\260\004\022\020\n\n"
    "ATTR_71806\020\376\260\004\022\020\n\nATTR_71807\020\377\260\004\022\020\n\nATTR"
    "_71808\020\200\261\004\022\020\n\nATTR_71809\020\201\261\004\022\020\n\nATTR_718"
    "10\020\202\261\004\022\020\n\nATTR_71811\020\203\261\004\022\020\n\nATTR_71812\020\204"
    "\261\004\022\020\n\nATTR_71813\020\205\261\004\022\020\n\nATTR_71814\020\206\261\004\022\020"
    "\n\nATTR_71815\020\207\261\004\022\020\n\nATTR_71816\020\210\261\004\022\020\n\nAT"
    "TR_71817\020\211\261\004\022\020\n\nATTR_71818\020\212\261\004\022\020\n\nATTR_7"
    "1819\020\213\261\004\022\020\n\nATTR_71820\020\214\261\004\022\020\n\nATTR_71821"
    "\020\215\261\004\022\020\n\nATTR_71822\020\216\261\004\022\020\n\nATTR_71899\020\333\261\004"
    "\022\r\n\010ATTR_724\020\324\005\022\020\n\nATTR_72401\020\321\265\004\022\020\n\nATT"
    "R_72402\020\322\265\004\022\020\n\nATTR_72403\020\323\265\004\022\020\n\nATTR_72"
    "404\020\324\265\004\022\020\n\nATTR_72405\020\325\265\004\022\020\n\nATTR_72406\020"
    "\326\265\004\022\020\n\nATTR_72407\020\327\265\004\022\020\n\nATTR_72408\020\330\265\004\022"
    "\020\n\nATTR_72409\020\331\265\004\022\020\n\nATTR_72410\020\332\265\004\022\020\n\nA"
    "TTR_72411\020\333\265\004\022\020\n\nATTR_72412\020\334\265\004\022\020\n\nATTR_"
    "72413\020\335\265\004\022\020\n\nATTR_72414\020\336\265\004\022\020\n\nATTR_7241"
    "5\020\337\265\004\022\020\n\nATTR_72416\020\340\265\004\022\020\n\nATTR_72417\020\341\265"
    "\004\022\020\n\nATTR_72418\020\342\265\004\022\020\n\nATTR_72419\020\343\265\004\022\020\n"
    "\nATTR_72420\020\344\265\004\022\020\n\nATTR_72421\020\345\265\004\022\020\n\nATT"
    "R_72422\020\346\265\004\022\020\n\nATTR_72423\020\347\265\004\022\020\n\nATTR_72"
    "424\020\350\265\004\022\020\n\nATTR_72499\020\263\266\004\022\r\n\010ATTR_716\020\314\005"
    "\022\020\n\nATTR_71601\020\261\257\004\022\020\n\nATTR_71602\020\262\257\004\022\020\n\n"
    "ATTR_71603\020\263\257\004\022\020\n\nATTR_71604\020\264\257\004\022\020\n\nATTR"
    "_71605\020\265\257\004\022\020\n\nATTR_71606\020\266\257\004\022\020\n\nATTR_716"
    "07\020\267\257\004\022\020\n\nATTR_71608\020\270\257\004\022\020\n\nATTR_71609\020\271"
    "\257\004\022\020\n\nATTR_71610\020\272\257\004\022\020\n\nATTR_71611\020\273\257\004\022\020"
    "\n\nATTR_71612\020\274\257\004\022\020\n\nATTR_71613\020\275\257\004\022\020\n\nAT"
    "TR_71614\020\276\257\004\022\020\n\nATTR_71615\020\277\257\004\022\020\n\nATTR_7"
    "1616\020\300\257\004\022\020\n\nATTR_71617\020\301\257\004\022\020\n\nATTR_71618"
    "\020\302\257\004\022\020\n\nATTR_71619\020\303\257\004\022\020\n\nATTR_71620\020\304\257\004"
    "\022\020\n\nATTR_71621\020\305\257\004\022\020\n\nATTR_71699\020\223\260\004\022\r\n\010"
    "ATTR_710\020\306\005\022\020\n\nATTR_71001\020\331\252\004\022\020\n\nATTR_71"
    "002\020\332\252\004\022\020\n\nATTR_71003\020\333\252\004\022\020\n\nATTR_71004\020"
    "\334\252\004\022\020\n\nATTR_71005\020\335\252\004\022\020\n\nATTR_71006\020\336\252\004\022"
    "\020\n\nATTR_71007\020\337\252\004\022\020\n\nATTR_71008\020\340\252\004\022\020\n\nA"
    "TTR_71099\020\273\253\004\022\r\n\010ATTR_704\020\300\005\022\020\n\nATTR_704"
    "01\020\201\246\004\022\020\n\nATTR_70402\020\202\246\004\022\020\n\nATTR_70403\020\203"
    "\246\004\022\020\n\nATTR_70404\020\204\246\004\022\020\n\nATTR_70405\020\205\246\004\022\020"
    "\n\nATTR_70406\020\206\246\004\022\020\n\nATTR_70407\020\207\246\004\022\020\n\nAT"
    "TR_70408\020\210\246\004\022\020\n\nATTR_70409\020\211\246\004\022\020\n\nATTR_7"
    "0410\020\212\246\004\022\020\n\nATTR_70499\020\343\246\004\022\r\n\010ATTR_703\020\277"
    "\005\022\020\n\nATTR_70301\020\235\245\004\022\020\n\nATTR_70302\020\236\245\004\022\020\n"
    "\nATTR_70303\020\237\245\004\022\020\n\nATTR_70305\020\241\245\004\022\020\n\nATT"
    "R_70306\020\242\245\004\022\020\n\nATTR_70307\020\243\245\004\022\020\n\nATTR_70"
    "308\020\244\245\004\022\020\n\nATTR_70399\020\377\245\004\022\r\n\010ATTR_702\020\276\005"
    "\022\020\n\nATTR_70201\020\271\244\004\022\020\n\nATTR_70202\020\272\244\004\022\020\n\n"
    "ATTR_70203\020\273\244\004\022\020\n\nATTR_70204\020\274\244\004\022\020\n\nATTR"
    "_70205\020\275\244\004\022\020\n\nATTR_70206\020\276\244\004\022\020\n\nATTR_702"
    "07\020\277\244\004\022\020\n\nATTR_70208\020\300\244\004\022\020\n\nATTR_70209\020\301"
    "\244\004\022\020\n\nATTR_70210\020\302\244\004\022\020\n\nATTR_70212\020\304\244\004\022\020"
    "\n\nATTR_70299\020\233\245\004\022\r\n\010ATTR_726\020\326\005\022\020\n\nATTR_"
    "72601\020\231\267\004\022\020\n\nATTR_72602\020\232\267\004\022\020\n\nATTR_7260"
    "3\020\233\267\004\022\020\n\nATTR_72604\020\234\267\004\022\020\n\nATTR_72605\020\235\267"
    "\004\022\020\n\nATTR_72606\020\236\267\004\022\020\n\nATTR_72607\020\237\267\004\022\020\n"
    "\nATTR_72608\020\240\267\004\022\020\n\nATTR_72609\020\241\267\004\022\020\n\nATT"
    "R_72610\020\242\267\004\022\020\n\nATTR_72611\020\243\267\004\022\020\n\nATTR_72"
    "612\020\244\267\004\022\020\n\nATTR_72699\020\373\267\004\022\r\n\010ATTR_714\020\312\005"
    "\022\020\n\nATTR_71401\020\351\255\004\022\020\n\nATTR_71402\020\352\255\004\022\020\n\n"
    "ATTR_71403\020\353\255\004\022\020\n\nATTR_71404\020\354\255\004\022\020\n\nATTR"
    "_71405\020\355\255\004\022\020\n\nATTR_71499\020\313\256\004\022\r\n\010ATTR_715"
    "\020\313\005\022\020\n\nATTR_71501\020\315\256\004\022\020\n\nATTR_71502\020\316\256\004\022"
    "\020\n\nATTR_71503\020\317\256\004\022\020\n\nATTR_71504\020\320\256\004\022\020\n\nA"
    "TTR_71505\020\321\256\004\022\020\n\nATTR_71506\020\322\256\004\022\020\n\nATTR_"
    "71507\020\323\256\004\022\020\n\nATTR_71508\020\324\256\004\022\020\n\nATTR_7150"
    "9\020\325\256\004\022\020\n\nATTR_71510\020\326\256\004\022\020\n\nATTR_71511\020\327\256"
    "\004\022\020\n\nATTR_71512\020\330\256\004\022\020\n\nATTR_71514\020\332\256\004\022\020\n"
    "\nATTR_71515\020\333\256\004\022\020\n\nATTR_71516\020\334\256\004\022\020\n\nATT"
    "R_71599\020\257\257\004\022\r\n\010ATTR_713\020\311\005\022\020\n\nATTR_71301"
    "\020\205\255\004\022\020\n\nATTR_71302\020\206\255\004\022\020\n\nATTR_71303\020\207\255\004"
    "\022\020\n\nATTR_71304\020\210\255\004\022\020\n\nATTR_71305\020\211\255\004\022\020\n\n"
    "ATTR_71306\020\212\255\004\022\020\n\nATTR_71307\020\213\255\004\022\020\n\nATTR"
    "_71308\020\214\255\004\022\020\n\nATTR_71309\020\215\255\004\022\020\n\nATTR_713"
    "99\020\347\255\004\022\r\n\010ATTR_712\020\310\005\022\020\n\nATTR_71201\020\241\254\004\022"
    "\020\n\nATTR_71202\020\242\254\004\022\020\n\nATTR_71204\020\244\254\004\022\020\n\nA"
    "TTR_71205\020\245\254\004\022\020\n\nATTR_71206\020\246\254\004\022\020\n\nATTR_"
    "71207\020\247\254\004\022\020\n\nATTR_71208\020\250\254\004\022\020\n\nATTR_7120"
    "9\020\251\254\004\022\020\n\nATTR_71210\020\252\254\004\022\020\n\nATTR_71211\020\253\254"
    "\004\022\020\n\nATTR_71212\020\254\254\004\022\020\n\nATTR_71213\020\255\254\004\022\020\n"
    "\nATTR_71214\020\256\254\004\022\020\n\nATTR_71215\020\257\254\004\022\020\n\nATT"
    "R_71299\020\203\255\004\022\r\n\010ATTR_727\020\327\005\022\020\n\nATTR_72701"
    "\020\375\267\004\022\020\n\nATTR_72702\020\376\267\004\022\020\n\nATTR_72703\020\377\267\004"
    "\022\r\n\010ATTR_901\020\205\007\022\020\n\nATTR_90101\020\365\277\005\022\020\n\nATT"
    "R_90102\020\366\277\005\022\020\n\nATTR_90103\020\367\277\005\022\020\n\nATTR_90"
    "104\020\370\277\005\022\020\n\nATTR_90105\020\371\277\005\022\020\n\nATTR_90106\020"
    "\372\277\005\022\020\n\nATTR_90107\020\373\277\005\022\020\n\nATTR_90108\020\374\277\005\022"
    "\020\n\nATTR_90109\020\375\277\005\022\020\n\nATTR_90110\020\376\277\005\022\020\n\nA"
    "TTR_90111\020\377\277\005\022\020\n\nATTR_90112\020\200\300\005\022\020\n\nATTR_"
    "90113\020\201\300\005\022\020\n\nATTR_90114\020\202\300\005\022\020\n\nATTR_9011"
    "5\020\203\300\005\022\020\n\nATTR_90116\020\204\300\005\022\020\n\nATTR_90117\020\205\300"
    "\005\022\020\n\nATTR_90118\020\206\300\005\022\020\n\nATTR_90119\020\207\300\005\022\020\n"
    "\nATTR_90120\020\210\300\005\022\020\n\nATTR_90121\020\211\300\005\022\020\n\nATT"
    "R_90122\020\212\300\005\022\020\n\nATTR_90123\020\213\300\005\022\020\n\nATTR_90"
    "199\020\327\300\005*\220\001\n\nAdPosition\022\024\n\020UNKNOWN_POSITI"
    "ON\020\000\022\022\n\016ABOVE_TEH_FOLD\020\001\022\016\n\nDEPRECATED\020\002"
    "\022\022\n\016BELOW_THE_FOLD\020\003\022\n\n\006HEADER\020\004\022\n\n\006FOOT"
    "ER\020\005\022\013\n\007SIDEBAR\020\006\022\017\n\013FULL_SCREEN\020\007*9\n\014Sc"
    "enarioType\022\t\n\005CWIFI\020\001\022\n\n\006NETBAR\020\002\022\t\n\005SIT"
    "ES\020\003\022\007\n\003APP\020\004*\256\001\n\016ConnectionType\022\020\n\014UNKN"
    "OWN_TYPE\020\000\022\014\n\010ETHERNET\020\001\022\010\n\004WIFI\020\002\022\'\n#CE"
    "LLULAR_NETWORK_UNKNOWN_GENERATION\020\003\022\027\n\023C"
    "ELLULAR_NETWORK_2G\020\004\022\027\n\023CELLULAR_NETWORK"
    "_3G\020\005\022\027\n\023CELLULAR_NETWORK_4G\020\006*:\n\014Locati"
    "onType\022\007\n\003GPS\020\001\022\016\n\nIP_ADDRESS\020\002\022\021\n\rUSER_"
    "PROVIDED\020\003* \n\nDeviceType\022\n\n\006MOBILE\020\001\022\006\n\002"
    "PC\020\002*\035\n\007AdmType\022\010\n\004JSON\020\001\022\010\n\004HTML\020\002*O\n\020N"
    "oBidReasonCodes\022\021\n\rUNKNOWN_ERROR\020\000\022\023\n\017TE"
    "CHNICAL_ERROR\020\001\022\023\n\017INVALID_REQUEST\020\002", 13156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openrtb-v2_6.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  Scenario::default_instance_ = new Scenario();
  Imp::default_instance_ = new Imp();
  Banner::default_instance_ = new Banner();
  Site::default_instance_ = new Site();
  App::default_instance_ = new App();
  Publisher::default_instance_ = new Publisher();
  Device::default_instance_ = new Device();
  Geo::default_instance_ = new Geo();
  User::default_instance_ = new User();
  BidResponse::default_instance_ = new BidResponse();
  SeatBid::default_instance_ = new SeatBid();
  Bid::default_instance_ = new Bid();
  BidRequest::default_instance_->InitAsDefaultInstance();
  Scenario::default_instance_->InitAsDefaultInstance();
  Imp::default_instance_->InitAsDefaultInstance();
  Banner::default_instance_->InitAsDefaultInstance();
  Site::default_instance_->InitAsDefaultInstance();
  App::default_instance_->InitAsDefaultInstance();
  Publisher::default_instance_->InitAsDefaultInstance();
  Device::default_instance_->InitAsDefaultInstance();
  Geo::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  SeatBid::default_instance_->InitAsDefaultInstance();
  Bid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_openrtb_2dv2_5f6_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_openrtb_2dv2_5f6_2eproto {
  StaticDescriptorInitializer_openrtb_2dv2_5f6_2eproto() {
    protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  }
} static_descriptor_initializer_openrtb_2dv2_5f6_2eproto_;
const ::google::protobuf::EnumDescriptor* ContentCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentCategory_descriptor_;
}
bool ContentCategory_IsValid(int value) {
  switch(value) {
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 822:
    case 823:
    case 824:
    case 825:
    case 80101:
    case 80102:
    case 80103:
    case 80106:
    case 80107:
    case 80108:
    case 80110:
    case 80201:
    case 80203:
    case 80205:
    case 80206:
    case 80207:
    case 80210:
    case 80212:
    case 80213:
    case 80214:
    case 80215:
    case 80216:
    case 80301:
    case 80302:
    case 80303:
    case 80401:
    case 80402:
    case 80403:
    case 80404:
    case 80405:
    case 80501:
    case 80502:
    case 80503:
    case 80504:
    case 80505:
    case 80506:
    case 80507:
    case 80509:
    case 80601:
    case 80602:
    case 80603:
    case 80604:
    case 80605:
    case 80606:
    case 80607:
    case 80608:
    case 80609:
    case 80801:
    case 80803:
    case 80805:
    case 80806:
    case 80808:
    case 80809:
    case 80901:
    case 80902:
    case 81001:
    case 81002:
    case 81003:
    case 81005:
    case 81007:
    case 81008:
    case 81009:
    case 81101:
    case 81102:
    case 81103:
    case 81105:
    case 81201:
    case 81202:
    case 81203:
    case 81204:
    case 81206:
    case 81207:
    case 81208:
    case 81209:
    case 81210:
    case 81211:
    case 81212:
    case 81213:
    case 81214:
    case 81215:
    case 81216:
    case 81217:
    case 81301:
    case 81302:
    case 81303:
    case 81304:
    case 81305:
    case 81306:
    case 81307:
    case 81309:
    case 81401:
    case 81402:
    case 81403:
    case 81405:
    case 81501:
    case 81502:
    case 81503:
    case 81504:
    case 81601:
    case 81602:
    case 81603:
    case 81604:
    case 81605:
    case 81606:
    case 81607:
    case 81608:
    case 81609:
    case 81610:
    case 81701:
    case 81702:
    case 81703:
    case 81704:
    case 81705:
    case 81706:
    case 81707:
    case 81709:
    case 81710:
    case 81711:
    case 81712:
    case 81713:
    case 81715:
    case 81716:
    case 81804:
    case 81805:
    case 81816:
    case 81817:
    case 81822:
    case 81823:
    case 81901:
    case 81902:
    case 81903:
    case 82001:
    case 82002:
    case 82003:
    case 82005:
    case 82006:
    case 82008:
    case 82010:
    case 82201:
    case 82202:
    case 82204:
    case 82207:
    case 82208:
    case 82301:
    case 82302:
    case 82303:
    case 82304:
    case 82305:
    case 82306:
    case 82308:
    case 82501:
    case 82502:
    case 82503:
    case 82504:
    case 82505:
    case 82506:
    case 82507:
    case 8060101:
    case 8060102:
    case 8060103:
    case 8060104:
    case 8060105:
    case 8060106:
    case 8060107:
    case 8060108:
    case 8060109:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdType_descriptor_;
}
bool AdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CreativeAttribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreativeAttribute_descriptor_;
}
bool CreativeAttribute_IsValid(int value) {
  switch(value) {
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
    case 723:
    case 724:
    case 725:
    case 726:
    case 727:
    case 799:
    case 901:
    case 70101:
    case 70102:
    case 70103:
    case 70104:
    case 70105:
    case 70106:
    case 70107:
    case 70108:
    case 70109:
    case 70110:
    case 70111:
    case 70199:
    case 70201:
    case 70202:
    case 70203:
    case 70204:
    case 70205:
    case 70206:
    case 70207:
    case 70208:
    case 70209:
    case 70210:
    case 70212:
    case 70299:
    case 70301:
    case 70302:
    case 70303:
    case 70305:
    case 70306:
    case 70307:
    case 70308:
    case 70399:
    case 70401:
    case 70402:
    case 70403:
    case 70404:
    case 70405:
    case 70406:
    case 70407:
    case 70408:
    case 70409:
    case 70410:
    case 70499:
    case 70501:
    case 70502:
    case 70503:
    case 70504:
    case 70505:
    case 70506:
    case 70599:
    case 70601:
    case 70602:
    case 70603:
    case 70699:
    case 70701:
    case 70702:
    case 70703:
    case 70704:
    case 70705:
    case 70706:
    case 70707:
    case 70708:
    case 70709:
    case 70710:
    case 70711:
    case 70712:
    case 70713:
    case 70714:
    case 70799:
    case 70801:
    case 70802:
    case 70803:
    case 70804:
    case 70805:
    case 70806:
    case 70899:
    case 70901:
    case 70902:
    case 70903:
    case 70904:
    case 70905:
    case 70906:
    case 70907:
    case 70908:
    case 70909:
    case 70910:
    case 70911:
    case 70913:
    case 70915:
    case 70917:
    case 70918:
    case 70999:
    case 71001:
    case 71002:
    case 71003:
    case 71004:
    case 71005:
    case 71006:
    case 71007:
    case 71008:
    case 71099:
    case 71101:
    case 71102:
    case 71103:
    case 71104:
    case 71105:
    case 71106:
    case 71107:
    case 71108:
    case 71109:
    case 71110:
    case 71111:
    case 71112:
    case 71113:
    case 71114:
    case 71115:
    case 71116:
    case 71117:
    case 71118:
    case 71119:
    case 71120:
    case 71121:
    case 71199:
    case 71201:
    case 71202:
    case 71204:
    case 71205:
    case 71206:
    case 71207:
    case 71208:
    case 71209:
    case 71210:
    case 71211:
    case 71212:
    case 71213:
    case 71214:
    case 71215:
    case 71299:
    case 71301:
    case 71302:
    case 71303:
    case 71304:
    case 71305:
    case 71306:
    case 71307:
    case 71308:
    case 71309:
    case 71399:
    case 71401:
    case 71402:
    case 71403:
    case 71404:
    case 71405:
    case 71499:
    case 71501:
    case 71502:
    case 71503:
    case 71504:
    case 71505:
    case 71506:
    case 71507:
    case 71508:
    case 71509:
    case 71510:
    case 71511:
    case 71512:
    case 71514:
    case 71515:
    case 71516:
    case 71599:
    case 71601:
    case 71602:
    case 71603:
    case 71604:
    case 71605:
    case 71606:
    case 71607:
    case 71608:
    case 71609:
    case 71610:
    case 71611:
    case 71612:
    case 71613:
    case 71614:
    case 71615:
    case 71616:
    case 71617:
    case 71618:
    case 71619:
    case 71620:
    case 71621:
    case 71699:
    case 71701:
    case 71702:
    case 71703:
    case 71704:
    case 71705:
    case 71706:
    case 71707:
    case 71708:
    case 71799:
    case 71801:
    case 71802:
    case 71803:
    case 71804:
    case 71805:
    case 71806:
    case 71807:
    case 71808:
    case 71809:
    case 71810:
    case 71811:
    case 71812:
    case 71813:
    case 71814:
    case 71815:
    case 71816:
    case 71817:
    case 71818:
    case 71819:
    case 71820:
    case 71821:
    case 71822:
    case 71899:
    case 71901:
    case 71902:
    case 71903:
    case 71904:
    case 71905:
    case 71906:
    case 71907:
    case 71908:
    case 71909:
    case 71910:
    case 71911:
    case 71912:
    case 71913:
    case 71914:
    case 71999:
    case 72001:
    case 72002:
    case 72003:
    case 72005:
    case 72006:
    case 72007:
    case 72008:
    case 72099:
    case 72101:
    case 72102:
    case 72103:
    case 72104:
    case 72105:
    case 72106:
    case 72107:
    case 72108:
    case 72109:
    case 72110:
    case 72111:
    case 72112:
    case 72113:
    case 72114:
    case 72115:
    case 72116:
    case 72117:
    case 72199:
    case 72201:
    case 72202:
    case 72203:
    case 72204:
    case 72205:
    case 72206:
    case 72207:
    case 72208:
    case 72209:
    case 72210:
    case 72211:
    case 72212:
    case 72299:
    case 72301:
    case 72302:
    case 72303:
    case 72304:
    case 72305:
    case 72306:
    case 72307:
    case 72308:
    case 72309:
    case 72310:
    case 72311:
    case 72312:
    case 72313:
    case 72314:
    case 72315:
    case 72399:
    case 72401:
    case 72402:
    case 72403:
    case 72404:
    case 72405:
    case 72406:
    case 72407:
    case 72408:
    case 72409:
    case 72410:
    case 72411:
    case 72412:
    case 72413:
    case 72414:
    case 72415:
    case 72416:
    case 72417:
    case 72418:
    case 72419:
    case 72420:
    case 72421:
    case 72422:
    case 72423:
    case 72424:
    case 72499:
    case 72501:
    case 72502:
    case 72503:
    case 72504:
    case 72505:
    case 72599:
    case 72601:
    case 72602:
    case 72603:
    case 72604:
    case 72605:
    case 72606:
    case 72607:
    case 72608:
    case 72609:
    case 72610:
    case 72611:
    case 72612:
    case 72699:
    case 72701:
    case 72702:
    case 72703:
    case 79901:
    case 90101:
    case 90102:
    case 90103:
    case 90104:
    case 90105:
    case 90106:
    case 90107:
    case 90108:
    case 90109:
    case 90110:
    case 90111:
    case 90112:
    case 90113:
    case 90114:
    case 90115:
    case 90116:
    case 90117:
    case 90118:
    case 90119:
    case 90120:
    case 90121:
    case 90122:
    case 90123:
    case 90199:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdPosition_descriptor_;
}
bool AdPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScenarioType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenarioType_descriptor_;
}
bool ScenarioType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionType_descriptor_;
}
bool ConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationType_descriptor_;
}
bool LocationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}
bool DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdmType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdmType_descriptor_;
}
bool AdmType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NoBidReasonCodes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoBidReasonCodes_descriptor_;
}
bool NoBidReasonCodes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BidRequest::kIdFieldNumber;
const int BidRequest::kImpFieldNumber;
const int BidRequest::kSiteFieldNumber;
const int BidRequest::kAppFieldNumber;
const int BidRequest::kUserFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kTestFieldNumber;
const int BidRequest::kTmaxFieldNumber;
const int BidRequest::kAtFieldNumber;
const int BidRequest::kWseatFieldNumber;
const int BidRequest::kScenarioFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  site_ = const_cast< ::Site*>(&::Site::default_instance());
  app_ = const_cast< ::App*>(&::App::default_instance());
  user_ = const_cast< ::User*>(&::User::default_instance());
  device_ = const_cast< ::Device*>(&::Device::default_instance());
  scenario_ = const_cast< ::Scenario*>(&::Scenario::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_ = NULL;
  app_ = NULL;
  user_ = NULL;
  device_ = NULL;
  test_ = 0;
  tmax_ = 0;
  at_ = 2;
  scenario_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete site_;
    delete app_;
    delete user_;
    delete device_;
    delete scenario_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(test_, tmax_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_site()) {
      if (site_ != NULL) site_->::Site::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::App::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::User::Clear();
    }
    if (has_device()) {
      if (device_ != NULL) device_->::Device::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1280) {
    at_ = 2;
    if (has_scenario()) {
      if (scenario_ != NULL) scenario_->::Scenario::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  imp_.Clear();
  wseat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imp;
        break;
      }

      // repeated .Imp imp = 2;
      case 2: {
        if (tag == 18) {
         parse_imp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imp;
        if (input->ExpectTag(26)) goto parse_site;
        break;
      }

      // optional .Site site = 3;
      case 3: {
        if (tag == 26) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_app;
        break;
      }

      // optional .App app = 4;
      case 4: {
        if (tag == 34) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional .User user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // optional .Device device = 6;
      case 6: {
        if (tag == 50) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_test;
        break;
      }

      // required int32 test = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tmax;
        break;
      }

      // required int32 tmax = 8;
      case 8: {
        if (tag == 64) {
         parse_tmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmax_)));
          set_has_tmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_at;
        break;
      }

      // required int32 at = 9 [default = 2];
      case 9: {
        if (tag == 72) {
         parse_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &at_)));
          set_has_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_wseat;
        break;
      }

      // repeated string wseat = 10;
      case 10: {
        if (tag == 82) {
         parse_wseat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wseat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wseat(this->wseat_size() - 1).data(),
            this->wseat(this->wseat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wseat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_wseat;
        if (input->ExpectTag(90)) goto parse_scenario;
        break;
      }

      // required .Scenario scenario = 11;
      case 11: {
        if (tag == 90) {
         parse_scenario:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenario()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .Imp imp = 2;
  for (int i = 0; i < this->imp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->imp(i), output);
  }

  // optional .Site site = 3;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->site(), output);
  }

  // optional .App app = 4;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->app(), output);
  }

  // optional .User user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user(), output);
  }

  // optional .Device device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->device(), output);
  }

  // required int32 test = 7 [default = 0];
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->test(), output);
  }

  // required int32 tmax = 8;
  if (has_tmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tmax(), output);
  }

  // required int32 at = 9 [default = 2];
  if (has_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->at(), output);
  }

  // repeated string wseat = 10;
  for (int i = 0; i < this->wseat_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->wseat(i).data(), this->wseat(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "wseat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->wseat(i), output);
  }

  // required .Scenario scenario = 11;
  if (has_scenario()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->scenario(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest)
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .Imp imp = 2;
  for (int i = 0; i < this->imp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->imp(i), target);
  }

  // optional .Site site = 3;
  if (has_site()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->site(), target);
  }

  // optional .App app = 4;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->app(), target);
  }

  // optional .User user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user(), target);
  }

  // optional .Device device = 6;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->device(), target);
  }

  // required int32 test = 7 [default = 0];
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->test(), target);
  }

  // required int32 tmax = 8;
  if (has_tmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tmax(), target);
  }

  // required int32 at = 9 [default = 2];
  if (has_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->at(), target);
  }

  // repeated string wseat = 10;
  for (int i = 0; i < this->wseat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wseat(i).data(), this->wseat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wseat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->wseat(i), target);
  }

  // required .Scenario scenario = 11;
  if (has_scenario()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->scenario(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .Site site = 3;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site());
    }

    // optional .App app = 4;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

    // optional .User user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .Device device = 6;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // required int32 test = 7 [default = 0];
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test());
    }

    // required int32 tmax = 8;
    if (has_tmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmax());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 at = 9 [default = 2];
    if (has_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->at());
    }

    // required .Scenario scenario = 11;
    if (has_scenario()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenario());
    }

  }
  // repeated .Imp imp = 2;
  total_size += 1 * this->imp_size();
  for (int i = 0; i < this->imp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imp(i));
  }

  // repeated string wseat = 10;
  total_size += 1 * this->wseat_size();
  for (int i = 0; i < this->wseat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wseat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  imp_.MergeFrom(from.imp_);
  wseat_.MergeFrom(from.wseat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_site()) {
      mutable_site()->::Site::MergeFrom(from.site());
    }
    if (from.has_app()) {
      mutable_app()->::App::MergeFrom(from.app());
    }
    if (from.has_user()) {
      mutable_user()->::User::MergeFrom(from.user());
    }
    if (from.has_device()) {
      mutable_device()->::Device::MergeFrom(from.device());
    }
    if (from.has_test()) {
      set_test(from.test());
    }
    if (from.has_tmax()) {
      set_tmax(from.tmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_at()) {
      set_at(from.at());
    }
    if (from.has_scenario()) {
      mutable_scenario()->::Scenario::MergeFrom(from.scenario());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000005c1) != 0x000005c1) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->imp())) return false;
  if (has_site()) {
    if (!this->site().IsInitialized()) return false;
  }
  if (has_app()) {
    if (!this->app().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_device()) {
    if (!this->device().IsInitialized()) return false;
  }
  if (has_scenario()) {
    if (!this->scenario().IsInitialized()) return false;
  }
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    imp_.Swap(&other->imp_);
    std::swap(site_, other->site_);
    std::swap(app_, other->app_);
    std::swap(user_, other->user_);
    std::swap(device_, other->device_);
    std::swap(test_, other->test_);
    std::swap(tmax_, other->tmax_);
    std::swap(at_, other->at_);
    wseat_.Swap(&other->wseat_);
    std::swap(scenario_, other->scenario_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scenario::kTypeFieldNumber;
const int Scenario::kInfoFieldNumber;
#endif  // !_MSC_VER

Scenario::Scenario()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Scenario)
}

void Scenario::InitAsDefaultInstance() {
}

Scenario::Scenario(const Scenario& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Scenario)
}

void Scenario::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scenario::~Scenario() {
  // @@protoc_insertion_point(destructor:Scenario)
  SharedDtor();
}

void Scenario::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void Scenario::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scenario::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scenario_descriptor_;
}

const Scenario& Scenario::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

Scenario* Scenario::default_instance_ = NULL;

Scenario* Scenario::New() const {
  return new Scenario;
}

void Scenario::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scenario::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Scenario)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ScenarioType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScenarioType_IsValid(value)) {
            set_type(static_cast< ::ScenarioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional string info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Scenario)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Scenario)
  return false;
#undef DO_
}

void Scenario::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Scenario)
  // required .ScenarioType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Scenario)
}

::google::protobuf::uint8* Scenario::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Scenario)
  // required .ScenarioType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Scenario)
  return target;
}

int Scenario::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ScenarioType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scenario::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scenario* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scenario*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scenario::MergeFrom(const Scenario& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scenario::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario::CopyFrom(const Scenario& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Scenario::Swap(Scenario* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scenario::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scenario_descriptor_;
  metadata.reflection = Scenario_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Imp::kIdFieldNumber;
const int Imp::kBannerFieldNumber;
const int Imp::kBidfloorFieldNumber;
#endif  // !_MSC_VER

Imp::Imp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Imp)
}

void Imp::InitAsDefaultInstance() {
  banner_ = const_cast< ::Banner*>(&::Banner::default_instance());
}

Imp::Imp(const Imp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Imp)
}

void Imp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banner_ = NULL;
  bidfloor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Imp::~Imp() {
  // @@protoc_insertion_point(destructor:Imp)
  SharedDtor();
}

void Imp::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete banner_;
  }
}

void Imp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Imp_descriptor_;
}

const Imp& Imp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

Imp* Imp::default_instance_ = NULL;

Imp* Imp::New() const {
  return new Imp;
}

void Imp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::Banner::Clear();
    }
    bidfloor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Imp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Imp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banner;
        break;
      }

      // required .Banner banner = 2;
      case 2: {
        if (tag == 18) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_bidfloor;
        break;
      }

      // required float bidfloor = 3;
      case 3: {
        if (tag == 29) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Imp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Imp)
  return false;
#undef DO_
}

void Imp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .Banner banner = 2;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->banner(), output);
  }

  // required float bidfloor = 3;
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bidfloor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Imp)
}

::google::protobuf::uint8* Imp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Banner banner = 2;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->banner(), target);
  }

  // required float bidfloor = 3;
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bidfloor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Imp)
  return target;
}

int Imp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Banner banner = 2;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }

    // required float bidfloor = 3;
    if (has_bidfloor()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Imp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Imp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Imp::MergeFrom(const Imp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_banner()) {
      mutable_banner()->::Banner::MergeFrom(from.banner());
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Imp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imp::CopyFrom(const Imp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_banner()) {
    if (!this->banner().IsInitialized()) return false;
  }
  return true;
}

void Imp::Swap(Imp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(banner_, other->banner_);
    std::swap(bidfloor_, other->bidfloor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Imp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Imp_descriptor_;
  metadata.reflection = Imp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Banner::kIdFieldNumber;
const int Banner::kWFieldNumber;
const int Banner::kHFieldNumber;
const int Banner::kWmaxFieldNumber;
const int Banner::kHmaxFieldNumber;
const int Banner::kWminFieldNumber;
const int Banner::kHminFieldNumber;
const int Banner::kBtypeFieldNumber;
const int Banner::kWtypeFieldNumber;
const int Banner::kBattrFieldNumber;
const int Banner::kPosFieldNumber;
const int Banner::kMimesFieldNumber;
const int Banner::kKeywordsFieldNumber;
const int Banner::kBwordsFieldNumber;
#endif  // !_MSC_VER

Banner::Banner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Banner)
}

void Banner::InitAsDefaultInstance() {
}

Banner::Banner(const Banner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Banner)
}

void Banner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  wmax_ = 0;
  hmax_ = 0;
  wmin_ = 0;
  hmin_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Banner::~Banner() {
  // @@protoc_insertion_point(destructor:Banner)
  SharedDtor();
}

void Banner::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Banner_descriptor_;
}

const Banner& Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

Banner* Banner::default_instance_ = NULL;

Banner* Banner::New() const {
  return new Banner;
}

void Banner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Banner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(w_, hmin_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  pos_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  btype_.Clear();
  wtype_.Clear();
  battr_.Clear();
  mimes_.Clear();
  keywords_.Clear();
  bwords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_w;
        break;
      }

      // optional int32 w = 2;
      case 2: {
        if (tag == 16) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_h;
        break;
      }

      // optional int32 h = 3;
      case 3: {
        if (tag == 24) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wmax;
        break;
      }

      // optional int32 wmax = 4;
      case 4: {
        if (tag == 32) {
         parse_wmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmax_)));
          set_has_wmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hmax;
        break;
      }

      // optional int32 hmax = 5;
      case 5: {
        if (tag == 40) {
         parse_hmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmax_)));
          set_has_hmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wmin;
        break;
      }

      // optional int32 wmin = 6;
      case 6: {
        if (tag == 48) {
         parse_wmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmin_)));
          set_has_wmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hmin;
        break;
      }

      // optional int32 hmin = 7;
      case 7: {
        if (tag == 56) {
         parse_hmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmin_)));
          set_has_hmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_btype;
        break;
      }

      // repeated .AdType btype = 8;
      case 8: {
        if (tag == 64) {
         parse_btype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdType_IsValid(value)) {
            add_btype(static_cast< ::AdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::AdType_IsValid,
                 this->mutable_btype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_btype;
        if (input->ExpectTag(72)) goto parse_wtype;
        break;
      }

      // repeated .AdType wtype = 9;
      case 9: {
        if (tag == 72) {
         parse_wtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdType_IsValid(value)) {
            add_wtype(static_cast< ::AdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::AdType_IsValid,
                 this->mutable_wtype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_wtype;
        if (input->ExpectTag(80)) goto parse_battr;
        break;
      }

      // repeated .CreativeAttribute battr = 10;
      case 10: {
        if (tag == 80) {
         parse_battr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CreativeAttribute_IsValid(value)) {
            add_battr(static_cast< ::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::CreativeAttribute_IsValid,
                 this->mutable_battr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_battr;
        if (input->ExpectTag(88)) goto parse_pos;
        break;
      }

      // optional .AdPosition pos = 11;
      case 11: {
        if (tag == 88) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdPosition_IsValid(value)) {
            set_pos(static_cast< ::AdPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_mimes;
        break;
      }

      // repeated string mimes = 12;
      case 12: {
        if (tag == 98) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_mimes;
        if (input->ExpectTag(106)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 13;
      case 13: {
        if (tag == 106) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_keywords;
        if (input->ExpectTag(114)) goto parse_bwords;
        break;
      }

      // repeated string bwords = 14;
      case 14: {
        if (tag == 114) {
         parse_bwords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bwords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bwords(this->bwords_size() - 1).data(),
            this->bwords(this->bwords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bwords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bwords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Banner)
  return false;
#undef DO_
}

void Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Banner)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 w = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->w(), output);
  }

  // optional int32 h = 3;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h(), output);
  }

  // optional int32 wmax = 4;
  if (has_wmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wmax(), output);
  }

  // optional int32 hmax = 5;
  if (has_hmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hmax(), output);
  }

  // optional int32 wmin = 6;
  if (has_wmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wmin(), output);
  }

  // optional int32 hmin = 7;
  if (has_hmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hmin(), output);
  }

  // repeated .AdType btype = 8;
  for (int i = 0; i < this->btype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->btype(i), output);
  }

  // repeated .AdType wtype = 9;
  for (int i = 0; i < this->wtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->wtype(i), output);
  }

  // repeated .CreativeAttribute battr = 10;
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->battr(i), output);
  }

  // optional .AdPosition pos = 11;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pos(), output);
  }

  // repeated string mimes = 12;
  for (int i = 0; i < this->mimes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->mimes(i).data(), this->mimes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->mimes(i), output);
  }

  // repeated string keywords = 13;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->keywords(i), output);
  }

  // repeated string bwords = 14;
  for (int i = 0; i < this->bwords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->bwords(i).data(), this->bwords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "bwords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->bwords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Banner)
}

::google::protobuf::uint8* Banner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Banner)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 w = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->w(), target);
  }

  // optional int32 h = 3;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h(), target);
  }

  // optional int32 wmax = 4;
  if (has_wmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wmax(), target);
  }

  // optional int32 hmax = 5;
  if (has_hmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hmax(), target);
  }

  // optional int32 wmin = 6;
  if (has_wmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wmin(), target);
  }

  // optional int32 hmin = 7;
  if (has_hmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hmin(), target);
  }

  // repeated .AdType btype = 8;
  for (int i = 0; i < this->btype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->btype(i), target);
  }

  // repeated .AdType wtype = 9;
  for (int i = 0; i < this->wtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->wtype(i), target);
  }

  // repeated .CreativeAttribute battr = 10;
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->battr(i), target);
  }

  // optional .AdPosition pos = 11;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pos(), target);
  }

  // repeated string mimes = 12;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->mimes(i), target);
  }

  // repeated string keywords = 13;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->keywords(i), target);
  }

  // repeated string bwords = 14;
  for (int i = 0; i < this->bwords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bwords(i).data(), this->bwords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bwords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->bwords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Banner)
  return target;
}

int Banner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 w = 2;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 3;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 wmax = 4;
    if (has_wmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmax());
    }

    // optional int32 hmax = 5;
    if (has_hmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmax());
    }

    // optional int32 wmin = 6;
    if (has_wmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmin());
    }

    // optional int32 hmin = 7;
    if (has_hmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmin());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .AdPosition pos = 11;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

  }
  // repeated .AdType btype = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->btype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->btype(i));
    }
    total_size += 1 * this->btype_size() + data_size;
  }

  // repeated .AdType wtype = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->wtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->wtype(i));
    }
    total_size += 1 * this->wtype_size() + data_size;
  }

  // repeated .CreativeAttribute battr = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->battr(i));
    }
    total_size += 1 * this->battr_size() + data_size;
  }

  // repeated string mimes = 12;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  // repeated string keywords = 13;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  // repeated string bwords = 14;
  total_size += 1 * this->bwords_size();
  for (int i = 0; i < this->bwords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bwords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Banner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Banner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Banner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Banner::MergeFrom(const Banner& from) {
  GOOGLE_CHECK_NE(&from, this);
  btype_.MergeFrom(from.btype_);
  wtype_.MergeFrom(from.wtype_);
  battr_.MergeFrom(from.battr_);
  mimes_.MergeFrom(from.mimes_);
  keywords_.MergeFrom(from.keywords_);
  bwords_.MergeFrom(from.bwords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_wmax()) {
      set_wmax(from.wmax());
    }
    if (from.has_hmax()) {
      set_hmax(from.hmax());
    }
    if (from.has_wmin()) {
      set_wmin(from.wmin());
    }
    if (from.has_hmin()) {
      set_hmin(from.hmin());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Banner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Banner::CopyFrom(const Banner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Banner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Banner::Swap(Banner* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(wmax_, other->wmax_);
    std::swap(hmax_, other->hmax_);
    std::swap(wmin_, other->wmin_);
    std::swap(hmin_, other->hmin_);
    btype_.Swap(&other->btype_);
    wtype_.Swap(&other->wtype_);
    battr_.Swap(&other->battr_);
    std::swap(pos_, other->pos_);
    mimes_.Swap(&other->mimes_);
    keywords_.Swap(&other->keywords_);
    bwords_.Swap(&other->bwords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Banner_descriptor_;
  metadata.reflection = Banner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Site::kIdFieldNumber;
const int Site::kNameFieldNumber;
const int Site::kDomainFieldNumber;
const int Site::kCatFieldNumber;
const int Site::kSectioncatFieldNumber;
const int Site::kPagecatFieldNumber;
const int Site::kPageFieldNumber;
const int Site::kRefFieldNumber;
const int Site::kSearchFieldNumber;
const int Site::kMobileFieldNumber;
const int Site::kPublisherFieldNumber;
const int Site::kKeywordsFieldNumber;
#endif  // !_MSC_VER

Site::Site()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Site)
}

void Site::InitAsDefaultInstance() {
  publisher_ = const_cast< ::Publisher*>(&::Publisher::default_instance());
}

Site::Site(const Site& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Site)
}

void Site::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sectioncat_ = 801;
  pagecat_ = 801;
  page_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_ = 0;
  publisher_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Site::~Site() {
  // @@protoc_insertion_point(destructor:Site)
  SharedDtor();
}

void Site::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_;
  }
  if (ref_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ref_;
  }
  if (this != default_instance_) {
    delete publisher_;
  }
}

void Site::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Site::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Site_descriptor_;
}

const Site& Site::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

Site* Site::default_instance_ = NULL;

Site* Site::New() const {
  return new Site;
}

void Site::Clear() {
  if (_has_bits_[0 / 32] & 247) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    sectioncat_ = 801;
    pagecat_ = 801;
    if (has_page()) {
      if (page_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_->clear();
      }
    }
    if (has_ref()) {
      if (ref_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ref_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1536) {
    mobile_ = 0;
    if (has_publisher()) {
      if (publisher_ != NULL) publisher_->::Publisher::Clear();
    }
  }
  cat_.Clear();
  search_.Clear();
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Site::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Site)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (tag == 26) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cat;
        break;
      }

      // repeated .ContentCategory cat = 4;
      case 4: {
        if (tag == 32) {
         parse_cat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            add_cat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::ContentCategory_IsValid,
                 this->mutable_cat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cat;
        if (input->ExpectTag(40)) goto parse_sectioncat;
        break;
      }

      // optional .ContentCategory sectioncat = 5;
      case 5: {
        if (tag == 40) {
         parse_sectioncat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_sectioncat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pagecat;
        break;
      }

      // optional .ContentCategory pagecat = 6;
      case 6: {
        if (tag == 48) {
         parse_pagecat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_pagecat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_page;
        break;
      }

      // required string page = 7;
      case 7: {
        if (tag == 58) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page().data(), this->page().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "page");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ref;
        break;
      }

      // optional string ref = 8;
      case 8: {
        if (tag == 66) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ref");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_search;
        break;
      }

      // repeated string search = 9;
      case 9: {
        if (tag == 74) {
         parse_search:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search(this->search_size() - 1).data(),
            this->search(this->search_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_search;
        if (input->ExpectTag(80)) goto parse_mobile;
        break;
      }

      // required int32 mobile = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_mobile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobile_)));
          set_has_mobile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher;
        break;
      }

      // required .Publisher publisher = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 12;
      case 12: {
        if (tag == 98) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_keywords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Site)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Site)
  return false;
#undef DO_
}

void Site::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Site)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // repeated .ContentCategory cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cat(i), output);
  }

  // optional .ContentCategory sectioncat = 5;
  if (has_sectioncat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sectioncat(), output);
  }

  // optional .ContentCategory pagecat = 6;
  if (has_pagecat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->pagecat(), output);
  }

  // required string page = 7;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->page(), output);
  }

  // optional string ref = 8;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ref(), output);
  }

  // repeated string search = 9;
  for (int i = 0; i < this->search_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->search(i).data(), this->search(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "search");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->search(i), output);
  }

  // required int32 mobile = 10 [default = 0];
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mobile(), output);
  }

  // required .Publisher publisher = 11;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->publisher(), output);
  }

  // repeated string keywords = 12;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->keywords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Site)
}

::google::protobuf::uint8* Site::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Site)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // repeated .ContentCategory cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cat(i), target);
  }

  // optional .ContentCategory sectioncat = 5;
  if (has_sectioncat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sectioncat(), target);
  }

  // optional .ContentCategory pagecat = 6;
  if (has_pagecat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->pagecat(), target);
  }

  // required string page = 7;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->page(), target);
  }

  // optional string ref = 8;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ref(), target);
  }

  // repeated string search = 9;
  for (int i = 0; i < this->search_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search(i).data(), this->search(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->search(i), target);
  }

  // required int32 mobile = 10 [default = 0];
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mobile(), target);
  }

  // required .Publisher publisher = 11;
  if (has_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->publisher(), target);
  }

  // repeated string keywords = 12;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->keywords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Site)
  return target;
}

int Site::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional .ContentCategory sectioncat = 5;
    if (has_sectioncat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sectioncat());
    }

    // optional .ContentCategory pagecat = 6;
    if (has_pagecat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pagecat());
    }

    // required string page = 7;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page());
    }

    // optional string ref = 8;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 mobile = 10 [default = 0];
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobile());
    }

    // required .Publisher publisher = 11;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publisher());
    }

  }
  // repeated .ContentCategory cat = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cat(i));
    }
    total_size += 1 * this->cat_size() + data_size;
  }

  // repeated string search = 9;
  total_size += 1 * this->search_size();
  for (int i = 0; i < this->search_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->search(i));
  }

  // repeated string keywords = 12;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Site::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Site* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Site*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Site::MergeFrom(const Site& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  search_.MergeFrom(from.search_);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_sectioncat()) {
      set_sectioncat(from.sectioncat());
    }
    if (from.has_pagecat()) {
      set_pagecat(from.pagecat());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_publisher()) {
      mutable_publisher()->::Publisher::MergeFrom(from.publisher());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Site::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Site::CopyFrom(const Site& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Site::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000641) != 0x00000641) return false;

  if (has_publisher()) {
    if (!this->publisher().IsInitialized()) return false;
  }
  return true;
}

void Site::Swap(Site* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(domain_, other->domain_);
    cat_.Swap(&other->cat_);
    std::swap(sectioncat_, other->sectioncat_);
    std::swap(pagecat_, other->pagecat_);
    std::swap(page_, other->page_);
    std::swap(ref_, other->ref_);
    search_.Swap(&other->search_);
    std::swap(mobile_, other->mobile_);
    std::swap(publisher_, other->publisher_);
    keywords_.Swap(&other->keywords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Site::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Site_descriptor_;
  metadata.reflection = Site_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int App::kIdFieldNumber;
const int App::kNameFieldNumber;
const int App::kBundleFieldNumber;
const int App::kDomainFieldNumber;
const int App::kStoreurlFieldNumber;
const int App::kCatFieldNumber;
const int App::kSectioncatFieldNumber;
const int App::kPagecatFieldNumber;
const int App::kVerFieldNumber;
const int App::kPaidFieldNumber;
const int App::kPublisherFieldNumber;
const int App::kKeywordsFieldNumber;
#endif  // !_MSC_VER

App::App()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:App)
}

void App::InitAsDefaultInstance() {
  publisher_ = const_cast< ::Publisher*>(&::Publisher::default_instance());
}

App::App(const App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:App)
}

void App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cat_ = 801;
  sectioncat_ = 801;
  pagecat_ = 801;
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paid_ = 0;
  publisher_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

App::~App() {
  // @@protoc_insertion_point(destructor:App)
  SharedDtor();
}

void App::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storeurl_;
  }
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (this != default_instance_) {
    delete publisher_;
  }
}

void App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return App_descriptor_;
}

const App& App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

App* App::default_instance_ = NULL;

App* App::New() const {
  return new App;
}

void App::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_bundle()) {
      if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bundle_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_storeurl()) {
      if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        storeurl_->clear();
      }
    }
    cat_ = 801;
    sectioncat_ = 801;
    pagecat_ = 801;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ver_->clear();
      }
    }
    paid_ = 0;
    if (has_publisher()) {
      if (publisher_ != NULL) publisher_->::Publisher::Clear();
    }
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bundle;
        break;
      }

      // required string bundle = 3;
      case 3: {
        if (tag == 26) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_storeurl;
        break;
      }

      // optional string storeurl = 5;
      case 5: {
        if (tag == 42) {
         parse_storeurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storeurl().data(), this->storeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storeurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cat;
        break;
      }

      // optional .ContentCategory cat = 6;
      case 6: {
        if (tag == 48) {
         parse_cat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_cat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sectioncat;
        break;
      }

      // optional .ContentCategory sectioncat = 7;
      case 7: {
        if (tag == 56) {
         parse_sectioncat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_sectioncat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pagecat;
        break;
      }

      // optional .ContentCategory pagecat = 8;
      case 8: {
        if (tag == 64) {
         parse_pagecat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_pagecat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ver;
        break;
      }

      // optional string ver = 9;
      case 9: {
        if (tag == 74) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_paid;
        break;
      }

      // required int32 paid = 10;
      case 10: {
        if (tag == 80) {
         parse_paid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paid_)));
          set_has_paid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher;
        break;
      }

      // required .Publisher publisher = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 12;
      case 12: {
        if (tag == 98) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_keywords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:App)
  return false;
#undef DO_
}

void App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:App)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string bundle = 3;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bundle(), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // optional string storeurl = 5;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storeurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->storeurl(), output);
  }

  // optional .ContentCategory cat = 6;
  if (has_cat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cat(), output);
  }

  // optional .ContentCategory sectioncat = 7;
  if (has_sectioncat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sectioncat(), output);
  }

  // optional .ContentCategory pagecat = 8;
  if (has_pagecat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pagecat(), output);
  }

  // optional string ver = 9;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ver(), output);
  }

  // required int32 paid = 10;
  if (has_paid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->paid(), output);
  }

  // required .Publisher publisher = 11;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->publisher(), output);
  }

  // repeated string keywords = 12;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->keywords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:App)
}

::google::protobuf::uint8* App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:App)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string bundle = 3;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bundle(), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // optional string storeurl = 5;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storeurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->storeurl(), target);
  }

  // optional .ContentCategory cat = 6;
  if (has_cat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cat(), target);
  }

  // optional .ContentCategory sectioncat = 7;
  if (has_sectioncat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->sectioncat(), target);
  }

  // optional .ContentCategory pagecat = 8;
  if (has_pagecat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pagecat(), target);
  }

  // optional string ver = 9;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ver(), target);
  }

  // required int32 paid = 10;
  if (has_paid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->paid(), target);
  }

  // required .Publisher publisher = 11;
  if (has_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->publisher(), target);
  }

  // repeated string keywords = 12;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->keywords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:App)
  return target;
}

int App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string bundle = 3;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string storeurl = 5;
    if (has_storeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storeurl());
    }

    // optional .ContentCategory cat = 6;
    if (has_cat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cat());
    }

    // optional .ContentCategory sectioncat = 7;
    if (has_sectioncat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sectioncat());
    }

    // optional .ContentCategory pagecat = 8;
    if (has_pagecat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pagecat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ver = 9;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // required int32 paid = 10;
    if (has_paid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paid());
    }

    // required .Publisher publisher = 11;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publisher());
    }

  }
  // repeated string keywords = 12;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void App::MergeFrom(const App& from) {
  GOOGLE_CHECK_NE(&from, this);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bundle()) {
      set_bundle(from.bundle());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_storeurl()) {
      set_storeurl(from.storeurl());
    }
    if (from.has_cat()) {
      set_cat(from.cat());
    }
    if (from.has_sectioncat()) {
      set_sectioncat(from.sectioncat());
    }
    if (from.has_pagecat()) {
      set_pagecat(from.pagecat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_paid()) {
      set_paid(from.paid());
    }
    if (from.has_publisher()) {
      mutable_publisher()->::Publisher::MergeFrom(from.publisher());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App::CopyFrom(const App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000605) != 0x00000605) return false;

  if (has_publisher()) {
    if (!this->publisher().IsInitialized()) return false;
  }
  return true;
}

void App::Swap(App* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(bundle_, other->bundle_);
    std::swap(domain_, other->domain_);
    std::swap(storeurl_, other->storeurl_);
    std::swap(cat_, other->cat_);
    std::swap(sectioncat_, other->sectioncat_);
    std::swap(pagecat_, other->pagecat_);
    std::swap(ver_, other->ver_);
    std::swap(paid_, other->paid_);
    std::swap(publisher_, other->publisher_);
    keywords_.Swap(&other->keywords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = App_descriptor_;
  metadata.reflection = App_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Publisher::kIdFieldNumber;
const int Publisher::kNameFieldNumber;
const int Publisher::kCatFieldNumber;
const int Publisher::kDomainFieldNumber;
const int Publisher::kTypeFieldNumber;
const int Publisher::kSlotFieldNumber;
#endif  // !_MSC_VER

Publisher::Publisher()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Publisher)
}

void Publisher::InitAsDefaultInstance() {
}

Publisher::Publisher(const Publisher& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Publisher)
}

void Publisher::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Publisher::~Publisher() {
  // @@protoc_insertion_point(destructor:Publisher)
  SharedDtor();
}

void Publisher::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (slot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slot_;
  }
  if (this != default_instance_) {
  }
}

void Publisher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Publisher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Publisher_descriptor_;
}

const Publisher& Publisher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

Publisher* Publisher::default_instance_ = NULL;

Publisher* Publisher::New() const {
  return new Publisher;
}

void Publisher::Clear() {
  if (_has_bits_[0 / 32] & 59) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_slot()) {
      if (slot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slot_->clear();
      }
    }
  }
  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Publisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Publisher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cat;
        break;
      }

      // repeated .ContentCategory cat = 3;
      case 3: {
        if (tag == 24) {
         parse_cat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            add_cat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::ContentCategory_IsValid,
                 this->mutable_cat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cat;
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // required string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // optional string type = 5;
      case 5: {
        if (tag == 42) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_slot;
        break;
      }

      // optional string slot = 6;
      case 6: {
        if (tag == 50) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slot().data(), this->slot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Publisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Publisher)
  return false;
#undef DO_
}

void Publisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Publisher)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .ContentCategory cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cat(i), output);
  }

  // required string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // optional string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // optional string slot = 6;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slot().data(), this->slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Publisher)
}

::google::protobuf::uint8* Publisher::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Publisher)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .ContentCategory cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cat(i), target);
  }

  // required string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // optional string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // optional string slot = 6;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slot().data(), this->slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Publisher)
  return target;
}

int Publisher::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string slot = 6;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slot());
    }

  }
  // repeated .ContentCategory cat = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cat(i));
    }
    total_size += 1 * this->cat_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Publisher::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Publisher* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Publisher*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Publisher::MergeFrom(const Publisher& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Publisher::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Publisher::CopyFrom(const Publisher& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publisher::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void Publisher::Swap(Publisher* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    cat_.Swap(&other->cat_);
    std::swap(domain_, other->domain_);
    std::swap(type_, other->type_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Publisher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Publisher_descriptor_;
  metadata.reflection = Publisher_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Device::kUaFieldNumber;
const int Device::kGeoFieldNumber;
const int Device::kIpFieldNumber;
const int Device::kDevicetypeFieldNumber;
const int Device::kMakeFieldNumber;
const int Device::kModelFieldNumber;
const int Device::kHwvFieldNumber;
const int Device::kOsFieldNumber;
const int Device::kOsvFieldNumber;
const int Device::kWFieldNumber;
const int Device::kHFieldNumber;
const int Device::kJsFieldNumber;
const int Device::kLanguageFieldNumber;
const int Device::kConnectiontypeFieldNumber;
const int Device::kImeiFieldNumber;
const int Device::kMacFieldNumber;
const int Device::kIdfaFieldNumber;
const int Device::kCarrierFieldNumber;
const int Device::kAndroididFieldNumber;
#endif  // !_MSC_VER

Device::Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Device)
}

void Device::InitAsDefaultInstance() {
  geo_ = const_cast< ::Geo*>(&::Geo::default_instance());
}

Device::Device(const Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Device)
}

void Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_ = 1;
  make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hwv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  js_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connectiontype_ = 1;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:Device)
  SharedDtor();
}

void Device::SharedDtor() {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete make_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (hwv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hwv_;
  }
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idfa_;
  }
  if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carrier_;
  }
  if (androidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete androidid_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New() const {
  return new Device;
}

void Device::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_ua()) {
      if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ua_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Geo::Clear();
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    devicetype_ = 1;
    if (has_make()) {
      if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        make_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_hwv()) {
      if (hwv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hwv_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(h_, js_);
    if (has_osv()) {
      if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        osv_->clear();
      }
    }
    w_ = 0;
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
    connectiontype_ = 1;
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imei_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idfa_->clear();
      }
    }
    if (has_carrier()) {
      if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        carrier_->clear();
      }
    }
    if (has_androidid()) {
      if (androidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        androidid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ua = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_geo;
        break;
      }

      // optional .Geo geo = 2;
      case 2: {
        if (tag == 18) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_devicetype;
        break;
      }

      // required .DeviceType devicetype = 4;
      case 4: {
        if (tag == 32) {
         parse_devicetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceType_IsValid(value)) {
            set_devicetype(static_cast< ::DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_make;
        break;
      }

      // optional string make = 5;
      case 5: {
        if (tag == 42) {
         parse_make:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_make()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->make().data(), this->make().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "make");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_model;
        break;
      }

      // optional string model = 6;
      case 6: {
        if (tag == 50) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hwv;
        break;
      }

      // optional string hwv = 7;
      case 7: {
        if (tag == 58) {
         parse_hwv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hwv().data(), this->hwv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hwv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_os;
        break;
      }

      // optional string os = 8;
      case 8: {
        if (tag == 66) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_osv;
        break;
      }

      // optional string osv = 9;
      case 9: {
        if (tag == 74) {
         parse_osv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->osv().data(), this->osv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "osv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_w;
        break;
      }

      // required int32 w = 10;
      case 10: {
        if (tag == 80) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_h;
        break;
      }

      // required int32 h = 11;
      case 11: {
        if (tag == 88) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_js;
        break;
      }

      // optional int32 js = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_js:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &js_)));
          set_has_js();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_language;
        break;
      }

      // optional string language = 13;
      case 13: {
        if (tag == 106) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_connectiontype;
        break;
      }

      // optional .ConnectionType connectiontype = 14 [default = ETHERNET];
      case 14: {
        if (tag == 112) {
         parse_connectiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::ConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_imei;
        break;
      }

      // optional string imei = 15;
      case 15: {
        if (tag == 122) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_mac;
        break;
      }

      // optional string mac = 16;
      case 16: {
        if (tag == 130) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_idfa;
        break;
      }

      // optional string idfa = 17;
      case 17: {
        if (tag == 138) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "idfa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_carrier;
        break;
      }

      // optional string carrier = 18;
      case 18: {
        if (tag == 146) {
         parse_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->carrier().data(), this->carrier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "carrier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_androidid;
        break;
      }

      // optional string androidid = 19;
      case 19: {
        if (tag == 154) {
         parse_androidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_androidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->androidid().data(), this->androidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "androidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Device)
  // required string ua = 1;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ua(), output);
  }

  // optional .Geo geo = 2;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geo(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // required .DeviceType devicetype = 4;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->devicetype(), output);
  }

  // optional string make = 5;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "make");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->make(), output);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->model(), output);
  }

  // optional string hwv = 7;
  if (has_hwv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwv().data(), this->hwv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hwv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->hwv(), output);
  }

  // optional string os = 8;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->os(), output);
  }

  // optional string osv = 9;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->osv(), output);
  }

  // required int32 w = 10;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->w(), output);
  }

  // required int32 h = 11;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->h(), output);
  }

  // optional int32 js = 12 [default = 0];
  if (has_js()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->js(), output);
  }

  // optional string language = 13;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->language(), output);
  }

  // optional .ConnectionType connectiontype = 14 [default = ETHERNET];
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->connectiontype(), output);
  }

  // optional string imei = 15;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->imei(), output);
  }

  // optional string mac = 16;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->mac(), output);
  }

  // optional string idfa = 17;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->idfa(), output);
  }

  // optional string carrier = 18;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "carrier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->carrier(), output);
  }

  // optional string androidid = 19;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "androidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->androidid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Device)
}

::google::protobuf::uint8* Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Device)
  // required string ua = 1;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ua(), target);
  }

  // optional .Geo geo = 2;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->geo(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required .DeviceType devicetype = 4;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->devicetype(), target);
  }

  // optional string make = 5;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "make");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->make(), target);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->model(), target);
  }

  // optional string hwv = 7;
  if (has_hwv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwv().data(), this->hwv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hwv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->hwv(), target);
  }

  // optional string os = 8;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->os(), target);
  }

  // optional string osv = 9;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->osv(), target);
  }

  // required int32 w = 10;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->w(), target);
  }

  // required int32 h = 11;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->h(), target);
  }

  // optional int32 js = 12 [default = 0];
  if (has_js()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->js(), target);
  }

  // optional string language = 13;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->language(), target);
  }

  // optional .ConnectionType connectiontype = 14 [default = ETHERNET];
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->connectiontype(), target);
  }

  // optional string imei = 15;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->imei(), target);
  }

  // optional string mac = 16;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->mac(), target);
  }

  // optional string idfa = 17;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->idfa(), target);
  }

  // optional string carrier = 18;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "carrier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->carrier(), target);
  }

  // optional string androidid = 19;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "androidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->androidid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Device)
  return target;
}

int Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ua = 1;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

    // optional .Geo geo = 2;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required .DeviceType devicetype = 4;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->devicetype());
    }

    // optional string make = 5;
    if (has_make()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->make());
    }

    // optional string model = 6;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string hwv = 7;
    if (has_hwv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwv());
    }

    // optional string os = 8;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string osv = 9;
    if (has_osv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osv());
    }

    // required int32 w = 10;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 11;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 js = 12 [default = 0];
    if (has_js()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->js());
    }

    // optional string language = 13;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional .ConnectionType connectiontype = 14 [default = ETHERNET];
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

    // optional string imei = 15;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string mac = 16;
    if (has_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string idfa = 17;
    if (has_idfa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string carrier = 18;
    if (has_carrier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrier());
    }

    // optional string androidid = 19;
    if (has_androidid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->androidid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ua()) {
      set_ua(from.ua());
    }
    if (from.has_geo()) {
      mutable_geo()->::Geo::MergeFrom(from.geo());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_make()) {
      set_make(from.make());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_hwv()) {
      set_hwv(from.hwv());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_osv()) {
      set_osv(from.osv());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_js()) {
      set_js(from.js());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_carrier()) {
      set_carrier(from.carrier());
    }
    if (from.has_androidid()) {
      set_androidid(from.androidid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000060d) != 0x0000060d) return false;

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  return true;
}

void Device::Swap(Device* other) {
  if (other != this) {
    std::swap(ua_, other->ua_);
    std::swap(geo_, other->geo_);
    std::swap(ip_, other->ip_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(make_, other->make_);
    std::swap(model_, other->model_);
    std::swap(hwv_, other->hwv_);
    std::swap(os_, other->os_);
    std::swap(osv_, other->osv_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(js_, other->js_);
    std::swap(language_, other->language_);
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(imei_, other->imei_);
    std::swap(mac_, other->mac_);
    std::swap(idfa_, other->idfa_);
    std::swap(carrier_, other->carrier_);
    std::swap(androidid_, other->androidid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Geo::kLatFieldNumber;
const int Geo::kLonFieldNumber;
const int Geo::kTypeFieldNumber;
const int Geo::kCountryFieldNumber;
const int Geo::kProvinceFieldNumber;
const int Geo::kCityFieldNumber;
const int Geo::kZipFieldNumber;
const int Geo::kUtcoffsetFieldNumber;
#endif  // !_MSC_VER

Geo::Geo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Geo)
}

void Geo::InitAsDefaultInstance() {
}

Geo::Geo(const Geo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Geo)
}

void Geo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  type_ = 1;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utcoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Geo::~Geo() {
  // @@protoc_insertion_point(destructor:Geo)
  SharedDtor();
}

void Geo::SharedDtor() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (zip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zip_;
  }
  if (this != default_instance_) {
  }
}

void Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Geo_descriptor_;
}

const Geo& Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

Geo* Geo::default_instance_ = NULL;

Geo* Geo::New() const {
  return new Geo;
}

void Geo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Geo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lat_, lon_);
    type_ = 1;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_zip()) {
      if (zip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        zip_->clear();
      }
    }
    utcoffset_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lat = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lon;
        break;
      }

      // optional float lon = 2;
      case 2: {
        if (tag == 21) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .LocationType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LocationType_IsValid(value)) {
            set_type(static_cast< ::LocationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_country;
        break;
      }

      // optional string country = 4;
      case 4: {
        if (tag == 34) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_province;
        break;
      }

      // optional string province = 5;
      case 5: {
        if (tag == 42) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (tag == 50) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_zip;
        break;
      }

      // optional string zip = 7;
      case 7: {
        if (tag == 58) {
         parse_zip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zip().data(), this->zip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_utcoffset;
        break;
      }

      // optional int32 utcoffset = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_utcoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utcoffset_)));
          set_has_utcoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Geo)
  return false;
#undef DO_
}

void Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Geo)
  // optional float lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // optional float lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lon(), output);
  }

  // required .LocationType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->country(), output);
  }

  // optional string province = 5;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->province(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->city(), output);
  }

  // optional string zip = 7;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->zip(), output);
  }

  // optional int32 utcoffset = 8 [default = 0];
  if (has_utcoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->utcoffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Geo)
}

::google::protobuf::uint8* Geo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Geo)
  // optional float lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // optional float lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lon(), target);
  }

  // required .LocationType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->country(), target);
  }

  // optional string province = 5;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->province(), target);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  // optional string zip = 7;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->zip(), target);
  }

  // optional int32 utcoffset = 8 [default = 0];
  if (has_utcoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->utcoffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Geo)
  return target;
}

int Geo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float lat = 1;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 2;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // required .LocationType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string province = 5;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string zip = 7;
    if (has_zip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zip());
    }

    // optional int32 utcoffset = 8 [default = 0];
    if (has_utcoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utcoffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Geo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Geo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Geo::MergeFrom(const Geo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_zip()) {
      set_zip(from.zip());
    }
    if (from.has_utcoffset()) {
      set_utcoffset(from.utcoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Geo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geo::CopyFrom(const Geo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void Geo::Swap(Geo* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(type_, other->type_);
    std::swap(country_, other->country_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(zip_, other->zip_);
    std::swap(utcoffset_, other->utcoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Geo_descriptor_;
  metadata.reflection = Geo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kIdFieldNumber;
const int User::kYobFieldNumber;
const int User::kGenderFieldNumber;
const int User::kKeywordsFieldNumber;
const int User::kGeoFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User)
}

void User::InitAsDefaultInstance() {
  geo_ = const_cast< ::Geo*>(&::Geo::default_instance());
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User)
}

void User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yob_ = 0;
  gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:User)
  SharedDtor();
}

void User::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gender_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    yob_ = 0;
    if (has_gender()) {
      if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gender_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Geo::Clear();
    }
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_yob;
        break;
      }

      // optional int32 yob = 3;
      case 3: {
        if (tag == 24) {
         parse_yob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yob_)));
          set_has_yob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gender;
        break;
      }

      // optional string gender = 4;
      case 4: {
        if (tag == 34) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gender().data(), this->gender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 5;
      case 5: {
        if (tag == 42) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keywords;
        if (input->ExpectTag(50)) goto parse_geo;
        break;
      }

      // optional .Geo geo = 6;
      case 6: {
        if (tag == 50) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yob(), output);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gender(), output);
  }

  // repeated string keywords = 5;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->keywords(i), output);
  }

  // optional .Geo geo = 6;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->geo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yob(), target);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gender(), target);
  }

  // repeated string keywords = 5;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->keywords(i), target);
  }

  // optional .Geo geo = 6;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->geo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 yob = 3;
    if (has_yob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yob());
    }

    // optional string gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }

    // optional .Geo geo = 6;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

  }
  // repeated string keywords = 5;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_yob()) {
      set_yob(from.yob());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_geo()) {
      mutable_geo()->::Geo::MergeFrom(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(yob_, other->yob_);
    std::swap(gender_, other->gender_);
    keywords_.Swap(&other->keywords_);
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse::kIdFieldNumber;
const int BidResponse::kSeatbidFieldNumber;
const int BidResponse::kBididFieldNumber;
const int BidResponse::kNbrFieldNumber;
const int BidResponse::kProcessTimeFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nbr_ = 0;
  process_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidid_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(nbr_, process_time_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_bidid()) {
      if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bidid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        break;
      }

      // repeated .SeatBid seatbid = 2;
      case 2: {
        if (tag == 18) {
         parse_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seatbid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        if (input->ExpectTag(26)) goto parse_bidid;
        break;
      }

      // required string bidid = 3;
      case 3: {
        if (tag == 26) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nbr;
        break;
      }

      // optional .NoBidReasonCodes nbr = 4;
      case 4: {
        if (tag == 32) {
         parse_nbr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NoBidReasonCodes_IsValid(value)) {
            set_nbr(static_cast< ::NoBidReasonCodes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_process_time;
        break;
      }

      // optional int32 process_time = 5;
      case 5: {
        if (tag == 40) {
         parse_process_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_time_)));
          set_has_process_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .SeatBid seatbid = 2;
  for (int i = 0; i < this->seatbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seatbid(i), output);
  }

  // required string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bidid(), output);
  }

  // optional .NoBidReasonCodes nbr = 4;
  if (has_nbr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->nbr(), output);
  }

  // optional int32 process_time = 5;
  if (has_process_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->process_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .SeatBid seatbid = 2;
  for (int i = 0; i < this->seatbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seatbid(i), target);
  }

  // required string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bidid(), target);
  }

  // optional .NoBidReasonCodes nbr = 4;
  if (has_nbr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->nbr(), target);
  }

  // optional int32 process_time = 5;
  if (has_process_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->process_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string bidid = 3;
    if (has_bidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidid());
    }

    // optional .NoBidReasonCodes nbr = 4;
    if (has_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nbr());
    }

    // optional int32 process_time = 5;
    if (has_process_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_time());
    }

  }
  // repeated .SeatBid seatbid = 2;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bidid()) {
      set_bidid(from.bidid());
    }
    if (from.has_nbr()) {
      set_nbr(from.nbr());
    }
    if (from.has_process_time()) {
      set_process_time(from.process_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbid())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    seatbid_.Swap(&other->seatbid_);
    std::swap(bidid_, other->bidid_);
    std::swap(nbr_, other->nbr_);
    std::swap(process_time_, other->process_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeatBid::kBidFieldNumber;
const int SeatBid::kSeatFieldNumber;
#endif  // !_MSC_VER

SeatBid::SeatBid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SeatBid)
}

void SeatBid::InitAsDefaultInstance() {
}

SeatBid::SeatBid(const SeatBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SeatBid)
}

void SeatBid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatBid::~SeatBid() {
  // @@protoc_insertion_point(destructor:SeatBid)
  SharedDtor();
}

void SeatBid::SharedDtor() {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seat_;
  }
  if (this != default_instance_) {
  }
}

void SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatBid_descriptor_;
}

const SeatBid& SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

SeatBid* SeatBid::default_instance_ = NULL;

SeatBid* SeatBid::New() const {
  return new SeatBid;
}

void SeatBid::Clear() {
  if (has_seat()) {
    if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      seat_->clear();
    }
  }
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bid bid = 1;
      case 1: {
        if (tag == 10) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bid;
        if (input->ExpectTag(18)) goto parse_seat;
        break;
      }

      // required string seat = 2;
      case 2: {
        if (tag == 18) {
         parse_seat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seat().data(), this->seat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "seat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SeatBid)
  return false;
#undef DO_
}

void SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SeatBid)
  // repeated .Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(i), output);
  }

  // required string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SeatBid)
}

::google::protobuf::uint8* SeatBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SeatBid)
  // repeated .Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bid(i), target);
  }

  // required string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SeatBid)
  return target;
}

int SeatBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seat());
    }

  }
  // repeated .Bid bid = 1;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeatBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeatBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeatBid::MergeFrom(const SeatBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bid_.MergeFrom(from.bid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatBid::CopyFrom(const SeatBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatBid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;
  return true;
}

void SeatBid::Swap(SeatBid* other) {
  if (other != this) {
    bid_.Swap(&other->bid_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatBid_descriptor_;
  metadata.reflection = SeatBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bid::kIdFieldNumber;
const int Bid::kImpidFieldNumber;
const int Bid::kPriceFieldNumber;
const int Bid::kAdmFieldNumber;
const int Bid::kAdomainFieldNumber;
const int Bid::kBundleFieldNumber;
const int Bid::kIurlFieldNumber;
const int Bid::kWFieldNumber;
const int Bid::kHFieldNumber;
const int Bid::kAdidFieldNumber;
const int Bid::kNurlFieldNumber;
const int Bid::kCidFieldNumber;
const int Bid::kCridFieldNumber;
const int Bid::kCatFieldNumber;
const int Bid::kAttrFieldNumber;
const int Bid::kCurlFieldNumber;
const int Bid::kTypeFieldNumber;
const int Bid::kExtiurlFieldNumber;
const int Bid::kActionFieldNumber;
const int Bid::kAdmtypeFieldNumber;
#endif  // !_MSC_VER

Bid::Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Bid)
}

void Bid::InitAsDefaultInstance() {
}

Bid::Bid(const Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Bid)
}

void Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  adm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cat_ = 801;
  attr_ = 706;
  curl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  admtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bid::~Bid() {
  // @@protoc_insertion_point(destructor:Bid)
  SharedDtor();
}

void Bid::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impid_;
  }
  if (adm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adm_;
  }
  if (adomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adomain_;
  }
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (iurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iurl_;
  }
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adid_;
  }
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nurl_;
  }
  if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cid_;
  }
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crid_;
  }
  if (curl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curl_;
  }
  if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_;
  }
  if (this != default_instance_) {
  }
}

void Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bid_descriptor_;
}

const Bid& Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2dv2_5f6_2eproto();
  return *default_instance_;
}

Bid* Bid::default_instance_ = NULL;

Bid* Bid::New() const {
  return new Bid;
}

void Bid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Bid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(price_, w_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_impid()) {
      if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        impid_->clear();
      }
    }
    if (has_adm()) {
      if (adm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adm_->clear();
      }
    }
    if (has_adomain()) {
      if (adomain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adomain_->clear();
      }
    }
    if (has_bundle()) {
      if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bundle_->clear();
      }
    }
    if (has_iurl()) {
      if (iurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iurl_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    h_ = 0;
    if (has_adid()) {
      if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adid_->clear();
      }
    }
    if (has_nurl()) {
      if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nurl_->clear();
      }
    }
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cid_->clear();
      }
    }
    if (has_crid()) {
      if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        crid_->clear();
      }
    }
    cat_ = 801;
    attr_ = 706;
    if (has_curl()) {
      if (curl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        curl_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 851968) {
    type_ = 1;
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        action_->clear();
      }
    }
    admtype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  extiurl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_impid;
        break;
      }

      // required string impid = 2;
      case 2: {
        if (tag == 18) {
         parse_impid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_price;
        break;
      }

      // required float price = 3;
      case 3: {
        if (tag == 29) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_adm;
        break;
      }

      // required string adm = 4;
      case 4: {
        if (tag == 34) {
         parse_adm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adm().data(), this->adm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_adomain;
        break;
      }

      // required string adomain = 5;
      case 5: {
        if (tag == 42) {
         parse_adomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adomain().data(), this->adomain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bundle;
        break;
      }

      // optional string bundle = 6;
      case 6: {
        if (tag == 50) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_iurl;
        break;
      }

      // required string iurl = 7;
      case 7: {
        if (tag == 58) {
         parse_iurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iurl().data(), this->iurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_w;
        break;
      }

      // required float w = 8;
      case 8: {
        if (tag == 69) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_h;
        break;
      }

      // required float h = 9;
      case 9: {
        if (tag == 77) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_adid;
        break;
      }

      // optional string adid = 10;
      case 10: {
        if (tag == 82) {
         parse_adid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adid().data(), this->adid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_nurl;
        break;
      }

      // optional string nurl = 11;
      case 11: {
        if (tag == 90) {
         parse_nurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nurl().data(), this->nurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_cid;
        break;
      }

      // optional string cid = 12;
      case 12: {
        if (tag == 98) {
         parse_cid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_crid;
        break;
      }

      // optional string crid = 13;
      case 13: {
        if (tag == 106) {
         parse_crid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crid().data(), this->crid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "crid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_cat;
        break;
      }

      // optional .ContentCategory cat = 14;
      case 14: {
        if (tag == 112) {
         parse_cat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_cat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_attr;
        break;
      }

      // optional .CreativeAttribute attr = 15;
      case 15: {
        if (tag == 120) {
         parse_attr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CreativeAttribute_IsValid(value)) {
            set_attr(static_cast< ::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_curl;
        break;
      }

      // required string curl = 16;
      case 16: {
        if (tag == 130) {
         parse_curl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curl().data(), this->curl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_type;
        break;
      }

      // required .AdType type = 17;
      case 17: {
        if (tag == 136) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdType_IsValid(value)) {
            set_type(static_cast< ::AdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_extiurl;
        break;
      }

      // repeated string extiurl = 18;
      case 18: {
        if (tag == 146) {
         parse_extiurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_extiurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extiurl(this->extiurl_size() - 1).data(),
            this->extiurl(this->extiurl_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extiurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_extiurl;
        if (input->ExpectTag(154)) goto parse_action;
        break;
      }

      // optional string action = 19;
      case 19: {
        if (tag == 154) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "action");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_admtype;
        break;
      }

      // required .AdmType admtype = 20;
      case 20: {
        if (tag == 160) {
         parse_admtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdmType_IsValid(value)) {
            set_admtype(static_cast< ::AdmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Bid)
  return false;
#undef DO_
}

void Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->impid(), output);
  }

  // required float price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->price(), output);
  }

  // required string adm = 4;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->adm(), output);
  }

  // required string adomain = 5;
  if (has_adomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adomain().data(), this->adomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->adomain(), output);
  }

  // optional string bundle = 6;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bundle(), output);
  }

  // required string iurl = 7;
  if (has_iurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iurl().data(), this->iurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->iurl(), output);
  }

  // required float w = 8;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->w(), output);
  }

  // required float h = 9;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->h(), output);
  }

  // optional string adid = 10;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->adid(), output);
  }

  // optional string nurl = 11;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->nurl(), output);
  }

  // optional string cid = 12;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->cid(), output);
  }

  // optional string crid = 13;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->crid(), output);
  }

  // optional .ContentCategory cat = 14;
  if (has_cat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->cat(), output);
  }

  // optional .CreativeAttribute attr = 15;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->attr(), output);
  }

  // required string curl = 16;
  if (has_curl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curl().data(), this->curl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->curl(), output);
  }

  // required .AdType type = 17;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->type(), output);
  }

  // repeated string extiurl = 18;
  for (int i = 0; i < this->extiurl_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->extiurl(i).data(), this->extiurl(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "extiurl");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->extiurl(i), output);
  }

  // optional string action = 19;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->action(), output);
  }

  // required .AdmType admtype = 20;
  if (has_admtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->admtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Bid)
}

::google::protobuf::uint8* Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impid(), target);
  }

  // required float price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->price(), target);
  }

  // required string adm = 4;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->adm(), target);
  }

  // required string adomain = 5;
  if (has_adomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adomain().data(), this->adomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->adomain(), target);
  }

  // optional string bundle = 6;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bundle(), target);
  }

  // required string iurl = 7;
  if (has_iurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iurl().data(), this->iurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->iurl(), target);
  }

  // required float w = 8;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->w(), target);
  }

  // required float h = 9;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->h(), target);
  }

  // optional string adid = 10;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->adid(), target);
  }

  // optional string nurl = 11;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->nurl(), target);
  }

  // optional string cid = 12;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cid(), target);
  }

  // optional string crid = 13;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->crid(), target);
  }

  // optional .ContentCategory cat = 14;
  if (has_cat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->cat(), target);
  }

  // optional .CreativeAttribute attr = 15;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->attr(), target);
  }

  // required string curl = 16;
  if (has_curl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curl().data(), this->curl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->curl(), target);
  }

  // required .AdType type = 17;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->type(), target);
  }

  // repeated string extiurl = 18;
  for (int i = 0; i < this->extiurl_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extiurl(i).data(), this->extiurl(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extiurl");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->extiurl(i), target);
  }

  // optional string action = 19;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->action(), target);
  }

  // required .AdmType admtype = 20;
  if (has_admtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->admtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bid)
  return target;
}

int Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string impid = 2;
    if (has_impid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impid());
    }

    // required float price = 3;
    if (has_price()) {
      total_size += 1 + 4;
    }

    // required string adm = 4;
    if (has_adm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adm());
    }

    // required string adomain = 5;
    if (has_adomain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adomain());
    }

    // optional string bundle = 6;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

    // required string iurl = 7;
    if (has_iurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iurl());
    }

    // required float w = 8;
    if (has_w()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float h = 9;
    if (has_h()) {
      total_size += 1 + 4;
    }

    // optional string adid = 10;
    if (has_adid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adid());
    }

    // optional string nurl = 11;
    if (has_nurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nurl());
    }

    // optional string cid = 12;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string crid = 13;
    if (has_crid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crid());
    }

    // optional .ContentCategory cat = 14;
    if (has_cat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cat());
    }

    // optional .CreativeAttribute attr = 15;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attr());
    }

    // required string curl = 16;
    if (has_curl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->curl());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .AdType type = 17;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string action = 19;
    if (has_action()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // required .AdmType admtype = 20;
    if (has_admtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->admtype());
    }

  }
  // repeated string extiurl = 18;
  total_size += 2 * this->extiurl_size();
  for (int i = 0; i < this->extiurl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->extiurl(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bid::MergeFrom(const Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  extiurl_.MergeFrom(from.extiurl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_impid()) {
      set_impid(from.impid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_adm()) {
      set_adm(from.adm());
    }
    if (from.has_adomain()) {
      set_adomain(from.adomain());
    }
    if (from.has_bundle()) {
      set_bundle(from.bundle());
    }
    if (from.has_iurl()) {
      set_iurl(from.iurl());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_adid()) {
      set_adid(from.adid());
    }
    if (from.has_nurl()) {
      set_nurl(from.nurl());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_crid()) {
      set_crid(from.crid());
    }
    if (from.has_cat()) {
      set_cat(from.cat());
    }
    if (from.has_attr()) {
      set_attr(from.attr());
    }
    if (from.has_curl()) {
      set_curl(from.curl());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_admtype()) {
      set_admtype(from.admtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bid::CopyFrom(const Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x000981df) != 0x000981df) return false;

  return true;
}

void Bid::Swap(Bid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(impid_, other->impid_);
    std::swap(price_, other->price_);
    std::swap(adm_, other->adm_);
    std::swap(adomain_, other->adomain_);
    std::swap(bundle_, other->bundle_);
    std::swap(iurl_, other->iurl_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(adid_, other->adid_);
    std::swap(nurl_, other->nurl_);
    std::swap(cid_, other->cid_);
    std::swap(crid_, other->crid_);
    std::swap(cat_, other->cat_);
    std::swap(attr_, other->attr_);
    std::swap(curl_, other->curl_);
    std::swap(type_, other->type_);
    extiurl_.Swap(&other->extiurl_);
    std::swap(action_, other->action_);
    std::swap(admtype_, other->admtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bid_descriptor_;
  metadata.reflection = Bid_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: settlement.proto

#ifndef PROTOBUF_settlement_2eproto__INCLUDED
#define PROTOBUF_settlement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace price {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_settlement_2eproto();
void protobuf_AssignDesc_settlement_2eproto();
void protobuf_ShutdownFile_settlement_2eproto();

class Settlement;

// ===================================================================

class Settlement : public ::google::protobuf::Message {
 public:
  Settlement();
  virtual ~Settlement();

  Settlement(const Settlement& from);

  inline Settlement& operator=(const Settlement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Settlement& default_instance();

  void Swap(Settlement* other);

  // implements Message ----------------------------------------------

  Settlement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Settlement& from);
  void MergeFrom(const Settlement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required bytes price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline const ::std::string& price() const;
  inline void set_price(const ::std::string& value);
  inline void set_price(const char* value);
  inline void set_price(const void* value, size_t size);
  inline ::std::string* mutable_price();
  inline ::std::string* release_price();
  inline void set_allocated_price(::std::string* price);

  // optional bytes auth = 3;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 3;
  inline const ::std::string& auth() const;
  inline void set_auth(const ::std::string& value);
  inline void set_auth(const char* value);
  inline void set_auth(const void* value, size_t size);
  inline ::std::string* mutable_auth();
  inline ::std::string* release_auth();
  inline void set_allocated_auth(::std::string* auth);

  // @@protoc_insertion_point(class_scope:price.Settlement)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_auth();
  inline void clear_has_auth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* price_;
  ::std::string* auth_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_settlement_2eproto();
  friend void protobuf_AssignDesc_settlement_2eproto();
  friend void protobuf_ShutdownFile_settlement_2eproto();

  void InitAsDefaultInstance();
  static Settlement* default_instance_;
};
// ===================================================================


// ===================================================================

// Settlement

// optional uint32 version = 1;
inline bool Settlement::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Settlement::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Settlement::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Settlement::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Settlement::version() const {
  // @@protoc_insertion_point(field_get:price.Settlement.version)
  return version_;
}
inline void Settlement::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:price.Settlement.version)
}

// required bytes price = 2;
inline bool Settlement::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Settlement::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Settlement::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Settlement::clear_price() {
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_->clear();
  }
  clear_has_price();
}
inline const ::std::string& Settlement::price() const {
  // @@protoc_insertion_point(field_get:price.Settlement.price)
  return *price_;
}
inline void Settlement::set_price(const ::std::string& value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(value);
  // @@protoc_insertion_point(field_set:price.Settlement.price)
}
inline void Settlement::set_price(const char* value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(value);
  // @@protoc_insertion_point(field_set_char:price.Settlement.price)
}
inline void Settlement::set_price(const void* value, size_t size) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:price.Settlement.price)
}
inline ::std::string* Settlement::mutable_price() {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:price.Settlement.price)
  return price_;
}
inline ::std::string* Settlement::release_price() {
  clear_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = price_;
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Settlement::set_allocated_price(::std::string* price) {
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (price) {
    set_has_price();
    price_ = price;
  } else {
    clear_has_price();
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:price.Settlement.price)
}

// optional bytes auth = 3;
inline bool Settlement::has_auth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Settlement::set_has_auth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Settlement::clear_has_auth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Settlement::clear_auth() {
  if (auth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_->clear();
  }
  clear_has_auth();
}
inline const ::std::string& Settlement::auth() const {
  // @@protoc_insertion_point(field_get:price.Settlement.auth)
  return *auth_;
}
inline void Settlement::set_auth(const ::std::string& value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
  // @@protoc_insertion_point(field_set:price.Settlement.auth)
}
inline void Settlement::set_auth(const char* value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
  // @@protoc_insertion_point(field_set_char:price.Settlement.auth)
}
inline void Settlement::set_auth(const void* value, size_t size) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_ = new ::std::string;
  }
  auth_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:price.Settlement.auth)
}
inline ::std::string* Settlement::mutable_auth() {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:price.Settlement.auth)
  return auth_;
}
inline ::std::string* Settlement::release_auth() {
  clear_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = auth_;
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Settlement::set_allocated_auth(::std::string* auth) {
  if (auth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_;
  }
  if (auth) {
    set_has_auth();
    auth_ = auth;
  } else {
    clear_has_auth();
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:price.Settlement.auth)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace price

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_settlement_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pxene-bidding.proto

#ifndef PROTOBUF_pxene_2dbidding_2eproto__INCLUDED
#define PROTOBUF_pxene_2dbidding_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pxene_2dbidding_2eproto();
void protobuf_AssignDesc_pxene_2dbidding_2eproto();
void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

class PBBanner;
class PBApp;
class PBGeo;
class PBDevice;
class PBUser;
class PBImpressionExt;
class PBBid;
class PBSeatBid;
class PBImpression;
class PBBidRequest;
class PBBidResponse;

// ===================================================================

class PBBanner : public ::google::protobuf::Message {
 public:
  PBBanner();
  virtual ~PBBanner();

  PBBanner(const PBBanner& from);

  inline PBBanner& operator=(const PBBanner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBanner& default_instance();

  void Swap(PBBanner* other);

  // implements Message ----------------------------------------------

  PBBanner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBanner& from);
  void MergeFrom(const PBBanner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 w = 1;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 2;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 2;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // repeated int32 mimes = 3;
  inline int mimes_size() const;
  inline void clear_mimes();
  static const int kMimesFieldNumber = 3;
  inline ::google::protobuf::int32 mimes(int index) const;
  inline void set_mimes(int index, ::google::protobuf::int32 value);
  inline void add_mimes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mimes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mimes();

  // repeated int32 battr = 4;
  inline int battr_size() const;
  inline void clear_battr();
  static const int kBattrFieldNumber = 4;
  inline ::google::protobuf::int32 battr(int index) const;
  inline void set_battr(int index, ::google::protobuf::int32 value);
  inline void add_battr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      battr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_battr();

  // @@protoc_insertion_point(class_scope:PBBanner)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mimes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > battr_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBBanner* default_instance_;
};
// -------------------------------------------------------------------

class PBApp : public ::google::protobuf::Message {
 public:
  PBApp();
  virtual ~PBApp();

  PBApp(const PBApp& from);

  inline PBApp& operator=(const PBApp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBApp& default_instance();

  void Swap(PBApp* other);

  // implements Message ----------------------------------------------

  PBApp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBApp& from);
  void MergeFrom(const PBApp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 cat = 3;
  inline int cat_size() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 3;
  inline ::google::protobuf::int32 cat(int index) const;
  inline void set_cat(int index, ::google::protobuf::int32 value);
  inline void add_cat(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cat();

  // optional string bundle = 4;
  inline bool has_bundle() const;
  inline void clear_bundle();
  static const int kBundleFieldNumber = 4;
  inline const ::std::string& bundle() const;
  inline void set_bundle(const ::std::string& value);
  inline void set_bundle(const char* value);
  inline void set_bundle(const char* value, size_t size);
  inline ::std::string* mutable_bundle();
  inline ::std::string* release_bundle();
  inline void set_allocated_bundle(::std::string* bundle);

  // optional string storeurl = 5;
  inline bool has_storeurl() const;
  inline void clear_storeurl();
  static const int kStoreurlFieldNumber = 5;
  inline const ::std::string& storeurl() const;
  inline void set_storeurl(const ::std::string& value);
  inline void set_storeurl(const char* value);
  inline void set_storeurl(const char* value, size_t size);
  inline ::std::string* mutable_storeurl();
  inline ::std::string* release_storeurl();
  inline void set_allocated_storeurl(::std::string* storeurl);

  // @@protoc_insertion_point(class_scope:PBApp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bundle();
  inline void clear_has_bundle();
  inline void set_has_storeurl();
  inline void clear_has_storeurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cat_;
  ::std::string* bundle_;
  ::std::string* storeurl_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBApp* default_instance_;
};
// -------------------------------------------------------------------

class PBGeo : public ::google::protobuf::Message {
 public:
  PBGeo();
  virtual ~PBGeo();

  PBGeo(const PBGeo& from);

  inline PBGeo& operator=(const PBGeo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGeo& default_instance();

  void Swap(PBGeo* other);

  // implements Message ----------------------------------------------

  PBGeo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGeo& from);
  void MergeFrom(const PBGeo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double lat = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 1;
  inline double lat() const;
  inline void set_lat(double value);

  // optional double lon = 2;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 2;
  inline double lon() const;
  inline void set_lon(double value);

  // @@protoc_insertion_point(class_scope:PBGeo)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lat_;
  double lon_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBGeo* default_instance_;
};
// -------------------------------------------------------------------

class PBDevice : public ::google::protobuf::Message {
 public:
  PBDevice();
  virtual ~PBDevice();

  PBDevice(const PBDevice& from);

  inline PBDevice& operator=(const PBDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDevice& default_instance();

  void Swap(PBDevice* other);

  // implements Message ----------------------------------------------

  PBDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDevice& from);
  void MergeFrom(const PBDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string did = 1;
  inline bool has_did() const;
  inline void clear_did();
  static const int kDidFieldNumber = 1;
  inline const ::std::string& did() const;
  inline void set_did(const ::std::string& value);
  inline void set_did(const char* value);
  inline void set_did(const char* value, size_t size);
  inline ::std::string* mutable_did();
  inline ::std::string* release_did();
  inline void set_allocated_did(::std::string* did);

  // optional string mac = 2;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 2;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // optional string dpid = 3;
  inline bool has_dpid() const;
  inline void clear_dpid();
  static const int kDpidFieldNumber = 3;
  inline const ::std::string& dpid() const;
  inline void set_dpid(const ::std::string& value);
  inline void set_dpid(const char* value);
  inline void set_dpid(const char* value, size_t size);
  inline ::std::string* mutable_dpid();
  inline ::std::string* release_dpid();
  inline void set_allocated_dpid(::std::string* dpid);

  // optional string brand = 4;
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 4;
  inline const ::std::string& brand() const;
  inline void set_brand(const ::std::string& value);
  inline void set_brand(const char* value);
  inline void set_brand(const char* value, size_t size);
  inline ::std::string* mutable_brand();
  inline ::std::string* release_brand();
  inline void set_allocated_brand(::std::string* brand);

  // optional string model = 5;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 5;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional int32 os = 6;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 6;
  inline ::google::protobuf::int32 os() const;
  inline void set_os(::google::protobuf::int32 value);

  // optional string osv = 7;
  inline bool has_osv() const;
  inline void clear_osv();
  static const int kOsvFieldNumber = 7;
  inline const ::std::string& osv() const;
  inline void set_osv(const ::std::string& value);
  inline void set_osv(const char* value);
  inline void set_osv(const char* value, size_t size);
  inline ::std::string* mutable_osv();
  inline ::std::string* release_osv();
  inline void set_allocated_osv(::std::string* osv);

  // optional int32 connectiontype = 8;
  inline bool has_connectiontype() const;
  inline void clear_connectiontype();
  static const int kConnectiontypeFieldNumber = 8;
  inline ::google::protobuf::int32 connectiontype() const;
  inline void set_connectiontype(::google::protobuf::int32 value);

  // optional int32 devicetype = 9;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDevicetypeFieldNumber = 9;
  inline ::google::protobuf::int32 devicetype() const;
  inline void set_devicetype(::google::protobuf::int32 value);

  // optional int32 w = 10;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 10;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 11;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 11;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // optional string ip = 12;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 12;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string ua = 13;
  inline bool has_ua() const;
  inline void clear_ua();
  static const int kUaFieldNumber = 13;
  inline const ::std::string& ua() const;
  inline void set_ua(const ::std::string& value);
  inline void set_ua(const char* value);
  inline void set_ua(const char* value, size_t size);
  inline ::std::string* mutable_ua();
  inline ::std::string* release_ua();
  inline void set_allocated_ua(::std::string* ua);

  // @@protoc_insertion_point(class_scope:PBDevice)
 private:
  inline void set_has_did();
  inline void clear_has_did();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_dpid();
  inline void clear_has_dpid();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_osv();
  inline void clear_has_osv();
  inline void set_has_connectiontype();
  inline void clear_has_connectiontype();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_ua();
  inline void clear_has_ua();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* did_;
  ::std::string* mac_;
  ::std::string* dpid_;
  ::std::string* brand_;
  ::std::string* model_;
  ::std::string* osv_;
  ::google::protobuf::int32 os_;
  ::google::protobuf::int32 connectiontype_;
  ::google::protobuf::int32 devicetype_;
  ::google::protobuf::int32 w_;
  ::std::string* ip_;
  ::std::string* ua_;
  ::google::protobuf::int32 h_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBDevice* default_instance_;
};
// -------------------------------------------------------------------

class PBUser : public ::google::protobuf::Message {
 public:
  PBUser();
  virtual ~PBUser();

  PBUser(const PBUser& from);

  inline PBUser& operator=(const PBUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUser& default_instance();

  void Swap(PBUser* other);

  // implements Message ----------------------------------------------

  PBUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUser& from);
  void MergeFrom(const PBUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 gender = 2;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 2;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);

  // optional int32 yob = 3;
  inline bool has_yob() const;
  inline void clear_yob();
  static const int kYobFieldNumber = 3;
  inline ::google::protobuf::int32 yob() const;
  inline void set_yob(::google::protobuf::int32 value);

  // optional string keywords = 4;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 4;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // optional .PBGeo geo = 5;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 5;
  inline const ::PBGeo& geo() const;
  inline ::PBGeo* mutable_geo();
  inline ::PBGeo* release_geo();
  inline void set_allocated_geo(::PBGeo* geo);

  // optional string searchkey = 6;
  inline bool has_searchkey() const;
  inline void clear_searchkey();
  static const int kSearchkeyFieldNumber = 6;
  inline const ::std::string& searchkey() const;
  inline void set_searchkey(const ::std::string& value);
  inline void set_searchkey(const char* value);
  inline void set_searchkey(const char* value, size_t size);
  inline ::std::string* mutable_searchkey();
  inline ::std::string* release_searchkey();
  inline void set_allocated_searchkey(::std::string* searchkey);

  // @@protoc_insertion_point(class_scope:PBUser)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_yob();
  inline void clear_has_yob();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_geo();
  inline void clear_has_geo();
  inline void set_has_searchkey();
  inline void clear_has_searchkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 yob_;
  ::std::string* keywords_;
  ::PBGeo* geo_;
  ::std::string* searchkey_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBUser* default_instance_;
};
// -------------------------------------------------------------------

class PBImpressionExt : public ::google::protobuf::Message {
 public:
  PBImpressionExt();
  virtual ~PBImpressionExt();

  PBImpressionExt(const PBImpressionExt& from);

  inline PBImpressionExt& operator=(const PBImpressionExt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBImpressionExt& default_instance();

  void Swap(PBImpressionExt* other);

  // implements Message ----------------------------------------------

  PBImpressionExt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBImpressionExt& from);
  void MergeFrom(const PBImpressionExt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 splash = 1;
  inline bool has_splash() const;
  inline void clear_splash();
  static const int kSplashFieldNumber = 1;
  inline ::google::protobuf::int32 splash() const;
  inline void set_splash(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBImpressionExt)
 private:
  inline void set_has_splash();
  inline void clear_has_splash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 splash_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBImpressionExt* default_instance_;
};
// -------------------------------------------------------------------

class PBBid : public ::google::protobuf::Message {
 public:
  PBBid();
  virtual ~PBBid();

  PBBid(const PBBid& from);

  inline PBBid& operator=(const PBBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBid& default_instance();

  void Swap(PBBid* other);

  // implements Message ----------------------------------------------

  PBBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBid& from);
  void MergeFrom(const PBBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string impid = 1;
  inline bool has_impid() const;
  inline void clear_impid();
  static const int kImpidFieldNumber = 1;
  inline const ::std::string& impid() const;
  inline void set_impid(const ::std::string& value);
  inline void set_impid(const char* value);
  inline void set_impid(const char* value, size_t size);
  inline ::std::string* mutable_impid();
  inline ::std::string* release_impid();
  inline void set_allocated_impid(::std::string* impid);

  // optional double bid_price = 2;
  inline bool has_bid_price() const;
  inline void clear_bid_price();
  static const int kBidPriceFieldNumber = 2;
  inline double bid_price() const;
  inline void set_bid_price(double value);

  // optional string adid = 3;
  inline bool has_adid() const;
  inline void clear_adid();
  static const int kAdidFieldNumber = 3;
  inline const ::std::string& adid() const;
  inline void set_adid(const ::std::string& value);
  inline void set_adid(const char* value);
  inline void set_adid(const char* value, size_t size);
  inline ::std::string* mutable_adid();
  inline ::std::string* release_adid();
  inline void set_allocated_adid(::std::string* adid);

  // optional string extdata = 4;
  inline bool has_extdata() const;
  inline void clear_extdata();
  static const int kExtdataFieldNumber = 4;
  inline const ::std::string& extdata() const;
  inline void set_extdata(const ::std::string& value);
  inline void set_extdata(const char* value);
  inline void set_extdata(const char* value, size_t size);
  inline ::std::string* mutable_extdata();
  inline ::std::string* release_extdata();
  inline void set_allocated_extdata(::std::string* extdata);

  // @@protoc_insertion_point(class_scope:PBBid)
 private:
  inline void set_has_impid();
  inline void clear_has_impid();
  inline void set_has_bid_price();
  inline void clear_has_bid_price();
  inline void set_has_adid();
  inline void clear_has_adid();
  inline void set_has_extdata();
  inline void clear_has_extdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* impid_;
  double bid_price_;
  ::std::string* adid_;
  ::std::string* extdata_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBBid* default_instance_;
};
// -------------------------------------------------------------------

class PBSeatBid : public ::google::protobuf::Message {
 public:
  PBSeatBid();
  virtual ~PBSeatBid();

  PBSeatBid(const PBSeatBid& from);

  inline PBSeatBid& operator=(const PBSeatBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSeatBid& default_instance();

  void Swap(PBSeatBid* other);

  // implements Message ----------------------------------------------

  PBSeatBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSeatBid& from);
  void MergeFrom(const PBSeatBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PBBid bid = 1;
  inline int bid_size() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::PBBid& bid(int index) const;
  inline ::PBBid* mutable_bid(int index);
  inline ::PBBid* add_bid();
  inline const ::google::protobuf::RepeatedPtrField< ::PBBid >&
      bid() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBBid >*
      mutable_bid();

  // @@protoc_insertion_point(class_scope:PBSeatBid)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PBBid > bid_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBSeatBid* default_instance_;
};
// -------------------------------------------------------------------

class PBImpression : public ::google::protobuf::Message {
 public:
  PBImpression();
  virtual ~PBImpression();

  PBImpression(const PBImpression& from);

  inline PBImpression& operator=(const PBImpression& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBImpression& default_instance();

  void Swap(PBImpression* other);

  // implements Message ----------------------------------------------

  PBImpression* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBImpression& from);
  void MergeFrom(const PBImpression& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .PBBanner banner = 2;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 2;
  inline const ::PBBanner& banner() const;
  inline ::PBBanner* mutable_banner();
  inline ::PBBanner* release_banner();
  inline void set_allocated_banner(::PBBanner* banner);

  // optional string bidfloorcur = 3;
  inline bool has_bidfloorcur() const;
  inline void clear_bidfloorcur();
  static const int kBidfloorcurFieldNumber = 3;
  inline const ::std::string& bidfloorcur() const;
  inline void set_bidfloorcur(const ::std::string& value);
  inline void set_bidfloorcur(const char* value);
  inline void set_bidfloorcur(const char* value, size_t size);
  inline ::std::string* mutable_bidfloorcur();
  inline ::std::string* release_bidfloorcur();
  inline void set_allocated_bidfloorcur(::std::string* bidfloorcur);

  // optional double bidfloor = 4;
  inline bool has_bidfloor() const;
  inline void clear_bidfloor();
  static const int kBidfloorFieldNumber = 4;
  inline double bidfloor() const;
  inline void set_bidfloor(double value);

  // optional int32 instl = 5;
  inline bool has_instl() const;
  inline void clear_instl();
  static const int kInstlFieldNumber = 5;
  inline ::google::protobuf::int32 instl() const;
  inline void set_instl(::google::protobuf::int32 value);

  // optional int32 adpos = 6;
  inline bool has_adpos() const;
  inline void clear_adpos();
  static const int kAdposFieldNumber = 6;
  inline ::google::protobuf::int32 adpos() const;
  inline void set_adpos(::google::protobuf::int32 value);

  // optional int32 secure = 7;
  inline bool has_secure() const;
  inline void clear_secure();
  static const int kSecureFieldNumber = 7;
  inline ::google::protobuf::int32 secure() const;
  inline void set_secure(::google::protobuf::int32 value);

  // optional int32 is_clickable = 8;
  inline bool has_is_clickable() const;
  inline void clear_is_clickable();
  static const int kIsClickableFieldNumber = 8;
  inline ::google::protobuf::int32 is_clickable() const;
  inline void set_is_clickable(::google::protobuf::int32 value);

  // repeated int32 ctype = 9;
  inline int ctype_size() const;
  inline void clear_ctype();
  static const int kCtypeFieldNumber = 9;
  inline ::google::protobuf::int32 ctype(int index) const;
  inline void set_ctype(int index, ::google::protobuf::int32 value);
  inline void add_ctype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ctype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ctype();

  // optional .PBImpressionExt ext = 10;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 10;
  inline const ::PBImpressionExt& ext() const;
  inline ::PBImpressionExt* mutable_ext();
  inline ::PBImpressionExt* release_ext();
  inline void set_allocated_ext(::PBImpressionExt* ext);

  // @@protoc_insertion_point(class_scope:PBImpression)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_banner();
  inline void clear_has_banner();
  inline void set_has_bidfloorcur();
  inline void clear_has_bidfloorcur();
  inline void set_has_bidfloor();
  inline void clear_has_bidfloor();
  inline void set_has_instl();
  inline void clear_has_instl();
  inline void set_has_adpos();
  inline void clear_has_adpos();
  inline void set_has_secure();
  inline void clear_has_secure();
  inline void set_has_is_clickable();
  inline void clear_has_is_clickable();
  inline void set_has_ext();
  inline void clear_has_ext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::PBBanner* banner_;
  ::std::string* bidfloorcur_;
  double bidfloor_;
  ::google::protobuf::int32 instl_;
  ::google::protobuf::int32 adpos_;
  ::google::protobuf::int32 secure_;
  ::google::protobuf::int32 is_clickable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ctype_;
  ::PBImpressionExt* ext_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBImpression* default_instance_;
};
// -------------------------------------------------------------------

class PBBidRequest : public ::google::protobuf::Message {
 public:
  PBBidRequest();
  virtual ~PBBidRequest();

  PBBidRequest(const PBBidRequest& from);

  inline PBBidRequest& operator=(const PBBidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBidRequest& default_instance();

  void Swap(PBBidRequest* other);

  // implements Message ----------------------------------------------

  PBBidRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBidRequest& from);
  void MergeFrom(const PBBidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .PBImpression imp = 2;
  inline int imp_size() const;
  inline void clear_imp();
  static const int kImpFieldNumber = 2;
  inline const ::PBImpression& imp(int index) const;
  inline ::PBImpression* mutable_imp(int index);
  inline ::PBImpression* add_imp();
  inline const ::google::protobuf::RepeatedPtrField< ::PBImpression >&
      imp() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBImpression >*
      mutable_imp();

  // optional .PBApp app = 3;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 3;
  inline const ::PBApp& app() const;
  inline ::PBApp* mutable_app();
  inline ::PBApp* release_app();
  inline void set_allocated_app(::PBApp* app);

  // optional .PBDevice device = 4;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 4;
  inline const ::PBDevice& device() const;
  inline ::PBDevice* mutable_device();
  inline ::PBDevice* release_device();
  inline void set_allocated_device(::PBDevice* device);

  // optional .PBUser user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  inline void set_allocated_user(::PBUser* user);

  // repeated int32 bcat = 6;
  inline int bcat_size() const;
  inline void clear_bcat();
  static const int kBcatFieldNumber = 6;
  inline ::google::protobuf::int32 bcat(int index) const;
  inline void set_bcat(int index, ::google::protobuf::int32 value);
  inline void add_bcat(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bcat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bcat();

  // repeated string badv = 7;
  inline int badv_size() const;
  inline void clear_badv();
  static const int kBadvFieldNumber = 7;
  inline const ::std::string& badv(int index) const;
  inline ::std::string* mutable_badv(int index);
  inline void set_badv(int index, const ::std::string& value);
  inline void set_badv(int index, const char* value);
  inline void set_badv(int index, const char* value, size_t size);
  inline ::std::string* add_badv();
  inline void add_badv(const ::std::string& value);
  inline void add_badv(const char* value);
  inline void add_badv(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& badv() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_badv();

  // @@protoc_insertion_point(class_scope:PBBidRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_app();
  inline void clear_has_app();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::PBImpression > imp_;
  ::PBApp* app_;
  ::PBDevice* device_;
  ::PBUser* user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bcat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> badv_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBBidRequest* default_instance_;
};
// -------------------------------------------------------------------

class PBBidResponse : public ::google::protobuf::Message {
 public:
  PBBidResponse();
  virtual ~PBBidResponse();

  PBBidResponse(const PBBidResponse& from);

  inline PBBidResponse& operator=(const PBBidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBidResponse& default_instance();

  void Swap(PBBidResponse* other);

  // implements Message ----------------------------------------------

  PBBidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBidResponse& from);
  void MergeFrom(const PBBidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .PBSeatBid seatbid = 2;
  inline int seatbid_size() const;
  inline void clear_seatbid();
  static const int kSeatbidFieldNumber = 2;
  inline const ::PBSeatBid& seatbid(int index) const;
  inline ::PBSeatBid* mutable_seatbid(int index);
  inline ::PBSeatBid* add_seatbid();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSeatBid >&
      seatbid() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSeatBid >*
      mutable_seatbid();

  // optional string bidid = 3;
  inline bool has_bidid() const;
  inline void clear_bidid();
  static const int kBididFieldNumber = 3;
  inline const ::std::string& bidid() const;
  inline void set_bidid(const ::std::string& value);
  inline void set_bidid(const char* value);
  inline void set_bidid(const char* value, size_t size);
  inline ::std::string* mutable_bidid();
  inline ::std::string* release_bidid();
  inline void set_allocated_bidid(::std::string* bidid);

  // optional string cur = 4;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 4;
  inline const ::std::string& cur() const;
  inline void set_cur(const ::std::string& value);
  inline void set_cur(const char* value);
  inline void set_cur(const char* value, size_t size);
  inline ::std::string* mutable_cur();
  inline ::std::string* release_cur();
  inline void set_allocated_cur(::std::string* cur);

  // @@protoc_insertion_point(class_scope:PBBidResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bidid();
  inline void clear_has_bidid();
  inline void set_has_cur();
  inline void clear_has_cur();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::PBSeatBid > seatbid_;
  ::std::string* bidid_;
  ::std::string* cur_;
  friend void  protobuf_AddDesc_pxene_2dbidding_2eproto();
  friend void protobuf_AssignDesc_pxene_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_pxene_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static PBBidResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// PBBanner

// optional int32 w = 1;
inline bool PBBanner::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBanner::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBanner::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBanner::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 PBBanner::w() const {
  // @@protoc_insertion_point(field_get:PBBanner.w)
  return w_;
}
inline void PBBanner::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:PBBanner.w)
}

// optional int32 h = 2;
inline bool PBBanner::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBanner::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBanner::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBanner::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 PBBanner::h() const {
  // @@protoc_insertion_point(field_get:PBBanner.h)
  return h_;
}
inline void PBBanner::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:PBBanner.h)
}

// repeated int32 mimes = 3;
inline int PBBanner::mimes_size() const {
  return mimes_.size();
}
inline void PBBanner::clear_mimes() {
  mimes_.Clear();
}
inline ::google::protobuf::int32 PBBanner::mimes(int index) const {
  // @@protoc_insertion_point(field_get:PBBanner.mimes)
  return mimes_.Get(index);
}
inline void PBBanner::set_mimes(int index, ::google::protobuf::int32 value) {
  mimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBBanner.mimes)
}
inline void PBBanner::add_mimes(::google::protobuf::int32 value) {
  mimes_.Add(value);
  // @@protoc_insertion_point(field_add:PBBanner.mimes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBBanner::mimes() const {
  // @@protoc_insertion_point(field_list:PBBanner.mimes)
  return mimes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBBanner::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:PBBanner.mimes)
  return &mimes_;
}

// repeated int32 battr = 4;
inline int PBBanner::battr_size() const {
  return battr_.size();
}
inline void PBBanner::clear_battr() {
  battr_.Clear();
}
inline ::google::protobuf::int32 PBBanner::battr(int index) const {
  // @@protoc_insertion_point(field_get:PBBanner.battr)
  return battr_.Get(index);
}
inline void PBBanner::set_battr(int index, ::google::protobuf::int32 value) {
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBBanner.battr)
}
inline void PBBanner::add_battr(::google::protobuf::int32 value) {
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:PBBanner.battr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBBanner::battr() const {
  // @@protoc_insertion_point(field_list:PBBanner.battr)
  return battr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBBanner::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:PBBanner.battr)
  return &battr_;
}

// -------------------------------------------------------------------

// PBApp

// required string id = 1;
inline bool PBApp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBApp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBApp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBApp::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PBApp::id() const {
  // @@protoc_insertion_point(field_get:PBApp.id)
  return *id_;
}
inline void PBApp::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PBApp.id)
}
inline void PBApp::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBApp.id)
}
inline void PBApp::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBApp.id)
}
inline ::std::string* PBApp::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBApp.id)
  return id_;
}
inline ::std::string* PBApp::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBApp::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBApp.id)
}

// optional string name = 2;
inline bool PBApp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBApp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBApp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBApp::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBApp::name() const {
  // @@protoc_insertion_point(field_get:PBApp.name)
  return *name_;
}
inline void PBApp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:PBApp.name)
}
inline void PBApp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBApp.name)
}
inline void PBApp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBApp.name)
}
inline ::std::string* PBApp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBApp.name)
  return name_;
}
inline ::std::string* PBApp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBApp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBApp.name)
}

// repeated int32 cat = 3;
inline int PBApp::cat_size() const {
  return cat_.size();
}
inline void PBApp::clear_cat() {
  cat_.Clear();
}
inline ::google::protobuf::int32 PBApp::cat(int index) const {
  // @@protoc_insertion_point(field_get:PBApp.cat)
  return cat_.Get(index);
}
inline void PBApp::set_cat(int index, ::google::protobuf::int32 value) {
  cat_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBApp.cat)
}
inline void PBApp::add_cat(::google::protobuf::int32 value) {
  cat_.Add(value);
  // @@protoc_insertion_point(field_add:PBApp.cat)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBApp::cat() const {
  // @@protoc_insertion_point(field_list:PBApp.cat)
  return cat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBApp::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:PBApp.cat)
  return &cat_;
}

// optional string bundle = 4;
inline bool PBApp::has_bundle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBApp::set_has_bundle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBApp::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBApp::clear_bundle() {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_->clear();
  }
  clear_has_bundle();
}
inline const ::std::string& PBApp::bundle() const {
  // @@protoc_insertion_point(field_get:PBApp.bundle)
  return *bundle_;
}
inline void PBApp::set_bundle(const ::std::string& value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set:PBApp.bundle)
}
inline void PBApp::set_bundle(const char* value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBApp.bundle)
}
inline void PBApp::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBApp.bundle)
}
inline ::std::string* PBApp::mutable_bundle() {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBApp.bundle)
  return bundle_;
}
inline ::std::string* PBApp::release_bundle() {
  clear_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bundle_;
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBApp::set_allocated_bundle(::std::string* bundle) {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (bundle) {
    set_has_bundle();
    bundle_ = bundle;
  } else {
    clear_has_bundle();
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBApp.bundle)
}

// optional string storeurl = 5;
inline bool PBApp::has_storeurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBApp::set_has_storeurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBApp::clear_has_storeurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBApp::clear_storeurl() {
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_->clear();
  }
  clear_has_storeurl();
}
inline const ::std::string& PBApp::storeurl() const {
  // @@protoc_insertion_point(field_get:PBApp.storeurl)
  return *storeurl_;
}
inline void PBApp::set_storeurl(const ::std::string& value) {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  storeurl_->assign(value);
  // @@protoc_insertion_point(field_set:PBApp.storeurl)
}
inline void PBApp::set_storeurl(const char* value) {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  storeurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBApp.storeurl)
}
inline void PBApp::set_storeurl(const char* value, size_t size) {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  storeurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBApp.storeurl)
}
inline ::std::string* PBApp::mutable_storeurl() {
  set_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    storeurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBApp.storeurl)
  return storeurl_;
}
inline ::std::string* PBApp::release_storeurl() {
  clear_has_storeurl();
  if (storeurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = storeurl_;
    storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBApp::set_allocated_storeurl(::std::string* storeurl) {
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storeurl_;
  }
  if (storeurl) {
    set_has_storeurl();
    storeurl_ = storeurl;
  } else {
    clear_has_storeurl();
    storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBApp.storeurl)
}

// -------------------------------------------------------------------

// PBGeo

// optional double lat = 1;
inline bool PBGeo::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGeo::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGeo::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGeo::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double PBGeo::lat() const {
  // @@protoc_insertion_point(field_get:PBGeo.lat)
  return lat_;
}
inline void PBGeo::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:PBGeo.lat)
}

// optional double lon = 2;
inline bool PBGeo::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGeo::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGeo::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGeo::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double PBGeo::lon() const {
  // @@protoc_insertion_point(field_get:PBGeo.lon)
  return lon_;
}
inline void PBGeo::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:PBGeo.lon)
}

// -------------------------------------------------------------------

// PBDevice

// optional string did = 1;
inline bool PBDevice::has_did() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDevice::set_has_did() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDevice::clear_has_did() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDevice::clear_did() {
  if (did_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_->clear();
  }
  clear_has_did();
}
inline const ::std::string& PBDevice::did() const {
  // @@protoc_insertion_point(field_get:PBDevice.did)
  return *did_;
}
inline void PBDevice::set_did(const ::std::string& value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_ = new ::std::string;
  }
  did_->assign(value);
  // @@protoc_insertion_point(field_set:PBDevice.did)
}
inline void PBDevice::set_did(const char* value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_ = new ::std::string;
  }
  did_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDevice.did)
}
inline void PBDevice::set_did(const char* value, size_t size) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_ = new ::std::string;
  }
  did_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDevice.did)
}
inline ::std::string* PBDevice::mutable_did() {
  set_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    did_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDevice.did)
  return did_;
}
inline ::std::string* PBDevice::release_did() {
  clear_has_did();
  if (did_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = did_;
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDevice::set_allocated_did(::std::string* did) {
  if (did_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete did_;
  }
  if (did) {
    set_has_did();
    did_ = did;
  } else {
    clear_has_did();
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDevice.did)
}

// optional string mac = 2;
inline bool PBDevice::has_mac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBDevice::set_has_mac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBDevice::clear_has_mac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBDevice::clear_mac() {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& PBDevice::mac() const {
  // @@protoc_insertion_point(field_get:PBDevice.mac)
  return *mac_;
}
inline void PBDevice::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set:PBDevice.mac)
}
inline void PBDevice::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDevice.mac)
}
inline void PBDevice::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDevice.mac)
}
inline ::std::string* PBDevice::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDevice.mac)
  return mac_;
}
inline ::std::string* PBDevice::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDevice::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDevice.mac)
}

// optional string dpid = 3;
inline bool PBDevice::has_dpid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBDevice::set_has_dpid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBDevice::clear_has_dpid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBDevice::clear_dpid() {
  if (dpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpid_->clear();
  }
  clear_has_dpid();
}
inline const ::std::string& PBDevice::dpid() const {
  // @@protoc_insertion_point(field_get:PBDevice.dpid)
  return *dpid_;
}
inline void PBDevice::set_dpid(const ::std::string& value) {
  set_has_dpid();
  if (dpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpid_ = new ::std::string;
  }
  dpid_->assign(value);
  // @@protoc_insertion_point(field_set:PBDevice.dpid)
}
inline void PBDevice::set_dpid(const char* value) {
  set_has_dpid();
  if (dpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpid_ = new ::std::string;
  }
  dpid_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDevice.dpid)
}
inline void PBDevice::set_dpid(const char* value, size_t size) {
  set_has_dpid();
  if (dpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpid_ = new ::std::string;
  }
  dpid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDevice.dpid)
}
inline ::std::string* PBDevice::mutable_dpid() {
  set_has_dpid();
  if (dpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dpid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDevice.dpid)
  return dpid_;
}
inline ::std::string* PBDevice::release_dpid() {
  clear_has_dpid();
  if (dpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dpid_;
    dpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDevice::set_allocated_dpid(::std::string* dpid) {
  if (dpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dpid_;
  }
  if (dpid) {
    set_has_dpid();
    dpid_ = dpid;
  } else {
    clear_has_dpid();
    dpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDevice.dpid)
}

// optional string brand = 4;
inline bool PBDevice::has_brand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBDevice::set_has_brand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBDevice::clear_has_brand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBDevice::clear_brand() {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_->clear();
  }
  clear_has_brand();
}
inline const ::std::string& PBDevice::brand() const {
  // @@protoc_insertion_point(field_get:PBDevice.brand)
  return *brand_;
}
inline void PBDevice::set_brand(const ::std::string& value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set:PBDevice.brand)
}
inline void PBDevice::set_brand(const char* value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDevice.brand)
}
inline void PBDevice::set_brand(const char* value, size_t size) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDevice.brand)
}
inline ::std::string* PBDevice::mutable_brand() {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDevice.brand)
  return brand_;
}
inline ::std::string* PBDevice::release_brand() {
  clear_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = brand_;
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDevice::set_allocated_brand(::std::string* brand) {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (brand) {
    set_has_brand();
    brand_ = brand;
  } else {
    clear_has_brand();
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDevice.brand)
}

// optional string model = 5;
inline bool PBDevice::has_model() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBDevice::set_has_model() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBDevice::clear_has_model() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBDevice::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& PBDevice::model() const {
  // @@protoc_insertion_point(field_get:PBDevice.model)
  return *model_;
}
inline void PBDevice::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:PBDevice.model)
}
inline void PBDevice::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDevice.model)
}
inline void PBDevice::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDevice.model)
}
inline ::std::string* PBDevice::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDevice.model)
  return model_;
}
inline ::std::string* PBDevice::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDevice::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDevice.model)
}

// optional int32 os = 6;
inline bool PBDevice::has_os() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBDevice::set_has_os() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBDevice::clear_has_os() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBDevice::clear_os() {
  os_ = 0;
  clear_has_os();
}
inline ::google::protobuf::int32 PBDevice::os() const {
  // @@protoc_insertion_point(field_get:PBDevice.os)
  return os_;
}
inline void PBDevice::set_os(::google::protobuf::int32 value) {
  set_has_os();
  os_ = value;
  // @@protoc_insertion_point(field_set:PBDevice.os)
}

// optional string osv = 7;
inline bool PBDevice::has_osv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBDevice::set_has_osv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBDevice::clear_has_osv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBDevice::clear_osv() {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_->clear();
  }
  clear_has_osv();
}
inline const ::std::string& PBDevice::osv() const {
  // @@protoc_insertion_point(field_get:PBDevice.osv)
  return *osv_;
}
inline void PBDevice::set_osv(const ::std::string& value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set:PBDevice.osv)
}
inline void PBDevice::set_osv(const char* value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDevice.osv)
}
inline void PBDevice::set_osv(const char* value, size_t size) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDevice.osv)
}
inline ::std::string* PBDevice::mutable_osv() {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDevice.osv)
  return osv_;
}
inline ::std::string* PBDevice::release_osv() {
  clear_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = osv_;
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDevice::set_allocated_osv(::std::string* osv) {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (osv) {
    set_has_osv();
    osv_ = osv;
  } else {
    clear_has_osv();
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDevice.osv)
}

// optional int32 connectiontype = 8;
inline bool PBDevice::has_connectiontype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBDevice::set_has_connectiontype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBDevice::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBDevice::clear_connectiontype() {
  connectiontype_ = 0;
  clear_has_connectiontype();
}
inline ::google::protobuf::int32 PBDevice::connectiontype() const {
  // @@protoc_insertion_point(field_get:PBDevice.connectiontype)
  return connectiontype_;
}
inline void PBDevice::set_connectiontype(::google::protobuf::int32 value) {
  set_has_connectiontype();
  connectiontype_ = value;
  // @@protoc_insertion_point(field_set:PBDevice.connectiontype)
}

// optional int32 devicetype = 9;
inline bool PBDevice::has_devicetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBDevice::set_has_devicetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBDevice::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBDevice::clear_devicetype() {
  devicetype_ = 0;
  clear_has_devicetype();
}
inline ::google::protobuf::int32 PBDevice::devicetype() const {
  // @@protoc_insertion_point(field_get:PBDevice.devicetype)
  return devicetype_;
}
inline void PBDevice::set_devicetype(::google::protobuf::int32 value) {
  set_has_devicetype();
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:PBDevice.devicetype)
}

// optional int32 w = 10;
inline bool PBDevice::has_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBDevice::set_has_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBDevice::clear_has_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBDevice::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 PBDevice::w() const {
  // @@protoc_insertion_point(field_get:PBDevice.w)
  return w_;
}
inline void PBDevice::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:PBDevice.w)
}

// optional int32 h = 11;
inline bool PBDevice::has_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBDevice::set_has_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBDevice::clear_has_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBDevice::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 PBDevice::h() const {
  // @@protoc_insertion_point(field_get:PBDevice.h)
  return h_;
}
inline void PBDevice::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:PBDevice.h)
}

// optional string ip = 12;
inline bool PBDevice::has_ip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBDevice::set_has_ip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBDevice::clear_has_ip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBDevice::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBDevice::ip() const {
  // @@protoc_insertion_point(field_get:PBDevice.ip)
  return *ip_;
}
inline void PBDevice::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:PBDevice.ip)
}
inline void PBDevice::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDevice.ip)
}
inline void PBDevice::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDevice.ip)
}
inline ::std::string* PBDevice::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDevice.ip)
  return ip_;
}
inline ::std::string* PBDevice::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDevice::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDevice.ip)
}

// optional string ua = 13;
inline bool PBDevice::has_ua() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PBDevice::set_has_ua() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PBDevice::clear_has_ua() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PBDevice::clear_ua() {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_->clear();
  }
  clear_has_ua();
}
inline const ::std::string& PBDevice::ua() const {
  // @@protoc_insertion_point(field_get:PBDevice.ua)
  return *ua_;
}
inline void PBDevice::set_ua(const ::std::string& value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set:PBDevice.ua)
}
inline void PBDevice::set_ua(const char* value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDevice.ua)
}
inline void PBDevice::set_ua(const char* value, size_t size) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDevice.ua)
}
inline ::std::string* PBDevice::mutable_ua() {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDevice.ua)
  return ua_;
}
inline ::std::string* PBDevice::release_ua() {
  clear_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_;
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDevice::set_allocated_ua(::std::string* ua) {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (ua) {
    set_has_ua();
    ua_ = ua;
  } else {
    clear_has_ua();
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDevice.ua)
}

// -------------------------------------------------------------------

// PBUser

// optional string id = 1;
inline bool PBUser::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBUser::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBUser::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBUser::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PBUser::id() const {
  // @@protoc_insertion_point(field_get:PBUser.id)
  return *id_;
}
inline void PBUser::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PBUser.id)
}
inline void PBUser::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBUser.id)
}
inline void PBUser::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBUser.id)
}
inline ::std::string* PBUser::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBUser.id)
  return id_;
}
inline ::std::string* PBUser::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBUser::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBUser.id)
}

// optional int32 gender = 2;
inline bool PBUser::has_gender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBUser::set_has_gender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBUser::clear_has_gender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBUser::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 PBUser::gender() const {
  // @@protoc_insertion_point(field_get:PBUser.gender)
  return gender_;
}
inline void PBUser::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:PBUser.gender)
}

// optional int32 yob = 3;
inline bool PBUser::has_yob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBUser::set_has_yob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBUser::clear_has_yob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBUser::clear_yob() {
  yob_ = 0;
  clear_has_yob();
}
inline ::google::protobuf::int32 PBUser::yob() const {
  // @@protoc_insertion_point(field_get:PBUser.yob)
  return yob_;
}
inline void PBUser::set_yob(::google::protobuf::int32 value) {
  set_has_yob();
  yob_ = value;
  // @@protoc_insertion_point(field_set:PBUser.yob)
}

// optional string keywords = 4;
inline bool PBUser::has_keywords() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBUser::set_has_keywords() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBUser::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBUser::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& PBUser::keywords() const {
  // @@protoc_insertion_point(field_get:PBUser.keywords)
  return *keywords_;
}
inline void PBUser::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:PBUser.keywords)
}
inline void PBUser::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBUser.keywords)
}
inline void PBUser::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBUser.keywords)
}
inline ::std::string* PBUser::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBUser.keywords)
  return keywords_;
}
inline ::std::string* PBUser::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBUser::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBUser.keywords)
}

// optional .PBGeo geo = 5;
inline bool PBUser::has_geo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBUser::set_has_geo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBUser::clear_has_geo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBUser::clear_geo() {
  if (geo_ != NULL) geo_->::PBGeo::Clear();
  clear_has_geo();
}
inline const ::PBGeo& PBUser::geo() const {
  // @@protoc_insertion_point(field_get:PBUser.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::PBGeo* PBUser::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::PBGeo;
  // @@protoc_insertion_point(field_mutable:PBUser.geo)
  return geo_;
}
inline ::PBGeo* PBUser::release_geo() {
  clear_has_geo();
  ::PBGeo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void PBUser::set_allocated_geo(::PBGeo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:PBUser.geo)
}

// optional string searchkey = 6;
inline bool PBUser::has_searchkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBUser::set_has_searchkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBUser::clear_has_searchkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBUser::clear_searchkey() {
  if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_->clear();
  }
  clear_has_searchkey();
}
inline const ::std::string& PBUser::searchkey() const {
  // @@protoc_insertion_point(field_get:PBUser.searchkey)
  return *searchkey_;
}
inline void PBUser::set_searchkey(const ::std::string& value) {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_ = new ::std::string;
  }
  searchkey_->assign(value);
  // @@protoc_insertion_point(field_set:PBUser.searchkey)
}
inline void PBUser::set_searchkey(const char* value) {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_ = new ::std::string;
  }
  searchkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBUser.searchkey)
}
inline void PBUser::set_searchkey(const char* value, size_t size) {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_ = new ::std::string;
  }
  searchkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBUser.searchkey)
}
inline ::std::string* PBUser::mutable_searchkey() {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    searchkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBUser.searchkey)
  return searchkey_;
}
inline ::std::string* PBUser::release_searchkey() {
  clear_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = searchkey_;
    searchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBUser::set_allocated_searchkey(::std::string* searchkey) {
  if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchkey_;
  }
  if (searchkey) {
    set_has_searchkey();
    searchkey_ = searchkey;
  } else {
    clear_has_searchkey();
    searchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBUser.searchkey)
}

// -------------------------------------------------------------------

// PBImpressionExt

// optional int32 splash = 1;
inline bool PBImpressionExt::has_splash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBImpressionExt::set_has_splash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBImpressionExt::clear_has_splash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBImpressionExt::clear_splash() {
  splash_ = 0;
  clear_has_splash();
}
inline ::google::protobuf::int32 PBImpressionExt::splash() const {
  // @@protoc_insertion_point(field_get:PBImpressionExt.splash)
  return splash_;
}
inline void PBImpressionExt::set_splash(::google::protobuf::int32 value) {
  set_has_splash();
  splash_ = value;
  // @@protoc_insertion_point(field_set:PBImpressionExt.splash)
}

// -------------------------------------------------------------------

// PBBid

// required string impid = 1;
inline bool PBBid::has_impid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBid::set_has_impid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBid::clear_has_impid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBid::clear_impid() {
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_->clear();
  }
  clear_has_impid();
}
inline const ::std::string& PBBid::impid() const {
  // @@protoc_insertion_point(field_get:PBBid.impid)
  return *impid_;
}
inline void PBBid::set_impid(const ::std::string& value) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
  // @@protoc_insertion_point(field_set:PBBid.impid)
}
inline void PBBid::set_impid(const char* value) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBBid.impid)
}
inline void PBBid::set_impid(const char* value, size_t size) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBBid.impid)
}
inline ::std::string* PBBid::mutable_impid() {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBBid.impid)
  return impid_;
}
inline ::std::string* PBBid::release_impid() {
  clear_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = impid_;
    impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBBid::set_allocated_impid(::std::string* impid) {
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impid_;
  }
  if (impid) {
    set_has_impid();
    impid_ = impid;
  } else {
    clear_has_impid();
    impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBBid.impid)
}

// optional double bid_price = 2;
inline bool PBBid::has_bid_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBid::set_has_bid_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBid::clear_has_bid_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBid::clear_bid_price() {
  bid_price_ = 0;
  clear_has_bid_price();
}
inline double PBBid::bid_price() const {
  // @@protoc_insertion_point(field_get:PBBid.bid_price)
  return bid_price_;
}
inline void PBBid::set_bid_price(double value) {
  set_has_bid_price();
  bid_price_ = value;
  // @@protoc_insertion_point(field_set:PBBid.bid_price)
}

// optional string adid = 3;
inline bool PBBid::has_adid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBBid::set_has_adid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBBid::clear_has_adid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBBid::clear_adid() {
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_->clear();
  }
  clear_has_adid();
}
inline const ::std::string& PBBid::adid() const {
  // @@protoc_insertion_point(field_get:PBBid.adid)
  return *adid_;
}
inline void PBBid::set_adid(const ::std::string& value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
  // @@protoc_insertion_point(field_set:PBBid.adid)
}
inline void PBBid::set_adid(const char* value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBBid.adid)
}
inline void PBBid::set_adid(const char* value, size_t size) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  adid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBBid.adid)
}
inline ::std::string* PBBid::mutable_adid() {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBBid.adid)
  return adid_;
}
inline ::std::string* PBBid::release_adid() {
  clear_has_adid();
  if (adid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adid_;
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBBid::set_allocated_adid(::std::string* adid) {
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adid_;
  }
  if (adid) {
    set_has_adid();
    adid_ = adid;
  } else {
    clear_has_adid();
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBBid.adid)
}

// optional string extdata = 4;
inline bool PBBid::has_extdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBBid::set_has_extdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBBid::clear_has_extdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBBid::clear_extdata() {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_->clear();
  }
  clear_has_extdata();
}
inline const ::std::string& PBBid::extdata() const {
  // @@protoc_insertion_point(field_get:PBBid.extdata)
  return *extdata_;
}
inline void PBBid::set_extdata(const ::std::string& value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set:PBBid.extdata)
}
inline void PBBid::set_extdata(const char* value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBBid.extdata)
}
inline void PBBid::set_extdata(const char* value, size_t size) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBBid.extdata)
}
inline ::std::string* PBBid::mutable_extdata() {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBBid.extdata)
  return extdata_;
}
inline ::std::string* PBBid::release_extdata() {
  clear_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extdata_;
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBBid::set_allocated_extdata(::std::string* extdata) {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (extdata) {
    set_has_extdata();
    extdata_ = extdata;
  } else {
    clear_has_extdata();
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBBid.extdata)
}

// -------------------------------------------------------------------

// PBSeatBid

// repeated .PBBid bid = 1;
inline int PBSeatBid::bid_size() const {
  return bid_.size();
}
inline void PBSeatBid::clear_bid() {
  bid_.Clear();
}
inline const ::PBBid& PBSeatBid::bid(int index) const {
  // @@protoc_insertion_point(field_get:PBSeatBid.bid)
  return bid_.Get(index);
}
inline ::PBBid* PBSeatBid::mutable_bid(int index) {
  // @@protoc_insertion_point(field_mutable:PBSeatBid.bid)
  return bid_.Mutable(index);
}
inline ::PBBid* PBSeatBid::add_bid() {
  // @@protoc_insertion_point(field_add:PBSeatBid.bid)
  return bid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBBid >&
PBSeatBid::bid() const {
  // @@protoc_insertion_point(field_list:PBSeatBid.bid)
  return bid_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBBid >*
PBSeatBid::mutable_bid() {
  // @@protoc_insertion_point(field_mutable_list:PBSeatBid.bid)
  return &bid_;
}

// -------------------------------------------------------------------

// PBImpression

// required string id = 1;
inline bool PBImpression::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBImpression::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBImpression::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBImpression::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PBImpression::id() const {
  // @@protoc_insertion_point(field_get:PBImpression.id)
  return *id_;
}
inline void PBImpression::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PBImpression.id)
}
inline void PBImpression::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBImpression.id)
}
inline void PBImpression::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBImpression.id)
}
inline ::std::string* PBImpression::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBImpression.id)
  return id_;
}
inline ::std::string* PBImpression::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBImpression::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBImpression.id)
}

// optional .PBBanner banner = 2;
inline bool PBImpression::has_banner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBImpression::set_has_banner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBImpression::clear_has_banner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBImpression::clear_banner() {
  if (banner_ != NULL) banner_->::PBBanner::Clear();
  clear_has_banner();
}
inline const ::PBBanner& PBImpression::banner() const {
  // @@protoc_insertion_point(field_get:PBImpression.banner)
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::PBBanner* PBImpression::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) banner_ = new ::PBBanner;
  // @@protoc_insertion_point(field_mutable:PBImpression.banner)
  return banner_;
}
inline ::PBBanner* PBImpression::release_banner() {
  clear_has_banner();
  ::PBBanner* temp = banner_;
  banner_ = NULL;
  return temp;
}
inline void PBImpression::set_allocated_banner(::PBBanner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:PBImpression.banner)
}

// optional string bidfloorcur = 3;
inline bool PBImpression::has_bidfloorcur() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBImpression::set_has_bidfloorcur() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBImpression::clear_has_bidfloorcur() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBImpression::clear_bidfloorcur() {
  if (bidfloorcur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_->clear();
  }
  clear_has_bidfloorcur();
}
inline const ::std::string& PBImpression::bidfloorcur() const {
  // @@protoc_insertion_point(field_get:PBImpression.bidfloorcur)
  return *bidfloorcur_;
}
inline void PBImpression::set_bidfloorcur(const ::std::string& value) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(value);
  // @@protoc_insertion_point(field_set:PBImpression.bidfloorcur)
}
inline void PBImpression::set_bidfloorcur(const char* value) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBImpression.bidfloorcur)
}
inline void PBImpression::set_bidfloorcur(const char* value, size_t size) {
  set_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_ = new ::std::string;
  }
  bidfloorcur_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBImpression.bidfloorcur)
}
inline ::std::string* PBImpression::mutable_bidfloorcur() {
  set_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidfloorcur_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBImpression.bidfloorcur)
  return bidfloorcur_;
}
inline ::std::string* PBImpression::release_bidfloorcur() {
  clear_has_bidfloorcur();
  if (bidfloorcur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bidfloorcur_;
    bidfloorcur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBImpression::set_allocated_bidfloorcur(::std::string* bidfloorcur) {
  if (bidfloorcur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidfloorcur_;
  }
  if (bidfloorcur) {
    set_has_bidfloorcur();
    bidfloorcur_ = bidfloorcur;
  } else {
    clear_has_bidfloorcur();
    bidfloorcur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBImpression.bidfloorcur)
}

// optional double bidfloor = 4;
inline bool PBImpression::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBImpression::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBImpression::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBImpression::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
inline double PBImpression::bidfloor() const {
  // @@protoc_insertion_point(field_get:PBImpression.bidfloor)
  return bidfloor_;
}
inline void PBImpression::set_bidfloor(double value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:PBImpression.bidfloor)
}

// optional int32 instl = 5;
inline bool PBImpression::has_instl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBImpression::set_has_instl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBImpression::clear_has_instl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBImpression::clear_instl() {
  instl_ = 0;
  clear_has_instl();
}
inline ::google::protobuf::int32 PBImpression::instl() const {
  // @@protoc_insertion_point(field_get:PBImpression.instl)
  return instl_;
}
inline void PBImpression::set_instl(::google::protobuf::int32 value) {
  set_has_instl();
  instl_ = value;
  // @@protoc_insertion_point(field_set:PBImpression.instl)
}

// optional int32 adpos = 6;
inline bool PBImpression::has_adpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBImpression::set_has_adpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBImpression::clear_has_adpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBImpression::clear_adpos() {
  adpos_ = 0;
  clear_has_adpos();
}
inline ::google::protobuf::int32 PBImpression::adpos() const {
  // @@protoc_insertion_point(field_get:PBImpression.adpos)
  return adpos_;
}
inline void PBImpression::set_adpos(::google::protobuf::int32 value) {
  set_has_adpos();
  adpos_ = value;
  // @@protoc_insertion_point(field_set:PBImpression.adpos)
}

// optional int32 secure = 7;
inline bool PBImpression::has_secure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBImpression::set_has_secure() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBImpression::clear_has_secure() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBImpression::clear_secure() {
  secure_ = 0;
  clear_has_secure();
}
inline ::google::protobuf::int32 PBImpression::secure() const {
  // @@protoc_insertion_point(field_get:PBImpression.secure)
  return secure_;
}
inline void PBImpression::set_secure(::google::protobuf::int32 value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:PBImpression.secure)
}

// optional int32 is_clickable = 8;
inline bool PBImpression::has_is_clickable() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBImpression::set_has_is_clickable() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBImpression::clear_has_is_clickable() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBImpression::clear_is_clickable() {
  is_clickable_ = 0;
  clear_has_is_clickable();
}
inline ::google::protobuf::int32 PBImpression::is_clickable() const {
  // @@protoc_insertion_point(field_get:PBImpression.is_clickable)
  return is_clickable_;
}
inline void PBImpression::set_is_clickable(::google::protobuf::int32 value) {
  set_has_is_clickable();
  is_clickable_ = value;
  // @@protoc_insertion_point(field_set:PBImpression.is_clickable)
}

// repeated int32 ctype = 9;
inline int PBImpression::ctype_size() const {
  return ctype_.size();
}
inline void PBImpression::clear_ctype() {
  ctype_.Clear();
}
inline ::google::protobuf::int32 PBImpression::ctype(int index) const {
  // @@protoc_insertion_point(field_get:PBImpression.ctype)
  return ctype_.Get(index);
}
inline void PBImpression::set_ctype(int index, ::google::protobuf::int32 value) {
  ctype_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBImpression.ctype)
}
inline void PBImpression::add_ctype(::google::protobuf::int32 value) {
  ctype_.Add(value);
  // @@protoc_insertion_point(field_add:PBImpression.ctype)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBImpression::ctype() const {
  // @@protoc_insertion_point(field_list:PBImpression.ctype)
  return ctype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBImpression::mutable_ctype() {
  // @@protoc_insertion_point(field_mutable_list:PBImpression.ctype)
  return &ctype_;
}

// optional .PBImpressionExt ext = 10;
inline bool PBImpression::has_ext() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBImpression::set_has_ext() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBImpression::clear_has_ext() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBImpression::clear_ext() {
  if (ext_ != NULL) ext_->::PBImpressionExt::Clear();
  clear_has_ext();
}
inline const ::PBImpressionExt& PBImpression::ext() const {
  // @@protoc_insertion_point(field_get:PBImpression.ext)
  return ext_ != NULL ? *ext_ : *default_instance_->ext_;
}
inline ::PBImpressionExt* PBImpression::mutable_ext() {
  set_has_ext();
  if (ext_ == NULL) ext_ = new ::PBImpressionExt;
  // @@protoc_insertion_point(field_mutable:PBImpression.ext)
  return ext_;
}
inline ::PBImpressionExt* PBImpression::release_ext() {
  clear_has_ext();
  ::PBImpressionExt* temp = ext_;
  ext_ = NULL;
  return temp;
}
inline void PBImpression::set_allocated_ext(::PBImpressionExt* ext) {
  delete ext_;
  ext_ = ext;
  if (ext) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  // @@protoc_insertion_point(field_set_allocated:PBImpression.ext)
}

// -------------------------------------------------------------------

// PBBidRequest

// required string id = 1;
inline bool PBBidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBidRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PBBidRequest::id() const {
  // @@protoc_insertion_point(field_get:PBBidRequest.id)
  return *id_;
}
inline void PBBidRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PBBidRequest.id)
}
inline void PBBidRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBBidRequest.id)
}
inline void PBBidRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBBidRequest.id)
}
inline ::std::string* PBBidRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBBidRequest.id)
  return id_;
}
inline ::std::string* PBBidRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBBidRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBBidRequest.id)
}

// repeated .PBImpression imp = 2;
inline int PBBidRequest::imp_size() const {
  return imp_.size();
}
inline void PBBidRequest::clear_imp() {
  imp_.Clear();
}
inline const ::PBImpression& PBBidRequest::imp(int index) const {
  // @@protoc_insertion_point(field_get:PBBidRequest.imp)
  return imp_.Get(index);
}
inline ::PBImpression* PBBidRequest::mutable_imp(int index) {
  // @@protoc_insertion_point(field_mutable:PBBidRequest.imp)
  return imp_.Mutable(index);
}
inline ::PBImpression* PBBidRequest::add_imp() {
  // @@protoc_insertion_point(field_add:PBBidRequest.imp)
  return imp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBImpression >&
PBBidRequest::imp() const {
  // @@protoc_insertion_point(field_list:PBBidRequest.imp)
  return imp_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBImpression >*
PBBidRequest::mutable_imp() {
  // @@protoc_insertion_point(field_mutable_list:PBBidRequest.imp)
  return &imp_;
}

// optional .PBApp app = 3;
inline bool PBBidRequest::has_app() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBBidRequest::set_has_app() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBBidRequest::clear_has_app() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBBidRequest::clear_app() {
  if (app_ != NULL) app_->::PBApp::Clear();
  clear_has_app();
}
inline const ::PBApp& PBBidRequest::app() const {
  // @@protoc_insertion_point(field_get:PBBidRequest.app)
  return app_ != NULL ? *app_ : *default_instance_->app_;
}
inline ::PBApp* PBBidRequest::mutable_app() {
  set_has_app();
  if (app_ == NULL) app_ = new ::PBApp;
  // @@protoc_insertion_point(field_mutable:PBBidRequest.app)
  return app_;
}
inline ::PBApp* PBBidRequest::release_app() {
  clear_has_app();
  ::PBApp* temp = app_;
  app_ = NULL;
  return temp;
}
inline void PBBidRequest::set_allocated_app(::PBApp* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:PBBidRequest.app)
}

// optional .PBDevice device = 4;
inline bool PBBidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBBidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBBidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBBidRequest::clear_device() {
  if (device_ != NULL) device_->::PBDevice::Clear();
  clear_has_device();
}
inline const ::PBDevice& PBBidRequest::device() const {
  // @@protoc_insertion_point(field_get:PBBidRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::PBDevice* PBBidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::PBDevice;
  // @@protoc_insertion_point(field_mutable:PBBidRequest.device)
  return device_;
}
inline ::PBDevice* PBBidRequest::release_device() {
  clear_has_device();
  ::PBDevice* temp = device_;
  device_ = NULL;
  return temp;
}
inline void PBBidRequest::set_allocated_device(::PBDevice* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:PBBidRequest.device)
}

// optional .PBUser user = 5;
inline bool PBBidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBBidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBBidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBBidRequest::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBBidRequest::user() const {
  // @@protoc_insertion_point(field_get:PBBidRequest.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBBidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  // @@protoc_insertion_point(field_mutable:PBBidRequest.user)
  return user_;
}
inline ::PBUser* PBBidRequest::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void PBBidRequest::set_allocated_user(::PBUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:PBBidRequest.user)
}

// repeated int32 bcat = 6;
inline int PBBidRequest::bcat_size() const {
  return bcat_.size();
}
inline void PBBidRequest::clear_bcat() {
  bcat_.Clear();
}
inline ::google::protobuf::int32 PBBidRequest::bcat(int index) const {
  // @@protoc_insertion_point(field_get:PBBidRequest.bcat)
  return bcat_.Get(index);
}
inline void PBBidRequest::set_bcat(int index, ::google::protobuf::int32 value) {
  bcat_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBBidRequest.bcat)
}
inline void PBBidRequest::add_bcat(::google::protobuf::int32 value) {
  bcat_.Add(value);
  // @@protoc_insertion_point(field_add:PBBidRequest.bcat)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBBidRequest::bcat() const {
  // @@protoc_insertion_point(field_list:PBBidRequest.bcat)
  return bcat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBBidRequest::mutable_bcat() {
  // @@protoc_insertion_point(field_mutable_list:PBBidRequest.bcat)
  return &bcat_;
}

// repeated string badv = 7;
inline int PBBidRequest::badv_size() const {
  return badv_.size();
}
inline void PBBidRequest::clear_badv() {
  badv_.Clear();
}
inline const ::std::string& PBBidRequest::badv(int index) const {
  // @@protoc_insertion_point(field_get:PBBidRequest.badv)
  return badv_.Get(index);
}
inline ::std::string* PBBidRequest::mutable_badv(int index) {
  // @@protoc_insertion_point(field_mutable:PBBidRequest.badv)
  return badv_.Mutable(index);
}
inline void PBBidRequest::set_badv(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PBBidRequest.badv)
  badv_.Mutable(index)->assign(value);
}
inline void PBBidRequest::set_badv(int index, const char* value) {
  badv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PBBidRequest.badv)
}
inline void PBBidRequest::set_badv(int index, const char* value, size_t size) {
  badv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBBidRequest.badv)
}
inline ::std::string* PBBidRequest::add_badv() {
  return badv_.Add();
}
inline void PBBidRequest::add_badv(const ::std::string& value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PBBidRequest.badv)
}
inline void PBBidRequest::add_badv(const char* value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PBBidRequest.badv)
}
inline void PBBidRequest::add_badv(const char* value, size_t size) {
  badv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PBBidRequest.badv)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBBidRequest::badv() const {
  // @@protoc_insertion_point(field_list:PBBidRequest.badv)
  return badv_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBBidRequest::mutable_badv() {
  // @@protoc_insertion_point(field_mutable_list:PBBidRequest.badv)
  return &badv_;
}

// -------------------------------------------------------------------

// PBBidResponse

// required string id = 1;
inline bool PBBidResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBidResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBidResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBidResponse::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PBBidResponse::id() const {
  // @@protoc_insertion_point(field_get:PBBidResponse.id)
  return *id_;
}
inline void PBBidResponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PBBidResponse.id)
}
inline void PBBidResponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBBidResponse.id)
}
inline void PBBidResponse::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBBidResponse.id)
}
inline ::std::string* PBBidResponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBBidResponse.id)
  return id_;
}
inline ::std::string* PBBidResponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBBidResponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBBidResponse.id)
}

// repeated .PBSeatBid seatbid = 2;
inline int PBBidResponse::seatbid_size() const {
  return seatbid_.size();
}
inline void PBBidResponse::clear_seatbid() {
  seatbid_.Clear();
}
inline const ::PBSeatBid& PBBidResponse::seatbid(int index) const {
  // @@protoc_insertion_point(field_get:PBBidResponse.seatbid)
  return seatbid_.Get(index);
}
inline ::PBSeatBid* PBBidResponse::mutable_seatbid(int index) {
  // @@protoc_insertion_point(field_mutable:PBBidResponse.seatbid)
  return seatbid_.Mutable(index);
}
inline ::PBSeatBid* PBBidResponse::add_seatbid() {
  // @@protoc_insertion_point(field_add:PBBidResponse.seatbid)
  return seatbid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSeatBid >&
PBBidResponse::seatbid() const {
  // @@protoc_insertion_point(field_list:PBBidResponse.seatbid)
  return seatbid_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSeatBid >*
PBBidResponse::mutable_seatbid() {
  // @@protoc_insertion_point(field_mutable_list:PBBidResponse.seatbid)
  return &seatbid_;
}

// optional string bidid = 3;
inline bool PBBidResponse::has_bidid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBBidResponse::set_has_bidid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBBidResponse::clear_has_bidid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBBidResponse::clear_bidid() {
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_->clear();
  }
  clear_has_bidid();
}
inline const ::std::string& PBBidResponse::bidid() const {
  // @@protoc_insertion_point(field_get:PBBidResponse.bidid)
  return *bidid_;
}
inline void PBBidResponse::set_bidid(const ::std::string& value) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
  // @@protoc_insertion_point(field_set:PBBidResponse.bidid)
}
inline void PBBidResponse::set_bidid(const char* value) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBBidResponse.bidid)
}
inline void PBBidResponse::set_bidid(const char* value, size_t size) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBBidResponse.bidid)
}
inline ::std::string* PBBidResponse::mutable_bidid() {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBBidResponse.bidid)
  return bidid_;
}
inline ::std::string* PBBidResponse::release_bidid() {
  clear_has_bidid();
  if (bidid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bidid_;
    bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBBidResponse::set_allocated_bidid(::std::string* bidid) {
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidid_;
  }
  if (bidid) {
    set_has_bidid();
    bidid_ = bidid;
  } else {
    clear_has_bidid();
    bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBBidResponse.bidid)
}

// optional string cur = 4;
inline bool PBBidResponse::has_cur() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBBidResponse::set_has_cur() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBBidResponse::clear_has_cur() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBBidResponse::clear_cur() {
  if (cur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_->clear();
  }
  clear_has_cur();
}
inline const ::std::string& PBBidResponse::cur() const {
  // @@protoc_insertion_point(field_get:PBBidResponse.cur)
  return *cur_;
}
inline void PBBidResponse::set_cur(const ::std::string& value) {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_ = new ::std::string;
  }
  cur_->assign(value);
  // @@protoc_insertion_point(field_set:PBBidResponse.cur)
}
inline void PBBidResponse::set_cur(const char* value) {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_ = new ::std::string;
  }
  cur_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBBidResponse.cur)
}
inline void PBBidResponse::set_cur(const char* value, size_t size) {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_ = new ::std::string;
  }
  cur_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBBidResponse.cur)
}
inline ::std::string* PBBidResponse::mutable_cur() {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBBidResponse.cur)
  return cur_;
}
inline ::std::string* PBBidResponse::release_cur() {
  clear_has_cur();
  if (cur_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cur_;
    cur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBBidResponse::set_allocated_cur(::std::string* cur) {
  if (cur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cur_;
  }
  if (cur) {
    set_has_cur();
    cur_ = cur;
  } else {
    clear_has_cur();
    cur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBBidResponse.cur)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pxene_2dbidding_2eproto__INCLUDED

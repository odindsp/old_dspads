// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tanx-bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tanx-bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Tanx {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Content_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdzInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_BuyerRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdzInfo_BuyerRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdzInfo_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_Deal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdzInfo_Deal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Deal_DealType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Location_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_ViewScreen_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_UserAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_UserAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_PrivateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_PrivateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_Device_ScreenOrientation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_AppCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_AppCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_NativeAdTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_Area_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_NativeAdTemplate_Area_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_NativeAdTemplate_Area_Creative_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_ContentCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_ContentCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_Content_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Deal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Deal_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Deal_PreferredDeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Deal_PreferredDeal_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Deal_PrivateAuction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Deal_PrivateAuction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Deal_PrivateAuction_BuyerRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_CrowdCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_CrowdCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ads_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ads_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ads_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ads_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResult_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResult_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Creative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Creative_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Creative_Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Creative_Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Creative_TrackingEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Creative_TrackingEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Area_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Area_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tanx_2dbidding_2eproto() {
  protobuf_AddDesc_tanx_2dbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tanx-bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, timezone_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tid_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adx_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, anonymous_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, category_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adzinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_sensitive_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_ad_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, hosted_match_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, private_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, content_categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, crowd_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_predicted_to_be_ignored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, https_required_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  BidRequest_Content_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_Content_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, keywords_),
  };
  BidRequest_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Content_descriptor_,
      BidRequest_Content::default_instance_,
      BidRequest_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Content));
  BidRequest_AdzInfo_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_AdzInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, publisher_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, ad_bid_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, view_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, excluded_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, min_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, adz_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, view_screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, page_session_ad_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, buyer_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, allowed_creative_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, publisher_filter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, auto_expandable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, trigger_expandable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, impression_repeatable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, campaign_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, deals_),
  };
  BidRequest_AdzInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdzInfo_descriptor_,
      BidRequest_AdzInfo::default_instance_,
      BidRequest_AdzInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdzInfo));
  BidRequest_AdzInfo_BuyerRule_descriptor_ = BidRequest_AdzInfo_descriptor_->nested_type(0);
  static const int BidRequest_AdzInfo_BuyerRule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_BuyerRule, advertiser_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_BuyerRule, min_cpm_price_),
  };
  BidRequest_AdzInfo_BuyerRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdzInfo_BuyerRule_descriptor_,
      BidRequest_AdzInfo_BuyerRule::default_instance_,
      BidRequest_AdzInfo_BuyerRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_BuyerRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_BuyerRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdzInfo_BuyerRule));
  BidRequest_AdzInfo_Video_descriptor_ = BidRequest_AdzInfo_descriptor_->nested_type(1);
  static const int BidRequest_AdzInfo_Video_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Video, videoad_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Video, videoad_section_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Video, min_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Video, max_ad_duration_),
  };
  BidRequest_AdzInfo_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdzInfo_Video_descriptor_,
      BidRequest_AdzInfo_Video::default_instance_,
      BidRequest_AdzInfo_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdzInfo_Video));
  BidRequest_AdzInfo_Deal_descriptor_ = BidRequest_AdzInfo_descriptor_->nested_type(2);
  static const int BidRequest_AdzInfo_Deal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Deal, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Deal, deal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Deal, advertiser_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Deal, price_),
  };
  BidRequest_AdzInfo_Deal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdzInfo_Deal_descriptor_,
      BidRequest_AdzInfo_Deal::default_instance_,
      BidRequest_AdzInfo_Deal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Deal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_Deal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdzInfo_Deal));
  BidRequest_AdzInfo_Deal_DealType_descriptor_ = BidRequest_AdzInfo_Deal_descriptor_->enum_type(0);
  BidRequest_AdzInfo_Location_descriptor_ = BidRequest_AdzInfo_descriptor_->enum_type(0);
  BidRequest_AdzInfo_ViewScreen_descriptor_ = BidRequest_AdzInfo_descriptor_->enum_type(1);
  BidRequest_UserAttribute_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_UserAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, timestamp_),
  };
  BidRequest_UserAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_UserAttribute_descriptor_,
      BidRequest_UserAttribute::default_instance_,
      BidRequest_UserAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_UserAttribute));
  BidRequest_PrivateInfo_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_PrivateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, tanx_cnaui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, risk_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, nick_name_),
  };
  BidRequest_PrivateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_PrivateInfo_descriptor_,
      BidRequest_PrivateInfo::default_instance_,
      BidRequest_PrivateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_PrivateInfo));
  BidRequest_Mobile_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_Mobile_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, ad_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, ad_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_fullscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, package_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, native_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, landing_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, native_ad_template_),
  };
  BidRequest_Mobile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_descriptor_,
      BidRequest_Mobile::default_instance_,
      BidRequest_Mobile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile));
  BidRequest_Mobile_Device_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_Device_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, device_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, device_pixel_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, screen_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, android_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, mac_),
  };
  BidRequest_Mobile_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_Device_descriptor_,
      BidRequest_Mobile_Device::default_instance_,
      BidRequest_Mobile_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_Device));
  BidRequest_Mobile_Device_ScreenOrientation_descriptor_ = BidRequest_Mobile_Device_descriptor_->enum_type(0);
  BidRequest_Mobile_AppCategory_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(1);
  static const int BidRequest_Mobile_AppCategory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_AppCategory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_AppCategory, confidence_level_),
  };
  BidRequest_Mobile_AppCategory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_AppCategory_descriptor_,
      BidRequest_Mobile_AppCategory::default_instance_,
      BidRequest_Mobile_AppCategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_AppCategory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_AppCategory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_AppCategory));
  BidRequest_Mobile_NativeAdTemplate_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(2);
  static const int BidRequest_Mobile_NativeAdTemplate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate, native_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate, areas_),
  };
  BidRequest_Mobile_NativeAdTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_NativeAdTemplate_descriptor_,
      BidRequest_Mobile_NativeAdTemplate::default_instance_,
      BidRequest_Mobile_NativeAdTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_NativeAdTemplate));
  BidRequest_Mobile_NativeAdTemplate_Area_descriptor_ = BidRequest_Mobile_NativeAdTemplate_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_NativeAdTemplate_Area_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, creative_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, creative_),
  };
  BidRequest_Mobile_NativeAdTemplate_Area_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_NativeAdTemplate_Area_descriptor_,
      BidRequest_Mobile_NativeAdTemplate_Area::default_instance_,
      BidRequest_Mobile_NativeAdTemplate_Area_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_NativeAdTemplate_Area));
  BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_ = BidRequest_Mobile_NativeAdTemplate_Area_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_NativeAdTemplate_Area_Creative_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, required_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, recommended_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, title_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, ad_words_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, image_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, action_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, multichoice_fields_),
  };
  BidRequest_Mobile_NativeAdTemplate_Area_Creative_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_,
      BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_,
      BidRequest_Mobile_NativeAdTemplate_Area_Creative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_NativeAdTemplate_Area_Creative));
  BidRequest_ContentCategory_descriptor_ = BidRequest_descriptor_->nested_type(5);
  static const int BidRequest_ContentCategory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, confidence_level_),
  };
  BidRequest_ContentCategory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_ContentCategory_descriptor_,
      BidRequest_ContentCategory::default_instance_,
      BidRequest_ContentCategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_ContentCategory));
  BidRequest_Video_descriptor_ = BidRequest_descriptor_->nested_type(6);
  static const int BidRequest_Video_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, video_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, videoad_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, videoad_section_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, min_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, max_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, protocol_),
  };
  BidRequest_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Video_descriptor_,
      BidRequest_Video::default_instance_,
      BidRequest_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Video));
  BidRequest_Video_Content_descriptor_ = BidRequest_Video_descriptor_->nested_type(0);
  static const int BidRequest_Video_Content_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, keywords_),
  };
  BidRequest_Video_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Video_Content_descriptor_,
      BidRequest_Video_Content::default_instance_,
      BidRequest_Video_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Video_Content));
  BidRequest_Video_VideoFormat_descriptor_ = BidRequest_Video_descriptor_->enum_type(0);
  BidRequest_Deal_descriptor_ = BidRequest_descriptor_->nested_type(7);
  static const int BidRequest_Deal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal, prefer_deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal, priv_auc_),
  };
  BidRequest_Deal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Deal_descriptor_,
      BidRequest_Deal::default_instance_,
      BidRequest_Deal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Deal));
  BidRequest_Deal_PreferredDeal_descriptor_ = BidRequest_Deal_descriptor_->nested_type(0);
  static const int BidRequest_Deal_PreferredDeal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, advertiser_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, fix_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, is_direct_buy_),
  };
  BidRequest_Deal_PreferredDeal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Deal_PreferredDeal_descriptor_,
      BidRequest_Deal_PreferredDeal::default_instance_,
      BidRequest_Deal_PreferredDeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Deal_PreferredDeal));
  BidRequest_Deal_PrivateAuction_descriptor_ = BidRequest_Deal_descriptor_->nested_type(1);
  static const int BidRequest_Deal_PrivateAuction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction, buyer_rules_),
  };
  BidRequest_Deal_PrivateAuction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Deal_PrivateAuction_descriptor_,
      BidRequest_Deal_PrivateAuction::default_instance_,
      BidRequest_Deal_PrivateAuction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Deal_PrivateAuction));
  BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_ = BidRequest_Deal_PrivateAuction_descriptor_->nested_type(0);
  static const int BidRequest_Deal_PrivateAuction_BuyerRule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction_BuyerRule, advertiser_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction_BuyerRule, min_cpm_price_),
  };
  BidRequest_Deal_PrivateAuction_BuyerRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_,
      BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_,
      BidRequest_Deal_PrivateAuction_BuyerRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction_BuyerRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction_BuyerRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Deal_PrivateAuction_BuyerRule));
  BidRequest_CrowdCategory_descriptor_ = BidRequest_descriptor_->nested_type(8);
  static const int BidRequest_CrowdCategory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CrowdCategory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CrowdCategory, confidence_level_),
  };
  BidRequest_CrowdCategory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_CrowdCategory_descriptor_,
      BidRequest_CrowdCategory::default_instance_,
      BidRequest_CrowdCategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CrowdCategory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CrowdCategory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_CrowdCategory));
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, ads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, is_recognized_user_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  BidResponse_Ads_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Ads_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, adzinfo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, max_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, ad_bid_count_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, html_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, network_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, extend_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, destination_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, resource_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, feedback_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, video_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, mobile_creative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, advertiser_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, download_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, winnotice_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_adaptive_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, deeplink_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, impression_tracking_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, click_tracking_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, mime_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, campaign_date_),
  };
  BidResponse_Ads_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ads_descriptor_,
      BidResponse_Ads::default_instance_,
      BidResponse_Ads_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ads));
  BidResponse_Ads_Video_descriptor_ = BidResponse_Ads_descriptor_->nested_type(0);
  static const int BidResponse_Ads_Video_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads_Video, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads_Video, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads_Video, event_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads_Video, event_midpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads_Video, event_complete_),
  };
  BidResponse_Ads_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ads_Video_descriptor_,
      BidResponse_Ads_Video::default_instance_,
      BidResponse_Ads_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ads_Video));
  BidResult_descriptor_ = file->message_type(2);
  static const int BidResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, res_),
  };
  BidResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResult_descriptor_,
      BidResult::default_instance_,
      BidResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResult));
  BidResult_Res_descriptor_ = BidResult_descriptor_->nested_type(0);
  static const int BidResult_Res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, adzinfo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, ad_bid_count_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, result_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, extend_data_),
  };
  BidResult_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResult_Res_descriptor_,
      BidResult_Res::default_instance_,
      BidResult_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResult_Res));
  MobileCreative_descriptor_ = file->message_type(3);
  static const int MobileCreative_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, view_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, creatives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, native_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, areas_),
  };
  MobileCreative_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileCreative_descriptor_,
      MobileCreative::default_instance_,
      MobileCreative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileCreative));
  MobileCreative_Creative_descriptor_ = MobileCreative_descriptor_->nested_type(0);
  static const int MobileCreative_Creative_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, img_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, img_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, click_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, destination_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, tracking_events_),
  };
  MobileCreative_Creative_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileCreative_Creative_descriptor_,
      MobileCreative_Creative::default_instance_,
      MobileCreative_Creative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileCreative_Creative));
  MobileCreative_Creative_Attr_descriptor_ = MobileCreative_Creative_descriptor_->nested_type(0);
  static const int MobileCreative_Creative_Attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, value_),
  };
  MobileCreative_Creative_Attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileCreative_Creative_Attr_descriptor_,
      MobileCreative_Creative_Attr::default_instance_,
      MobileCreative_Creative_Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileCreative_Creative_Attr));
  MobileCreative_Creative_TrackingEvents_descriptor_ = MobileCreative_Creative_descriptor_->nested_type(1);
  static const int MobileCreative_Creative_TrackingEvents_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, impression_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, click_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, download_complete_event_),
  };
  MobileCreative_Creative_TrackingEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileCreative_Creative_TrackingEvents_descriptor_,
      MobileCreative_Creative_TrackingEvents::default_instance_,
      MobileCreative_Creative_TrackingEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileCreative_Creative_TrackingEvents));
  MobileCreative_Area_descriptor_ = MobileCreative_descriptor_->nested_type(1);
  static const int MobileCreative_Area_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Area, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Area, creatives_),
  };
  MobileCreative_Area_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileCreative_Area_descriptor_,
      MobileCreative_Area::default_instance_,
      MobileCreative_Area_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Area, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Area, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileCreative_Area));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tanx_2dbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Content_descriptor_, &BidRequest_Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdzInfo_descriptor_, &BidRequest_AdzInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdzInfo_BuyerRule_descriptor_, &BidRequest_AdzInfo_BuyerRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdzInfo_Video_descriptor_, &BidRequest_AdzInfo_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdzInfo_Deal_descriptor_, &BidRequest_AdzInfo_Deal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_UserAttribute_descriptor_, &BidRequest_UserAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_PrivateInfo_descriptor_, &BidRequest_PrivateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_descriptor_, &BidRequest_Mobile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_Device_descriptor_, &BidRequest_Mobile_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_AppCategory_descriptor_, &BidRequest_Mobile_AppCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_NativeAdTemplate_descriptor_, &BidRequest_Mobile_NativeAdTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_NativeAdTemplate_Area_descriptor_, &BidRequest_Mobile_NativeAdTemplate_Area::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_, &BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_ContentCategory_descriptor_, &BidRequest_ContentCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Video_descriptor_, &BidRequest_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Video_Content_descriptor_, &BidRequest_Video_Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Deal_descriptor_, &BidRequest_Deal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Deal_PreferredDeal_descriptor_, &BidRequest_Deal_PreferredDeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Deal_PrivateAuction_descriptor_, &BidRequest_Deal_PrivateAuction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_, &BidRequest_Deal_PrivateAuction_BuyerRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_CrowdCategory_descriptor_, &BidRequest_CrowdCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ads_descriptor_, &BidResponse_Ads::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ads_Video_descriptor_, &BidResponse_Ads_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResult_descriptor_, &BidResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResult_Res_descriptor_, &BidResult_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileCreative_descriptor_, &MobileCreative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileCreative_Creative_descriptor_, &MobileCreative_Creative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileCreative_Creative_Attr_descriptor_, &MobileCreative_Creative_Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileCreative_Creative_TrackingEvents_descriptor_, &MobileCreative_Creative_TrackingEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileCreative_Area_descriptor_, &MobileCreative_Area::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tanx_2dbidding_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_Content::default_instance_;
  delete BidRequest_Content_reflection_;
  delete BidRequest_AdzInfo::default_instance_;
  delete BidRequest_AdzInfo_reflection_;
  delete BidRequest_AdzInfo_BuyerRule::default_instance_;
  delete BidRequest_AdzInfo_BuyerRule_reflection_;
  delete BidRequest_AdzInfo_Video::default_instance_;
  delete BidRequest_AdzInfo_Video_reflection_;
  delete BidRequest_AdzInfo_Deal::default_instance_;
  delete BidRequest_AdzInfo_Deal_reflection_;
  delete BidRequest_UserAttribute::default_instance_;
  delete BidRequest_UserAttribute_reflection_;
  delete BidRequest_PrivateInfo::default_instance_;
  delete BidRequest_PrivateInfo_reflection_;
  delete BidRequest_Mobile::default_instance_;
  delete BidRequest_Mobile_reflection_;
  delete BidRequest_Mobile_Device::default_instance_;
  delete BidRequest_Mobile_Device_reflection_;
  delete BidRequest_Mobile_AppCategory::default_instance_;
  delete BidRequest_Mobile_AppCategory_reflection_;
  delete BidRequest_Mobile_NativeAdTemplate::default_instance_;
  delete BidRequest_Mobile_NativeAdTemplate_reflection_;
  delete BidRequest_Mobile_NativeAdTemplate_Area::default_instance_;
  delete BidRequest_Mobile_NativeAdTemplate_Area_reflection_;
  delete BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_;
  delete BidRequest_Mobile_NativeAdTemplate_Area_Creative_reflection_;
  delete BidRequest_ContentCategory::default_instance_;
  delete BidRequest_ContentCategory_reflection_;
  delete BidRequest_Video::default_instance_;
  delete BidRequest_Video_reflection_;
  delete BidRequest_Video_Content::default_instance_;
  delete BidRequest_Video_Content_reflection_;
  delete BidRequest_Deal::default_instance_;
  delete BidRequest_Deal_reflection_;
  delete BidRequest_Deal_PreferredDeal::default_instance_;
  delete BidRequest_Deal_PreferredDeal_reflection_;
  delete BidRequest_Deal_PrivateAuction::default_instance_;
  delete BidRequest_Deal_PrivateAuction_reflection_;
  delete BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_;
  delete BidRequest_Deal_PrivateAuction_BuyerRule_reflection_;
  delete BidRequest_CrowdCategory::default_instance_;
  delete BidRequest_CrowdCategory_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Ads::default_instance_;
  delete BidResponse_Ads_reflection_;
  delete BidResponse_Ads_Video::default_instance_;
  delete BidResponse_Ads_Video_reflection_;
  delete BidResult::default_instance_;
  delete BidResult_reflection_;
  delete BidResult_Res::default_instance_;
  delete BidResult_Res_reflection_;
  delete MobileCreative::default_instance_;
  delete MobileCreative_reflection_;
  delete MobileCreative_Creative::default_instance_;
  delete MobileCreative_Creative_reflection_;
  delete MobileCreative_Creative_Attr::default_instance_;
  delete MobileCreative_Creative_Attr_reflection_;
  delete MobileCreative_Creative_TrackingEvents::default_instance_;
  delete MobileCreative_Creative_TrackingEvents_reflection_;
  delete MobileCreative_Area::default_instance_;
  delete MobileCreative_Area_reflection_;
}

void protobuf_AddDesc_tanx_2dbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022tanx-bidding.proto\022\004Tanx\"\314$\n\nBidReques"
    "t\022\017\n\007version\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t\022\022\n\007is_te"
    "st\030\013 \001(\r:\0010\022\022\n\007is_ping\030\014 \001(\r:\0010\022\013\n\003tid\030\003"
    " \001(\t\022\n\n\002ip\030\004 \001(\t\022\022\n\nuser_agent\030\005 \001(\t\022\027\n\017"
    "timezone_offset\030\r \001(\005\022\025\n\ruser_vertical\030\016"
    " \003(\005\022\023\n\013tid_version\030\023 \001(\r\022\"\n\032excluded_cl"
    "ick_through_url\030\006 \003(\t\022\013\n\003url\030\007 \001(\t\022\020\n\010ca"
    "tegory\030\010 \001(\r\022\023\n\010adx_type\030\t \001(\r:\0010\022\024\n\014ano"
    "nymous_id\030\017 \001(\t\022\031\n\021detected_language\030\020 \001"
    "(\t\022\030\n\020category_version\030\022 \001(\005\022)\n\007content\030"
    "  \001(\0132\030.Tanx.BidRequest.Content\022)\n\007adzin"
    "fo\030\n \003(\0132\030.Tanx.BidRequest.AdzInfo\022#\n\033ex"
    "cluded_sensitive_category\030\021 \003(\005\022\034\n\024exclu"
    "ded_ad_category\030\024 \003(\005\022\031\n\021hosted_match_da"
    "ta\030\025 \001(\t\0226\n\016user_attribute\030\026 \003(\0132\036.Tanx."
    "BidRequest.UserAttribute\022\027\n\017page_session"
    "_id\030\027 \001(\t\0222\n\014private_info\030\030 \003(\0132\034.Tanx.B"
    "idRequest.PrivateInfo\022\'\n\006mobile\030\031 \001(\0132\027."
    "Tanx.BidRequest.Mobile\022<\n\022content_catego"
    "ries\030\032 \003(\0132 .Tanx.BidRequest.ContentCate"
    "gory\022%\n\005video\030\033 \001(\0132\026.Tanx.BidRequest.Vi"
    "deo\022\013\n\003aid\030\034 \001(\t\022$\n\005deals\030\035 \003(\0132\025.Tanx.B"
    "idRequest.Deal\0226\n\016crowd_category\030\036 \003(\0132\036"
    ".Tanx.BidRequest.CrowdCategory\022)\n\032is_pre"
    "dicted_to_be_ignored\030\037 \001(\010:\005false\022\035\n\016htt"
    "ps_required\030! \001(\010:\005false\032<\n\007Content\022\r\n\005t"
    "itle\030\001 \001(\t\022\020\n\010duration\030\002 \001(\005\022\020\n\010keywords"
    "\030\003 \003(\t\032\361\t\n\007AdzInfo\022\n\n\002id\030\001 \002(\r\022\013\n\003pid\030\002 "
    "\002(\t\022\024\n\014publisher_id\030\013 \001(\t\022\014\n\004size\030\003 \001(\t\022"
    "\027\n\014ad_bid_count\030\004 \001(\r:\0012\022\021\n\tview_type\030\005 "
    "\003(\r\022\027\n\017excluded_filter\030\006 \003(\r\022\025\n\rmin_cpm_"
    "price\030\007 \001(\r\022;\n\014adz_location\030\010 \001(\0162!.Tanx"
    ".BidRequest.AdzInfo.Location:\002NA\022C\n\013view"
    "_screen\030\t \001(\0162#.Tanx.BidRequest.AdzInfo."
    "ViewScreen:\tSCREEN_NA\022\033\n\023page_session_ad"
    "_idx\030\n \001(\r\022\013\n\003api\030\014 \003(\r\0227\n\013buyer_rules\030\r"
    " \003(\0132\".Tanx.BidRequest.AdzInfo.BuyerRule"
    "\022\036\n\026allowed_creative_level\030\016 \001(\r\022\033\n\023publ"
    "isher_filter_id\030\017 \003(\t\022\036\n\017auto_expandable"
    "\030\020 \001(\010:\005false\022!\n\022trigger_expandable\030\021 \001("
    "\010:\005false\022$\n\025impression_repeatable\030\022 \001(\010:"
    "\005false\022-\n\005video\030\023 \001(\0132\036.Tanx.BidRequest."
    "AdzInfo.Video\022\025\n\rcampaign_date\030\024 \001(\t\022,\n\005"
    "deals\030\025 \003(\0132\035.Tanx.BidRequest.AdzInfo.De"
    "al\032:\n\tBuyerRule\022\026\n\016advertiser_ids\030\001 \001(\r\022"
    "\025\n\rmin_cpm_price\030\002 \001(\r\032{\n\005Video\022\033\n\023video"
    "ad_start_delay\030\001 \001(\005\022#\n\033videoad_section_"
    "start_delay\030\002 \001(\005\022\027\n\017min_ad_duration\030\003 \001"
    "(\005\022\027\n\017max_ad_duration\030\004 \001(\005\032\324\001\n\004Deal\022\016\n\006"
    "dealid\030\001 \002(\r\0229\n\tdeal_type\030\002 \002(\0162&.Tanx.B"
    "idRequest.AdzInfo.Deal.DealType\022\026\n\016adver"
    "tiser_ids\030\003 \003(\r\022\r\n\005price\030\004 \001(\r\"Z\n\010DealTy"
    "pe\022\025\n\021UNKNOWN_DEAL_TYPE\020\000\022\023\n\017PRIVATE_AUC"
    "TION\020\001\022\022\n\016PREFERRED_DEAL\020\002\022\016\n\nDIRECT_BUY"
    "\020\003\"2\n\010Location\022\006\n\002NA\020\000\022\016\n\nFIRST_VIEW\020\001\022\016"
    "\n\nOTHER_VIEW\020\002\"\211\001\n\nViewScreen\022\r\n\tSCREEN_"
    "NA\020\000\022\020\n\014SCREEN_FIRST\020\001\022\021\n\rSCREEN_SECOND\020"
    "\002\022\020\n\014SCREEN_THIRD\020\003\022\021\n\rSCREEN_FOURTH\020\004\022\020"
    "\n\014SCREEN_FIFTH\020\005\022\020\n\014SCREEN_OTHER\020\006\032.\n\rUs"
    "erAttribute\022\n\n\002id\030\001 \002(\r\022\021\n\ttimestamp\030\002 \001"
    "(\r\032J\n\013PrivateInfo\022\022\n\ntanx_cnaui\030\001 \001(\t\022\024\n"
    "\014risk_control\030\002 \001(\t\022\021\n\tnick_name\030\003 \001(\t\032\321"
    "\n\n\006Mobile\022\016\n\006is_app\030\001 \001(\010\022\016\n\006ad_num\030\002 \001("
    "\r\022\022\n\nad_keyword\030\003 \003(\t\022\025\n\ris_fullscreen\030\004"
    " \001(\010\022\024\n\014package_name\030\005 \001(\t\022.\n\006device\030\006 \001"
    "(\0132\036.Tanx.BidRequest.Mobile.Device\022\032\n\022na"
    "tive_template_id\030\007 \003(\t\022\024\n\014landing_type\030\010"
    " \003(\005\022\020\n\010app_name\030\t \001(\t\022;\n\016app_categories"
    "\030\n \003(\0132#.Tanx.BidRequest.Mobile.AppCateg"
    "ory\022D\n\022native_ad_template\030\013 \003(\0132(.Tanx.B"
    "idRequest.Mobile.NativeAdTemplate\032\211\004\n\006De"
    "vice\022\020\n\010platform\030\001 \001(\t\022\r\n\005brand\030\002 \001(\t\022\r\n"
    "\005model\030\003 \001(\t\022\n\n\002os\030\004 \001(\t\022\022\n\nos_version\030\005"
    " \001(\t\022\017\n\007network\030\006 \001(\r\022\020\n\010operator\030\007 \001(\005\022"
    "\021\n\tlongitude\030\010 \001(\t\022\020\n\010latitude\030\t \001(\t\022\023\n\013"
    "device_size\030\n \001(\t\022\021\n\tdevice_id\030\013 \001(\t\022 \n\022"
    "device_pixel_ratio\030\014 \001(\005:\0041000\022h\n\022screen"
    "_orientation\030\r \001(\01620.Tanx.BidRequest.Mob"
    "ile.Device.ScreenOrientation:\032SCREEN_ORI"
    "ENTATION_UNKNOWN\022\022\n\nandroid_id\030\016 \001(\t\022\014\n\004"
    "idfa\030\017 \001(\t\022\014\n\004imei\030\020 \001(\t\022\013\n\003mac\030\021 \001(\t\"v\n"
    "\021ScreenOrientation\022\036\n\032SCREEN_ORIENTATION"
    "_UNKNOWN\020\000\022\037\n\033SCREEN_ORIENTATION_PORTRAI"
    "T\020\001\022 \n\034SCREEN_ORIENTATION_LANDSCAPE\020\002\0323\n"
    "\013AppCategory\022\n\n\002id\030\001 \002(\005\022\030\n\020confidence_l"
    "evel\030\002 \002(\005\032\255\003\n\020NativeAdTemplate\022\032\n\022nativ"
    "e_template_id\030\001 \002(\t\022<\n\005areas\030\002 \003(\0132-.Tan"
    "x.BidRequest.Mobile.NativeAdTemplate.Are"
    "a\032\276\002\n\004Area\022\n\n\002id\030\001 \002(\005\022\026\n\016creative_count"
    "\030\002 \001(\005\022H\n\010creative\030\003 \001(\01326.Tanx.BidReque"
    "st.Mobile.NativeAdTemplate.Area.Creative"
    "\032\307\001\n\010Creative\022\027\n\017required_fields\030\001 \003(\005\022\032"
    "\n\022recommended_fields\030\002 \003(\005\022\035\n\025title_max_"
    "safe_length\030\003 \001(\005\022 \n\030ad_words_max_safe_l"
    "ength\030\004 \001(\005\022\022\n\nimage_size\030\005 \001(\t\022\025\n\ractio"
    "n_fields\030\006 \003(\005\022\032\n\022multichoice_fields\030\007 \003"
    "(\005\0327\n\017ContentCategory\022\n\n\002id\030\001 \002(\005\022\030\n\020con"
    "fidence_level\030\002 \002(\005\032\347\002\n\005Video\0228\n\014video_f"
    "ormat\030\001 \003(\0162\".Tanx.BidRequest.Video.Vide"
    "oFormat\022/\n\007content\030\002 \001(\0132\036.Tanx.BidReque"
    "st.Video.Content\022\033\n\023videoad_start_delay\030"
    "\003 \001(\005\022#\n\033videoad_section_start_delay\030\004 \001"
    "(\005\022\027\n\017min_ad_duration\030\005 \001(\005\022\027\n\017max_ad_du"
    "ration\030\006 \001(\005\022\020\n\010protocol\030\007 \001(\t\032<\n\007Conten"
    "t\022\r\n\005title\030\001 \001(\t\022\020\n\010duration\030\002 \001(\005\022\020\n\010ke"
    "ywords\030\003 \003(\t\"/\n\013VideoFormat\022\017\n\013VIDEO_FLA"
    "SH\020\000\022\017\n\013VIDEO_HTML5\020\001\032\212\003\n\004Deal\0228\n\013prefer"
    "_deal\030\001 \001(\0132#.Tanx.BidRequest.Deal.Prefe"
    "rredDeal\0226\n\010priv_auc\030\002 \001(\0132$.Tanx.BidReq"
    "uest.Deal.PrivateAuction\032l\n\rPreferredDea"
    "l\022\016\n\006dealid\030\001 \002(\r\022\026\n\016advertiser_ids\030\002 \003("
    "\r\022\025\n\rfix_cpm_price\030\003 \001(\r\022\034\n\ris_direct_bu"
    "y\030\004 \001(\010:\005false\032\241\001\n\016PrivateAuction\022\016\n\006dea"
    "lid\030\001 \002(\r\022C\n\013buyer_rules\030\002 \003(\0132..Tanx.Bi"
    "dRequest.Deal.PrivateAuction.BuyerRule\032:"
    "\n\tBuyerRule\022\026\n\016advertiser_ids\030\001 \003(\r\022\025\n\rm"
    "in_cpm_price\030\002 \001(\r\0325\n\rCrowdCategory\022\n\n\002i"
    "d\030\001 \002(\005\022\030\n\020confidence_level\030\002 \001(\r\"\215\007\n\013Bi"
    "dResponse\022\017\n\007version\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t\022"
    "\"\n\003ads\030\003 \003(\0132\025.Tanx.BidResponse.Ads\022!\n\022i"
    "s_recognized_user\030\004 \001(\010:\005false\032\230\006\n\003Ads\022\022"
    "\n\nadzinfo_id\030\001 \002(\r\022\025\n\rmax_cpm_price\030\002 \002("
    "\r\022\030\n\020ad_bid_count_idx\030\003 \001(\r\022\024\n\014html_snip"
    "pet\030\004 \001(\t\022\031\n\021click_through_url\030\005 \003(\t\022\020\n\010"
    "category\030\006 \003(\005\022\025\n\rcreative_type\030\007 \003(\005\022\024\n"
    "\014network_guid\030\010 \001(\t\022\023\n\013extend_data\030\t \001(\t"
    "\022\027\n\017destination_url\030\n \003(\t\022\023\n\013creative_id"
    "\030\013 \001(\t\022\030\n\020resource_address\030\014 \001(\t\022\030\n\020feed"
    "back_address\030\r \001(\t\022\025\n\rvideo_snippet\030\016 \001("
    "\t\022-\n\017mobile_creative\030\017 \001(\0132\024.Tanx.Mobile"
    "Creative\022\016\n\006dealid\030\020 \001(\r\022\026\n\016advertiser_i"
    "ds\030\021 \003(\r\022\031\n\021download_complete\030\022 \001(\t\022\031\n\021w"
    "innotice_address\030\023 \001(\t\022\036\n\026creative_adapt"
    "ive_type\030\024 \001(\005\022\024\n\014deeplink_url\030\025 \003(\t\022\037\n\027"
    "impression_tracking_url\030\026 \003(\t\022\032\n\022click_t"
    "racking_url\030\027 \003(\t\022*\n\005video\030\030 \001(\0132\033.Tanx."
    "BidResponse.Ads.Video\022\013\n\003api\030\031 \003(\005\022\021\n\tmi"
    "me_type\030\032 \001(\t\022\025\n\rcampaign_date\030\033 \001(\t\032k\n\005"
    "Video\022\020\n\010duration\030\001 \001(\005\022\013\n\003url\030\002 \001(\t\022\023\n\013"
    "event_start\030\003 \003(\t\022\026\n\016event_midpoint\030\004 \003("
    "\t\022\026\n\016event_complete\030\005 \003(\t\"\303\001\n\tBidResult\022"
    "\017\n\007version\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t\022 \n\003res\030\003 \003"
    "(\0132\023.Tanx.BidResult.Res\032v\n\003Res\022\022\n\nadzinf"
    "o_id\030\001 \002(\r\022\030\n\020ad_bid_count_idx\030\002 \001(\r\022\026\n\013"
    "result_code\030\003 \001(\005:\0010\022\024\n\014result_price\030\004 \001"
    "(\r\022\023\n\013extend_data\030\005 \001(\t\"\221\005\n\016MobileCreati"
    "ve\022\017\n\007version\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t\022\021\n\tview"
    "_type\030\003 \001(\r\0220\n\tcreatives\030\004 \003(\0132\035.Tanx.Mo"
    "bileCreative.Creative\022\032\n\022native_template"
    "_id\030\005 \001(\t\022(\n\005areas\030\006 \003(\0132\031.Tanx.MobileCr"
    "eative.Area\032\217\003\n\010Creative\022\017\n\007img_url\030\001 \001("
    "\t\022\020\n\010img_size\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\021\n\tcl"
    "ick_url\030\004 \001(\t\022\027\n\017destination_url\030\005 \001(\t\0220"
    "\n\004attr\030\006 \003(\0132\".Tanx.MobileCreative.Creat"
    "ive.Attr\022\023\n\013creative_id\030\007 \001(\t\022\020\n\010categor"
    "y\030\010 \003(\005\022E\n\017tracking_events\030\t \001(\0132,.Tanx."
    "MobileCreative.Creative.TrackingEvents\032#"
    "\n\004Attr\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\032`\n\016T"
    "rackingEvents\022\030\n\020impression_event\030\001 \003(\t\022"
    "\023\n\013click_event\030\002 \003(\t\022\037\n\027download_complet"
    "e_event\030\003 \003(\t\032D\n\004Area\022\n\n\002id\030\001 \002(\005\0220\n\tcre"
    "atives\030\002 \003(\0132\035.Tanx.MobileCreative.Creat"
    "ive", 6483);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tanx-bidding.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_Content::default_instance_ = new BidRequest_Content();
  BidRequest_AdzInfo::default_instance_ = new BidRequest_AdzInfo();
  BidRequest_AdzInfo_BuyerRule::default_instance_ = new BidRequest_AdzInfo_BuyerRule();
  BidRequest_AdzInfo_Video::default_instance_ = new BidRequest_AdzInfo_Video();
  BidRequest_AdzInfo_Deal::default_instance_ = new BidRequest_AdzInfo_Deal();
  BidRequest_UserAttribute::default_instance_ = new BidRequest_UserAttribute();
  BidRequest_PrivateInfo::default_instance_ = new BidRequest_PrivateInfo();
  BidRequest_Mobile::default_instance_ = new BidRequest_Mobile();
  BidRequest_Mobile_Device::default_instance_ = new BidRequest_Mobile_Device();
  BidRequest_Mobile_AppCategory::default_instance_ = new BidRequest_Mobile_AppCategory();
  BidRequest_Mobile_NativeAdTemplate::default_instance_ = new BidRequest_Mobile_NativeAdTemplate();
  BidRequest_Mobile_NativeAdTemplate_Area::default_instance_ = new BidRequest_Mobile_NativeAdTemplate_Area();
  BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_ = new BidRequest_Mobile_NativeAdTemplate_Area_Creative();
  BidRequest_ContentCategory::default_instance_ = new BidRequest_ContentCategory();
  BidRequest_Video::default_instance_ = new BidRequest_Video();
  BidRequest_Video_Content::default_instance_ = new BidRequest_Video_Content();
  BidRequest_Deal::default_instance_ = new BidRequest_Deal();
  BidRequest_Deal_PreferredDeal::default_instance_ = new BidRequest_Deal_PreferredDeal();
  BidRequest_Deal_PrivateAuction::default_instance_ = new BidRequest_Deal_PrivateAuction();
  BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_ = new BidRequest_Deal_PrivateAuction_BuyerRule();
  BidRequest_CrowdCategory::default_instance_ = new BidRequest_CrowdCategory();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Ads::default_instance_ = new BidResponse_Ads();
  BidResponse_Ads_Video::default_instance_ = new BidResponse_Ads_Video();
  BidResult::default_instance_ = new BidResult();
  BidResult_Res::default_instance_ = new BidResult_Res();
  MobileCreative::default_instance_ = new MobileCreative();
  MobileCreative_Creative::default_instance_ = new MobileCreative_Creative();
  MobileCreative_Creative_Attr::default_instance_ = new MobileCreative_Creative_Attr();
  MobileCreative_Creative_TrackingEvents::default_instance_ = new MobileCreative_Creative_TrackingEvents();
  MobileCreative_Area::default_instance_ = new MobileCreative_Area();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_Content::default_instance_->InitAsDefaultInstance();
  BidRequest_AdzInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_AdzInfo_BuyerRule::default_instance_->InitAsDefaultInstance();
  BidRequest_AdzInfo_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_AdzInfo_Deal::default_instance_->InitAsDefaultInstance();
  BidRequest_UserAttribute::default_instance_->InitAsDefaultInstance();
  BidRequest_PrivateInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_AppCategory::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_NativeAdTemplate::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_NativeAdTemplate_Area::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_->InitAsDefaultInstance();
  BidRequest_ContentCategory::default_instance_->InitAsDefaultInstance();
  BidRequest_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_Video_Content::default_instance_->InitAsDefaultInstance();
  BidRequest_Deal::default_instance_->InitAsDefaultInstance();
  BidRequest_Deal_PreferredDeal::default_instance_->InitAsDefaultInstance();
  BidRequest_Deal_PrivateAuction::default_instance_->InitAsDefaultInstance();
  BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_->InitAsDefaultInstance();
  BidRequest_CrowdCategory::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Ads::default_instance_->InitAsDefaultInstance();
  BidResponse_Ads_Video::default_instance_->InitAsDefaultInstance();
  BidResult::default_instance_->InitAsDefaultInstance();
  BidResult_Res::default_instance_->InitAsDefaultInstance();
  MobileCreative::default_instance_->InitAsDefaultInstance();
  MobileCreative_Creative::default_instance_->InitAsDefaultInstance();
  MobileCreative_Creative_Attr::default_instance_->InitAsDefaultInstance();
  MobileCreative_Creative_TrackingEvents::default_instance_->InitAsDefaultInstance();
  MobileCreative_Area::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tanx_2dbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tanx_2dbidding_2eproto {
  StaticDescriptorInitializer_tanx_2dbidding_2eproto() {
    protobuf_AddDesc_tanx_2dbidding_2eproto();
  }
} static_descriptor_initializer_tanx_2dbidding_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BidRequest_Content::kTitleFieldNumber;
const int BidRequest_Content::kDurationFieldNumber;
const int BidRequest_Content::kKeywordsFieldNumber;
#endif  // !_MSC_VER

BidRequest_Content::BidRequest_Content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Content)
}

void BidRequest_Content::InitAsDefaultInstance() {
}

BidRequest_Content::BidRequest_Content(const BidRequest_Content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Content)
}

void BidRequest_Content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Content::~BidRequest_Content() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Content)
  SharedDtor();
}

void BidRequest_Content::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Content_descriptor_;
}

const BidRequest_Content& BidRequest_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Content* BidRequest_Content::default_instance_ = NULL;

BidRequest_Content* BidRequest_Content::New() const {
  return new BidRequest_Content;
}

void BidRequest_Content::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    duration_ = 0;
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 3;
      case 3: {
        if (tag == 26) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Content)
  return false;
#undef DO_
}

void BidRequest_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Content)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keywords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Content)
}

::google::protobuf::uint8* BidRequest_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Content)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->keywords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Content)
  return target;
}

int BidRequest_Content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  // repeated string keywords = 3;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Content::MergeFrom(const BidRequest_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Content::CopyFrom(const BidRequest_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Content::IsInitialized() const {

  return true;
}

void BidRequest_Content::Swap(BidRequest_Content* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(duration_, other->duration_);
    keywords_.Swap(&other->keywords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Content_descriptor_;
  metadata.reflection = BidRequest_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Location_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_Location_descriptor_;
}
bool BidRequest_AdzInfo_Location_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::NA;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::FIRST_VIEW;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::OTHER_VIEW;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::Location_MIN;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::Location_MAX;
const int BidRequest_AdzInfo::Location_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_ViewScreen_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_ViewScreen_descriptor_;
}
bool BidRequest_AdzInfo_ViewScreen_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_NA;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_FIRST;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_SECOND;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_THIRD;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_FOURTH;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_FIFTH;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_OTHER;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::ViewScreen_MIN;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::ViewScreen_MAX;
const int BidRequest_AdzInfo::ViewScreen_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_AdzInfo_BuyerRule::kAdvertiserIdsFieldNumber;
const int BidRequest_AdzInfo_BuyerRule::kMinCpmPriceFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdzInfo_BuyerRule::BidRequest_AdzInfo_BuyerRule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.AdzInfo.BuyerRule)
}

void BidRequest_AdzInfo_BuyerRule::InitAsDefaultInstance() {
}

BidRequest_AdzInfo_BuyerRule::BidRequest_AdzInfo_BuyerRule(const BidRequest_AdzInfo_BuyerRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.AdzInfo.BuyerRule)
}

void BidRequest_AdzInfo_BuyerRule::SharedCtor() {
  _cached_size_ = 0;
  advertiser_ids_ = 0u;
  min_cpm_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdzInfo_BuyerRule::~BidRequest_AdzInfo_BuyerRule() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.AdzInfo.BuyerRule)
  SharedDtor();
}

void BidRequest_AdzInfo_BuyerRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdzInfo_BuyerRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_BuyerRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_BuyerRule_descriptor_;
}

const BidRequest_AdzInfo_BuyerRule& BidRequest_AdzInfo_BuyerRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdzInfo_BuyerRule* BidRequest_AdzInfo_BuyerRule::default_instance_ = NULL;

BidRequest_AdzInfo_BuyerRule* BidRequest_AdzInfo_BuyerRule::New() const {
  return new BidRequest_AdzInfo_BuyerRule;
}

void BidRequest_AdzInfo_BuyerRule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdzInfo_BuyerRule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(advertiser_ids_, min_cpm_price_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdzInfo_BuyerRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.AdzInfo.BuyerRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 advertiser_ids = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advertiser_ids_)));
          set_has_advertiser_ids();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_cpm_price;
        break;
      }

      // optional uint32 min_cpm_price = 2;
      case 2: {
        if (tag == 16) {
         parse_min_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cpm_price_)));
          set_has_min_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.AdzInfo.BuyerRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.AdzInfo.BuyerRule)
  return false;
#undef DO_
}

void BidRequest_AdzInfo_BuyerRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.AdzInfo.BuyerRule)
  // optional uint32 advertiser_ids = 1;
  if (has_advertiser_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->advertiser_ids(), output);
  }

  // optional uint32 min_cpm_price = 2;
  if (has_min_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_cpm_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.AdzInfo.BuyerRule)
}

::google::protobuf::uint8* BidRequest_AdzInfo_BuyerRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.AdzInfo.BuyerRule)
  // optional uint32 advertiser_ids = 1;
  if (has_advertiser_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->advertiser_ids(), target);
  }

  // optional uint32 min_cpm_price = 2;
  if (has_min_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_cpm_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.AdzInfo.BuyerRule)
  return target;
}

int BidRequest_AdzInfo_BuyerRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 advertiser_ids = 1;
    if (has_advertiser_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advertiser_ids());
    }

    // optional uint32 min_cpm_price = 2;
    if (has_min_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_cpm_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdzInfo_BuyerRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdzInfo_BuyerRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdzInfo_BuyerRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdzInfo_BuyerRule::MergeFrom(const BidRequest_AdzInfo_BuyerRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advertiser_ids()) {
      set_advertiser_ids(from.advertiser_ids());
    }
    if (from.has_min_cpm_price()) {
      set_min_cpm_price(from.min_cpm_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdzInfo_BuyerRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdzInfo_BuyerRule::CopyFrom(const BidRequest_AdzInfo_BuyerRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdzInfo_BuyerRule::IsInitialized() const {

  return true;
}

void BidRequest_AdzInfo_BuyerRule::Swap(BidRequest_AdzInfo_BuyerRule* other) {
  if (other != this) {
    std::swap(advertiser_ids_, other->advertiser_ids_);
    std::swap(min_cpm_price_, other->min_cpm_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdzInfo_BuyerRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdzInfo_BuyerRule_descriptor_;
  metadata.reflection = BidRequest_AdzInfo_BuyerRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdzInfo_Video::kVideoadStartDelayFieldNumber;
const int BidRequest_AdzInfo_Video::kVideoadSectionStartDelayFieldNumber;
const int BidRequest_AdzInfo_Video::kMinAdDurationFieldNumber;
const int BidRequest_AdzInfo_Video::kMaxAdDurationFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdzInfo_Video::BidRequest_AdzInfo_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.AdzInfo.Video)
}

void BidRequest_AdzInfo_Video::InitAsDefaultInstance() {
}

BidRequest_AdzInfo_Video::BidRequest_AdzInfo_Video(const BidRequest_AdzInfo_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.AdzInfo.Video)
}

void BidRequest_AdzInfo_Video::SharedCtor() {
  _cached_size_ = 0;
  videoad_start_delay_ = 0;
  videoad_section_start_delay_ = 0;
  min_ad_duration_ = 0;
  max_ad_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdzInfo_Video::~BidRequest_AdzInfo_Video() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.AdzInfo.Video)
  SharedDtor();
}

void BidRequest_AdzInfo_Video::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdzInfo_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_Video_descriptor_;
}

const BidRequest_AdzInfo_Video& BidRequest_AdzInfo_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdzInfo_Video* BidRequest_AdzInfo_Video::default_instance_ = NULL;

BidRequest_AdzInfo_Video* BidRequest_AdzInfo_Video::New() const {
  return new BidRequest_AdzInfo_Video;
}

void BidRequest_AdzInfo_Video::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdzInfo_Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(videoad_start_delay_, max_ad_duration_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdzInfo_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.AdzInfo.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 videoad_start_delay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_start_delay_)));
          set_has_videoad_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_videoad_section_start_delay;
        break;
      }

      // optional int32 videoad_section_start_delay = 2;
      case 2: {
        if (tag == 16) {
         parse_videoad_section_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_section_start_delay_)));
          set_has_videoad_section_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_ad_duration;
        break;
      }

      // optional int32 min_ad_duration = 3;
      case 3: {
        if (tag == 24) {
         parse_min_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_ad_duration_)));
          set_has_min_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_ad_duration;
        break;
      }

      // optional int32 max_ad_duration = 4;
      case 4: {
        if (tag == 32) {
         parse_max_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ad_duration_)));
          set_has_max_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.AdzInfo.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.AdzInfo.Video)
  return false;
#undef DO_
}

void BidRequest_AdzInfo_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.AdzInfo.Video)
  // optional int32 videoad_start_delay = 1;
  if (has_videoad_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->videoad_start_delay(), output);
  }

  // optional int32 videoad_section_start_delay = 2;
  if (has_videoad_section_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->videoad_section_start_delay(), output);
  }

  // optional int32 min_ad_duration = 3;
  if (has_min_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_ad_duration(), output);
  }

  // optional int32 max_ad_duration = 4;
  if (has_max_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_ad_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.AdzInfo.Video)
}

::google::protobuf::uint8* BidRequest_AdzInfo_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.AdzInfo.Video)
  // optional int32 videoad_start_delay = 1;
  if (has_videoad_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->videoad_start_delay(), target);
  }

  // optional int32 videoad_section_start_delay = 2;
  if (has_videoad_section_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->videoad_section_start_delay(), target);
  }

  // optional int32 min_ad_duration = 3;
  if (has_min_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_ad_duration(), target);
  }

  // optional int32 max_ad_duration = 4;
  if (has_max_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_ad_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.AdzInfo.Video)
  return target;
}

int BidRequest_AdzInfo_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 videoad_start_delay = 1;
    if (has_videoad_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_start_delay());
    }

    // optional int32 videoad_section_start_delay = 2;
    if (has_videoad_section_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_section_start_delay());
    }

    // optional int32 min_ad_duration = 3;
    if (has_min_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_ad_duration());
    }

    // optional int32 max_ad_duration = 4;
    if (has_max_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ad_duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdzInfo_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdzInfo_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdzInfo_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdzInfo_Video::MergeFrom(const BidRequest_AdzInfo_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_videoad_start_delay()) {
      set_videoad_start_delay(from.videoad_start_delay());
    }
    if (from.has_videoad_section_start_delay()) {
      set_videoad_section_start_delay(from.videoad_section_start_delay());
    }
    if (from.has_min_ad_duration()) {
      set_min_ad_duration(from.min_ad_duration());
    }
    if (from.has_max_ad_duration()) {
      set_max_ad_duration(from.max_ad_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdzInfo_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdzInfo_Video::CopyFrom(const BidRequest_AdzInfo_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdzInfo_Video::IsInitialized() const {

  return true;
}

void BidRequest_AdzInfo_Video::Swap(BidRequest_AdzInfo_Video* other) {
  if (other != this) {
    std::swap(videoad_start_delay_, other->videoad_start_delay_);
    std::swap(videoad_section_start_delay_, other->videoad_section_start_delay_);
    std::swap(min_ad_duration_, other->min_ad_duration_);
    std::swap(max_ad_duration_, other->max_ad_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdzInfo_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdzInfo_Video_descriptor_;
  metadata.reflection = BidRequest_AdzInfo_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Deal_DealType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_Deal_DealType_descriptor_;
}
bool BidRequest_AdzInfo_Deal_DealType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdzInfo_Deal_DealType BidRequest_AdzInfo_Deal::UNKNOWN_DEAL_TYPE;
const BidRequest_AdzInfo_Deal_DealType BidRequest_AdzInfo_Deal::PRIVATE_AUCTION;
const BidRequest_AdzInfo_Deal_DealType BidRequest_AdzInfo_Deal::PREFERRED_DEAL;
const BidRequest_AdzInfo_Deal_DealType BidRequest_AdzInfo_Deal::DIRECT_BUY;
const BidRequest_AdzInfo_Deal_DealType BidRequest_AdzInfo_Deal::DealType_MIN;
const BidRequest_AdzInfo_Deal_DealType BidRequest_AdzInfo_Deal::DealType_MAX;
const int BidRequest_AdzInfo_Deal::DealType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_AdzInfo_Deal::kDealidFieldNumber;
const int BidRequest_AdzInfo_Deal::kDealTypeFieldNumber;
const int BidRequest_AdzInfo_Deal::kAdvertiserIdsFieldNumber;
const int BidRequest_AdzInfo_Deal::kPriceFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdzInfo_Deal::BidRequest_AdzInfo_Deal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.AdzInfo.Deal)
}

void BidRequest_AdzInfo_Deal::InitAsDefaultInstance() {
}

BidRequest_AdzInfo_Deal::BidRequest_AdzInfo_Deal(const BidRequest_AdzInfo_Deal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.AdzInfo.Deal)
}

void BidRequest_AdzInfo_Deal::SharedCtor() {
  _cached_size_ = 0;
  dealid_ = 0u;
  deal_type_ = 0;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdzInfo_Deal::~BidRequest_AdzInfo_Deal() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.AdzInfo.Deal)
  SharedDtor();
}

void BidRequest_AdzInfo_Deal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdzInfo_Deal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_Deal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_Deal_descriptor_;
}

const BidRequest_AdzInfo_Deal& BidRequest_AdzInfo_Deal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdzInfo_Deal* BidRequest_AdzInfo_Deal::default_instance_ = NULL;

BidRequest_AdzInfo_Deal* BidRequest_AdzInfo_Deal::New() const {
  return new BidRequest_AdzInfo_Deal;
}

void BidRequest_AdzInfo_Deal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdzInfo_Deal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(dealid_, deal_type_);
    price_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  advertiser_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdzInfo_Deal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.AdzInfo.Deal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dealid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealid_)));
          set_has_dealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deal_type;
        break;
      }

      // required .Tanx.BidRequest.AdzInfo.Deal.DealType deal_type = 2;
      case 2: {
        if (tag == 16) {
         parse_deal_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Tanx::BidRequest_AdzInfo_Deal_DealType_IsValid(value)) {
            set_deal_type(static_cast< ::Tanx::BidRequest_AdzInfo_Deal_DealType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_advertiser_ids;
        break;
      }

      // repeated uint32 advertiser_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_advertiser_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_advertiser_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_advertiser_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_advertiser_ids;
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // optional uint32 price = 4;
      case 4: {
        if (tag == 32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.AdzInfo.Deal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.AdzInfo.Deal)
  return false;
#undef DO_
}

void BidRequest_AdzInfo_Deal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.AdzInfo.Deal)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dealid(), output);
  }

  // required .Tanx.BidRequest.AdzInfo.Deal.DealType deal_type = 2;
  if (has_deal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->deal_type(), output);
  }

  // repeated uint32 advertiser_ids = 3;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->advertiser_ids(i), output);
  }

  // optional uint32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.AdzInfo.Deal)
}

::google::protobuf::uint8* BidRequest_AdzInfo_Deal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.AdzInfo.Deal)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dealid(), target);
  }

  // required .Tanx.BidRequest.AdzInfo.Deal.DealType deal_type = 2;
  if (has_deal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->deal_type(), target);
  }

  // repeated uint32 advertiser_ids = 3;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->advertiser_ids(i), target);
  }

  // optional uint32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.AdzInfo.Deal)
  return target;
}

int BidRequest_AdzInfo_Deal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dealid = 1;
    if (has_dealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dealid());
    }

    // required .Tanx.BidRequest.AdzInfo.Deal.DealType deal_type = 2;
    if (has_deal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->deal_type());
    }

    // optional uint32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  // repeated uint32 advertiser_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->advertiser_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->advertiser_ids(i));
    }
    total_size += 1 * this->advertiser_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdzInfo_Deal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdzInfo_Deal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdzInfo_Deal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdzInfo_Deal::MergeFrom(const BidRequest_AdzInfo_Deal& from) {
  GOOGLE_CHECK_NE(&from, this);
  advertiser_ids_.MergeFrom(from.advertiser_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
    if (from.has_deal_type()) {
      set_deal_type(from.deal_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdzInfo_Deal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdzInfo_Deal::CopyFrom(const BidRequest_AdzInfo_Deal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdzInfo_Deal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_AdzInfo_Deal::Swap(BidRequest_AdzInfo_Deal* other) {
  if (other != this) {
    std::swap(dealid_, other->dealid_);
    std::swap(deal_type_, other->deal_type_);
    advertiser_ids_.Swap(&other->advertiser_ids_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdzInfo_Deal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdzInfo_Deal_descriptor_;
  metadata.reflection = BidRequest_AdzInfo_Deal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_AdzInfo::kIdFieldNumber;
const int BidRequest_AdzInfo::kPidFieldNumber;
const int BidRequest_AdzInfo::kPublisherIdFieldNumber;
const int BidRequest_AdzInfo::kSizeFieldNumber;
const int BidRequest_AdzInfo::kAdBidCountFieldNumber;
const int BidRequest_AdzInfo::kViewTypeFieldNumber;
const int BidRequest_AdzInfo::kExcludedFilterFieldNumber;
const int BidRequest_AdzInfo::kMinCpmPriceFieldNumber;
const int BidRequest_AdzInfo::kAdzLocationFieldNumber;
const int BidRequest_AdzInfo::kViewScreenFieldNumber;
const int BidRequest_AdzInfo::kPageSessionAdIdxFieldNumber;
const int BidRequest_AdzInfo::kApiFieldNumber;
const int BidRequest_AdzInfo::kBuyerRulesFieldNumber;
const int BidRequest_AdzInfo::kAllowedCreativeLevelFieldNumber;
const int BidRequest_AdzInfo::kPublisherFilterIdFieldNumber;
const int BidRequest_AdzInfo::kAutoExpandableFieldNumber;
const int BidRequest_AdzInfo::kTriggerExpandableFieldNumber;
const int BidRequest_AdzInfo::kImpressionRepeatableFieldNumber;
const int BidRequest_AdzInfo::kVideoFieldNumber;
const int BidRequest_AdzInfo::kCampaignDateFieldNumber;
const int BidRequest_AdzInfo::kDealsFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdzInfo::BidRequest_AdzInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.AdzInfo)
}

void BidRequest_AdzInfo::InitAsDefaultInstance() {
  video_ = const_cast< ::Tanx::BidRequest_AdzInfo_Video*>(&::Tanx::BidRequest_AdzInfo_Video::default_instance());
}

BidRequest_AdzInfo::BidRequest_AdzInfo(const BidRequest_AdzInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.AdzInfo)
}

void BidRequest_AdzInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ad_bid_count_ = 2u;
  min_cpm_price_ = 0u;
  adz_location_ = 0;
  view_screen_ = 0;
  page_session_ad_idx_ = 0u;
  allowed_creative_level_ = 0u;
  auto_expandable_ = false;
  trigger_expandable_ = false;
  impression_repeatable_ = false;
  video_ = NULL;
  campaign_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdzInfo::~BidRequest_AdzInfo() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.AdzInfo)
  SharedDtor();
}

void BidRequest_AdzInfo::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pid_;
  }
  if (publisher_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete publisher_id_;
  }
  if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete size_;
  }
  if (campaign_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete campaign_date_;
  }
  if (this != default_instance_) {
    delete video_;
  }
}

void BidRequest_AdzInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdzInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_descriptor_;
}

const BidRequest_AdzInfo& BidRequest_AdzInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdzInfo* BidRequest_AdzInfo::default_instance_ = NULL;

BidRequest_AdzInfo* BidRequest_AdzInfo::New() const {
  return new BidRequest_AdzInfo;
}

void BidRequest_AdzInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_AdzInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    id_ = 0u;
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pid_->clear();
      }
    }
    if (has_publisher_id()) {
      if (publisher_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        publisher_id_->clear();
      }
    }
    if (has_size()) {
      if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        size_->clear();
      }
    }
    ad_bid_count_ = 2u;
    min_cpm_price_ = 0u;
  }
  if (_has_bits_[8 / 32] & 42752) {
    ZR_(adz_location_, page_session_ad_idx_);
    ZR_(allowed_creative_level_, auto_expandable_);
  }
  if (_has_bits_[16 / 32] & 983040) {
    ZR_(trigger_expandable_, impression_repeatable_);
    if (has_video()) {
      if (video_ != NULL) video_->::Tanx::BidRequest_AdzInfo_Video::Clear();
    }
    if (has_campaign_date()) {
      if (campaign_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        campaign_date_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  view_type_.Clear();
  excluded_filter_.Clear();
  api_.Clear();
  buyer_rules_.Clear();
  publisher_filter_id_.Clear();
  deals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdzInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.AdzInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pid;
        break;
      }

      // required string pid = 2;
      case 2: {
        if (tag == 18) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_size;
        break;
      }

      // optional string size = 3;
      case 3: {
        if (tag == 26) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->size().data(), this->size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ad_bid_count;
        break;
      }

      // optional uint32 ad_bid_count = 4 [default = 2];
      case 4: {
        if (tag == 32) {
         parse_ad_bid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bid_count_)));
          set_has_ad_bid_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_view_type;
        break;
      }

      // repeated uint32 view_type = 5;
      case 5: {
        if (tag == 40) {
         parse_view_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_view_type())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_view_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_view_type;
        if (input->ExpectTag(48)) goto parse_excluded_filter;
        break;
      }

      // repeated uint32 excluded_filter = 6;
      case 6: {
        if (tag == 48) {
         parse_excluded_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_excluded_filter())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_excluded_filter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_excluded_filter;
        if (input->ExpectTag(56)) goto parse_min_cpm_price;
        break;
      }

      // optional uint32 min_cpm_price = 7;
      case 7: {
        if (tag == 56) {
         parse_min_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cpm_price_)));
          set_has_min_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_adz_location;
        break;
      }

      // optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
      case 8: {
        if (tag == 64) {
         parse_adz_location:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Tanx::BidRequest_AdzInfo_Location_IsValid(value)) {
            set_adz_location(static_cast< ::Tanx::BidRequest_AdzInfo_Location >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_view_screen;
        break;
      }

      // optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
      case 9: {
        if (tag == 72) {
         parse_view_screen:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Tanx::BidRequest_AdzInfo_ViewScreen_IsValid(value)) {
            set_view_screen(static_cast< ::Tanx::BidRequest_AdzInfo_ViewScreen >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_page_session_ad_idx;
        break;
      }

      // optional uint32 page_session_ad_idx = 10;
      case 10: {
        if (tag == 80) {
         parse_page_session_ad_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_session_ad_idx_)));
          set_has_page_session_ad_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher_id;
        break;
      }

      // optional string publisher_id = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publisher_id().data(), this->publisher_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "publisher_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_api;
        break;
      }

      // repeated uint32 api = 12;
      case 12: {
        if (tag == 96) {
         parse_api:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_api())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_api())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_api;
        if (input->ExpectTag(106)) goto parse_buyer_rules;
        break;
      }

      // repeated .Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
      case 13: {
        if (tag == 106) {
         parse_buyer_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyer_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_buyer_rules;
        if (input->ExpectTag(112)) goto parse_allowed_creative_level;
        break;
      }

      // optional uint32 allowed_creative_level = 14;
      case 14: {
        if (tag == 112) {
         parse_allowed_creative_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allowed_creative_level_)));
          set_has_allowed_creative_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_publisher_filter_id;
        break;
      }

      // repeated string publisher_filter_id = 15;
      case 15: {
        if (tag == 122) {
         parse_publisher_filter_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_publisher_filter_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publisher_filter_id(this->publisher_filter_id_size() - 1).data(),
            this->publisher_filter_id(this->publisher_filter_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "publisher_filter_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_publisher_filter_id;
        if (input->ExpectTag(128)) goto parse_auto_expandable;
        break;
      }

      // optional bool auto_expandable = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_auto_expandable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_expandable_)));
          set_has_auto_expandable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_trigger_expandable;
        break;
      }

      // optional bool trigger_expandable = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_trigger_expandable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trigger_expandable_)));
          set_has_trigger_expandable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_impression_repeatable;
        break;
      }

      // optional bool impression_repeatable = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_impression_repeatable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &impression_repeatable_)));
          set_has_impression_repeatable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_video;
        break;
      }

      // optional .Tanx.BidRequest.AdzInfo.Video video = 19;
      case 19: {
        if (tag == 154) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_campaign_date;
        break;
      }

      // optional string campaign_date = 20;
      case 20: {
        if (tag == 162) {
         parse_campaign_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_campaign_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->campaign_date().data(), this->campaign_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "campaign_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_deals;
        break;
      }

      // repeated .Tanx.BidRequest.AdzInfo.Deal deals = 21;
      case 21: {
        if (tag == 170) {
         parse_deals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_deals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.AdzInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.AdzInfo)
  return false;
#undef DO_
}

void BidRequest_AdzInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.AdzInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pid(), output);
  }

  // optional string size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->size(), output);
  }

  // optional uint32 ad_bid_count = 4 [default = 2];
  if (has_ad_bid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ad_bid_count(), output);
  }

  // repeated uint32 view_type = 5;
  for (int i = 0; i < this->view_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->view_type(i), output);
  }

  // repeated uint32 excluded_filter = 6;
  for (int i = 0; i < this->excluded_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->excluded_filter(i), output);
  }

  // optional uint32 min_cpm_price = 7;
  if (has_min_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->min_cpm_price(), output);
  }

  // optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
  if (has_adz_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->adz_location(), output);
  }

  // optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
  if (has_view_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->view_screen(), output);
  }

  // optional uint32 page_session_ad_idx = 10;
  if (has_page_session_ad_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->page_session_ad_idx(), output);
  }

  // optional string publisher_id = 11;
  if (has_publisher_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_id().data(), this->publisher_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "publisher_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->publisher_id(), output);
  }

  // repeated uint32 api = 12;
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->api(i), output);
  }

  // repeated .Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
  for (int i = 0; i < this->buyer_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->buyer_rules(i), output);
  }

  // optional uint32 allowed_creative_level = 14;
  if (has_allowed_creative_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->allowed_creative_level(), output);
  }

  // repeated string publisher_filter_id = 15;
  for (int i = 0; i < this->publisher_filter_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->publisher_filter_id(i).data(), this->publisher_filter_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "publisher_filter_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->publisher_filter_id(i), output);
  }

  // optional bool auto_expandable = 16 [default = false];
  if (has_auto_expandable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->auto_expandable(), output);
  }

  // optional bool trigger_expandable = 17 [default = false];
  if (has_trigger_expandable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->trigger_expandable(), output);
  }

  // optional bool impression_repeatable = 18 [default = false];
  if (has_impression_repeatable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->impression_repeatable(), output);
  }

  // optional .Tanx.BidRequest.AdzInfo.Video video = 19;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->video(), output);
  }

  // optional string campaign_date = 20;
  if (has_campaign_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->campaign_date().data(), this->campaign_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "campaign_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->campaign_date(), output);
  }

  // repeated .Tanx.BidRequest.AdzInfo.Deal deals = 21;
  for (int i = 0; i < this->deals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->deals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.AdzInfo)
}

::google::protobuf::uint8* BidRequest_AdzInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.AdzInfo)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pid(), target);
  }

  // optional string size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->size(), target);
  }

  // optional uint32 ad_bid_count = 4 [default = 2];
  if (has_ad_bid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ad_bid_count(), target);
  }

  // repeated uint32 view_type = 5;
  for (int i = 0; i < this->view_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->view_type(i), target);
  }

  // repeated uint32 excluded_filter = 6;
  for (int i = 0; i < this->excluded_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->excluded_filter(i), target);
  }

  // optional uint32 min_cpm_price = 7;
  if (has_min_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->min_cpm_price(), target);
  }

  // optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
  if (has_adz_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->adz_location(), target);
  }

  // optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
  if (has_view_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->view_screen(), target);
  }

  // optional uint32 page_session_ad_idx = 10;
  if (has_page_session_ad_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->page_session_ad_idx(), target);
  }

  // optional string publisher_id = 11;
  if (has_publisher_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_id().data(), this->publisher_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "publisher_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->publisher_id(), target);
  }

  // repeated uint32 api = 12;
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->api(i), target);
  }

  // repeated .Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
  for (int i = 0; i < this->buyer_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->buyer_rules(i), target);
  }

  // optional uint32 allowed_creative_level = 14;
  if (has_allowed_creative_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->allowed_creative_level(), target);
  }

  // repeated string publisher_filter_id = 15;
  for (int i = 0; i < this->publisher_filter_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_filter_id(i).data(), this->publisher_filter_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "publisher_filter_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->publisher_filter_id(i), target);
  }

  // optional bool auto_expandable = 16 [default = false];
  if (has_auto_expandable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->auto_expandable(), target);
  }

  // optional bool trigger_expandable = 17 [default = false];
  if (has_trigger_expandable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->trigger_expandable(), target);
  }

  // optional bool impression_repeatable = 18 [default = false];
  if (has_impression_repeatable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->impression_repeatable(), target);
  }

  // optional .Tanx.BidRequest.AdzInfo.Video video = 19;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->video(), target);
  }

  // optional string campaign_date = 20;
  if (has_campaign_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->campaign_date().data(), this->campaign_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "campaign_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->campaign_date(), target);
  }

  // repeated .Tanx.BidRequest.AdzInfo.Deal deals = 21;
  for (int i = 0; i < this->deals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->deals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.AdzInfo)
  return target;
}

int BidRequest_AdzInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional string publisher_id = 11;
    if (has_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher_id());
    }

    // optional string size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->size());
    }

    // optional uint32 ad_bid_count = 4 [default = 2];
    if (has_ad_bid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bid_count());
    }

    // optional uint32 min_cpm_price = 7;
    if (has_min_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_cpm_price());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
    if (has_adz_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adz_location());
    }

    // optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
    if (has_view_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->view_screen());
    }

    // optional uint32 page_session_ad_idx = 10;
    if (has_page_session_ad_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_session_ad_idx());
    }

    // optional uint32 allowed_creative_level = 14;
    if (has_allowed_creative_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allowed_creative_level());
    }

    // optional bool auto_expandable = 16 [default = false];
    if (has_auto_expandable()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool trigger_expandable = 17 [default = false];
    if (has_trigger_expandable()) {
      total_size += 2 + 1;
    }

    // optional bool impression_repeatable = 18 [default = false];
    if (has_impression_repeatable()) {
      total_size += 2 + 1;
    }

    // optional .Tanx.BidRequest.AdzInfo.Video video = 19;
    if (has_video()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional string campaign_date = 20;
    if (has_campaign_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->campaign_date());
    }

  }
  // repeated uint32 view_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->view_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->view_type(i));
    }
    total_size += 1 * this->view_type_size() + data_size;
  }

  // repeated uint32 excluded_filter = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_filter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->excluded_filter(i));
    }
    total_size += 1 * this->excluded_filter_size() + data_size;
  }

  // repeated uint32 api = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->api(i));
    }
    total_size += 1 * this->api_size() + data_size;
  }

  // repeated .Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
  total_size += 1 * this->buyer_rules_size();
  for (int i = 0; i < this->buyer_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyer_rules(i));
  }

  // repeated string publisher_filter_id = 15;
  total_size += 1 * this->publisher_filter_id_size();
  for (int i = 0; i < this->publisher_filter_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->publisher_filter_id(i));
  }

  // repeated .Tanx.BidRequest.AdzInfo.Deal deals = 21;
  total_size += 2 * this->deals_size();
  for (int i = 0; i < this->deals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdzInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdzInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdzInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdzInfo::MergeFrom(const BidRequest_AdzInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  view_type_.MergeFrom(from.view_type_);
  excluded_filter_.MergeFrom(from.excluded_filter_);
  api_.MergeFrom(from.api_);
  buyer_rules_.MergeFrom(from.buyer_rules_);
  publisher_filter_id_.MergeFrom(from.publisher_filter_id_);
  deals_.MergeFrom(from.deals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_publisher_id()) {
      set_publisher_id(from.publisher_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ad_bid_count()) {
      set_ad_bid_count(from.ad_bid_count());
    }
    if (from.has_min_cpm_price()) {
      set_min_cpm_price(from.min_cpm_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adz_location()) {
      set_adz_location(from.adz_location());
    }
    if (from.has_view_screen()) {
      set_view_screen(from.view_screen());
    }
    if (from.has_page_session_ad_idx()) {
      set_page_session_ad_idx(from.page_session_ad_idx());
    }
    if (from.has_allowed_creative_level()) {
      set_allowed_creative_level(from.allowed_creative_level());
    }
    if (from.has_auto_expandable()) {
      set_auto_expandable(from.auto_expandable());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trigger_expandable()) {
      set_trigger_expandable(from.trigger_expandable());
    }
    if (from.has_impression_repeatable()) {
      set_impression_repeatable(from.impression_repeatable());
    }
    if (from.has_video()) {
      mutable_video()->::Tanx::BidRequest_AdzInfo_Video::MergeFrom(from.video());
    }
    if (from.has_campaign_date()) {
      set_campaign_date(from.campaign_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdzInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdzInfo::CopyFrom(const BidRequest_AdzInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdzInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->deals())) return false;
  return true;
}

void BidRequest_AdzInfo::Swap(BidRequest_AdzInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pid_, other->pid_);
    std::swap(publisher_id_, other->publisher_id_);
    std::swap(size_, other->size_);
    std::swap(ad_bid_count_, other->ad_bid_count_);
    view_type_.Swap(&other->view_type_);
    excluded_filter_.Swap(&other->excluded_filter_);
    std::swap(min_cpm_price_, other->min_cpm_price_);
    std::swap(adz_location_, other->adz_location_);
    std::swap(view_screen_, other->view_screen_);
    std::swap(page_session_ad_idx_, other->page_session_ad_idx_);
    api_.Swap(&other->api_);
    buyer_rules_.Swap(&other->buyer_rules_);
    std::swap(allowed_creative_level_, other->allowed_creative_level_);
    publisher_filter_id_.Swap(&other->publisher_filter_id_);
    std::swap(auto_expandable_, other->auto_expandable_);
    std::swap(trigger_expandable_, other->trigger_expandable_);
    std::swap(impression_repeatable_, other->impression_repeatable_);
    std::swap(video_, other->video_);
    std::swap(campaign_date_, other->campaign_date_);
    deals_.Swap(&other->deals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdzInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdzInfo_descriptor_;
  metadata.reflection = BidRequest_AdzInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_UserAttribute::kIdFieldNumber;
const int BidRequest_UserAttribute::kTimestampFieldNumber;
#endif  // !_MSC_VER

BidRequest_UserAttribute::BidRequest_UserAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.UserAttribute)
}

void BidRequest_UserAttribute::InitAsDefaultInstance() {
}

BidRequest_UserAttribute::BidRequest_UserAttribute(const BidRequest_UserAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.UserAttribute)
}

void BidRequest_UserAttribute::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_UserAttribute::~BidRequest_UserAttribute() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.UserAttribute)
  SharedDtor();
}

void BidRequest_UserAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_UserAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_UserAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_UserAttribute_descriptor_;
}

const BidRequest_UserAttribute& BidRequest_UserAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_UserAttribute* BidRequest_UserAttribute::default_instance_ = NULL;

BidRequest_UserAttribute* BidRequest_UserAttribute::New() const {
  return new BidRequest_UserAttribute;
}

void BidRequest_UserAttribute::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_UserAttribute*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, timestamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_UserAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.UserAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.UserAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.UserAttribute)
  return false;
#undef DO_
}

void BidRequest_UserAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.UserAttribute)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.UserAttribute)
}

::google::protobuf::uint8* BidRequest_UserAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.UserAttribute)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.UserAttribute)
  return target;
}

int BidRequest_UserAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_UserAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_UserAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_UserAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_UserAttribute::MergeFrom(const BidRequest_UserAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_UserAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_UserAttribute::CopyFrom(const BidRequest_UserAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_UserAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_UserAttribute::Swap(BidRequest_UserAttribute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_UserAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_UserAttribute_descriptor_;
  metadata.reflection = BidRequest_UserAttribute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_PrivateInfo::kTanxCnauiFieldNumber;
const int BidRequest_PrivateInfo::kRiskControlFieldNumber;
const int BidRequest_PrivateInfo::kNickNameFieldNumber;
#endif  // !_MSC_VER

BidRequest_PrivateInfo::BidRequest_PrivateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.PrivateInfo)
}

void BidRequest_PrivateInfo::InitAsDefaultInstance() {
}

BidRequest_PrivateInfo::BidRequest_PrivateInfo(const BidRequest_PrivateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.PrivateInfo)
}

void BidRequest_PrivateInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tanx_cnaui_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  risk_control_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_PrivateInfo::~BidRequest_PrivateInfo() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.PrivateInfo)
  SharedDtor();
}

void BidRequest_PrivateInfo::SharedDtor() {
  if (tanx_cnaui_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tanx_cnaui_;
  }
  if (risk_control_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete risk_control_;
  }
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_PrivateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_PrivateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_PrivateInfo_descriptor_;
}

const BidRequest_PrivateInfo& BidRequest_PrivateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_PrivateInfo* BidRequest_PrivateInfo::default_instance_ = NULL;

BidRequest_PrivateInfo* BidRequest_PrivateInfo::New() const {
  return new BidRequest_PrivateInfo;
}

void BidRequest_PrivateInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_tanx_cnaui()) {
      if (tanx_cnaui_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tanx_cnaui_->clear();
      }
    }
    if (has_risk_control()) {
      if (risk_control_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        risk_control_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_PrivateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.PrivateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tanx_cnaui = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tanx_cnaui()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tanx_cnaui().data(), this->tanx_cnaui().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tanx_cnaui");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_risk_control;
        break;
      }

      // optional string risk_control = 2;
      case 2: {
        if (tag == 18) {
         parse_risk_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_risk_control()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->risk_control().data(), this->risk_control().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "risk_control");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (tag == 26) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.PrivateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.PrivateInfo)
  return false;
#undef DO_
}

void BidRequest_PrivateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.PrivateInfo)
  // optional string tanx_cnaui = 1;
  if (has_tanx_cnaui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tanx_cnaui().data(), this->tanx_cnaui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tanx_cnaui");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tanx_cnaui(), output);
  }

  // optional string risk_control = 2;
  if (has_risk_control()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->risk_control().data(), this->risk_control().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "risk_control");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->risk_control(), output);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.PrivateInfo)
}

::google::protobuf::uint8* BidRequest_PrivateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.PrivateInfo)
  // optional string tanx_cnaui = 1;
  if (has_tanx_cnaui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tanx_cnaui().data(), this->tanx_cnaui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tanx_cnaui");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tanx_cnaui(), target);
  }

  // optional string risk_control = 2;
  if (has_risk_control()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->risk_control().data(), this->risk_control().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "risk_control");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->risk_control(), target);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.PrivateInfo)
  return target;
}

int BidRequest_PrivateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tanx_cnaui = 1;
    if (has_tanx_cnaui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tanx_cnaui());
    }

    // optional string risk_control = 2;
    if (has_risk_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->risk_control());
    }

    // optional string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_PrivateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_PrivateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_PrivateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_PrivateInfo::MergeFrom(const BidRequest_PrivateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tanx_cnaui()) {
      set_tanx_cnaui(from.tanx_cnaui());
    }
    if (from.has_risk_control()) {
      set_risk_control(from.risk_control());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_PrivateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_PrivateInfo::CopyFrom(const BidRequest_PrivateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_PrivateInfo::IsInitialized() const {

  return true;
}

void BidRequest_PrivateInfo::Swap(BidRequest_PrivateInfo* other) {
  if (other != this) {
    std::swap(tanx_cnaui_, other->tanx_cnaui_);
    std::swap(risk_control_, other->risk_control_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_PrivateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_PrivateInfo_descriptor_;
  metadata.reflection = BidRequest_PrivateInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_Device_ScreenOrientation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_Device_ScreenOrientation_descriptor_;
}
bool BidRequest_Mobile_Device_ScreenOrientation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::SCREEN_ORIENTATION_UNKNOWN;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::SCREEN_ORIENTATION_PORTRAIT;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::SCREEN_ORIENTATION_LANDSCAPE;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::ScreenOrientation_MIN;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::ScreenOrientation_MAX;
const int BidRequest_Mobile_Device::ScreenOrientation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Mobile_Device::kPlatformFieldNumber;
const int BidRequest_Mobile_Device::kBrandFieldNumber;
const int BidRequest_Mobile_Device::kModelFieldNumber;
const int BidRequest_Mobile_Device::kOsFieldNumber;
const int BidRequest_Mobile_Device::kOsVersionFieldNumber;
const int BidRequest_Mobile_Device::kNetworkFieldNumber;
const int BidRequest_Mobile_Device::kOperatorFieldNumber;
const int BidRequest_Mobile_Device::kLongitudeFieldNumber;
const int BidRequest_Mobile_Device::kLatitudeFieldNumber;
const int BidRequest_Mobile_Device::kDeviceSizeFieldNumber;
const int BidRequest_Mobile_Device::kDeviceIdFieldNumber;
const int BidRequest_Mobile_Device::kDevicePixelRatioFieldNumber;
const int BidRequest_Mobile_Device::kScreenOrientationFieldNumber;
const int BidRequest_Mobile_Device::kAndroidIdFieldNumber;
const int BidRequest_Mobile_Device::kIdfaFieldNumber;
const int BidRequest_Mobile_Device::kImeiFieldNumber;
const int BidRequest_Mobile_Device::kMacFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_Device::BidRequest_Mobile_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Mobile.Device)
}

void BidRequest_Mobile_Device::InitAsDefaultInstance() {
}

BidRequest_Mobile_Device::BidRequest_Mobile_Device(const BidRequest_Mobile_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Mobile.Device)
}

void BidRequest_Mobile_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_ = 0u;
  operator__ = 0;
  longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_pixel_ratio_ = 1000;
  screen_orientation_ = 0;
  android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_Device::~BidRequest_Mobile_Device() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Mobile.Device)
  SharedDtor();
}

void BidRequest_Mobile_Device::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longitude_;
  }
  if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latitude_;
  }
  if (device_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_size_;
  }
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (android_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete android_id_;
  }
  if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idfa_;
  }
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_Device_descriptor_;
}

const BidRequest_Mobile_Device& BidRequest_Mobile_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_Device* BidRequest_Mobile_Device::default_instance_ = NULL;

BidRequest_Mobile_Device* BidRequest_Mobile_Device::New() const {
  return new BidRequest_Mobile_Device;
}

void BidRequest_Mobile_Device::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile_Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(network_, operator__);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_longitude()) {
      if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        longitude_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_latitude()) {
      if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        latitude_->clear();
      }
    }
    if (has_device_size()) {
      if (device_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_size_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_id_->clear();
      }
    }
    device_pixel_ratio_ = 1000;
    screen_orientation_ = 0;
    if (has_android_id()) {
      if (android_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        android_id_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idfa_->clear();
      }
    }
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imei_->clear();
      }
    }
  }
  if (has_mac()) {
    if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mac_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Mobile.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string platform = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_brand;
        break;
      }

      // optional string brand = 2;
      case 2: {
        if (tag == 18) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (tag == 26) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_os;
        break;
      }

      // optional string os = 4;
      case 4: {
        if (tag == 34) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_os_version;
        break;
      }

      // optional string os_version = 5;
      case 5: {
        if (tag == 42) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_network;
        break;
      }

      // optional uint32 network = 6;
      case 6: {
        if (tag == 48) {
         parse_network:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_)));
          set_has_network();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_operator;
        break;
      }

      // optional int32 operator = 7;
      case 7: {
        if (tag == 56) {
         parse_operator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator__)));
          set_has_operator_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_longitude;
        break;
      }

      // optional string longitude = 8;
      case 8: {
        if (tag == 66) {
         parse_longitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->longitude().data(), this->longitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "longitude");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_latitude;
        break;
      }

      // optional string latitude = 9;
      case 9: {
        if (tag == 74) {
         parse_latitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->latitude().data(), this->latitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "latitude");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_device_size;
        break;
      }

      // optional string device_size = 10;
      case 10: {
        if (tag == 82) {
         parse_device_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_size().data(), this->device_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_device_id;
        break;
      }

      // optional string device_id = 11;
      case 11: {
        if (tag == 90) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_device_pixel_ratio;
        break;
      }

      // optional int32 device_pixel_ratio = 12 [default = 1000];
      case 12: {
        if (tag == 96) {
         parse_device_pixel_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_pixel_ratio_)));
          set_has_device_pixel_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_screen_orientation;
        break;
      }

      // optional .Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
      case 13: {
        if (tag == 104) {
         parse_screen_orientation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Tanx::BidRequest_Mobile_Device_ScreenOrientation_IsValid(value)) {
            set_screen_orientation(static_cast< ::Tanx::BidRequest_Mobile_Device_ScreenOrientation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_android_id;
        break;
      }

      // optional string android_id = 14;
      case 14: {
        if (tag == 114) {
         parse_android_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_android_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->android_id().data(), this->android_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "android_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_idfa;
        break;
      }

      // optional string idfa = 15;
      case 15: {
        if (tag == 122) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "idfa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_imei;
        break;
      }

      // optional string imei = 16;
      case 16: {
        if (tag == 130) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_mac;
        break;
      }

      // optional string mac = 17;
      case 17: {
        if (tag == 138) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Mobile.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Mobile.Device)
  return false;
#undef DO_
}

void BidRequest_Mobile_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Mobile.Device)
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->platform(), output);
  }

  // optional string brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brand(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // optional string os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os(), output);
  }

  // optional string os_version = 5;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->os_version(), output);
  }

  // optional uint32 network = 6;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->network(), output);
  }

  // optional int32 operator = 7;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->operator_(), output);
  }

  // optional string longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "longitude");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->longitude(), output);
  }

  // optional string latitude = 9;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "latitude");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->latitude(), output);
  }

  // optional string device_size = 10;
  if (has_device_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_size().data(), this->device_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->device_size(), output);
  }

  // optional string device_id = 11;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->device_id(), output);
  }

  // optional int32 device_pixel_ratio = 12 [default = 1000];
  if (has_device_pixel_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->device_pixel_ratio(), output);
  }

  // optional .Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
  if (has_screen_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->screen_orientation(), output);
  }

  // optional string android_id = 14;
  if (has_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_id().data(), this->android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "android_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->android_id(), output);
  }

  // optional string idfa = 15;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->idfa(), output);
  }

  // optional string imei = 16;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->imei(), output);
  }

  // optional string mac = 17;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->mac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Mobile.Device)
}

::google::protobuf::uint8* BidRequest_Mobile_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Mobile.Device)
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platform(), target);
  }

  // optional string brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brand(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os(), target);
  }

  // optional string os_version = 5;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->os_version(), target);
  }

  // optional uint32 network = 6;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->network(), target);
  }

  // optional int32 operator = 7;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->operator_(), target);
  }

  // optional string longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "longitude");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->longitude(), target);
  }

  // optional string latitude = 9;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "latitude");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->latitude(), target);
  }

  // optional string device_size = 10;
  if (has_device_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_size().data(), this->device_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device_size(), target);
  }

  // optional string device_id = 11;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->device_id(), target);
  }

  // optional int32 device_pixel_ratio = 12 [default = 1000];
  if (has_device_pixel_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->device_pixel_ratio(), target);
  }

  // optional .Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
  if (has_screen_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->screen_orientation(), target);
  }

  // optional string android_id = 14;
  if (has_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_id().data(), this->android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "android_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->android_id(), target);
  }

  // optional string idfa = 15;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->idfa(), target);
  }

  // optional string imei = 16;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->imei(), target);
  }

  // optional string mac = 17;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->mac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Mobile.Device)
  return target;
}

int BidRequest_Mobile_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string brand = 2;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string os = 4;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string os_version = 5;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional uint32 network = 6;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network());
    }

    // optional int32 operator = 7;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operator_());
    }

    // optional string longitude = 8;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longitude());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string latitude = 9;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latitude());
    }

    // optional string device_size = 10;
    if (has_device_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_size());
    }

    // optional string device_id = 11;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 device_pixel_ratio = 12 [default = 1000];
    if (has_device_pixel_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_pixel_ratio());
    }

    // optional .Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
    if (has_screen_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->screen_orientation());
    }

    // optional string android_id = 14;
    if (has_android_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->android_id());
    }

    // optional string idfa = 15;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string imei = 16;
    if (has_imei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string mac = 17;
    if (has_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_Device::MergeFrom(const BidRequest_Mobile_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_device_size()) {
      set_device_size(from.device_size());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_device_pixel_ratio()) {
      set_device_pixel_ratio(from.device_pixel_ratio());
    }
    if (from.has_screen_orientation()) {
      set_screen_orientation(from.screen_orientation());
    }
    if (from.has_android_id()) {
      set_android_id(from.android_id());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_Device::CopyFrom(const BidRequest_Mobile_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_Device::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_Device::Swap(BidRequest_Mobile_Device* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(brand_, other->brand_);
    std::swap(model_, other->model_);
    std::swap(os_, other->os_);
    std::swap(os_version_, other->os_version_);
    std::swap(network_, other->network_);
    std::swap(operator__, other->operator__);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(device_size_, other->device_size_);
    std::swap(device_id_, other->device_id_);
    std::swap(device_pixel_ratio_, other->device_pixel_ratio_);
    std::swap(screen_orientation_, other->screen_orientation_);
    std::swap(android_id_, other->android_id_);
    std::swap(idfa_, other->idfa_);
    std::swap(imei_, other->imei_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_Device_descriptor_;
  metadata.reflection = BidRequest_Mobile_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile_AppCategory::kIdFieldNumber;
const int BidRequest_Mobile_AppCategory::kConfidenceLevelFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_AppCategory::BidRequest_Mobile_AppCategory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Mobile.AppCategory)
}

void BidRequest_Mobile_AppCategory::InitAsDefaultInstance() {
}

BidRequest_Mobile_AppCategory::BidRequest_Mobile_AppCategory(const BidRequest_Mobile_AppCategory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Mobile.AppCategory)
}

void BidRequest_Mobile_AppCategory::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  confidence_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_AppCategory::~BidRequest_Mobile_AppCategory() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Mobile.AppCategory)
  SharedDtor();
}

void BidRequest_Mobile_AppCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_AppCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_AppCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_AppCategory_descriptor_;
}

const BidRequest_Mobile_AppCategory& BidRequest_Mobile_AppCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_AppCategory* BidRequest_Mobile_AppCategory::default_instance_ = NULL;

BidRequest_Mobile_AppCategory* BidRequest_Mobile_AppCategory::New() const {
  return new BidRequest_Mobile_AppCategory;
}

void BidRequest_Mobile_AppCategory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile_AppCategory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, confidence_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_AppCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Mobile.AppCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confidence_level;
        break;
      }

      // required int32 confidence_level = 2;
      case 2: {
        if (tag == 16) {
         parse_confidence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_level_)));
          set_has_confidence_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Mobile.AppCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Mobile.AppCategory)
  return false;
#undef DO_
}

void BidRequest_Mobile_AppCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Mobile.AppCategory)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confidence_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Mobile.AppCategory)
}

::google::protobuf::uint8* BidRequest_Mobile_AppCategory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Mobile.AppCategory)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confidence_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Mobile.AppCategory)
  return target;
}

int BidRequest_Mobile_AppCategory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 confidence_level = 2;
    if (has_confidence_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confidence_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_AppCategory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_AppCategory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_AppCategory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_AppCategory::MergeFrom(const BidRequest_Mobile_AppCategory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confidence_level()) {
      set_confidence_level(from.confidence_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_AppCategory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_AppCategory::CopyFrom(const BidRequest_Mobile_AppCategory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_AppCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_Mobile_AppCategory::Swap(BidRequest_Mobile_AppCategory* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(confidence_level_, other->confidence_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_AppCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_AppCategory_descriptor_;
  metadata.reflection = BidRequest_Mobile_AppCategory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kRequiredFieldsFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kRecommendedFieldsFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kTitleMaxSafeLengthFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kAdWordsMaxSafeLengthFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kImageSizeFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kActionFieldsFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kMultichoiceFieldsFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_NativeAdTemplate_Area_Creative::BidRequest_Mobile_NativeAdTemplate_Area_Creative()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::InitAsDefaultInstance() {
}

BidRequest_Mobile_NativeAdTemplate_Area_Creative::BidRequest_Mobile_NativeAdTemplate_Area_Creative(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_max_safe_length_ = 0;
  ad_words_max_safe_length_ = 0;
  image_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_NativeAdTemplate_Area_Creative::~BidRequest_Mobile_NativeAdTemplate_Area_Creative() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  SharedDtor();
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::SharedDtor() {
  if (image_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_size_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_Area_Creative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_;
}

const BidRequest_Mobile_NativeAdTemplate_Area_Creative& BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_NativeAdTemplate_Area_Creative* BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_ = NULL;

BidRequest_Mobile_NativeAdTemplate_Area_Creative* BidRequest_Mobile_NativeAdTemplate_Area_Creative::New() const {
  return new BidRequest_Mobile_NativeAdTemplate_Area_Creative;
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile_NativeAdTemplate_Area_Creative*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 28) {
    ZR_(title_max_safe_length_, ad_words_max_safe_length_);
    if (has_image_size()) {
      if (image_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_size_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  required_fields_.Clear();
  recommended_fields_.Clear();
  action_fields_.Clear();
  multichoice_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 required_fields = 1;
      case 1: {
        if (tag == 8) {
         parse_required_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_required_fields())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_required_fields())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_required_fields;
        if (input->ExpectTag(16)) goto parse_recommended_fields;
        break;
      }

      // repeated int32 recommended_fields = 2;
      case 2: {
        if (tag == 16) {
         parse_recommended_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_recommended_fields())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recommended_fields())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recommended_fields;
        if (input->ExpectTag(24)) goto parse_title_max_safe_length;
        break;
      }

      // optional int32 title_max_safe_length = 3;
      case 3: {
        if (tag == 24) {
         parse_title_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_max_safe_length_)));
          set_has_title_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ad_words_max_safe_length;
        break;
      }

      // optional int32 ad_words_max_safe_length = 4;
      case 4: {
        if (tag == 32) {
         parse_ad_words_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad_words_max_safe_length_)));
          set_has_ad_words_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_size;
        break;
      }

      // optional string image_size = 5;
      case 5: {
        if (tag == 42) {
         parse_image_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_size().data(), this->image_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_action_fields;
        break;
      }

      // repeated int32 action_fields = 6;
      case 6: {
        if (tag == 48) {
         parse_action_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_action_fields())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_action_fields())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_action_fields;
        if (input->ExpectTag(56)) goto parse_multichoice_fields;
        break;
      }

      // repeated int32 multichoice_fields = 7;
      case 7: {
        if (tag == 56) {
         parse_multichoice_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_multichoice_fields())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_multichoice_fields())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_multichoice_fields;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  return false;
#undef DO_
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  // repeated int32 required_fields = 1;
  for (int i = 0; i < this->required_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->required_fields(i), output);
  }

  // repeated int32 recommended_fields = 2;
  for (int i = 0; i < this->recommended_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->recommended_fields(i), output);
  }

  // optional int32 title_max_safe_length = 3;
  if (has_title_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->title_max_safe_length(), output);
  }

  // optional int32 ad_words_max_safe_length = 4;
  if (has_ad_words_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ad_words_max_safe_length(), output);
  }

  // optional string image_size = 5;
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_size().data(), this->image_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_size(), output);
  }

  // repeated int32 action_fields = 6;
  for (int i = 0; i < this->action_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->action_fields(i), output);
  }

  // repeated int32 multichoice_fields = 7;
  for (int i = 0; i < this->multichoice_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->multichoice_fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
}

::google::protobuf::uint8* BidRequest_Mobile_NativeAdTemplate_Area_Creative::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  // repeated int32 required_fields = 1;
  for (int i = 0; i < this->required_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->required_fields(i), target);
  }

  // repeated int32 recommended_fields = 2;
  for (int i = 0; i < this->recommended_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->recommended_fields(i), target);
  }

  // optional int32 title_max_safe_length = 3;
  if (has_title_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->title_max_safe_length(), target);
  }

  // optional int32 ad_words_max_safe_length = 4;
  if (has_ad_words_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ad_words_max_safe_length(), target);
  }

  // optional string image_size = 5;
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_size().data(), this->image_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->image_size(), target);
  }

  // repeated int32 action_fields = 6;
  for (int i = 0; i < this->action_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->action_fields(i), target);
  }

  // repeated int32 multichoice_fields = 7;
  for (int i = 0; i < this->multichoice_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->multichoice_fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  return target;
}

int BidRequest_Mobile_NativeAdTemplate_Area_Creative::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 title_max_safe_length = 3;
    if (has_title_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_max_safe_length());
    }

    // optional int32 ad_words_max_safe_length = 4;
    if (has_ad_words_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad_words_max_safe_length());
    }

    // optional string image_size = 5;
    if (has_image_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_size());
    }

  }
  // repeated int32 required_fields = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->required_fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->required_fields(i));
    }
    total_size += 1 * this->required_fields_size() + data_size;
  }

  // repeated int32 recommended_fields = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->recommended_fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recommended_fields(i));
    }
    total_size += 1 * this->recommended_fields_size() + data_size;
  }

  // repeated int32 action_fields = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->action_fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->action_fields(i));
    }
    total_size += 1 * this->action_fields_size() + data_size;
  }

  // repeated int32 multichoice_fields = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->multichoice_fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->multichoice_fields(i));
    }
    total_size += 1 * this->multichoice_fields_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_NativeAdTemplate_Area_Creative* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_NativeAdTemplate_Area_Creative*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::MergeFrom(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from) {
  GOOGLE_CHECK_NE(&from, this);
  required_fields_.MergeFrom(from.required_fields_);
  recommended_fields_.MergeFrom(from.recommended_fields_);
  action_fields_.MergeFrom(from.action_fields_);
  multichoice_fields_.MergeFrom(from.multichoice_fields_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_title_max_safe_length()) {
      set_title_max_safe_length(from.title_max_safe_length());
    }
    if (from.has_ad_words_max_safe_length()) {
      set_ad_words_max_safe_length(from.ad_words_max_safe_length());
    }
    if (from.has_image_size()) {
      set_image_size(from.image_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::CopyFrom(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::Swap(BidRequest_Mobile_NativeAdTemplate_Area_Creative* other) {
  if (other != this) {
    required_fields_.Swap(&other->required_fields_);
    recommended_fields_.Swap(&other->recommended_fields_);
    std::swap(title_max_safe_length_, other->title_max_safe_length_);
    std::swap(ad_words_max_safe_length_, other->ad_words_max_safe_length_);
    std::swap(image_size_, other->image_size_);
    action_fields_.Swap(&other->action_fields_);
    multichoice_fields_.Swap(&other->multichoice_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_NativeAdTemplate_Area_Creative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_;
  metadata.reflection = BidRequest_Mobile_NativeAdTemplate_Area_Creative_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile_NativeAdTemplate_Area::kIdFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area::kCreativeCountFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area::kCreativeFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_NativeAdTemplate_Area::BidRequest_Mobile_NativeAdTemplate_Area()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
}

void BidRequest_Mobile_NativeAdTemplate_Area::InitAsDefaultInstance() {
  creative_ = const_cast< ::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative*>(&::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance());
}

BidRequest_Mobile_NativeAdTemplate_Area::BidRequest_Mobile_NativeAdTemplate_Area(const BidRequest_Mobile_NativeAdTemplate_Area& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
}

void BidRequest_Mobile_NativeAdTemplate_Area::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  creative_count_ = 0;
  creative_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_NativeAdTemplate_Area::~BidRequest_Mobile_NativeAdTemplate_Area() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  SharedDtor();
}

void BidRequest_Mobile_NativeAdTemplate_Area::SharedDtor() {
  if (this != default_instance_) {
    delete creative_;
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_Area::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_NativeAdTemplate_Area_descriptor_;
}

const BidRequest_Mobile_NativeAdTemplate_Area& BidRequest_Mobile_NativeAdTemplate_Area::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_NativeAdTemplate_Area* BidRequest_Mobile_NativeAdTemplate_Area::default_instance_ = NULL;

BidRequest_Mobile_NativeAdTemplate_Area* BidRequest_Mobile_NativeAdTemplate_Area::New() const {
  return new BidRequest_Mobile_NativeAdTemplate_Area;
}

void BidRequest_Mobile_NativeAdTemplate_Area::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile_NativeAdTemplate_Area*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, creative_count_);
    if (has_creative()) {
      if (creative_ != NULL) creative_->::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_NativeAdTemplate_Area::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creative_count;
        break;
      }

      // optional int32 creative_count = 2;
      case 2: {
        if (tag == 16) {
         parse_creative_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_count_)));
          set_has_creative_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creative;
        break;
      }

      // optional .Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
      case 3: {
        if (tag == 26) {
         parse_creative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  return false;
#undef DO_
}

void BidRequest_Mobile_NativeAdTemplate_Area::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 creative_count = 2;
  if (has_creative_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->creative_count(), output);
  }

  // optional .Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
  if (has_creative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->creative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
}

::google::protobuf::uint8* BidRequest_Mobile_NativeAdTemplate_Area::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 creative_count = 2;
  if (has_creative_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->creative_count(), target);
  }

  // optional .Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
  if (has_creative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->creative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  return target;
}

int BidRequest_Mobile_NativeAdTemplate_Area::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 creative_count = 2;
    if (has_creative_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_count());
    }

    // optional .Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
    if (has_creative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creative());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_NativeAdTemplate_Area::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_NativeAdTemplate_Area* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_NativeAdTemplate_Area*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area::MergeFrom(const BidRequest_Mobile_NativeAdTemplate_Area& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_creative_count()) {
      set_creative_count(from.creative_count());
    }
    if (from.has_creative()) {
      mutable_creative()->::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative::MergeFrom(from.creative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_NativeAdTemplate_Area::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_NativeAdTemplate_Area::CopyFrom(const BidRequest_Mobile_NativeAdTemplate_Area& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_NativeAdTemplate_Area::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_Mobile_NativeAdTemplate_Area::Swap(BidRequest_Mobile_NativeAdTemplate_Area* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(creative_count_, other->creative_count_);
    std::swap(creative_, other->creative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_NativeAdTemplate_Area::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_NativeAdTemplate_Area_descriptor_;
  metadata.reflection = BidRequest_Mobile_NativeAdTemplate_Area_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile_NativeAdTemplate::kNativeTemplateIdFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate::kAreasFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_NativeAdTemplate::BidRequest_Mobile_NativeAdTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Mobile.NativeAdTemplate)
}

void BidRequest_Mobile_NativeAdTemplate::InitAsDefaultInstance() {
}

BidRequest_Mobile_NativeAdTemplate::BidRequest_Mobile_NativeAdTemplate(const BidRequest_Mobile_NativeAdTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Mobile.NativeAdTemplate)
}

void BidRequest_Mobile_NativeAdTemplate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  native_template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_NativeAdTemplate::~BidRequest_Mobile_NativeAdTemplate() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Mobile.NativeAdTemplate)
  SharedDtor();
}

void BidRequest_Mobile_NativeAdTemplate::SharedDtor() {
  if (native_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete native_template_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_NativeAdTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_NativeAdTemplate_descriptor_;
}

const BidRequest_Mobile_NativeAdTemplate& BidRequest_Mobile_NativeAdTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_NativeAdTemplate* BidRequest_Mobile_NativeAdTemplate::default_instance_ = NULL;

BidRequest_Mobile_NativeAdTemplate* BidRequest_Mobile_NativeAdTemplate::New() const {
  return new BidRequest_Mobile_NativeAdTemplate;
}

void BidRequest_Mobile_NativeAdTemplate::Clear() {
  if (has_native_template_id()) {
    if (native_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      native_template_id_->clear();
    }
  }
  areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_NativeAdTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Mobile.NativeAdTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string native_template_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_native_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->native_template_id().data(), this->native_template_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "native_template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_areas;
        break;
      }

      // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
      case 2: {
        if (tag == 18) {
         parse_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_areas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Mobile.NativeAdTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Mobile.NativeAdTemplate)
  return false;
#undef DO_
}

void BidRequest_Mobile_NativeAdTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Mobile.NativeAdTemplate)
  // required string native_template_id = 1;
  if (has_native_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id().data(), this->native_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "native_template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->native_template_id(), output);
  }

  // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
  for (int i = 0; i < this->areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->areas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Mobile.NativeAdTemplate)
}

::google::protobuf::uint8* BidRequest_Mobile_NativeAdTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Mobile.NativeAdTemplate)
  // required string native_template_id = 1;
  if (has_native_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id().data(), this->native_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "native_template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->native_template_id(), target);
  }

  // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
  for (int i = 0; i < this->areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->areas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Mobile.NativeAdTemplate)
  return target;
}

int BidRequest_Mobile_NativeAdTemplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string native_template_id = 1;
    if (has_native_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->native_template_id());
    }

  }
  // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
  total_size += 1 * this->areas_size();
  for (int i = 0; i < this->areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_NativeAdTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_NativeAdTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_NativeAdTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_NativeAdTemplate::MergeFrom(const BidRequest_Mobile_NativeAdTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  areas_.MergeFrom(from.areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_native_template_id()) {
      set_native_template_id(from.native_template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_NativeAdTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_NativeAdTemplate::CopyFrom(const BidRequest_Mobile_NativeAdTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_NativeAdTemplate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->areas())) return false;
  return true;
}

void BidRequest_Mobile_NativeAdTemplate::Swap(BidRequest_Mobile_NativeAdTemplate* other) {
  if (other != this) {
    std::swap(native_template_id_, other->native_template_id_);
    areas_.Swap(&other->areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_NativeAdTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_NativeAdTemplate_descriptor_;
  metadata.reflection = BidRequest_Mobile_NativeAdTemplate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile::kIsAppFieldNumber;
const int BidRequest_Mobile::kAdNumFieldNumber;
const int BidRequest_Mobile::kAdKeywordFieldNumber;
const int BidRequest_Mobile::kIsFullscreenFieldNumber;
const int BidRequest_Mobile::kPackageNameFieldNumber;
const int BidRequest_Mobile::kDeviceFieldNumber;
const int BidRequest_Mobile::kNativeTemplateIdFieldNumber;
const int BidRequest_Mobile::kLandingTypeFieldNumber;
const int BidRequest_Mobile::kAppNameFieldNumber;
const int BidRequest_Mobile::kAppCategoriesFieldNumber;
const int BidRequest_Mobile::kNativeAdTemplateFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile::BidRequest_Mobile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Mobile)
}

void BidRequest_Mobile::InitAsDefaultInstance() {
  device_ = const_cast< ::Tanx::BidRequest_Mobile_Device*>(&::Tanx::BidRequest_Mobile_Device::default_instance());
}

BidRequest_Mobile::BidRequest_Mobile(const BidRequest_Mobile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Mobile)
}

void BidRequest_Mobile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_app_ = false;
  ad_num_ = 0u;
  is_fullscreen_ = false;
  package_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = NULL;
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile::~BidRequest_Mobile() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Mobile)
  SharedDtor();
}

void BidRequest_Mobile::SharedDtor() {
  if (package_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete package_name_;
  }
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (this != default_instance_) {
    delete device_;
  }
}

void BidRequest_Mobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_descriptor_;
}

const BidRequest_Mobile& BidRequest_Mobile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile* BidRequest_Mobile::default_instance_ = NULL;

BidRequest_Mobile* BidRequest_Mobile::New() const {
  return new BidRequest_Mobile;
}

void BidRequest_Mobile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Mobile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(ad_num_, is_fullscreen_);
    if (has_package_name()) {
      if (package_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        package_name_->clear();
      }
    }
    if (has_device()) {
      if (device_ != NULL) device_->::Tanx::BidRequest_Mobile_Device::Clear();
    }
  }
  if (has_app_name()) {
    if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      app_name_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ad_keyword_.Clear();
  native_template_id_.Clear();
  landing_type_.Clear();
  app_categories_.Clear();
  native_ad_template_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Mobile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_app = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_app_)));
          set_has_is_app();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ad_num;
        break;
      }

      // optional uint32 ad_num = 2;
      case 2: {
        if (tag == 16) {
         parse_ad_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_num_)));
          set_has_ad_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ad_keyword;
        break;
      }

      // repeated string ad_keyword = 3;
      case 3: {
        if (tag == 26) {
         parse_ad_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ad_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ad_keyword(this->ad_keyword_size() - 1).data(),
            this->ad_keyword(this->ad_keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ad_keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ad_keyword;
        if (input->ExpectTag(32)) goto parse_is_fullscreen;
        break;
      }

      // optional bool is_fullscreen = 4;
      case 4: {
        if (tag == 32) {
         parse_is_fullscreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fullscreen_)));
          set_has_is_fullscreen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_package_name;
        break;
      }

      // optional string package_name = 5;
      case 5: {
        if (tag == 42) {
         parse_package_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_name().data(), this->package_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "package_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // optional .Tanx.BidRequest.Mobile.Device device = 6;
      case 6: {
        if (tag == 50) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_native_template_id;
        break;
      }

      // repeated string native_template_id = 7;
      case 7: {
        if (tag == 58) {
         parse_native_template_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_native_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->native_template_id(this->native_template_id_size() - 1).data(),
            this->native_template_id(this->native_template_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "native_template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_native_template_id;
        if (input->ExpectTag(64)) goto parse_landing_type;
        break;
      }

      // repeated int32 landing_type = 8;
      case 8: {
        if (tag == 64) {
         parse_landing_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_landing_type())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_landing_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_landing_type;
        if (input->ExpectTag(74)) goto parse_app_name;
        break;
      }

      // optional string app_name = 9;
      case 9: {
        if (tag == 74) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_app_categories;
        break;
      }

      // repeated .Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
      case 10: {
        if (tag == 82) {
         parse_app_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app_categories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_app_categories;
        if (input->ExpectTag(90)) goto parse_native_ad_template;
        break;
      }

      // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
      case 11: {
        if (tag == 90) {
         parse_native_ad_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_native_ad_template()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_native_ad_template;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Mobile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Mobile)
  return false;
#undef DO_
}

void BidRequest_Mobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Mobile)
  // optional bool is_app = 1;
  if (has_is_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_app(), output);
  }

  // optional uint32 ad_num = 2;
  if (has_ad_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ad_num(), output);
  }

  // repeated string ad_keyword = 3;
  for (int i = 0; i < this->ad_keyword_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->ad_keyword(i).data(), this->ad_keyword(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "ad_keyword");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ad_keyword(i), output);
  }

  // optional bool is_fullscreen = 4;
  if (has_is_fullscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_fullscreen(), output);
  }

  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "package_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->package_name(), output);
  }

  // optional .Tanx.BidRequest.Mobile.Device device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->device(), output);
  }

  // repeated string native_template_id = 7;
  for (int i = 0; i < this->native_template_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->native_template_id(i).data(), this->native_template_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "native_template_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->native_template_id(i), output);
  }

  // repeated int32 landing_type = 8;
  for (int i = 0; i < this->landing_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->landing_type(i), output);
  }

  // optional string app_name = 9;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->app_name(), output);
  }

  // repeated .Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
  for (int i = 0; i < this->app_categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->app_categories(i), output);
  }

  // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
  for (int i = 0; i < this->native_ad_template_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->native_ad_template(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Mobile)
}

::google::protobuf::uint8* BidRequest_Mobile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Mobile)
  // optional bool is_app = 1;
  if (has_is_app()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_app(), target);
  }

  // optional uint32 ad_num = 2;
  if (has_ad_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ad_num(), target);
  }

  // repeated string ad_keyword = 3;
  for (int i = 0; i < this->ad_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ad_keyword(i).data(), this->ad_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ad_keyword");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->ad_keyword(i), target);
  }

  // optional bool is_fullscreen = 4;
  if (has_is_fullscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_fullscreen(), target);
  }

  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "package_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->package_name(), target);
  }

  // optional .Tanx.BidRequest.Mobile.Device device = 6;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->device(), target);
  }

  // repeated string native_template_id = 7;
  for (int i = 0; i < this->native_template_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id(i).data(), this->native_template_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "native_template_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->native_template_id(i), target);
  }

  // repeated int32 landing_type = 8;
  for (int i = 0; i < this->landing_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->landing_type(i), target);
  }

  // optional string app_name = 9;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->app_name(), target);
  }

  // repeated .Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
  for (int i = 0; i < this->app_categories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->app_categories(i), target);
  }

  // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
  for (int i = 0; i < this->native_ad_template_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->native_ad_template(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Mobile)
  return target;
}

int BidRequest_Mobile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_app = 1;
    if (has_is_app()) {
      total_size += 1 + 1;
    }

    // optional uint32 ad_num = 2;
    if (has_ad_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_num());
    }

    // optional bool is_fullscreen = 4;
    if (has_is_fullscreen()) {
      total_size += 1 + 1;
    }

    // optional string package_name = 5;
    if (has_package_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional .Tanx.BidRequest.Mobile.Device device = 6;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string app_name = 9;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

  }
  // repeated string ad_keyword = 3;
  total_size += 1 * this->ad_keyword_size();
  for (int i = 0; i < this->ad_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ad_keyword(i));
  }

  // repeated string native_template_id = 7;
  total_size += 1 * this->native_template_id_size();
  for (int i = 0; i < this->native_template_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->native_template_id(i));
  }

  // repeated int32 landing_type = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->landing_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->landing_type(i));
    }
    total_size += 1 * this->landing_type_size() + data_size;
  }

  // repeated .Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
  total_size += 1 * this->app_categories_size();
  for (int i = 0; i < this->app_categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app_categories(i));
  }

  // repeated .Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
  total_size += 1 * this->native_ad_template_size();
  for (int i = 0; i < this->native_ad_template_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->native_ad_template(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile::MergeFrom(const BidRequest_Mobile& from) {
  GOOGLE_CHECK_NE(&from, this);
  ad_keyword_.MergeFrom(from.ad_keyword_);
  native_template_id_.MergeFrom(from.native_template_id_);
  landing_type_.MergeFrom(from.landing_type_);
  app_categories_.MergeFrom(from.app_categories_);
  native_ad_template_.MergeFrom(from.native_ad_template_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_app()) {
      set_is_app(from.is_app());
    }
    if (from.has_ad_num()) {
      set_ad_num(from.ad_num());
    }
    if (from.has_is_fullscreen()) {
      set_is_fullscreen(from.is_fullscreen());
    }
    if (from.has_package_name()) {
      set_package_name(from.package_name());
    }
    if (from.has_device()) {
      mutable_device()->::Tanx::BidRequest_Mobile_Device::MergeFrom(from.device());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile::CopyFrom(const BidRequest_Mobile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->app_categories())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->native_ad_template())) return false;
  return true;
}

void BidRequest_Mobile::Swap(BidRequest_Mobile* other) {
  if (other != this) {
    std::swap(is_app_, other->is_app_);
    std::swap(ad_num_, other->ad_num_);
    ad_keyword_.Swap(&other->ad_keyword_);
    std::swap(is_fullscreen_, other->is_fullscreen_);
    std::swap(package_name_, other->package_name_);
    std::swap(device_, other->device_);
    native_template_id_.Swap(&other->native_template_id_);
    landing_type_.Swap(&other->landing_type_);
    std::swap(app_name_, other->app_name_);
    app_categories_.Swap(&other->app_categories_);
    native_ad_template_.Swap(&other->native_ad_template_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_descriptor_;
  metadata.reflection = BidRequest_Mobile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_ContentCategory::kIdFieldNumber;
const int BidRequest_ContentCategory::kConfidenceLevelFieldNumber;
#endif  // !_MSC_VER

BidRequest_ContentCategory::BidRequest_ContentCategory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.ContentCategory)
}

void BidRequest_ContentCategory::InitAsDefaultInstance() {
}

BidRequest_ContentCategory::BidRequest_ContentCategory(const BidRequest_ContentCategory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.ContentCategory)
}

void BidRequest_ContentCategory::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  confidence_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_ContentCategory::~BidRequest_ContentCategory() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.ContentCategory)
  SharedDtor();
}

void BidRequest_ContentCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_ContentCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_ContentCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_ContentCategory_descriptor_;
}

const BidRequest_ContentCategory& BidRequest_ContentCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_ContentCategory* BidRequest_ContentCategory::default_instance_ = NULL;

BidRequest_ContentCategory* BidRequest_ContentCategory::New() const {
  return new BidRequest_ContentCategory;
}

void BidRequest_ContentCategory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_ContentCategory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, confidence_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_ContentCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.ContentCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confidence_level;
        break;
      }

      // required int32 confidence_level = 2;
      case 2: {
        if (tag == 16) {
         parse_confidence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_level_)));
          set_has_confidence_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.ContentCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.ContentCategory)
  return false;
#undef DO_
}

void BidRequest_ContentCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.ContentCategory)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confidence_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.ContentCategory)
}

::google::protobuf::uint8* BidRequest_ContentCategory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.ContentCategory)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confidence_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.ContentCategory)
  return target;
}

int BidRequest_ContentCategory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 confidence_level = 2;
    if (has_confidence_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confidence_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_ContentCategory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_ContentCategory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_ContentCategory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_ContentCategory::MergeFrom(const BidRequest_ContentCategory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confidence_level()) {
      set_confidence_level(from.confidence_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_ContentCategory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_ContentCategory::CopyFrom(const BidRequest_ContentCategory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_ContentCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_ContentCategory::Swap(BidRequest_ContentCategory* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(confidence_level_, other->confidence_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_ContentCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_ContentCategory_descriptor_;
  metadata.reflection = BidRequest_ContentCategory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_VideoFormat_descriptor_;
}
bool BidRequest_Video_VideoFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_FLASH;
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_HTML5;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MIN;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MAX;
const int BidRequest_Video::VideoFormat_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Video_Content::kTitleFieldNumber;
const int BidRequest_Video_Content::kDurationFieldNumber;
const int BidRequest_Video_Content::kKeywordsFieldNumber;
#endif  // !_MSC_VER

BidRequest_Video_Content::BidRequest_Video_Content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Video.Content)
}

void BidRequest_Video_Content::InitAsDefaultInstance() {
}

BidRequest_Video_Content::BidRequest_Video_Content(const BidRequest_Video_Content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Video.Content)
}

void BidRequest_Video_Content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video_Content::~BidRequest_Video_Content() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Video.Content)
  SharedDtor();
}

void BidRequest_Video_Content::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Video_Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_Content_descriptor_;
}

const BidRequest_Video_Content& BidRequest_Video_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video_Content* BidRequest_Video_Content::default_instance_ = NULL;

BidRequest_Video_Content* BidRequest_Video_Content::New() const {
  return new BidRequest_Video_Content;
}

void BidRequest_Video_Content::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    duration_ = 0;
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Video_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Video.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 3;
      case 3: {
        if (tag == 26) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Video.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Video.Content)
  return false;
#undef DO_
}

void BidRequest_Video_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Video.Content)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keywords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Video.Content)
}

::google::protobuf::uint8* BidRequest_Video_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Video.Content)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->keywords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Video.Content)
  return target;
}

int BidRequest_Video_Content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  // repeated string keywords = 3;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Video_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Video_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video_Content::MergeFrom(const BidRequest_Video_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Video_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video_Content::CopyFrom(const BidRequest_Video_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video_Content::IsInitialized() const {

  return true;
}

void BidRequest_Video_Content::Swap(BidRequest_Video_Content* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(duration_, other->duration_);
    keywords_.Swap(&other->keywords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Video_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_Content_descriptor_;
  metadata.reflection = BidRequest_Video_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Video::kVideoFormatFieldNumber;
const int BidRequest_Video::kContentFieldNumber;
const int BidRequest_Video::kVideoadStartDelayFieldNumber;
const int BidRequest_Video::kVideoadSectionStartDelayFieldNumber;
const int BidRequest_Video::kMinAdDurationFieldNumber;
const int BidRequest_Video::kMaxAdDurationFieldNumber;
const int BidRequest_Video::kProtocolFieldNumber;
#endif  // !_MSC_VER

BidRequest_Video::BidRequest_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Video)
}

void BidRequest_Video::InitAsDefaultInstance() {
  content_ = const_cast< ::Tanx::BidRequest_Video_Content*>(&::Tanx::BidRequest_Video_Content::default_instance());
}

BidRequest_Video::BidRequest_Video(const BidRequest_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Video)
}

void BidRequest_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = NULL;
  videoad_start_delay_ = 0;
  videoad_section_start_delay_ = 0;
  min_ad_duration_ = 0;
  max_ad_duration_ = 0;
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video::~BidRequest_Video() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Video)
  SharedDtor();
}

void BidRequest_Video::SharedDtor() {
  if (protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocol_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void BidRequest_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_descriptor_;
}

const BidRequest_Video& BidRequest_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video* BidRequest_Video::default_instance_ = NULL;

BidRequest_Video* BidRequest_Video::New() const {
  return new BidRequest_Video;
}

void BidRequest_Video::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 126) {
    ZR_(videoad_start_delay_, max_ad_duration_);
    if (has_content()) {
      if (content_ != NULL) content_->::Tanx::BidRequest_Video_Content::Clear();
    }
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        protocol_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  video_format_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
      case 1: {
        if (tag == 8) {
         parse_video_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Tanx::BidRequest_Video_VideoFormat_IsValid(value)) {
            add_video_format(static_cast< ::Tanx::BidRequest_Video_VideoFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Tanx::BidRequest_Video_VideoFormat_IsValid,
                 this->mutable_video_format())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_video_format;
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .Tanx.BidRequest.Video.Content content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_videoad_start_delay;
        break;
      }

      // optional int32 videoad_start_delay = 3;
      case 3: {
        if (tag == 24) {
         parse_videoad_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_start_delay_)));
          set_has_videoad_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_videoad_section_start_delay;
        break;
      }

      // optional int32 videoad_section_start_delay = 4;
      case 4: {
        if (tag == 32) {
         parse_videoad_section_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_section_start_delay_)));
          set_has_videoad_section_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_min_ad_duration;
        break;
      }

      // optional int32 min_ad_duration = 5;
      case 5: {
        if (tag == 40) {
         parse_min_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_ad_duration_)));
          set_has_min_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_ad_duration;
        break;
      }

      // optional int32 max_ad_duration = 6;
      case 6: {
        if (tag == 48) {
         parse_max_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ad_duration_)));
          set_has_max_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_protocol;
        break;
      }

      // optional string protocol = 7;
      case 7: {
        if (tag == 58) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Video)
  return false;
#undef DO_
}

void BidRequest_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Video)
  // repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
  for (int i = 0; i < this->video_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->video_format(i), output);
  }

  // optional .Tanx.BidRequest.Video.Content content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  // optional int32 videoad_start_delay = 3;
  if (has_videoad_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->videoad_start_delay(), output);
  }

  // optional int32 videoad_section_start_delay = 4;
  if (has_videoad_section_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->videoad_section_start_delay(), output);
  }

  // optional int32 min_ad_duration = 5;
  if (has_min_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_ad_duration(), output);
  }

  // optional int32 max_ad_duration = 6;
  if (has_max_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_ad_duration(), output);
  }

  // optional string protocol = 7;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->protocol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Video)
}

::google::protobuf::uint8* BidRequest_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Video)
  // repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
  for (int i = 0; i < this->video_format_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->video_format(i), target);
  }

  // optional .Tanx.BidRequest.Video.Content content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  // optional int32 videoad_start_delay = 3;
  if (has_videoad_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->videoad_start_delay(), target);
  }

  // optional int32 videoad_section_start_delay = 4;
  if (has_videoad_section_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->videoad_section_start_delay(), target);
  }

  // optional int32 min_ad_duration = 5;
  if (has_min_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_ad_duration(), target);
  }

  // optional int32 max_ad_duration = 6;
  if (has_max_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_ad_duration(), target);
  }

  // optional string protocol = 7;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->protocol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Video)
  return target;
}

int BidRequest_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Tanx.BidRequest.Video.Content content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional int32 videoad_start_delay = 3;
    if (has_videoad_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_start_delay());
    }

    // optional int32 videoad_section_start_delay = 4;
    if (has_videoad_section_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_section_start_delay());
    }

    // optional int32 min_ad_duration = 5;
    if (has_min_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_ad_duration());
    }

    // optional int32 max_ad_duration = 6;
    if (has_max_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ad_duration());
    }

    // optional string protocol = 7;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

  }
  // repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->video_format_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->video_format(i));
    }
    total_size += 1 * this->video_format_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video::MergeFrom(const BidRequest_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  video_format_.MergeFrom(from.video_format_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_content()) {
      mutable_content()->::Tanx::BidRequest_Video_Content::MergeFrom(from.content());
    }
    if (from.has_videoad_start_delay()) {
      set_videoad_start_delay(from.videoad_start_delay());
    }
    if (from.has_videoad_section_start_delay()) {
      set_videoad_section_start_delay(from.videoad_section_start_delay());
    }
    if (from.has_min_ad_duration()) {
      set_min_ad_duration(from.min_ad_duration());
    }
    if (from.has_max_ad_duration()) {
      set_max_ad_duration(from.max_ad_duration());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video::CopyFrom(const BidRequest_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video::IsInitialized() const {

  return true;
}

void BidRequest_Video::Swap(BidRequest_Video* other) {
  if (other != this) {
    video_format_.Swap(&other->video_format_);
    std::swap(content_, other->content_);
    std::swap(videoad_start_delay_, other->videoad_start_delay_);
    std::swap(videoad_section_start_delay_, other->videoad_section_start_delay_);
    std::swap(min_ad_duration_, other->min_ad_duration_);
    std::swap(max_ad_duration_, other->max_ad_duration_);
    std::swap(protocol_, other->protocol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_descriptor_;
  metadata.reflection = BidRequest_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Deal_PreferredDeal::kDealidFieldNumber;
const int BidRequest_Deal_PreferredDeal::kAdvertiserIdsFieldNumber;
const int BidRequest_Deal_PreferredDeal::kFixCpmPriceFieldNumber;
const int BidRequest_Deal_PreferredDeal::kIsDirectBuyFieldNumber;
#endif  // !_MSC_VER

BidRequest_Deal_PreferredDeal::BidRequest_Deal_PreferredDeal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Deal.PreferredDeal)
}

void BidRequest_Deal_PreferredDeal::InitAsDefaultInstance() {
}

BidRequest_Deal_PreferredDeal::BidRequest_Deal_PreferredDeal(const BidRequest_Deal_PreferredDeal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Deal.PreferredDeal)
}

void BidRequest_Deal_PreferredDeal::SharedCtor() {
  _cached_size_ = 0;
  dealid_ = 0u;
  fix_cpm_price_ = 0u;
  is_direct_buy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Deal_PreferredDeal::~BidRequest_Deal_PreferredDeal() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Deal.PreferredDeal)
  SharedDtor();
}

void BidRequest_Deal_PreferredDeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Deal_PreferredDeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Deal_PreferredDeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Deal_PreferredDeal_descriptor_;
}

const BidRequest_Deal_PreferredDeal& BidRequest_Deal_PreferredDeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Deal_PreferredDeal* BidRequest_Deal_PreferredDeal::default_instance_ = NULL;

BidRequest_Deal_PreferredDeal* BidRequest_Deal_PreferredDeal::New() const {
  return new BidRequest_Deal_PreferredDeal;
}

void BidRequest_Deal_PreferredDeal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Deal_PreferredDeal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dealid_, is_direct_buy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  advertiser_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Deal_PreferredDeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Deal.PreferredDeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dealid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealid_)));
          set_has_dealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_advertiser_ids;
        break;
      }

      // repeated uint32 advertiser_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_advertiser_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_advertiser_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_advertiser_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_advertiser_ids;
        if (input->ExpectTag(24)) goto parse_fix_cpm_price;
        break;
      }

      // optional uint32 fix_cpm_price = 3;
      case 3: {
        if (tag == 24) {
         parse_fix_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_cpm_price_)));
          set_has_fix_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_direct_buy;
        break;
      }

      // optional bool is_direct_buy = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_is_direct_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_direct_buy_)));
          set_has_is_direct_buy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Deal.PreferredDeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Deal.PreferredDeal)
  return false;
#undef DO_
}

void BidRequest_Deal_PreferredDeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Deal.PreferredDeal)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dealid(), output);
  }

  // repeated uint32 advertiser_ids = 2;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->advertiser_ids(i), output);
  }

  // optional uint32 fix_cpm_price = 3;
  if (has_fix_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fix_cpm_price(), output);
  }

  // optional bool is_direct_buy = 4 [default = false];
  if (has_is_direct_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_direct_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Deal.PreferredDeal)
}

::google::protobuf::uint8* BidRequest_Deal_PreferredDeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Deal.PreferredDeal)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dealid(), target);
  }

  // repeated uint32 advertiser_ids = 2;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->advertiser_ids(i), target);
  }

  // optional uint32 fix_cpm_price = 3;
  if (has_fix_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fix_cpm_price(), target);
  }

  // optional bool is_direct_buy = 4 [default = false];
  if (has_is_direct_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_direct_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Deal.PreferredDeal)
  return target;
}

int BidRequest_Deal_PreferredDeal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dealid = 1;
    if (has_dealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dealid());
    }

    // optional uint32 fix_cpm_price = 3;
    if (has_fix_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fix_cpm_price());
    }

    // optional bool is_direct_buy = 4 [default = false];
    if (has_is_direct_buy()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 advertiser_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->advertiser_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->advertiser_ids(i));
    }
    total_size += 1 * this->advertiser_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Deal_PreferredDeal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Deal_PreferredDeal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Deal_PreferredDeal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Deal_PreferredDeal::MergeFrom(const BidRequest_Deal_PreferredDeal& from) {
  GOOGLE_CHECK_NE(&from, this);
  advertiser_ids_.MergeFrom(from.advertiser_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
    if (from.has_fix_cpm_price()) {
      set_fix_cpm_price(from.fix_cpm_price());
    }
    if (from.has_is_direct_buy()) {
      set_is_direct_buy(from.is_direct_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Deal_PreferredDeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Deal_PreferredDeal::CopyFrom(const BidRequest_Deal_PreferredDeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Deal_PreferredDeal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_Deal_PreferredDeal::Swap(BidRequest_Deal_PreferredDeal* other) {
  if (other != this) {
    std::swap(dealid_, other->dealid_);
    advertiser_ids_.Swap(&other->advertiser_ids_);
    std::swap(fix_cpm_price_, other->fix_cpm_price_);
    std::swap(is_direct_buy_, other->is_direct_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Deal_PreferredDeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Deal_PreferredDeal_descriptor_;
  metadata.reflection = BidRequest_Deal_PreferredDeal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Deal_PrivateAuction_BuyerRule::kAdvertiserIdsFieldNumber;
const int BidRequest_Deal_PrivateAuction_BuyerRule::kMinCpmPriceFieldNumber;
#endif  // !_MSC_VER

BidRequest_Deal_PrivateAuction_BuyerRule::BidRequest_Deal_PrivateAuction_BuyerRule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
}

void BidRequest_Deal_PrivateAuction_BuyerRule::InitAsDefaultInstance() {
}

BidRequest_Deal_PrivateAuction_BuyerRule::BidRequest_Deal_PrivateAuction_BuyerRule(const BidRequest_Deal_PrivateAuction_BuyerRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
}

void BidRequest_Deal_PrivateAuction_BuyerRule::SharedCtor() {
  _cached_size_ = 0;
  min_cpm_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Deal_PrivateAuction_BuyerRule::~BidRequest_Deal_PrivateAuction_BuyerRule() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  SharedDtor();
}

void BidRequest_Deal_PrivateAuction_BuyerRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Deal_PrivateAuction_BuyerRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Deal_PrivateAuction_BuyerRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_;
}

const BidRequest_Deal_PrivateAuction_BuyerRule& BidRequest_Deal_PrivateAuction_BuyerRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Deal_PrivateAuction_BuyerRule* BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_ = NULL;

BidRequest_Deal_PrivateAuction_BuyerRule* BidRequest_Deal_PrivateAuction_BuyerRule::New() const {
  return new BidRequest_Deal_PrivateAuction_BuyerRule;
}

void BidRequest_Deal_PrivateAuction_BuyerRule::Clear() {
  min_cpm_price_ = 0u;
  advertiser_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Deal_PrivateAuction_BuyerRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 advertiser_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_advertiser_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_advertiser_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_advertiser_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_advertiser_ids;
        if (input->ExpectTag(16)) goto parse_min_cpm_price;
        break;
      }

      // optional uint32 min_cpm_price = 2;
      case 2: {
        if (tag == 16) {
         parse_min_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cpm_price_)));
          set_has_min_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  return false;
#undef DO_
}

void BidRequest_Deal_PrivateAuction_BuyerRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  // repeated uint32 advertiser_ids = 1;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->advertiser_ids(i), output);
  }

  // optional uint32 min_cpm_price = 2;
  if (has_min_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_cpm_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
}

::google::protobuf::uint8* BidRequest_Deal_PrivateAuction_BuyerRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  // repeated uint32 advertiser_ids = 1;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->advertiser_ids(i), target);
  }

  // optional uint32 min_cpm_price = 2;
  if (has_min_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_cpm_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  return target;
}

int BidRequest_Deal_PrivateAuction_BuyerRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 min_cpm_price = 2;
    if (has_min_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_cpm_price());
    }

  }
  // repeated uint32 advertiser_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->advertiser_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->advertiser_ids(i));
    }
    total_size += 1 * this->advertiser_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Deal_PrivateAuction_BuyerRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Deal_PrivateAuction_BuyerRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Deal_PrivateAuction_BuyerRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Deal_PrivateAuction_BuyerRule::MergeFrom(const BidRequest_Deal_PrivateAuction_BuyerRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  advertiser_ids_.MergeFrom(from.advertiser_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_min_cpm_price()) {
      set_min_cpm_price(from.min_cpm_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Deal_PrivateAuction_BuyerRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Deal_PrivateAuction_BuyerRule::CopyFrom(const BidRequest_Deal_PrivateAuction_BuyerRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Deal_PrivateAuction_BuyerRule::IsInitialized() const {

  return true;
}

void BidRequest_Deal_PrivateAuction_BuyerRule::Swap(BidRequest_Deal_PrivateAuction_BuyerRule* other) {
  if (other != this) {
    advertiser_ids_.Swap(&other->advertiser_ids_);
    std::swap(min_cpm_price_, other->min_cpm_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Deal_PrivateAuction_BuyerRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_;
  metadata.reflection = BidRequest_Deal_PrivateAuction_BuyerRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Deal_PrivateAuction::kDealidFieldNumber;
const int BidRequest_Deal_PrivateAuction::kBuyerRulesFieldNumber;
#endif  // !_MSC_VER

BidRequest_Deal_PrivateAuction::BidRequest_Deal_PrivateAuction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Deal.PrivateAuction)
}

void BidRequest_Deal_PrivateAuction::InitAsDefaultInstance() {
}

BidRequest_Deal_PrivateAuction::BidRequest_Deal_PrivateAuction(const BidRequest_Deal_PrivateAuction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Deal.PrivateAuction)
}

void BidRequest_Deal_PrivateAuction::SharedCtor() {
  _cached_size_ = 0;
  dealid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Deal_PrivateAuction::~BidRequest_Deal_PrivateAuction() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Deal.PrivateAuction)
  SharedDtor();
}

void BidRequest_Deal_PrivateAuction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Deal_PrivateAuction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Deal_PrivateAuction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Deal_PrivateAuction_descriptor_;
}

const BidRequest_Deal_PrivateAuction& BidRequest_Deal_PrivateAuction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Deal_PrivateAuction* BidRequest_Deal_PrivateAuction::default_instance_ = NULL;

BidRequest_Deal_PrivateAuction* BidRequest_Deal_PrivateAuction::New() const {
  return new BidRequest_Deal_PrivateAuction;
}

void BidRequest_Deal_PrivateAuction::Clear() {
  dealid_ = 0u;
  buyer_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Deal_PrivateAuction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Deal.PrivateAuction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dealid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealid_)));
          set_has_dealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyer_rules;
        break;
      }

      // repeated .Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
      case 2: {
        if (tag == 18) {
         parse_buyer_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyer_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyer_rules;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Deal.PrivateAuction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Deal.PrivateAuction)
  return false;
#undef DO_
}

void BidRequest_Deal_PrivateAuction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Deal.PrivateAuction)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dealid(), output);
  }

  // repeated .Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
  for (int i = 0; i < this->buyer_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buyer_rules(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Deal.PrivateAuction)
}

::google::protobuf::uint8* BidRequest_Deal_PrivateAuction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Deal.PrivateAuction)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dealid(), target);
  }

  // repeated .Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
  for (int i = 0; i < this->buyer_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buyer_rules(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Deal.PrivateAuction)
  return target;
}

int BidRequest_Deal_PrivateAuction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dealid = 1;
    if (has_dealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dealid());
    }

  }
  // repeated .Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
  total_size += 1 * this->buyer_rules_size();
  for (int i = 0; i < this->buyer_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyer_rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Deal_PrivateAuction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Deal_PrivateAuction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Deal_PrivateAuction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Deal_PrivateAuction::MergeFrom(const BidRequest_Deal_PrivateAuction& from) {
  GOOGLE_CHECK_NE(&from, this);
  buyer_rules_.MergeFrom(from.buyer_rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Deal_PrivateAuction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Deal_PrivateAuction::CopyFrom(const BidRequest_Deal_PrivateAuction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Deal_PrivateAuction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_Deal_PrivateAuction::Swap(BidRequest_Deal_PrivateAuction* other) {
  if (other != this) {
    std::swap(dealid_, other->dealid_);
    buyer_rules_.Swap(&other->buyer_rules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Deal_PrivateAuction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Deal_PrivateAuction_descriptor_;
  metadata.reflection = BidRequest_Deal_PrivateAuction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Deal::kPreferDealFieldNumber;
const int BidRequest_Deal::kPrivAucFieldNumber;
#endif  // !_MSC_VER

BidRequest_Deal::BidRequest_Deal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.Deal)
}

void BidRequest_Deal::InitAsDefaultInstance() {
  prefer_deal_ = const_cast< ::Tanx::BidRequest_Deal_PreferredDeal*>(&::Tanx::BidRequest_Deal_PreferredDeal::default_instance());
  priv_auc_ = const_cast< ::Tanx::BidRequest_Deal_PrivateAuction*>(&::Tanx::BidRequest_Deal_PrivateAuction::default_instance());
}

BidRequest_Deal::BidRequest_Deal(const BidRequest_Deal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.Deal)
}

void BidRequest_Deal::SharedCtor() {
  _cached_size_ = 0;
  prefer_deal_ = NULL;
  priv_auc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Deal::~BidRequest_Deal() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.Deal)
  SharedDtor();
}

void BidRequest_Deal::SharedDtor() {
  if (this != default_instance_) {
    delete prefer_deal_;
    delete priv_auc_;
  }
}

void BidRequest_Deal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Deal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Deal_descriptor_;
}

const BidRequest_Deal& BidRequest_Deal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Deal* BidRequest_Deal::default_instance_ = NULL;

BidRequest_Deal* BidRequest_Deal::New() const {
  return new BidRequest_Deal;
}

void BidRequest_Deal::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_prefer_deal()) {
      if (prefer_deal_ != NULL) prefer_deal_->::Tanx::BidRequest_Deal_PreferredDeal::Clear();
    }
    if (has_priv_auc()) {
      if (priv_auc_ != NULL) priv_auc_->::Tanx::BidRequest_Deal_PrivateAuction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Deal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.Deal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prefer_deal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_priv_auc;
        break;
      }

      // optional .Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
      case 2: {
        if (tag == 18) {
         parse_priv_auc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priv_auc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.Deal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.Deal)
  return false;
#undef DO_
}

void BidRequest_Deal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.Deal)
  // optional .Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
  if (has_prefer_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prefer_deal(), output);
  }

  // optional .Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
  if (has_priv_auc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->priv_auc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.Deal)
}

::google::protobuf::uint8* BidRequest_Deal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.Deal)
  // optional .Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
  if (has_prefer_deal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prefer_deal(), target);
  }

  // optional .Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
  if (has_priv_auc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->priv_auc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.Deal)
  return target;
}

int BidRequest_Deal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
    if (has_prefer_deal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prefer_deal());
    }

    // optional .Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
    if (has_priv_auc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priv_auc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Deal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Deal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Deal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Deal::MergeFrom(const BidRequest_Deal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefer_deal()) {
      mutable_prefer_deal()->::Tanx::BidRequest_Deal_PreferredDeal::MergeFrom(from.prefer_deal());
    }
    if (from.has_priv_auc()) {
      mutable_priv_auc()->::Tanx::BidRequest_Deal_PrivateAuction::MergeFrom(from.priv_auc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Deal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Deal::CopyFrom(const BidRequest_Deal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Deal::IsInitialized() const {

  if (has_prefer_deal()) {
    if (!this->prefer_deal().IsInitialized()) return false;
  }
  if (has_priv_auc()) {
    if (!this->priv_auc().IsInitialized()) return false;
  }
  return true;
}

void BidRequest_Deal::Swap(BidRequest_Deal* other) {
  if (other != this) {
    std::swap(prefer_deal_, other->prefer_deal_);
    std::swap(priv_auc_, other->priv_auc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Deal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Deal_descriptor_;
  metadata.reflection = BidRequest_Deal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_CrowdCategory::kIdFieldNumber;
const int BidRequest_CrowdCategory::kConfidenceLevelFieldNumber;
#endif  // !_MSC_VER

BidRequest_CrowdCategory::BidRequest_CrowdCategory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest.CrowdCategory)
}

void BidRequest_CrowdCategory::InitAsDefaultInstance() {
}

BidRequest_CrowdCategory::BidRequest_CrowdCategory(const BidRequest_CrowdCategory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest.CrowdCategory)
}

void BidRequest_CrowdCategory::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  confidence_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_CrowdCategory::~BidRequest_CrowdCategory() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest.CrowdCategory)
  SharedDtor();
}

void BidRequest_CrowdCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_CrowdCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_CrowdCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_CrowdCategory_descriptor_;
}

const BidRequest_CrowdCategory& BidRequest_CrowdCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_CrowdCategory* BidRequest_CrowdCategory::default_instance_ = NULL;

BidRequest_CrowdCategory* BidRequest_CrowdCategory::New() const {
  return new BidRequest_CrowdCategory;
}

void BidRequest_CrowdCategory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_CrowdCategory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, confidence_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_CrowdCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest.CrowdCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confidence_level;
        break;
      }

      // optional uint32 confidence_level = 2;
      case 2: {
        if (tag == 16) {
         parse_confidence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confidence_level_)));
          set_has_confidence_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest.CrowdCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest.CrowdCategory)
  return false;
#undef DO_
}

void BidRequest_CrowdCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest.CrowdCategory)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 confidence_level = 2;
  if (has_confidence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->confidence_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest.CrowdCategory)
}

::google::protobuf::uint8* BidRequest_CrowdCategory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest.CrowdCategory)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 confidence_level = 2;
  if (has_confidence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->confidence_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest.CrowdCategory)
  return target;
}

int BidRequest_CrowdCategory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 confidence_level = 2;
    if (has_confidence_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confidence_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_CrowdCategory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_CrowdCategory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_CrowdCategory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_CrowdCategory::MergeFrom(const BidRequest_CrowdCategory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confidence_level()) {
      set_confidence_level(from.confidence_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_CrowdCategory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_CrowdCategory::CopyFrom(const BidRequest_CrowdCategory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_CrowdCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_CrowdCategory::Swap(BidRequest_CrowdCategory* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(confidence_level_, other->confidence_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_CrowdCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_CrowdCategory_descriptor_;
  metadata.reflection = BidRequest_CrowdCategory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest::kVersionFieldNumber;
const int BidRequest::kBidFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kIsPingFieldNumber;
const int BidRequest::kTidFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kUserAgentFieldNumber;
const int BidRequest::kTimezoneOffsetFieldNumber;
const int BidRequest::kUserVerticalFieldNumber;
const int BidRequest::kTidVersionFieldNumber;
const int BidRequest::kExcludedClickThroughUrlFieldNumber;
const int BidRequest::kUrlFieldNumber;
const int BidRequest::kCategoryFieldNumber;
const int BidRequest::kAdxTypeFieldNumber;
const int BidRequest::kAnonymousIdFieldNumber;
const int BidRequest::kDetectedLanguageFieldNumber;
const int BidRequest::kCategoryVersionFieldNumber;
const int BidRequest::kContentFieldNumber;
const int BidRequest::kAdzinfoFieldNumber;
const int BidRequest::kExcludedSensitiveCategoryFieldNumber;
const int BidRequest::kExcludedAdCategoryFieldNumber;
const int BidRequest::kHostedMatchDataFieldNumber;
const int BidRequest::kUserAttributeFieldNumber;
const int BidRequest::kPageSessionIdFieldNumber;
const int BidRequest::kPrivateInfoFieldNumber;
const int BidRequest::kMobileFieldNumber;
const int BidRequest::kContentCategoriesFieldNumber;
const int BidRequest::kVideoFieldNumber;
const int BidRequest::kAidFieldNumber;
const int BidRequest::kDealsFieldNumber;
const int BidRequest::kCrowdCategoryFieldNumber;
const int BidRequest::kIsPredictedToBeIgnoredFieldNumber;
const int BidRequest::kHttpsRequiredFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  content_ = const_cast< ::Tanx::BidRequest_Content*>(&::Tanx::BidRequest_Content::default_instance());
  mobile_ = const_cast< ::Tanx::BidRequest_Mobile*>(&::Tanx::BidRequest_Mobile::default_instance());
  video_ = const_cast< ::Tanx::BidRequest_Video*>(&::Tanx::BidRequest_Video::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_test_ = 0u;
  is_ping_ = 0u;
  tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_offset_ = 0;
  tid_version_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = 0u;
  adx_type_ = 0u;
  anonymous_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detected_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_version_ = 0;
  content_ = NULL;
  hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_ = NULL;
  video_ = NULL;
  aid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_predicted_to_be_ignored_ = false;
  https_required_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:Tanx.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tid_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_agent_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (anonymous_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete anonymous_id_;
  }
  if (detected_language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detected_language_;
  }
  if (hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hosted_match_data_;
  }
  if (page_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_session_id_;
  }
  if (aid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete aid_;
  }
  if (this != default_instance_) {
    delete content_;
    delete mobile_;
    delete video_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(version_, is_test_);
    ZR_(is_ping_, timezone_offset_);
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_->clear();
      }
    }
    if (has_tid()) {
      if (tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tid_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_agent_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 64000) {
    ZR_(tid_version_, category_);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    adx_type_ = 0u;
    if (has_anonymous_id()) {
      if (anonymous_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        anonymous_id_->clear();
      }
    }
    if (has_detected_language()) {
      if (detected_language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        detected_language_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 10682368) {
    category_version_ = 0;
    if (has_content()) {
      if (content_ != NULL) content_->::Tanx::BidRequest_Content::Clear();
    }
    if (has_hosted_match_data()) {
      if (hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hosted_match_data_->clear();
      }
    }
    if (has_page_session_id()) {
      if (page_session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_session_id_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 2583691264) {
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::Tanx::BidRequest_Mobile::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::Tanx::BidRequest_Video::Clear();
    }
    if (has_aid()) {
      if (aid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        aid_->clear();
      }
    }
    is_predicted_to_be_ignored_ = false;
  }
  https_required_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_vertical_.Clear();
  excluded_click_through_url_.Clear();
  adzinfo_.Clear();
  excluded_sensitive_category_.Clear();
  excluded_ad_category_.Clear();
  user_attribute_.Clear();
  private_info_.Clear();
  content_categories_.Clear();
  deals_.Clear();
  crowd_category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tid;
        break;
      }

      // optional string tid = 3;
      case 3: {
        if (tag == 26) {
         parse_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tid().data(), this->tid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 5;
      case 5: {
        if (tag == 42) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_excluded_click_through_url;
        break;
      }

      // repeated string excluded_click_through_url = 6;
      case 6: {
        if (tag == 50) {
         parse_excluded_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excluded_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excluded_click_through_url(this->excluded_click_through_url_size() - 1).data(),
            this->excluded_click_through_url(this->excluded_click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "excluded_click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_excluded_click_through_url;
        if (input->ExpectTag(58)) goto parse_url;
        break;
      }

      // optional string url = 7;
      case 7: {
        if (tag == 58) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_category;
        break;
      }

      // optional uint32 category = 8;
      case 8: {
        if (tag == 64) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_adx_type;
        break;
      }

      // optional uint32 adx_type = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_adx_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adx_type_)));
          set_has_adx_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_adzinfo;
        break;
      }

      // repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
      case 10: {
        if (tag == 82) {
         parse_adzinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adzinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_adzinfo;
        if (input->ExpectTag(88)) goto parse_is_test;
        break;
      }

      // optional uint32 is_test = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_ping;
        break;
      }

      // optional uint32 is_ping = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_timezone_offset;
        break;
      }

      // optional int32 timezone_offset = 13;
      case 13: {
        if (tag == 104) {
         parse_timezone_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_offset_)));
          set_has_timezone_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_user_vertical;
        break;
      }

      // repeated int32 user_vertical = 14;
      case 14: {
        if (tag == 112) {
         parse_user_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_user_vertical())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_vertical())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_user_vertical;
        if (input->ExpectTag(122)) goto parse_anonymous_id;
        break;
      }

      // optional string anonymous_id = 15;
      case 15: {
        if (tag == 122) {
         parse_anonymous_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anonymous_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->anonymous_id().data(), this->anonymous_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "anonymous_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_detected_language;
        break;
      }

      // optional string detected_language = 16;
      case 16: {
        if (tag == 130) {
         parse_detected_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detected_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detected_language().data(), this->detected_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "detected_language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_excluded_sensitive_category;
        break;
      }

      // repeated int32 excluded_sensitive_category = 17;
      case 17: {
        if (tag == 136) {
         parse_excluded_sensitive_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_excluded_sensitive_category())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_sensitive_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_excluded_sensitive_category;
        if (input->ExpectTag(144)) goto parse_category_version;
        break;
      }

      // optional int32 category_version = 18;
      case 18: {
        if (tag == 144) {
         parse_category_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_version_)));
          set_has_category_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_tid_version;
        break;
      }

      // optional uint32 tid_version = 19;
      case 19: {
        if (tag == 152) {
         parse_tid_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_version_)));
          set_has_tid_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_excluded_ad_category;
        break;
      }

      // repeated int32 excluded_ad_category = 20;
      case 20: {
        if (tag == 160) {
         parse_excluded_ad_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_excluded_ad_category())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_ad_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_excluded_ad_category;
        if (input->ExpectTag(170)) goto parse_hosted_match_data;
        break;
      }

      // optional string hosted_match_data = 21;
      case 21: {
        if (tag == 170) {
         parse_hosted_match_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hosted_match_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hosted_match_data().data(), this->hosted_match_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hosted_match_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_user_attribute;
        break;
      }

      // repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
      case 22: {
        if (tag == 178) {
         parse_user_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_user_attribute;
        if (input->ExpectTag(186)) goto parse_page_session_id;
        break;
      }

      // optional string page_session_id = 23;
      case 23: {
        if (tag == 186) {
         parse_page_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page_session_id().data(), this->page_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "page_session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_private_info;
        break;
      }

      // repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
      case 24: {
        if (tag == 194) {
         parse_private_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_private_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_private_info;
        if (input->ExpectTag(202)) goto parse_mobile;
        break;
      }

      // optional .Tanx.BidRequest.Mobile mobile = 25;
      case 25: {
        if (tag == 202) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_content_categories;
        break;
      }

      // repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
      case 26: {
        if (tag == 210) {
         parse_content_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content_categories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_content_categories;
        if (input->ExpectTag(218)) goto parse_video;
        break;
      }

      // optional .Tanx.BidRequest.Video video = 27;
      case 27: {
        if (tag == 218) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_aid;
        break;
      }

      // optional string aid = 28;
      case 28: {
        if (tag == 226) {
         parse_aid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aid().data(), this->aid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "aid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_deals;
        break;
      }

      // repeated .Tanx.BidRequest.Deal deals = 29;
      case 29: {
        if (tag == 234) {
         parse_deals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_deals;
        if (input->ExpectTag(242)) goto parse_crowd_category;
        break;
      }

      // repeated .Tanx.BidRequest.CrowdCategory crowd_category = 30;
      case 30: {
        if (tag == 242) {
         parse_crowd_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crowd_category()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_crowd_category;
        if (input->ExpectTag(248)) goto parse_is_predicted_to_be_ignored;
        break;
      }

      // optional bool is_predicted_to_be_ignored = 31 [default = false];
      case 31: {
        if (tag == 248) {
         parse_is_predicted_to_be_ignored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_predicted_to_be_ignored_)));
          set_has_is_predicted_to_be_ignored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_content;
        break;
      }

      // optional .Tanx.BidRequest.Content content = 32;
      case 32: {
        if (tag == 258) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_https_required;
        break;
      }

      // optional bool https_required = 33 [default = false];
      case 33: {
        if (tag == 264) {
         parse_https_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &https_required_)));
          set_has_https_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidRequest)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bid(), output);
  }

  // optional string tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tid(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_agent(), output);
  }

  // repeated string excluded_click_through_url = 6;
  for (int i = 0; i < this->excluded_click_through_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->excluded_click_through_url(i).data(), this->excluded_click_through_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "excluded_click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->excluded_click_through_url(i), output);
  }

  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->url(), output);
  }

  // optional uint32 category = 8;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->category(), output);
  }

  // optional uint32 adx_type = 9 [default = 0];
  if (has_adx_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->adx_type(), output);
  }

  // repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
  for (int i = 0; i < this->adzinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->adzinfo(i), output);
  }

  // optional uint32 is_test = 11 [default = 0];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->is_test(), output);
  }

  // optional uint32 is_ping = 12 [default = 0];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->is_ping(), output);
  }

  // optional int32 timezone_offset = 13;
  if (has_timezone_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->timezone_offset(), output);
  }

  // repeated int32 user_vertical = 14;
  for (int i = 0; i < this->user_vertical_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->user_vertical(i), output);
  }

  // optional string anonymous_id = 15;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "anonymous_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->anonymous_id(), output);
  }

  // optional string detected_language = 16;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detected_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->detected_language(), output);
  }

  // repeated int32 excluded_sensitive_category = 17;
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->excluded_sensitive_category(i), output);
  }

  // optional int32 category_version = 18;
  if (has_category_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->category_version(), output);
  }

  // optional uint32 tid_version = 19;
  if (has_tid_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tid_version(), output);
  }

  // repeated int32 excluded_ad_category = 20;
  for (int i = 0; i < this->excluded_ad_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->excluded_ad_category(i), output);
  }

  // optional string hosted_match_data = 21;
  if (has_hosted_match_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hosted_match_data().data(), this->hosted_match_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hosted_match_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->hosted_match_data(), output);
  }

  // repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
  for (int i = 0; i < this->user_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->user_attribute(i), output);
  }

  // optional string page_session_id = 23;
  if (has_page_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_session_id().data(), this->page_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "page_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->page_session_id(), output);
  }

  // repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
  for (int i = 0; i < this->private_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->private_info(i), output);
  }

  // optional .Tanx.BidRequest.Mobile mobile = 25;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->mobile(), output);
  }

  // repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
  for (int i = 0; i < this->content_categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->content_categories(i), output);
  }

  // optional .Tanx.BidRequest.Video video = 27;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->video(), output);
  }

  // optional string aid = 28;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aid().data(), this->aid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->aid(), output);
  }

  // repeated .Tanx.BidRequest.Deal deals = 29;
  for (int i = 0; i < this->deals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->deals(i), output);
  }

  // repeated .Tanx.BidRequest.CrowdCategory crowd_category = 30;
  for (int i = 0; i < this->crowd_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->crowd_category(i), output);
  }

  // optional bool is_predicted_to_be_ignored = 31 [default = false];
  if (has_is_predicted_to_be_ignored()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_predicted_to_be_ignored(), output);
  }

  // optional .Tanx.BidRequest.Content content = 32;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->content(), output);
  }

  // optional bool https_required = 33 [default = false];
  if (has_https_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->https_required(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidRequest)
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidRequest)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // optional string tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tid(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_agent(), target);
  }

  // repeated string excluded_click_through_url = 6;
  for (int i = 0; i < this->excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_click_through_url(i).data(), this->excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excluded_click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->excluded_click_through_url(i), target);
  }

  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->url(), target);
  }

  // optional uint32 category = 8;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->category(), target);
  }

  // optional uint32 adx_type = 9 [default = 0];
  if (has_adx_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->adx_type(), target);
  }

  // repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
  for (int i = 0; i < this->adzinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->adzinfo(i), target);
  }

  // optional uint32 is_test = 11 [default = 0];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->is_test(), target);
  }

  // optional uint32 is_ping = 12 [default = 0];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->is_ping(), target);
  }

  // optional int32 timezone_offset = 13;
  if (has_timezone_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->timezone_offset(), target);
  }

  // repeated int32 user_vertical = 14;
  for (int i = 0; i < this->user_vertical_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->user_vertical(i), target);
  }

  // optional string anonymous_id = 15;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "anonymous_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->anonymous_id(), target);
  }

  // optional string detected_language = 16;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detected_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->detected_language(), target);
  }

  // repeated int32 excluded_sensitive_category = 17;
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->excluded_sensitive_category(i), target);
  }

  // optional int32 category_version = 18;
  if (has_category_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->category_version(), target);
  }

  // optional uint32 tid_version = 19;
  if (has_tid_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tid_version(), target);
  }

  // repeated int32 excluded_ad_category = 20;
  for (int i = 0; i < this->excluded_ad_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->excluded_ad_category(i), target);
  }

  // optional string hosted_match_data = 21;
  if (has_hosted_match_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hosted_match_data().data(), this->hosted_match_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hosted_match_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->hosted_match_data(), target);
  }

  // repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
  for (int i = 0; i < this->user_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->user_attribute(i), target);
  }

  // optional string page_session_id = 23;
  if (has_page_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_session_id().data(), this->page_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "page_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->page_session_id(), target);
  }

  // repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
  for (int i = 0; i < this->private_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->private_info(i), target);
  }

  // optional .Tanx.BidRequest.Mobile mobile = 25;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->mobile(), target);
  }

  // repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
  for (int i = 0; i < this->content_categories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->content_categories(i), target);
  }

  // optional .Tanx.BidRequest.Video video = 27;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->video(), target);
  }

  // optional string aid = 28;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aid().data(), this->aid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->aid(), target);
  }

  // repeated .Tanx.BidRequest.Deal deals = 29;
  for (int i = 0; i < this->deals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->deals(i), target);
  }

  // repeated .Tanx.BidRequest.CrowdCategory crowd_category = 30;
  for (int i = 0; i < this->crowd_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->crowd_category(i), target);
  }

  // optional bool is_predicted_to_be_ignored = 31 [default = false];
  if (has_is_predicted_to_be_ignored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_predicted_to_be_ignored(), target);
  }

  // optional .Tanx.BidRequest.Content content = 32;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->content(), target);
  }

  // optional bool https_required = 33 [default = false];
  if (has_https_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->https_required(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required string bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

    // optional uint32 is_test = 11 [default = 0];
    if (has_is_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_test());
    }

    // optional uint32 is_ping = 12 [default = 0];
    if (has_is_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_ping());
    }

    // optional string tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tid());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string user_agent = 5;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional int32 timezone_offset = 13;
    if (has_timezone_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone_offset());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 tid_version = 19;
    if (has_tid_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid_version());
    }

    // optional string url = 7;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 category = 8;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

    // optional uint32 adx_type = 9 [default = 0];
    if (has_adx_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adx_type());
    }

    // optional string anonymous_id = 15;
    if (has_anonymous_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anonymous_id());
    }

    // optional string detected_language = 16;
    if (has_detected_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detected_language());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 category_version = 18;
    if (has_category_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_version());
    }

    // optional .Tanx.BidRequest.Content content = 32;
    if (has_content()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional string hosted_match_data = 21;
    if (has_hosted_match_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hosted_match_data());
    }

    // optional string page_session_id = 23;
    if (has_page_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_session_id());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional .Tanx.BidRequest.Mobile mobile = 25;
    if (has_mobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

    // optional .Tanx.BidRequest.Video video = 27;
    if (has_video()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional string aid = 28;
    if (has_aid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aid());
    }

    // optional bool is_predicted_to_be_ignored = 31 [default = false];
    if (has_is_predicted_to_be_ignored()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool https_required = 33 [default = false];
    if (has_https_required()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 user_vertical = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_vertical_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user_vertical(i));
    }
    total_size += 1 * this->user_vertical_size() + data_size;
  }

  // repeated string excluded_click_through_url = 6;
  total_size += 1 * this->excluded_click_through_url_size();
  for (int i = 0; i < this->excluded_click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excluded_click_through_url(i));
  }

  // repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
  total_size += 1 * this->adzinfo_size();
  for (int i = 0; i < this->adzinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adzinfo(i));
  }

  // repeated int32 excluded_sensitive_category = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_sensitive_category(i));
    }
    total_size += 2 * this->excluded_sensitive_category_size() + data_size;
  }

  // repeated int32 excluded_ad_category = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_ad_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_ad_category(i));
    }
    total_size += 2 * this->excluded_ad_category_size() + data_size;
  }

  // repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
  total_size += 2 * this->user_attribute_size();
  for (int i = 0; i < this->user_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_attribute(i));
  }

  // repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
  total_size += 2 * this->private_info_size();
  for (int i = 0; i < this->private_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->private_info(i));
  }

  // repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
  total_size += 2 * this->content_categories_size();
  for (int i = 0; i < this->content_categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content_categories(i));
  }

  // repeated .Tanx.BidRequest.Deal deals = 29;
  total_size += 2 * this->deals_size();
  for (int i = 0; i < this->deals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deals(i));
  }

  // repeated .Tanx.BidRequest.CrowdCategory crowd_category = 30;
  total_size += 2 * this->crowd_category_size();
  for (int i = 0; i < this->crowd_category_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crowd_category(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_vertical_.MergeFrom(from.user_vertical_);
  excluded_click_through_url_.MergeFrom(from.excluded_click_through_url_);
  adzinfo_.MergeFrom(from.adzinfo_);
  excluded_sensitive_category_.MergeFrom(from.excluded_sensitive_category_);
  excluded_ad_category_.MergeFrom(from.excluded_ad_category_);
  user_attribute_.MergeFrom(from.user_attribute_);
  private_info_.MergeFrom(from.private_info_);
  content_categories_.MergeFrom(from.content_categories_);
  deals_.MergeFrom(from.deals_);
  crowd_category_.MergeFrom(from.crowd_category_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_timezone_offset()) {
      set_timezone_offset(from.timezone_offset());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_tid_version()) {
      set_tid_version(from.tid_version());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_adx_type()) {
      set_adx_type(from.adx_type());
    }
    if (from.has_anonymous_id()) {
      set_anonymous_id(from.anonymous_id());
    }
    if (from.has_detected_language()) {
      set_detected_language(from.detected_language());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_category_version()) {
      set_category_version(from.category_version());
    }
    if (from.has_content()) {
      mutable_content()->::Tanx::BidRequest_Content::MergeFrom(from.content());
    }
    if (from.has_hosted_match_data()) {
      set_hosted_match_data(from.hosted_match_data());
    }
    if (from.has_page_session_id()) {
      set_page_session_id(from.page_session_id());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_mobile()) {
      mutable_mobile()->::Tanx::BidRequest_Mobile::MergeFrom(from.mobile());
    }
    if (from.has_video()) {
      mutable_video()->::Tanx::BidRequest_Video::MergeFrom(from.video());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_is_predicted_to_be_ignored()) {
      set_is_predicted_to_be_ignored(from.is_predicted_to_be_ignored());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_https_required()) {
      set_https_required(from.https_required());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->adzinfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->user_attribute())) return false;
  if (has_mobile()) {
    if (!this->mobile().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->content_categories())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->deals())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->crowd_category())) return false;
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bid_, other->bid_);
    std::swap(is_test_, other->is_test_);
    std::swap(is_ping_, other->is_ping_);
    std::swap(tid_, other->tid_);
    std::swap(ip_, other->ip_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(timezone_offset_, other->timezone_offset_);
    user_vertical_.Swap(&other->user_vertical_);
    std::swap(tid_version_, other->tid_version_);
    excluded_click_through_url_.Swap(&other->excluded_click_through_url_);
    std::swap(url_, other->url_);
    std::swap(category_, other->category_);
    std::swap(adx_type_, other->adx_type_);
    std::swap(anonymous_id_, other->anonymous_id_);
    std::swap(detected_language_, other->detected_language_);
    std::swap(category_version_, other->category_version_);
    std::swap(content_, other->content_);
    adzinfo_.Swap(&other->adzinfo_);
    excluded_sensitive_category_.Swap(&other->excluded_sensitive_category_);
    excluded_ad_category_.Swap(&other->excluded_ad_category_);
    std::swap(hosted_match_data_, other->hosted_match_data_);
    user_attribute_.Swap(&other->user_attribute_);
    std::swap(page_session_id_, other->page_session_id_);
    private_info_.Swap(&other->private_info_);
    std::swap(mobile_, other->mobile_);
    content_categories_.Swap(&other->content_categories_);
    std::swap(video_, other->video_);
    std::swap(aid_, other->aid_);
    deals_.Swap(&other->deals_);
    crowd_category_.Swap(&other->crowd_category_);
    std::swap(is_predicted_to_be_ignored_, other->is_predicted_to_be_ignored_);
    std::swap(https_required_, other->https_required_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse_Ads_Video::kDurationFieldNumber;
const int BidResponse_Ads_Video::kUrlFieldNumber;
const int BidResponse_Ads_Video::kEventStartFieldNumber;
const int BidResponse_Ads_Video::kEventMidpointFieldNumber;
const int BidResponse_Ads_Video::kEventCompleteFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ads_Video::BidResponse_Ads_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidResponse.Ads.Video)
}

void BidResponse_Ads_Video::InitAsDefaultInstance() {
}

BidResponse_Ads_Video::BidResponse_Ads_Video(const BidResponse_Ads_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidResponse.Ads.Video)
}

void BidResponse_Ads_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  duration_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ads_Video::~BidResponse_Ads_Video() {
  // @@protoc_insertion_point(destructor:Tanx.BidResponse.Ads.Video)
  SharedDtor();
}

void BidResponse_Ads_Video::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Ads_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ads_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ads_Video_descriptor_;
}

const BidResponse_Ads_Video& BidResponse_Ads_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ads_Video* BidResponse_Ads_Video::default_instance_ = NULL;

BidResponse_Ads_Video* BidResponse_Ads_Video::New() const {
  return new BidResponse_Ads_Video;
}

void BidResponse_Ads_Video::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    duration_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  event_start_.Clear();
  event_midpoint_.Clear();
  event_complete_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ads_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidResponse.Ads.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event_start;
        break;
      }

      // repeated string event_start = 3;
      case 3: {
        if (tag == 26) {
         parse_event_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_event_start()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_start(this->event_start_size() - 1).data(),
            this->event_start(this->event_start_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "event_start");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event_start;
        if (input->ExpectTag(34)) goto parse_event_midpoint;
        break;
      }

      // repeated string event_midpoint = 4;
      case 4: {
        if (tag == 34) {
         parse_event_midpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_event_midpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_midpoint(this->event_midpoint_size() - 1).data(),
            this->event_midpoint(this->event_midpoint_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "event_midpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_event_midpoint;
        if (input->ExpectTag(42)) goto parse_event_complete;
        break;
      }

      // repeated string event_complete = 5;
      case 5: {
        if (tag == 42) {
         parse_event_complete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_event_complete()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_complete(this->event_complete_size() - 1).data(),
            this->event_complete(this->event_complete_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "event_complete");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_event_complete;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidResponse.Ads.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidResponse.Ads.Video)
  return false;
#undef DO_
}

void BidResponse_Ads_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidResponse.Ads.Video)
  // optional int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // repeated string event_start = 3;
  for (int i = 0; i < this->event_start_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->event_start(i).data(), this->event_start(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "event_start");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->event_start(i), output);
  }

  // repeated string event_midpoint = 4;
  for (int i = 0; i < this->event_midpoint_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->event_midpoint(i).data(), this->event_midpoint(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "event_midpoint");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_midpoint(i), output);
  }

  // repeated string event_complete = 5;
  for (int i = 0; i < this->event_complete_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->event_complete(i).data(), this->event_complete(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "event_complete");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->event_complete(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidResponse.Ads.Video)
}

::google::protobuf::uint8* BidResponse_Ads_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidResponse.Ads.Video)
  // optional int32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // repeated string event_start = 3;
  for (int i = 0; i < this->event_start_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_start(i).data(), this->event_start(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_start");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->event_start(i), target);
  }

  // repeated string event_midpoint = 4;
  for (int i = 0; i < this->event_midpoint_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_midpoint(i).data(), this->event_midpoint(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_midpoint");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->event_midpoint(i), target);
  }

  // repeated string event_complete = 5;
  for (int i = 0; i < this->event_complete_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_complete(i).data(), this->event_complete(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_complete");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->event_complete(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidResponse.Ads.Video)
  return target;
}

int BidResponse_Ads_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  // repeated string event_start = 3;
  total_size += 1 * this->event_start_size();
  for (int i = 0; i < this->event_start_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->event_start(i));
  }

  // repeated string event_midpoint = 4;
  total_size += 1 * this->event_midpoint_size();
  for (int i = 0; i < this->event_midpoint_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->event_midpoint(i));
  }

  // repeated string event_complete = 5;
  total_size += 1 * this->event_complete_size();
  for (int i = 0; i < this->event_complete_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->event_complete(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ads_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ads_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ads_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ads_Video::MergeFrom(const BidResponse_Ads_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_start_.MergeFrom(from.event_start_);
  event_midpoint_.MergeFrom(from.event_midpoint_);
  event_complete_.MergeFrom(from.event_complete_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ads_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ads_Video::CopyFrom(const BidResponse_Ads_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ads_Video::IsInitialized() const {

  return true;
}

void BidResponse_Ads_Video::Swap(BidResponse_Ads_Video* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(url_, other->url_);
    event_start_.Swap(&other->event_start_);
    event_midpoint_.Swap(&other->event_midpoint_);
    event_complete_.Swap(&other->event_complete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ads_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ads_Video_descriptor_;
  metadata.reflection = BidResponse_Ads_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_Ads::kAdzinfoIdFieldNumber;
const int BidResponse_Ads::kMaxCpmPriceFieldNumber;
const int BidResponse_Ads::kAdBidCountIdxFieldNumber;
const int BidResponse_Ads::kHtmlSnippetFieldNumber;
const int BidResponse_Ads::kClickThroughUrlFieldNumber;
const int BidResponse_Ads::kCategoryFieldNumber;
const int BidResponse_Ads::kCreativeTypeFieldNumber;
const int BidResponse_Ads::kNetworkGuidFieldNumber;
const int BidResponse_Ads::kExtendDataFieldNumber;
const int BidResponse_Ads::kDestinationUrlFieldNumber;
const int BidResponse_Ads::kCreativeIdFieldNumber;
const int BidResponse_Ads::kResourceAddressFieldNumber;
const int BidResponse_Ads::kFeedbackAddressFieldNumber;
const int BidResponse_Ads::kVideoSnippetFieldNumber;
const int BidResponse_Ads::kMobileCreativeFieldNumber;
const int BidResponse_Ads::kDealidFieldNumber;
const int BidResponse_Ads::kAdvertiserIdsFieldNumber;
const int BidResponse_Ads::kDownloadCompleteFieldNumber;
const int BidResponse_Ads::kWinnoticeAddressFieldNumber;
const int BidResponse_Ads::kCreativeAdaptiveTypeFieldNumber;
const int BidResponse_Ads::kDeeplinkUrlFieldNumber;
const int BidResponse_Ads::kImpressionTrackingUrlFieldNumber;
const int BidResponse_Ads::kClickTrackingUrlFieldNumber;
const int BidResponse_Ads::kVideoFieldNumber;
const int BidResponse_Ads::kApiFieldNumber;
const int BidResponse_Ads::kMimeTypeFieldNumber;
const int BidResponse_Ads::kCampaignDateFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ads::BidResponse_Ads()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidResponse.Ads)
}

void BidResponse_Ads::InitAsDefaultInstance() {
  mobile_creative_ = const_cast< ::Tanx::MobileCreative*>(&::Tanx::MobileCreative::default_instance());
  video_ = const_cast< ::Tanx::BidResponse_Ads_Video*>(&::Tanx::BidResponse_Ads_Video::default_instance());
}

BidResponse_Ads::BidResponse_Ads(const BidResponse_Ads& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidResponse.Ads)
}

void BidResponse_Ads::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adzinfo_id_ = 0u;
  max_cpm_price_ = 0u;
  ad_bid_count_idx_ = 0u;
  html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedback_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_creative_ = NULL;
  dealid_ = 0u;
  download_complete_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winnotice_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_adaptive_type_ = 0;
  video_ = NULL;
  mime_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  campaign_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ads::~BidResponse_Ads() {
  // @@protoc_insertion_point(destructor:Tanx.BidResponse.Ads)
  SharedDtor();
}

void BidResponse_Ads::SharedDtor() {
  if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete html_snippet_;
  }
  if (network_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete network_guid_;
  }
  if (extend_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extend_data_;
  }
  if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creative_id_;
  }
  if (resource_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_address_;
  }
  if (feedback_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feedback_address_;
  }
  if (video_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_snippet_;
  }
  if (download_complete_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_complete_;
  }
  if (winnotice_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete winnotice_address_;
  }
  if (mime_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mime_type_;
  }
  if (campaign_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete campaign_date_;
  }
  if (this != default_instance_) {
    delete mobile_creative_;
    delete video_;
  }
}

void BidResponse_Ads::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ads::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ads_descriptor_;
}

const BidResponse_Ads& BidResponse_Ads::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ads* BidResponse_Ads::default_instance_ = NULL;

BidResponse_Ads* BidResponse_Ads::New() const {
  return new BidResponse_Ads;
}

void BidResponse_Ads::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_Ads*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 143) {
    ZR_(adzinfo_id_, max_cpm_price_);
    ad_bid_count_idx_ = 0u;
    if (has_html_snippet()) {
      if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        html_snippet_->clear();
      }
    }
    if (has_network_guid()) {
      if (network_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        network_guid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 64768) {
    if (has_extend_data()) {
      if (extend_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extend_data_->clear();
      }
    }
    if (has_creative_id()) {
      if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creative_id_->clear();
      }
    }
    if (has_resource_address()) {
      if (resource_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resource_address_->clear();
      }
    }
    if (has_feedback_address()) {
      if (feedback_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feedback_address_->clear();
      }
    }
    if (has_video_snippet()) {
      if (video_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        video_snippet_->clear();
      }
    }
    if (has_mobile_creative()) {
      if (mobile_creative_ != NULL) mobile_creative_->::Tanx::MobileCreative::Clear();
    }
    dealid_ = 0u;
  }
  if (_has_bits_[16 / 32] & 9306112) {
    if (has_download_complete()) {
      if (download_complete_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        download_complete_->clear();
      }
    }
    if (has_winnotice_address()) {
      if (winnotice_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        winnotice_address_->clear();
      }
    }
    creative_adaptive_type_ = 0;
    if (has_video()) {
      if (video_ != NULL) video_->::Tanx::BidResponse_Ads_Video::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 100663296) {
    if (has_mime_type()) {
      if (mime_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mime_type_->clear();
      }
    }
    if (has_campaign_date()) {
      if (campaign_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        campaign_date_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  click_through_url_.Clear();
  category_.Clear();
  creative_type_.Clear();
  destination_url_.Clear();
  advertiser_ids_.Clear();
  deeplink_url_.Clear();
  impression_tracking_url_.Clear();
  click_tracking_url_.Clear();
  api_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ads::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidResponse.Ads)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adzinfo_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adzinfo_id_)));
          set_has_adzinfo_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_cpm_price;
        break;
      }

      // required uint32 max_cpm_price = 2;
      case 2: {
        if (tag == 16) {
         parse_max_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cpm_price_)));
          set_has_max_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ad_bid_count_idx;
        break;
      }

      // optional uint32 ad_bid_count_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_ad_bid_count_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bid_count_idx_)));
          set_has_ad_bid_count_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_html_snippet;
        break;
      }

      // optional string html_snippet = 4;
      case 4: {
        if (tag == 34) {
         parse_html_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html_snippet().data(), this->html_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "html_snippet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_click_through_url;
        break;
      }

      // repeated string click_through_url = 5;
      case 5: {
        if (tag == 42) {
         parse_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_through_url(this->click_through_url_size() - 1).data(),
            this->click_through_url(this->click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_click_through_url;
        if (input->ExpectTag(48)) goto parse_category;
        break;
      }

      // repeated int32 category = 6;
      case 6: {
        if (tag == 48) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_category())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_category;
        if (input->ExpectTag(56)) goto parse_creative_type;
        break;
      }

      // repeated int32 creative_type = 7;
      case 7: {
        if (tag == 56) {
         parse_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_creative_type())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_creative_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_creative_type;
        if (input->ExpectTag(66)) goto parse_network_guid;
        break;
      }

      // optional string network_guid = 8;
      case 8: {
        if (tag == 66) {
         parse_network_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network_guid().data(), this->network_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network_guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_extend_data;
        break;
      }

      // optional string extend_data = 9;
      case 9: {
        if (tag == 74) {
         parse_extend_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extend_data().data(), this->extend_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extend_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_destination_url;
        break;
      }

      // repeated string destination_url = 10;
      case 10: {
        if (tag == 82) {
         parse_destination_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_destination_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination_url(this->destination_url_size() - 1).data(),
            this->destination_url(this->destination_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "destination_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_destination_url;
        if (input->ExpectTag(90)) goto parse_creative_id;
        break;
      }

      // optional string creative_id = 11;
      case 11: {
        if (tag == 90) {
         parse_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->creative_id().data(), this->creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "creative_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_resource_address;
        break;
      }

      // optional string resource_address = 12;
      case 12: {
        if (tag == 98) {
         parse_resource_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource_address().data(), this->resource_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resource_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_feedback_address;
        break;
      }

      // optional string feedback_address = 13;
      case 13: {
        if (tag == 106) {
         parse_feedback_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feedback_address().data(), this->feedback_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "feedback_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_video_snippet;
        break;
      }

      // optional string video_snippet = 14;
      case 14: {
        if (tag == 114) {
         parse_video_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_snippet().data(), this->video_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_snippet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_mobile_creative;
        break;
      }

      // optional .Tanx.MobileCreative mobile_creative = 15;
      case 15: {
        if (tag == 122) {
         parse_mobile_creative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile_creative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dealid;
        break;
      }

      // optional uint32 dealid = 16;
      case 16: {
        if (tag == 128) {
         parse_dealid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealid_)));
          set_has_dealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_advertiser_ids;
        break;
      }

      // repeated uint32 advertiser_ids = 17;
      case 17: {
        if (tag == 136) {
         parse_advertiser_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_advertiser_ids())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_advertiser_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_advertiser_ids;
        if (input->ExpectTag(146)) goto parse_download_complete;
        break;
      }

      // optional string download_complete = 18;
      case 18: {
        if (tag == 146) {
         parse_download_complete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_complete()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_complete().data(), this->download_complete().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "download_complete");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_winnotice_address;
        break;
      }

      // optional string winnotice_address = 19;
      case 19: {
        if (tag == 154) {
         parse_winnotice_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winnotice_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->winnotice_address().data(), this->winnotice_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "winnotice_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_creative_adaptive_type;
        break;
      }

      // optional int32 creative_adaptive_type = 20;
      case 20: {
        if (tag == 160) {
         parse_creative_adaptive_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_adaptive_type_)));
          set_has_creative_adaptive_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_deeplink_url;
        break;
      }

      // repeated string deeplink_url = 21;
      case 21: {
        if (tag == 170) {
         parse_deeplink_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deeplink_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deeplink_url(this->deeplink_url_size() - 1).data(),
            this->deeplink_url(this->deeplink_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deeplink_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_deeplink_url;
        if (input->ExpectTag(178)) goto parse_impression_tracking_url;
        break;
      }

      // repeated string impression_tracking_url = 22;
      case 22: {
        if (tag == 178) {
         parse_impression_tracking_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impression_tracking_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impression_tracking_url(this->impression_tracking_url_size() - 1).data(),
            this->impression_tracking_url(this->impression_tracking_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impression_tracking_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_impression_tracking_url;
        if (input->ExpectTag(186)) goto parse_click_tracking_url;
        break;
      }

      // repeated string click_tracking_url = 23;
      case 23: {
        if (tag == 186) {
         parse_click_tracking_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_tracking_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_tracking_url(this->click_tracking_url_size() - 1).data(),
            this->click_tracking_url(this->click_tracking_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_tracking_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_click_tracking_url;
        if (input->ExpectTag(194)) goto parse_video;
        break;
      }

      // optional .Tanx.BidResponse.Ads.Video video = 24;
      case 24: {
        if (tag == 194) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_api;
        break;
      }

      // repeated int32 api = 25;
      case 25: {
        if (tag == 200) {
         parse_api:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200, input, this->mutable_api())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_api())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_api;
        if (input->ExpectTag(210)) goto parse_mime_type;
        break;
      }

      // optional string mime_type = 26;
      case 26: {
        if (tag == 210) {
         parse_mime_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mime_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_campaign_date;
        break;
      }

      // optional string campaign_date = 27;
      case 27: {
        if (tag == 218) {
         parse_campaign_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_campaign_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->campaign_date().data(), this->campaign_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "campaign_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidResponse.Ads)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidResponse.Ads)
  return false;
#undef DO_
}

void BidResponse_Ads::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidResponse.Ads)
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adzinfo_id(), output);
  }

  // required uint32 max_cpm_price = 2;
  if (has_max_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_cpm_price(), output);
  }

  // optional uint32 ad_bid_count_idx = 3;
  if (has_ad_bid_count_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ad_bid_count_idx(), output);
  }

  // optional string html_snippet = 4;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "html_snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->html_snippet(), output);
  }

  // repeated string click_through_url = 5;
  for (int i = 0; i < this->click_through_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->click_through_url(i).data(), this->click_through_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->click_through_url(i), output);
  }

  // repeated int32 category = 6;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->category(i), output);
  }

  // repeated int32 creative_type = 7;
  for (int i = 0; i < this->creative_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->creative_type(i), output);
  }

  // optional string network_guid = 8;
  if (has_network_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_guid().data(), this->network_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->network_guid(), output);
  }

  // optional string extend_data = 9;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extend_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->extend_data(), output);
  }

  // repeated string destination_url = 10;
  for (int i = 0; i < this->destination_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->destination_url(i).data(), this->destination_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "destination_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->destination_url(i), output);
  }

  // optional string creative_id = 11;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "creative_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->creative_id(), output);
  }

  // optional string resource_address = 12;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->resource_address(), output);
  }

  // optional string feedback_address = 13;
  if (has_feedback_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback_address().data(), this->feedback_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feedback_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->feedback_address(), output);
  }

  // optional string video_snippet = 14;
  if (has_video_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_snippet().data(), this->video_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->video_snippet(), output);
  }

  // optional .Tanx.MobileCreative mobile_creative = 15;
  if (has_mobile_creative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->mobile_creative(), output);
  }

  // optional uint32 dealid = 16;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dealid(), output);
  }

  // repeated uint32 advertiser_ids = 17;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->advertiser_ids(i), output);
  }

  // optional string download_complete = 18;
  if (has_download_complete()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_complete().data(), this->download_complete().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "download_complete");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->download_complete(), output);
  }

  // optional string winnotice_address = 19;
  if (has_winnotice_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winnotice_address().data(), this->winnotice_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "winnotice_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->winnotice_address(), output);
  }

  // optional int32 creative_adaptive_type = 20;
  if (has_creative_adaptive_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->creative_adaptive_type(), output);
  }

  // repeated string deeplink_url = 21;
  for (int i = 0; i < this->deeplink_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->deeplink_url(i).data(), this->deeplink_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "deeplink_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->deeplink_url(i), output);
  }

  // repeated string impression_tracking_url = 22;
  for (int i = 0; i < this->impression_tracking_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->impression_tracking_url(i).data(), this->impression_tracking_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "impression_tracking_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->impression_tracking_url(i), output);
  }

  // repeated string click_tracking_url = 23;
  for (int i = 0; i < this->click_tracking_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->click_tracking_url(i).data(), this->click_tracking_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "click_tracking_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->click_tracking_url(i), output);
  }

  // optional .Tanx.BidResponse.Ads.Video video = 24;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->video(), output);
  }

  // repeated int32 api = 25;
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->api(i), output);
  }

  // optional string mime_type = 26;
  if (has_mime_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mime_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->mime_type(), output);
  }

  // optional string campaign_date = 27;
  if (has_campaign_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->campaign_date().data(), this->campaign_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "campaign_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->campaign_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidResponse.Ads)
}

::google::protobuf::uint8* BidResponse_Ads::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidResponse.Ads)
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adzinfo_id(), target);
  }

  // required uint32 max_cpm_price = 2;
  if (has_max_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_cpm_price(), target);
  }

  // optional uint32 ad_bid_count_idx = 3;
  if (has_ad_bid_count_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ad_bid_count_idx(), target);
  }

  // optional string html_snippet = 4;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "html_snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->html_snippet(), target);
  }

  // repeated string click_through_url = 5;
  for (int i = 0; i < this->click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url(i).data(), this->click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->click_through_url(i), target);
  }

  // repeated int32 category = 6;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->category(i), target);
  }

  // repeated int32 creative_type = 7;
  for (int i = 0; i < this->creative_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->creative_type(i), target);
  }

  // optional string network_guid = 8;
  if (has_network_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_guid().data(), this->network_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->network_guid(), target);
  }

  // optional string extend_data = 9;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extend_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->extend_data(), target);
  }

  // repeated string destination_url = 10;
  for (int i = 0; i < this->destination_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_url(i).data(), this->destination_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destination_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->destination_url(i), target);
  }

  // optional string creative_id = 11;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "creative_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->creative_id(), target);
  }

  // optional string resource_address = 12;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->resource_address(), target);
  }

  // optional string feedback_address = 13;
  if (has_feedback_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback_address().data(), this->feedback_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feedback_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->feedback_address(), target);
  }

  // optional string video_snippet = 14;
  if (has_video_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_snippet().data(), this->video_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->video_snippet(), target);
  }

  // optional .Tanx.MobileCreative mobile_creative = 15;
  if (has_mobile_creative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->mobile_creative(), target);
  }

  // optional uint32 dealid = 16;
  if (has_dealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dealid(), target);
  }

  // repeated uint32 advertiser_ids = 17;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->advertiser_ids(i), target);
  }

  // optional string download_complete = 18;
  if (has_download_complete()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_complete().data(), this->download_complete().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "download_complete");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->download_complete(), target);
  }

  // optional string winnotice_address = 19;
  if (has_winnotice_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winnotice_address().data(), this->winnotice_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "winnotice_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->winnotice_address(), target);
  }

  // optional int32 creative_adaptive_type = 20;
  if (has_creative_adaptive_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->creative_adaptive_type(), target);
  }

  // repeated string deeplink_url = 21;
  for (int i = 0; i < this->deeplink_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deeplink_url(i).data(), this->deeplink_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deeplink_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->deeplink_url(i), target);
  }

  // repeated string impression_tracking_url = 22;
  for (int i = 0; i < this->impression_tracking_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impression_tracking_url(i).data(), this->impression_tracking_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impression_tracking_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->impression_tracking_url(i), target);
  }

  // repeated string click_tracking_url = 23;
  for (int i = 0; i < this->click_tracking_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_tracking_url(i).data(), this->click_tracking_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_tracking_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(23, this->click_tracking_url(i), target);
  }

  // optional .Tanx.BidResponse.Ads.Video video = 24;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->video(), target);
  }

  // repeated int32 api = 25;
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(25, this->api(i), target);
  }

  // optional string mime_type = 26;
  if (has_mime_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mime_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->mime_type(), target);
  }

  // optional string campaign_date = 27;
  if (has_campaign_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->campaign_date().data(), this->campaign_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "campaign_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->campaign_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidResponse.Ads)
  return target;
}

int BidResponse_Ads::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 adzinfo_id = 1;
    if (has_adzinfo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adzinfo_id());
    }

    // required uint32 max_cpm_price = 2;
    if (has_max_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_cpm_price());
    }

    // optional uint32 ad_bid_count_idx = 3;
    if (has_ad_bid_count_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bid_count_idx());
    }

    // optional string html_snippet = 4;
    if (has_html_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->html_snippet());
    }

    // optional string network_guid = 8;
    if (has_network_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_guid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string extend_data = 9;
    if (has_extend_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extend_data());
    }

    // optional string creative_id = 11;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_id());
    }

    // optional string resource_address = 12;
    if (has_resource_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_address());
    }

    // optional string feedback_address = 13;
    if (has_feedback_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feedback_address());
    }

    // optional string video_snippet = 14;
    if (has_video_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_snippet());
    }

    // optional .Tanx.MobileCreative mobile_creative = 15;
    if (has_mobile_creative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile_creative());
    }

    // optional uint32 dealid = 16;
    if (has_dealid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dealid());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string download_complete = 18;
    if (has_download_complete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_complete());
    }

    // optional string winnotice_address = 19;
    if (has_winnotice_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winnotice_address());
    }

    // optional int32 creative_adaptive_type = 20;
    if (has_creative_adaptive_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_adaptive_type());
    }

    // optional .Tanx.BidResponse.Ads.Video video = 24;
    if (has_video()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional string mime_type = 26;
    if (has_mime_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mime_type());
    }

    // optional string campaign_date = 27;
    if (has_campaign_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->campaign_date());
    }

  }
  // repeated string click_through_url = 5;
  total_size += 1 * this->click_through_url_size();
  for (int i = 0; i < this->click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_through_url(i));
  }

  // repeated int32 category = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  // repeated int32 creative_type = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->creative_type(i));
    }
    total_size += 1 * this->creative_type_size() + data_size;
  }

  // repeated string destination_url = 10;
  total_size += 1 * this->destination_url_size();
  for (int i = 0; i < this->destination_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->destination_url(i));
  }

  // repeated uint32 advertiser_ids = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->advertiser_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->advertiser_ids(i));
    }
    total_size += 2 * this->advertiser_ids_size() + data_size;
  }

  // repeated string deeplink_url = 21;
  total_size += 2 * this->deeplink_url_size();
  for (int i = 0; i < this->deeplink_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deeplink_url(i));
  }

  // repeated string impression_tracking_url = 22;
  total_size += 2 * this->impression_tracking_url_size();
  for (int i = 0; i < this->impression_tracking_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impression_tracking_url(i));
  }

  // repeated string click_tracking_url = 23;
  total_size += 2 * this->click_tracking_url_size();
  for (int i = 0; i < this->click_tracking_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_tracking_url(i));
  }

  // repeated int32 api = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->api(i));
    }
    total_size += 2 * this->api_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ads::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ads* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ads*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ads::MergeFrom(const BidResponse_Ads& from) {
  GOOGLE_CHECK_NE(&from, this);
  click_through_url_.MergeFrom(from.click_through_url_);
  category_.MergeFrom(from.category_);
  creative_type_.MergeFrom(from.creative_type_);
  destination_url_.MergeFrom(from.destination_url_);
  advertiser_ids_.MergeFrom(from.advertiser_ids_);
  deeplink_url_.MergeFrom(from.deeplink_url_);
  impression_tracking_url_.MergeFrom(from.impression_tracking_url_);
  click_tracking_url_.MergeFrom(from.click_tracking_url_);
  api_.MergeFrom(from.api_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adzinfo_id()) {
      set_adzinfo_id(from.adzinfo_id());
    }
    if (from.has_max_cpm_price()) {
      set_max_cpm_price(from.max_cpm_price());
    }
    if (from.has_ad_bid_count_idx()) {
      set_ad_bid_count_idx(from.ad_bid_count_idx());
    }
    if (from.has_html_snippet()) {
      set_html_snippet(from.html_snippet());
    }
    if (from.has_network_guid()) {
      set_network_guid(from.network_guid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extend_data()) {
      set_extend_data(from.extend_data());
    }
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
    if (from.has_resource_address()) {
      set_resource_address(from.resource_address());
    }
    if (from.has_feedback_address()) {
      set_feedback_address(from.feedback_address());
    }
    if (from.has_video_snippet()) {
      set_video_snippet(from.video_snippet());
    }
    if (from.has_mobile_creative()) {
      mutable_mobile_creative()->::Tanx::MobileCreative::MergeFrom(from.mobile_creative());
    }
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_download_complete()) {
      set_download_complete(from.download_complete());
    }
    if (from.has_winnotice_address()) {
      set_winnotice_address(from.winnotice_address());
    }
    if (from.has_creative_adaptive_type()) {
      set_creative_adaptive_type(from.creative_adaptive_type());
    }
    if (from.has_video()) {
      mutable_video()->::Tanx::BidResponse_Ads_Video::MergeFrom(from.video());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_mime_type()) {
      set_mime_type(from.mime_type());
    }
    if (from.has_campaign_date()) {
      set_campaign_date(from.campaign_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ads::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ads::CopyFrom(const BidResponse_Ads& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ads::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mobile_creative()) {
    if (!this->mobile_creative().IsInitialized()) return false;
  }
  return true;
}

void BidResponse_Ads::Swap(BidResponse_Ads* other) {
  if (other != this) {
    std::swap(adzinfo_id_, other->adzinfo_id_);
    std::swap(max_cpm_price_, other->max_cpm_price_);
    std::swap(ad_bid_count_idx_, other->ad_bid_count_idx_);
    std::swap(html_snippet_, other->html_snippet_);
    click_through_url_.Swap(&other->click_through_url_);
    category_.Swap(&other->category_);
    creative_type_.Swap(&other->creative_type_);
    std::swap(network_guid_, other->network_guid_);
    std::swap(extend_data_, other->extend_data_);
    destination_url_.Swap(&other->destination_url_);
    std::swap(creative_id_, other->creative_id_);
    std::swap(resource_address_, other->resource_address_);
    std::swap(feedback_address_, other->feedback_address_);
    std::swap(video_snippet_, other->video_snippet_);
    std::swap(mobile_creative_, other->mobile_creative_);
    std::swap(dealid_, other->dealid_);
    advertiser_ids_.Swap(&other->advertiser_ids_);
    std::swap(download_complete_, other->download_complete_);
    std::swap(winnotice_address_, other->winnotice_address_);
    std::swap(creative_adaptive_type_, other->creative_adaptive_type_);
    deeplink_url_.Swap(&other->deeplink_url_);
    impression_tracking_url_.Swap(&other->impression_tracking_url_);
    click_tracking_url_.Swap(&other->click_tracking_url_);
    std::swap(video_, other->video_);
    api_.Swap(&other->api_);
    std::swap(mime_type_, other->mime_type_);
    std::swap(campaign_date_, other->campaign_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ads::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ads_descriptor_;
  metadata.reflection = BidResponse_Ads_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse::kVersionFieldNumber;
const int BidResponse::kBidFieldNumber;
const int BidResponse::kAdsFieldNumber;
const int BidResponse::kIsRecognizedUserFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_recognized_user_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:Tanx.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(version_, is_recognized_user_);
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ads;
        break;
      }

      // repeated .Tanx.BidResponse.Ads ads = 3;
      case 3: {
        if (tag == 26) {
         parse_ads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ads;
        if (input->ExpectTag(32)) goto parse_is_recognized_user;
        break;
      }

      // optional bool is_recognized_user = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_is_recognized_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recognized_user_)));
          set_has_is_recognized_user();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidResponse)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bid(), output);
  }

  // repeated .Tanx.BidResponse.Ads ads = 3;
  for (int i = 0; i < this->ads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ads(i), output);
  }

  // optional bool is_recognized_user = 4 [default = false];
  if (has_is_recognized_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_recognized_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidResponse)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // repeated .Tanx.BidResponse.Ads ads = 3;
  for (int i = 0; i < this->ads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ads(i), target);
  }

  // optional bool is_recognized_user = 4 [default = false];
  if (has_is_recognized_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_recognized_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required string bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

    // optional bool is_recognized_user = 4 [default = false];
    if (has_is_recognized_user()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Tanx.BidResponse.Ads ads = 3;
  total_size += 1 * this->ads_size();
  for (int i = 0; i < this->ads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ads_.MergeFrom(from.ads_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_is_recognized_user()) {
      set_is_recognized_user(from.is_recognized_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ads())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bid_, other->bid_);
    ads_.Swap(&other->ads_);
    std::swap(is_recognized_user_, other->is_recognized_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResult_Res::kAdzinfoIdFieldNumber;
const int BidResult_Res::kAdBidCountIdxFieldNumber;
const int BidResult_Res::kResultCodeFieldNumber;
const int BidResult_Res::kResultPriceFieldNumber;
const int BidResult_Res::kExtendDataFieldNumber;
#endif  // !_MSC_VER

BidResult_Res::BidResult_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidResult.Res)
}

void BidResult_Res::InitAsDefaultInstance() {
}

BidResult_Res::BidResult_Res(const BidResult_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidResult.Res)
}

void BidResult_Res::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adzinfo_id_ = 0u;
  ad_bid_count_idx_ = 0u;
  result_code_ = 0;
  result_price_ = 0u;
  extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResult_Res::~BidResult_Res() {
  // @@protoc_insertion_point(destructor:Tanx.BidResult.Res)
  SharedDtor();
}

void BidResult_Res::SharedDtor() {
  if (extend_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extend_data_;
  }
  if (this != default_instance_) {
  }
}

void BidResult_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResult_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResult_Res_descriptor_;
}

const BidResult_Res& BidResult_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidResult_Res* BidResult_Res::default_instance_ = NULL;

BidResult_Res* BidResult_Res::New() const {
  return new BidResult_Res;
}

void BidResult_Res::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResult_Res*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(adzinfo_id_, result_price_);
    if (has_extend_data()) {
      if (extend_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extend_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResult_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidResult.Res)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adzinfo_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adzinfo_id_)));
          set_has_adzinfo_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ad_bid_count_idx;
        break;
      }

      // optional uint32 ad_bid_count_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_ad_bid_count_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bid_count_idx_)));
          set_has_ad_bid_count_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // optional int32 result_code = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result_price;
        break;
      }

      // optional uint32 result_price = 4;
      case 4: {
        if (tag == 32) {
         parse_result_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_price_)));
          set_has_result_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extend_data;
        break;
      }

      // optional string extend_data = 5;
      case 5: {
        if (tag == 42) {
         parse_extend_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extend_data().data(), this->extend_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extend_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidResult.Res)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidResult.Res)
  return false;
#undef DO_
}

void BidResult_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidResult.Res)
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adzinfo_id(), output);
  }

  // optional uint32 ad_bid_count_idx = 2;
  if (has_ad_bid_count_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ad_bid_count_idx(), output);
  }

  // optional int32 result_code = 3 [default = 0];
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result_code(), output);
  }

  // optional uint32 result_price = 4;
  if (has_result_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_price(), output);
  }

  // optional string extend_data = 5;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extend_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extend_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidResult.Res)
}

::google::protobuf::uint8* BidResult_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidResult.Res)
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adzinfo_id(), target);
  }

  // optional uint32 ad_bid_count_idx = 2;
  if (has_ad_bid_count_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ad_bid_count_idx(), target);
  }

  // optional int32 result_code = 3 [default = 0];
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result_code(), target);
  }

  // optional uint32 result_price = 4;
  if (has_result_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result_price(), target);
  }

  // optional string extend_data = 5;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extend_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extend_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidResult.Res)
  return target;
}

int BidResult_Res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 adzinfo_id = 1;
    if (has_adzinfo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adzinfo_id());
    }

    // optional uint32 ad_bid_count_idx = 2;
    if (has_ad_bid_count_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bid_count_idx());
    }

    // optional int32 result_code = 3 [default = 0];
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

    // optional uint32 result_price = 4;
    if (has_result_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_price());
    }

    // optional string extend_data = 5;
    if (has_extend_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extend_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResult_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResult_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResult_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResult_Res::MergeFrom(const BidResult_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adzinfo_id()) {
      set_adzinfo_id(from.adzinfo_id());
    }
    if (from.has_ad_bid_count_idx()) {
      set_ad_bid_count_idx(from.ad_bid_count_idx());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_price()) {
      set_result_price(from.result_price());
    }
    if (from.has_extend_data()) {
      set_extend_data(from.extend_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResult_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResult_Res::CopyFrom(const BidResult_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResult_Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidResult_Res::Swap(BidResult_Res* other) {
  if (other != this) {
    std::swap(adzinfo_id_, other->adzinfo_id_);
    std::swap(ad_bid_count_idx_, other->ad_bid_count_idx_);
    std::swap(result_code_, other->result_code_);
    std::swap(result_price_, other->result_price_);
    std::swap(extend_data_, other->extend_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResult_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResult_Res_descriptor_;
  metadata.reflection = BidResult_Res_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResult::kVersionFieldNumber;
const int BidResult::kBidFieldNumber;
const int BidResult::kResFieldNumber;
#endif  // !_MSC_VER

BidResult::BidResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.BidResult)
}

void BidResult::InitAsDefaultInstance() {
}

BidResult::BidResult(const BidResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.BidResult)
}

void BidResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResult::~BidResult() {
  // @@protoc_insertion_point(destructor:Tanx.BidResult)
  SharedDtor();
}

void BidResult::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (this != default_instance_) {
  }
}

void BidResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResult_descriptor_;
}

const BidResult& BidResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidResult* BidResult::default_instance_ = NULL;

BidResult* BidResult::New() const {
  return new BidResult;
}

void BidResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    version_ = 0;
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_->clear();
      }
    }
  }
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.BidResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_res;
        break;
      }

      // repeated .Tanx.BidResult.Res res = 3;
      case 3: {
        if (tag == 26) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_res;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.BidResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.BidResult)
  return false;
#undef DO_
}

void BidResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.BidResult)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bid(), output);
  }

  // repeated .Tanx.BidResult.Res res = 3;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->res(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.BidResult)
}

::google::protobuf::uint8* BidResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.BidResult)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // repeated .Tanx.BidResult.Res res = 3;
  for (int i = 0; i < this->res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->res(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.BidResult)
  return target;
}

int BidResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required string bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

  }
  // repeated .Tanx.BidResult.Res res = 3;
  total_size += 1 * this->res_size();
  for (int i = 0; i < this->res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->res(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResult::MergeFrom(const BidResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  res_.MergeFrom(from.res_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResult::CopyFrom(const BidResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->res())) return false;
  return true;
}

void BidResult::Swap(BidResult* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bid_, other->bid_);
    res_.Swap(&other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResult_descriptor_;
  metadata.reflection = BidResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobileCreative_Creative_Attr::kNameFieldNumber;
const int MobileCreative_Creative_Attr::kValueFieldNumber;
#endif  // !_MSC_VER

MobileCreative_Creative_Attr::MobileCreative_Creative_Attr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.MobileCreative.Creative.Attr)
}

void MobileCreative_Creative_Attr::InitAsDefaultInstance() {
}

MobileCreative_Creative_Attr::MobileCreative_Creative_Attr(const MobileCreative_Creative_Attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.MobileCreative.Creative.Attr)
}

void MobileCreative_Creative_Attr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Creative_Attr::~MobileCreative_Creative_Attr() {
  // @@protoc_insertion_point(destructor:Tanx.MobileCreative.Creative.Attr)
  SharedDtor();
}

void MobileCreative_Creative_Attr::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MobileCreative_Creative_Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Creative_Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Creative_Attr_descriptor_;
}

const MobileCreative_Creative_Attr& MobileCreative_Creative_Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Creative_Attr* MobileCreative_Creative_Attr::default_instance_ = NULL;

MobileCreative_Creative_Attr* MobileCreative_Creative_Attr::New() const {
  return new MobileCreative_Creative_Attr;
}

void MobileCreative_Creative_Attr::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileCreative_Creative_Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.MobileCreative.Creative.Attr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.MobileCreative.Creative.Attr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.MobileCreative.Creative.Attr)
  return false;
#undef DO_
}

void MobileCreative_Creative_Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.MobileCreative.Creative.Attr)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.MobileCreative.Creative.Attr)
}

::google::protobuf::uint8* MobileCreative_Creative_Attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.MobileCreative.Creative.Attr)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.MobileCreative.Creative.Attr)
  return target;
}

int MobileCreative_Creative_Attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Creative_Attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileCreative_Creative_Attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileCreative_Creative_Attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileCreative_Creative_Attr::MergeFrom(const MobileCreative_Creative_Attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileCreative_Creative_Attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Creative_Attr::CopyFrom(const MobileCreative_Creative_Attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Creative_Attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MobileCreative_Creative_Attr::Swap(MobileCreative_Creative_Attr* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileCreative_Creative_Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Creative_Attr_descriptor_;
  metadata.reflection = MobileCreative_Creative_Attr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MobileCreative_Creative_TrackingEvents::kImpressionEventFieldNumber;
const int MobileCreative_Creative_TrackingEvents::kClickEventFieldNumber;
const int MobileCreative_Creative_TrackingEvents::kDownloadCompleteEventFieldNumber;
#endif  // !_MSC_VER

MobileCreative_Creative_TrackingEvents::MobileCreative_Creative_TrackingEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.MobileCreative.Creative.TrackingEvents)
}

void MobileCreative_Creative_TrackingEvents::InitAsDefaultInstance() {
}

MobileCreative_Creative_TrackingEvents::MobileCreative_Creative_TrackingEvents(const MobileCreative_Creative_TrackingEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.MobileCreative.Creative.TrackingEvents)
}

void MobileCreative_Creative_TrackingEvents::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Creative_TrackingEvents::~MobileCreative_Creative_TrackingEvents() {
  // @@protoc_insertion_point(destructor:Tanx.MobileCreative.Creative.TrackingEvents)
  SharedDtor();
}

void MobileCreative_Creative_TrackingEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MobileCreative_Creative_TrackingEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Creative_TrackingEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Creative_TrackingEvents_descriptor_;
}

const MobileCreative_Creative_TrackingEvents& MobileCreative_Creative_TrackingEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Creative_TrackingEvents* MobileCreative_Creative_TrackingEvents::default_instance_ = NULL;

MobileCreative_Creative_TrackingEvents* MobileCreative_Creative_TrackingEvents::New() const {
  return new MobileCreative_Creative_TrackingEvents;
}

void MobileCreative_Creative_TrackingEvents::Clear() {
  impression_event_.Clear();
  click_event_.Clear();
  download_complete_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileCreative_Creative_TrackingEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.MobileCreative.Creative.TrackingEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string impression_event = 1;
      case 1: {
        if (tag == 10) {
         parse_impression_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impression_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impression_event(this->impression_event_size() - 1).data(),
            this->impression_event(this->impression_event_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impression_event");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_impression_event;
        if (input->ExpectTag(18)) goto parse_click_event;
        break;
      }

      // repeated string click_event = 2;
      case 2: {
        if (tag == 18) {
         parse_click_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_event(this->click_event_size() - 1).data(),
            this->click_event(this->click_event_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_event");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_click_event;
        if (input->ExpectTag(26)) goto parse_download_complete_event;
        break;
      }

      // repeated string download_complete_event = 3;
      case 3: {
        if (tag == 26) {
         parse_download_complete_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_download_complete_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_complete_event(this->download_complete_event_size() - 1).data(),
            this->download_complete_event(this->download_complete_event_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "download_complete_event");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_download_complete_event;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.MobileCreative.Creative.TrackingEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.MobileCreative.Creative.TrackingEvents)
  return false;
#undef DO_
}

void MobileCreative_Creative_TrackingEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.MobileCreative.Creative.TrackingEvents)
  // repeated string impression_event = 1;
  for (int i = 0; i < this->impression_event_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->impression_event(i).data(), this->impression_event(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "impression_event");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->impression_event(i), output);
  }

  // repeated string click_event = 2;
  for (int i = 0; i < this->click_event_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->click_event(i).data(), this->click_event(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "click_event");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->click_event(i), output);
  }

  // repeated string download_complete_event = 3;
  for (int i = 0; i < this->download_complete_event_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->download_complete_event(i).data(), this->download_complete_event(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "download_complete_event");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->download_complete_event(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.MobileCreative.Creative.TrackingEvents)
}

::google::protobuf::uint8* MobileCreative_Creative_TrackingEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.MobileCreative.Creative.TrackingEvents)
  // repeated string impression_event = 1;
  for (int i = 0; i < this->impression_event_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impression_event(i).data(), this->impression_event(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impression_event");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->impression_event(i), target);
  }

  // repeated string click_event = 2;
  for (int i = 0; i < this->click_event_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_event(i).data(), this->click_event(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_event");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->click_event(i), target);
  }

  // repeated string download_complete_event = 3;
  for (int i = 0; i < this->download_complete_event_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_complete_event(i).data(), this->download_complete_event(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "download_complete_event");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->download_complete_event(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.MobileCreative.Creative.TrackingEvents)
  return target;
}

int MobileCreative_Creative_TrackingEvents::ByteSize() const {
  int total_size = 0;

  // repeated string impression_event = 1;
  total_size += 1 * this->impression_event_size();
  for (int i = 0; i < this->impression_event_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impression_event(i));
  }

  // repeated string click_event = 2;
  total_size += 1 * this->click_event_size();
  for (int i = 0; i < this->click_event_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_event(i));
  }

  // repeated string download_complete_event = 3;
  total_size += 1 * this->download_complete_event_size();
  for (int i = 0; i < this->download_complete_event_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->download_complete_event(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Creative_TrackingEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileCreative_Creative_TrackingEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileCreative_Creative_TrackingEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileCreative_Creative_TrackingEvents::MergeFrom(const MobileCreative_Creative_TrackingEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  impression_event_.MergeFrom(from.impression_event_);
  click_event_.MergeFrom(from.click_event_);
  download_complete_event_.MergeFrom(from.download_complete_event_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileCreative_Creative_TrackingEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Creative_TrackingEvents::CopyFrom(const MobileCreative_Creative_TrackingEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Creative_TrackingEvents::IsInitialized() const {

  return true;
}

void MobileCreative_Creative_TrackingEvents::Swap(MobileCreative_Creative_TrackingEvents* other) {
  if (other != this) {
    impression_event_.Swap(&other->impression_event_);
    click_event_.Swap(&other->click_event_);
    download_complete_event_.Swap(&other->download_complete_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileCreative_Creative_TrackingEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Creative_TrackingEvents_descriptor_;
  metadata.reflection = MobileCreative_Creative_TrackingEvents_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MobileCreative_Creative::kImgUrlFieldNumber;
const int MobileCreative_Creative::kImgSizeFieldNumber;
const int MobileCreative_Creative::kTitleFieldNumber;
const int MobileCreative_Creative::kClickUrlFieldNumber;
const int MobileCreative_Creative::kDestinationUrlFieldNumber;
const int MobileCreative_Creative::kAttrFieldNumber;
const int MobileCreative_Creative::kCreativeIdFieldNumber;
const int MobileCreative_Creative::kCategoryFieldNumber;
const int MobileCreative_Creative::kTrackingEventsFieldNumber;
#endif  // !_MSC_VER

MobileCreative_Creative::MobileCreative_Creative()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.MobileCreative.Creative)
}

void MobileCreative_Creative::InitAsDefaultInstance() {
  tracking_events_ = const_cast< ::Tanx::MobileCreative_Creative_TrackingEvents*>(&::Tanx::MobileCreative_Creative_TrackingEvents::default_instance());
}

MobileCreative_Creative::MobileCreative_Creative(const MobileCreative_Creative& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.MobileCreative.Creative)
}

void MobileCreative_Creative::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  img_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  click_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracking_events_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Creative::~MobileCreative_Creative() {
  // @@protoc_insertion_point(destructor:Tanx.MobileCreative.Creative)
  SharedDtor();
}

void MobileCreative_Creative::SharedDtor() {
  if (img_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete img_url_;
  }
  if (img_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete img_size_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (click_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete click_url_;
  }
  if (destination_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destination_url_;
  }
  if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creative_id_;
  }
  if (this != default_instance_) {
    delete tracking_events_;
  }
}

void MobileCreative_Creative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Creative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Creative_descriptor_;
}

const MobileCreative_Creative& MobileCreative_Creative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Creative* MobileCreative_Creative::default_instance_ = NULL;

MobileCreative_Creative* MobileCreative_Creative::New() const {
  return new MobileCreative_Creative;
}

void MobileCreative_Creative::Clear() {
  if (_has_bits_[0 / 32] & 95) {
    if (has_img_url()) {
      if (img_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        img_url_->clear();
      }
    }
    if (has_img_size()) {
      if (img_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        img_size_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_click_url()) {
      if (click_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        click_url_->clear();
      }
    }
    if (has_destination_url()) {
      if (destination_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        destination_url_->clear();
      }
    }
    if (has_creative_id()) {
      if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creative_id_->clear();
      }
    }
  }
  if (has_tracking_events()) {
    if (tracking_events_ != NULL) tracking_events_->::Tanx::MobileCreative_Creative_TrackingEvents::Clear();
  }
  attr_.Clear();
  category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileCreative_Creative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.MobileCreative.Creative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string img_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img_url().data(), this->img_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "img_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_img_size;
        break;
      }

      // optional string img_size = 2;
      case 2: {
        if (tag == 18) {
         parse_img_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img_size().data(), this->img_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "img_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_click_url;
        break;
      }

      // optional string click_url = 4;
      case 4: {
        if (tag == 34) {
         parse_click_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_click_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_url().data(), this->click_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_destination_url;
        break;
      }

      // optional string destination_url = 5;
      case 5: {
        if (tag == 42) {
         parse_destination_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination_url().data(), this->destination_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "destination_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        break;
      }

      // repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
      case 6: {
        if (tag == 50) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        if (input->ExpectTag(58)) goto parse_creative_id;
        break;
      }

      // optional string creative_id = 7;
      case 7: {
        if (tag == 58) {
         parse_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->creative_id().data(), this->creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "creative_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_category;
        break;
      }

      // repeated int32 category = 8;
      case 8: {
        if (tag == 64) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_category())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_category;
        if (input->ExpectTag(74)) goto parse_tracking_events;
        break;
      }

      // optional .Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
      case 9: {
        if (tag == 74) {
         parse_tracking_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracking_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.MobileCreative.Creative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.MobileCreative.Creative)
  return false;
#undef DO_
}

void MobileCreative_Creative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.MobileCreative.Creative)
  // optional string img_url = 1;
  if (has_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), this->img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "img_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->img_url(), output);
  }

  // optional string img_size = 2;
  if (has_img_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_size().data(), this->img_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "img_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->img_size(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string click_url = 4;
  if (has_click_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_url().data(), this->click_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->click_url(), output);
  }

  // optional string destination_url = 5;
  if (has_destination_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_url().data(), this->destination_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destination_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->destination_url(), output);
  }

  // repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attr(i), output);
  }

  // optional string creative_id = 7;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "creative_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->creative_id(), output);
  }

  // repeated int32 category = 8;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->category(i), output);
  }

  // optional .Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
  if (has_tracking_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tracking_events(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.MobileCreative.Creative)
}

::google::protobuf::uint8* MobileCreative_Creative::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.MobileCreative.Creative)
  // optional string img_url = 1;
  if (has_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), this->img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "img_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->img_url(), target);
  }

  // optional string img_size = 2;
  if (has_img_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_size().data(), this->img_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "img_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->img_size(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string click_url = 4;
  if (has_click_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_url().data(), this->click_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->click_url(), target);
  }

  // optional string destination_url = 5;
  if (has_destination_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_url().data(), this->destination_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destination_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->destination_url(), target);
  }

  // repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attr(i), target);
  }

  // optional string creative_id = 7;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "creative_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->creative_id(), target);
  }

  // repeated int32 category = 8;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->category(i), target);
  }

  // optional .Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
  if (has_tracking_events()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tracking_events(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.MobileCreative.Creative)
  return target;
}

int MobileCreative_Creative::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string img_url = 1;
    if (has_img_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_url());
    }

    // optional string img_size = 2;
    if (has_img_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_size());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string click_url = 4;
    if (has_click_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->click_url());
    }

    // optional string destination_url = 5;
    if (has_destination_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_url());
    }

    // optional string creative_id = 7;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
    if (has_tracking_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracking_events());
    }

  }
  // repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated int32 category = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Creative::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileCreative_Creative* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileCreative_Creative*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileCreative_Creative::MergeFrom(const MobileCreative_Creative& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  category_.MergeFrom(from.category_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_url()) {
      set_img_url(from.img_url());
    }
    if (from.has_img_size()) {
      set_img_size(from.img_size());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_click_url()) {
      set_click_url(from.click_url());
    }
    if (from.has_destination_url()) {
      set_destination_url(from.destination_url());
    }
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tracking_events()) {
      mutable_tracking_events()->::Tanx::MobileCreative_Creative_TrackingEvents::MergeFrom(from.tracking_events());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileCreative_Creative::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Creative::CopyFrom(const MobileCreative_Creative& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Creative::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void MobileCreative_Creative::Swap(MobileCreative_Creative* other) {
  if (other != this) {
    std::swap(img_url_, other->img_url_);
    std::swap(img_size_, other->img_size_);
    std::swap(title_, other->title_);
    std::swap(click_url_, other->click_url_);
    std::swap(destination_url_, other->destination_url_);
    attr_.Swap(&other->attr_);
    std::swap(creative_id_, other->creative_id_);
    category_.Swap(&other->category_);
    std::swap(tracking_events_, other->tracking_events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileCreative_Creative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Creative_descriptor_;
  metadata.reflection = MobileCreative_Creative_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MobileCreative_Area::kIdFieldNumber;
const int MobileCreative_Area::kCreativesFieldNumber;
#endif  // !_MSC_VER

MobileCreative_Area::MobileCreative_Area()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.MobileCreative.Area)
}

void MobileCreative_Area::InitAsDefaultInstance() {
}

MobileCreative_Area::MobileCreative_Area(const MobileCreative_Area& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.MobileCreative.Area)
}

void MobileCreative_Area::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Area::~MobileCreative_Area() {
  // @@protoc_insertion_point(destructor:Tanx.MobileCreative.Area)
  SharedDtor();
}

void MobileCreative_Area::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MobileCreative_Area::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Area::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Area_descriptor_;
}

const MobileCreative_Area& MobileCreative_Area::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Area* MobileCreative_Area::default_instance_ = NULL;

MobileCreative_Area* MobileCreative_Area::New() const {
  return new MobileCreative_Area;
}

void MobileCreative_Area::Clear() {
  id_ = 0;
  creatives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileCreative_Area::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.MobileCreative.Area)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creatives;
        break;
      }

      // repeated .Tanx.MobileCreative.Creative creatives = 2;
      case 2: {
        if (tag == 18) {
         parse_creatives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_creatives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creatives;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.MobileCreative.Area)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.MobileCreative.Area)
  return false;
#undef DO_
}

void MobileCreative_Area::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.MobileCreative.Area)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .Tanx.MobileCreative.Creative creatives = 2;
  for (int i = 0; i < this->creatives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creatives(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.MobileCreative.Area)
}

::google::protobuf::uint8* MobileCreative_Area::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.MobileCreative.Area)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .Tanx.MobileCreative.Creative creatives = 2;
  for (int i = 0; i < this->creatives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creatives(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.MobileCreative.Area)
  return target;
}

int MobileCreative_Area::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .Tanx.MobileCreative.Creative creatives = 2;
  total_size += 1 * this->creatives_size();
  for (int i = 0; i < this->creatives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatives(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Area::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileCreative_Area* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileCreative_Area*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileCreative_Area::MergeFrom(const MobileCreative_Area& from) {
  GOOGLE_CHECK_NE(&from, this);
  creatives_.MergeFrom(from.creatives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileCreative_Area::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Area::CopyFrom(const MobileCreative_Area& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Area::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->creatives())) return false;
  return true;
}

void MobileCreative_Area::Swap(MobileCreative_Area* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    creatives_.Swap(&other->creatives_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileCreative_Area::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Area_descriptor_;
  metadata.reflection = MobileCreative_Area_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MobileCreative::kVersionFieldNumber;
const int MobileCreative::kBidFieldNumber;
const int MobileCreative::kViewTypeFieldNumber;
const int MobileCreative::kCreativesFieldNumber;
const int MobileCreative::kNativeTemplateIdFieldNumber;
const int MobileCreative::kAreasFieldNumber;
#endif  // !_MSC_VER

MobileCreative::MobileCreative()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tanx.MobileCreative)
}

void MobileCreative::InitAsDefaultInstance() {
}

MobileCreative::MobileCreative(const MobileCreative& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tanx.MobileCreative)
}

void MobileCreative::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_type_ = 0u;
  native_template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative::~MobileCreative() {
  // @@protoc_insertion_point(destructor:Tanx.MobileCreative)
  SharedDtor();
}

void MobileCreative::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (native_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete native_template_id_;
  }
  if (this != default_instance_) {
  }
}

void MobileCreative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_descriptor_;
}

const MobileCreative& MobileCreative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

MobileCreative* MobileCreative::default_instance_ = NULL;

MobileCreative* MobileCreative::New() const {
  return new MobileCreative;
}

void MobileCreative::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MobileCreative*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(version_, view_type_);
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_->clear();
      }
    }
    if (has_native_template_id()) {
      if (native_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        native_template_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  creatives_.Clear();
  areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileCreative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tanx.MobileCreative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_view_type;
        break;
      }

      // optional uint32 view_type = 3;
      case 3: {
        if (tag == 24) {
         parse_view_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &view_type_)));
          set_has_view_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_creatives;
        break;
      }

      // repeated .Tanx.MobileCreative.Creative creatives = 4;
      case 4: {
        if (tag == 34) {
         parse_creatives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_creatives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_creatives;
        if (input->ExpectTag(42)) goto parse_native_template_id;
        break;
      }

      // optional string native_template_id = 5;
      case 5: {
        if (tag == 42) {
         parse_native_template_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_native_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->native_template_id().data(), this->native_template_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "native_template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_areas;
        break;
      }

      // repeated .Tanx.MobileCreative.Area areas = 6;
      case 6: {
        if (tag == 50) {
         parse_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_areas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tanx.MobileCreative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tanx.MobileCreative)
  return false;
#undef DO_
}

void MobileCreative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tanx.MobileCreative)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bid(), output);
  }

  // optional uint32 view_type = 3;
  if (has_view_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->view_type(), output);
  }

  // repeated .Tanx.MobileCreative.Creative creatives = 4;
  for (int i = 0; i < this->creatives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->creatives(i), output);
  }

  // optional string native_template_id = 5;
  if (has_native_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id().data(), this->native_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "native_template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->native_template_id(), output);
  }

  // repeated .Tanx.MobileCreative.Area areas = 6;
  for (int i = 0; i < this->areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->areas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tanx.MobileCreative)
}

::google::protobuf::uint8* MobileCreative::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tanx.MobileCreative)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // optional uint32 view_type = 3;
  if (has_view_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->view_type(), target);
  }

  // repeated .Tanx.MobileCreative.Creative creatives = 4;
  for (int i = 0; i < this->creatives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->creatives(i), target);
  }

  // optional string native_template_id = 5;
  if (has_native_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id().data(), this->native_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "native_template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->native_template_id(), target);
  }

  // repeated .Tanx.MobileCreative.Area areas = 6;
  for (int i = 0; i < this->areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->areas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tanx.MobileCreative)
  return target;
}

int MobileCreative::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required string bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

    // optional uint32 view_type = 3;
    if (has_view_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->view_type());
    }

    // optional string native_template_id = 5;
    if (has_native_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->native_template_id());
    }

  }
  // repeated .Tanx.MobileCreative.Creative creatives = 4;
  total_size += 1 * this->creatives_size();
  for (int i = 0; i < this->creatives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatives(i));
  }

  // repeated .Tanx.MobileCreative.Area areas = 6;
  total_size += 1 * this->areas_size();
  for (int i = 0; i < this->areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileCreative* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileCreative*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileCreative::MergeFrom(const MobileCreative& from) {
  GOOGLE_CHECK_NE(&from, this);
  creatives_.MergeFrom(from.creatives_);
  areas_.MergeFrom(from.areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_view_type()) {
      set_view_type(from.view_type());
    }
    if (from.has_native_template_id()) {
      set_native_template_id(from.native_template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileCreative::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative::CopyFrom(const MobileCreative& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->creatives())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->areas())) return false;
  return true;
}

void MobileCreative::Swap(MobileCreative* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bid_, other->bid_);
    std::swap(view_type_, other->view_type_);
    creatives_.Swap(&other->creatives_);
    std::swap(native_template_id_, other->native_template_id_);
    areas_.Swap(&other->areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileCreative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_descriptor_;
  metadata.reflection = MobileCreative_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Tanx

// @@protoc_insertion_point(global_scope)

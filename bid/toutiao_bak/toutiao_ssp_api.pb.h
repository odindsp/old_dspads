// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: toutiao_ssp_api.proto

#ifndef PROTOBUF_toutiao_5fssp_5fapi_2eproto__INCLUDED
#define PROTOBUF_toutiao_5fssp_5fapi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace toutiao_ssp {
namespace api {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

class AdSlot;
class AdSlot_Banner;
class Publisher;
class Content;
class Content_Producer;
class App;
class Geo;
class Device;
class Data;
class Data_Segment;
class User;
class BidRequest;
class MaterialMeta;
class MaterialMeta_ImageMeta;
class MaterialMeta_ExternalMeta;
class MaterialMeta_AndroidApp;
class MaterialMeta_IosApp;
class Bid;
class SeatBid;
class BidResponse;

enum AdSlot_Position {
  AdSlot_Position_SPLASH = 1,
  AdSlot_Position_FEED = 2,
  AdSlot_Position_DETAIL = 4
};
bool AdSlot_Position_IsValid(int value);
const AdSlot_Position AdSlot_Position_Position_MIN = AdSlot_Position_SPLASH;
const AdSlot_Position AdSlot_Position_Position_MAX = AdSlot_Position_DETAIL;
const int AdSlot_Position_Position_ARRAYSIZE = AdSlot_Position_Position_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdSlot_Position_descriptor();
inline const ::std::string& AdSlot_Position_Name(AdSlot_Position value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdSlot_Position_descriptor(), value);
}
inline bool AdSlot_Position_Parse(
    const ::std::string& name, AdSlot_Position* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdSlot_Position>(
    AdSlot_Position_descriptor(), name, value);
}
enum Device_ConnectionType {
  Device_ConnectionType_Honeycomb = 1,
  Device_ConnectionType_WIFI = 2,
  Device_ConnectionType_UNKNOWN = 3
};
bool Device_ConnectionType_IsValid(int value);
const Device_ConnectionType Device_ConnectionType_ConnectionType_MIN = Device_ConnectionType_Honeycomb;
const Device_ConnectionType Device_ConnectionType_ConnectionType_MAX = Device_ConnectionType_UNKNOWN;
const int Device_ConnectionType_ConnectionType_ARRAYSIZE = Device_ConnectionType_ConnectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_ConnectionType_descriptor();
inline const ::std::string& Device_ConnectionType_Name(Device_ConnectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_ConnectionType_descriptor(), value);
}
inline bool Device_ConnectionType_Parse(
    const ::std::string& name, Device_ConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_ConnectionType>(
    Device_ConnectionType_descriptor(), name, value);
}
enum Device_DeviceType {
  Device_DeviceType_PHONE = 1,
  Device_DeviceType_TABLET = 2
};
bool Device_DeviceType_IsValid(int value);
const Device_DeviceType Device_DeviceType_DeviceType_MIN = Device_DeviceType_PHONE;
const Device_DeviceType Device_DeviceType_DeviceType_MAX = Device_DeviceType_TABLET;
const int Device_DeviceType_DeviceType_ARRAYSIZE = Device_DeviceType_DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_DeviceType_descriptor();
inline const ::std::string& Device_DeviceType_Name(Device_DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_DeviceType_descriptor(), value);
}
inline bool Device_DeviceType_Parse(
    const ::std::string& name, Device_DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_DeviceType>(
    Device_DeviceType_descriptor(), name, value);
}
enum User_Gender {
  User_Gender_MALE = 1,
  User_Gender_FEMALE = 2,
  User_Gender_UNKNOWN = 3
};
bool User_Gender_IsValid(int value);
const User_Gender User_Gender_Gender_MIN = User_Gender_MALE;
const User_Gender User_Gender_Gender_MAX = User_Gender_UNKNOWN;
const int User_Gender_Gender_ARRAYSIZE = User_Gender_Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* User_Gender_descriptor();
inline const ::std::string& User_Gender_Name(User_Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    User_Gender_descriptor(), value);
}
inline bool User_Gender_Parse(
    const ::std::string& name, User_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<User_Gender>(
    User_Gender_descriptor(), name, value);
}
enum AdType {
  NEWS_FEED = 1,
  TEXT_LINK = 2,
  IOS_APP = 3,
  ANDROID_APP = 4,
  SPLASH = 5,
  DETAIL_BANNER = 6
};
bool AdType_IsValid(int value);
const AdType AdType_MIN = NEWS_FEED;
const AdType AdType_MAX = DETAIL_BANNER;
const int AdType_ARRAYSIZE = AdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdType_descriptor();
inline const ::std::string& AdType_Name(AdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdType_descriptor(), value);
}
inline bool AdType_Parse(
    const ::std::string& name, AdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdType>(
    AdType_descriptor(), name, value);
}
// ===================================================================

class AdSlot_Banner : public ::google::protobuf::Message {
 public:
  AdSlot_Banner();
  virtual ~AdSlot_Banner();

  AdSlot_Banner(const AdSlot_Banner& from);

  inline AdSlot_Banner& operator=(const AdSlot_Banner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdSlot_Banner& default_instance();

  void Swap(AdSlot_Banner* other);

  // implements Message ----------------------------------------------

  AdSlot_Banner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdSlot_Banner& from);
  void MergeFrom(const AdSlot_Banner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required .toutiao_ssp.api.AdSlot.Position pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::toutiao_ssp::api::AdSlot_Position pos() const;
  inline void set_pos(::toutiao_ssp::api::AdSlot_Position value);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.AdSlot.Banner)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  int pos_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static AdSlot_Banner* default_instance_;
};
// -------------------------------------------------------------------

class AdSlot : public ::google::protobuf::Message {
 public:
  AdSlot();
  virtual ~AdSlot();

  AdSlot(const AdSlot& from);

  inline AdSlot& operator=(const AdSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdSlot& default_instance();

  void Swap(AdSlot* other);

  // implements Message ----------------------------------------------

  AdSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdSlot& from);
  void MergeFrom(const AdSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AdSlot_Banner Banner;

  typedef AdSlot_Position Position;
  static const Position SPLASH = AdSlot_Position_SPLASH;
  static const Position FEED = AdSlot_Position_FEED;
  static const Position DETAIL = AdSlot_Position_DETAIL;
  static inline bool Position_IsValid(int value) {
    return AdSlot_Position_IsValid(value);
  }
  static const Position Position_MIN =
    AdSlot_Position_Position_MIN;
  static const Position Position_MAX =
    AdSlot_Position_Position_MAX;
  static const int Position_ARRAYSIZE =
    AdSlot_Position_Position_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Position_descriptor() {
    return AdSlot_Position_descriptor();
  }
  static inline const ::std::string& Position_Name(Position value) {
    return AdSlot_Position_Name(value);
  }
  static inline bool Position_Parse(const ::std::string& name,
      Position* value) {
    return AdSlot_Position_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .toutiao_ssp.api.AdSlot.Banner banner = 2;
  inline int banner_size() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 2;
  inline const ::toutiao_ssp::api::AdSlot_Banner& banner(int index) const;
  inline ::toutiao_ssp::api::AdSlot_Banner* mutable_banner(int index);
  inline ::toutiao_ssp::api::AdSlot_Banner* add_banner();
  inline const ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot_Banner >&
      banner() const;
  inline ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot_Banner >*
      mutable_banner();

  // repeated .toutiao_ssp.api.AdType ad_type = 3;
  inline int ad_type_size() const;
  inline void clear_ad_type();
  static const int kAdTypeFieldNumber = 3;
  inline ::toutiao_ssp::api::AdType ad_type(int index) const;
  inline void set_ad_type(int index, ::toutiao_ssp::api::AdType value);
  inline void add_ad_type(::toutiao_ssp::api::AdType value);
  inline const ::google::protobuf::RepeatedField<int>& ad_type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_ad_type();

  // optional uint32 bid_floor = 4;
  inline bool has_bid_floor() const;
  inline void clear_bid_floor();
  static const int kBidFloorFieldNumber = 4;
  inline ::google::protobuf::uint32 bid_floor() const;
  inline void set_bid_floor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.AdSlot)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bid_floor();
  inline void clear_has_bid_floor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot_Banner > banner_;
  ::google::protobuf::RepeatedField<int> ad_type_;
  ::google::protobuf::uint32 bid_floor_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static AdSlot* default_instance_;
};
// -------------------------------------------------------------------

class Publisher : public ::google::protobuf::Message {
 public:
  Publisher();
  virtual ~Publisher();

  Publisher(const Publisher& from);

  inline Publisher& operator=(const Publisher& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Publisher& default_instance();

  void Swap(Publisher* other);

  // implements Message ----------------------------------------------

  Publisher* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Publisher& from);
  void MergeFrom(const Publisher& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string cat = 3;
  inline bool has_cat() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 3;
  inline const ::std::string& cat() const;
  inline void set_cat(const ::std::string& value);
  inline void set_cat(const char* value);
  inline void set_cat(const char* value, size_t size);
  inline ::std::string* mutable_cat();
  inline ::std::string* release_cat();
  inline void set_allocated_cat(::std::string* cat);

  // optional string domain = 4;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 4;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.Publisher)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cat();
  inline void clear_has_cat();
  inline void set_has_domain();
  inline void clear_has_domain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* cat_;
  ::std::string* domain_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Publisher* default_instance_;
};
// -------------------------------------------------------------------

class Content_Producer : public ::google::protobuf::Message {
 public:
  Content_Producer();
  virtual ~Content_Producer();

  Content_Producer(const Content_Producer& from);

  inline Content_Producer& operator=(const Content_Producer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Content_Producer& default_instance();

  void Swap(Content_Producer* other);

  // implements Message ----------------------------------------------

  Content_Producer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Content_Producer& from);
  void MergeFrom(const Content_Producer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string cat = 3;
  inline bool has_cat() const;
  inline void clear_cat();
  static const int kCatFieldNumber = 3;
  inline const ::std::string& cat() const;
  inline void set_cat(const ::std::string& value);
  inline void set_cat(const char* value);
  inline void set_cat(const char* value, size_t size);
  inline ::std::string* mutable_cat();
  inline ::std::string* release_cat();
  inline void set_allocated_cat(::std::string* cat);

  // optional string domain = 4;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 4;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.Content.Producer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cat();
  inline void clear_has_cat();
  inline void set_has_domain();
  inline void clear_has_domain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* cat_;
  ::std::string* domain_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Content_Producer* default_instance_;
};
// -------------------------------------------------------------------

class Content : public ::google::protobuf::Message {
 public:
  Content();
  virtual ~Content();

  Content(const Content& from);

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Content& default_instance();

  void Swap(Content* other);

  // implements Message ----------------------------------------------

  Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Content_Producer Producer;

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string series = 3;
  inline bool has_series() const;
  inline void clear_series();
  static const int kSeriesFieldNumber = 3;
  inline const ::std::string& series() const;
  inline void set_series(const ::std::string& value);
  inline void set_series(const char* value);
  inline void set_series(const char* value, size_t size);
  inline ::std::string* mutable_series();
  inline ::std::string* release_series();
  inline void set_allocated_series(::std::string* series);

  // optional string url = 4;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 4;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string keywords = 5;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 5;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // optional string contentrating = 6;
  inline bool has_contentrating() const;
  inline void clear_contentrating();
  static const int kContentratingFieldNumber = 6;
  inline const ::std::string& contentrating() const;
  inline void set_contentrating(const ::std::string& value);
  inline void set_contentrating(const char* value);
  inline void set_contentrating(const char* value, size_t size);
  inline ::std::string* mutable_contentrating();
  inline ::std::string* release_contentrating();
  inline void set_allocated_contentrating(::std::string* contentrating);

  // optional string userrating = 7;
  inline bool has_userrating() const;
  inline void clear_userrating();
  static const int kUserratingFieldNumber = 7;
  inline const ::std::string& userrating() const;
  inline void set_userrating(const ::std::string& value);
  inline void set_userrating(const char* value);
  inline void set_userrating(const char* value, size_t size);
  inline ::std::string* mutable_userrating();
  inline ::std::string* release_userrating();
  inline void set_allocated_userrating(::std::string* userrating);

  // optional string context = 8;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 8;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const char* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // optional .toutiao_ssp.api.Content.Producer producer = 9;
  inline bool has_producer() const;
  inline void clear_producer();
  static const int kProducerFieldNumber = 9;
  inline const ::toutiao_ssp::api::Content_Producer& producer() const;
  inline ::toutiao_ssp::api::Content_Producer* mutable_producer();
  inline ::toutiao_ssp::api::Content_Producer* release_producer();
  inline void set_allocated_producer(::toutiao_ssp::api::Content_Producer* producer);

  // optional string language = 10;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 10;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.Content)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_series();
  inline void clear_has_series();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_contentrating();
  inline void clear_has_contentrating();
  inline void set_has_userrating();
  inline void clear_has_userrating();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_producer();
  inline void clear_has_producer();
  inline void set_has_language();
  inline void clear_has_language();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* title_;
  ::std::string* series_;
  ::std::string* url_;
  ::std::string* keywords_;
  ::std::string* contentrating_;
  ::std::string* userrating_;
  ::std::string* context_;
  ::toutiao_ssp::api::Content_Producer* producer_;
  ::std::string* language_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Content* default_instance_;
};
// -------------------------------------------------------------------

class App : public ::google::protobuf::Message {
 public:
  App();
  virtual ~App();

  App(const App& from);

  inline App& operator=(const App& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const App& default_instance();

  void Swap(App* other);

  // implements Message ----------------------------------------------

  App* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const App& from);
  void MergeFrom(const App& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = "11"];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string domain = 3;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 3;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional string ver = 4;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 4;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // optional string bundle = 5;
  inline bool has_bundle() const;
  inline void clear_bundle();
  static const int kBundleFieldNumber = 5;
  inline const ::std::string& bundle() const;
  inline void set_bundle(const ::std::string& value);
  inline void set_bundle(const char* value);
  inline void set_bundle(const char* value, size_t size);
  inline ::std::string* mutable_bundle();
  inline ::std::string* release_bundle();
  inline void set_allocated_bundle(::std::string* bundle);

  // optional uint32 privacypolicy = 6;
  inline bool has_privacypolicy() const;
  inline void clear_privacypolicy();
  static const int kPrivacypolicyFieldNumber = 6;
  inline ::google::protobuf::uint32 privacypolicy() const;
  inline void set_privacypolicy(::google::protobuf::uint32 value);

  // optional uint32 paid = 7;
  inline bool has_paid() const;
  inline void clear_paid();
  static const int kPaidFieldNumber = 7;
  inline ::google::protobuf::uint32 paid() const;
  inline void set_paid(::google::protobuf::uint32 value);

  // optional .toutiao_ssp.api.Publisher publisher = 8;
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 8;
  inline const ::toutiao_ssp::api::Publisher& publisher() const;
  inline ::toutiao_ssp::api::Publisher* mutable_publisher();
  inline ::toutiao_ssp::api::Publisher* release_publisher();
  inline void set_allocated_publisher(::toutiao_ssp::api::Publisher* publisher);

  // optional .toutiao_ssp.api.Content content = 9;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 9;
  inline const ::toutiao_ssp::api::Content& content() const;
  inline ::toutiao_ssp::api::Content* mutable_content();
  inline ::toutiao_ssp::api::Content* release_content();
  inline void set_allocated_content(::toutiao_ssp::api::Content* content);

  // optional string keywords = 10;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 10;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.App)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_bundle();
  inline void clear_has_bundle();
  inline void set_has_privacypolicy();
  inline void clear_has_privacypolicy();
  inline void set_has_paid();
  inline void clear_has_paid();
  inline void set_has_publisher();
  inline void clear_has_publisher();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_keywords();
  inline void clear_has_keywords();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_id_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* domain_;
  ::std::string* ver_;
  ::std::string* bundle_;
  ::google::protobuf::uint32 privacypolicy_;
  ::google::protobuf::uint32 paid_;
  ::toutiao_ssp::api::Publisher* publisher_;
  ::toutiao_ssp::api::Content* content_;
  ::std::string* keywords_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static App* default_instance_;
};
// -------------------------------------------------------------------

class Geo : public ::google::protobuf::Message {
 public:
  Geo();
  virtual ~Geo();

  Geo(const Geo& from);

  inline Geo& operator=(const Geo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geo& default_instance();

  void Swap(Geo* other);

  // implements Message ----------------------------------------------

  Geo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Geo& from);
  void MergeFrom(const Geo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double lat = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 1;
  inline double lat() const;
  inline void set_lat(double value);

  // optional double lon = 2;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 2;
  inline double lon() const;
  inline void set_lon(double value);

  // optional string country = 3;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 3;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional string region = 4;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 4;
  inline const ::std::string& region() const;
  inline void set_region(const ::std::string& value);
  inline void set_region(const char* value);
  inline void set_region(const char* value, size_t size);
  inline ::std::string* mutable_region();
  inline ::std::string* release_region();
  inline void set_allocated_region(::std::string* region);

  // optional string city = 5;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 5;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional string type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.Geo)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lat_;
  double lon_;
  ::std::string* country_;
  ::std::string* region_;
  ::std::string* city_;
  ::std::string* type_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Geo* default_instance_;
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  void Swap(Device* other);

  // implements Message ----------------------------------------------

  Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Device_ConnectionType ConnectionType;
  static const ConnectionType Honeycomb = Device_ConnectionType_Honeycomb;
  static const ConnectionType WIFI = Device_ConnectionType_WIFI;
  static const ConnectionType UNKNOWN = Device_ConnectionType_UNKNOWN;
  static inline bool ConnectionType_IsValid(int value) {
    return Device_ConnectionType_IsValid(value);
  }
  static const ConnectionType ConnectionType_MIN =
    Device_ConnectionType_ConnectionType_MIN;
  static const ConnectionType ConnectionType_MAX =
    Device_ConnectionType_ConnectionType_MAX;
  static const int ConnectionType_ARRAYSIZE =
    Device_ConnectionType_ConnectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectionType_descriptor() {
    return Device_ConnectionType_descriptor();
  }
  static inline const ::std::string& ConnectionType_Name(ConnectionType value) {
    return Device_ConnectionType_Name(value);
  }
  static inline bool ConnectionType_Parse(const ::std::string& name,
      ConnectionType* value) {
    return Device_ConnectionType_Parse(name, value);
  }

  typedef Device_DeviceType DeviceType;
  static const DeviceType PHONE = Device_DeviceType_PHONE;
  static const DeviceType TABLET = Device_DeviceType_TABLET;
  static inline bool DeviceType_IsValid(int value) {
    return Device_DeviceType_IsValid(value);
  }
  static const DeviceType DeviceType_MIN =
    Device_DeviceType_DeviceType_MIN;
  static const DeviceType DeviceType_MAX =
    Device_DeviceType_DeviceType_MAX;
  static const int DeviceType_ARRAYSIZE =
    Device_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceType_descriptor() {
    return Device_DeviceType_descriptor();
  }
  static inline const ::std::string& DeviceType_Name(DeviceType value) {
    return Device_DeviceType_Name(value);
  }
  static inline bool DeviceType_Parse(const ::std::string& name,
      DeviceType* value) {
    return Device_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bool dnt = 1;
  inline bool has_dnt() const;
  inline void clear_dnt();
  static const int kDntFieldNumber = 1;
  inline bool dnt() const;
  inline void set_dnt(bool value);

  // required string ua = 2;
  inline bool has_ua() const;
  inline void clear_ua();
  static const int kUaFieldNumber = 2;
  inline const ::std::string& ua() const;
  inline void set_ua(const ::std::string& value);
  inline void set_ua(const char* value);
  inline void set_ua(const char* value, size_t size);
  inline ::std::string* mutable_ua();
  inline ::std::string* release_ua();
  inline void set_allocated_ua(::std::string* ua);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional .toutiao_ssp.api.Geo geo = 4;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 4;
  inline const ::toutiao_ssp::api::Geo& geo() const;
  inline ::toutiao_ssp::api::Geo* mutable_geo();
  inline ::toutiao_ssp::api::Geo* release_geo();
  inline void set_allocated_geo(::toutiao_ssp::api::Geo* geo);

  // optional string device_id = 5;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 5;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional string device_id_md5 = 6;
  inline bool has_device_id_md5() const;
  inline void clear_device_id_md5();
  static const int kDeviceIdMd5FieldNumber = 6;
  inline const ::std::string& device_id_md5() const;
  inline void set_device_id_md5(const ::std::string& value);
  inline void set_device_id_md5(const char* value);
  inline void set_device_id_md5(const char* value, size_t size);
  inline ::std::string* mutable_device_id_md5();
  inline ::std::string* release_device_id_md5();
  inline void set_allocated_device_id_md5(::std::string* device_id_md5);

  // optional string carrier = 7;
  inline bool has_carrier() const;
  inline void clear_carrier();
  static const int kCarrierFieldNumber = 7;
  inline const ::std::string& carrier() const;
  inline void set_carrier(const ::std::string& value);
  inline void set_carrier(const char* value);
  inline void set_carrier(const char* value, size_t size);
  inline ::std::string* mutable_carrier();
  inline ::std::string* release_carrier();
  inline void set_allocated_carrier(::std::string* carrier);

  // optional string language = 8;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 8;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string make = 9;
  inline bool has_make() const;
  inline void clear_make();
  static const int kMakeFieldNumber = 9;
  inline const ::std::string& make() const;
  inline void set_make(const ::std::string& value);
  inline void set_make(const char* value);
  inline void set_make(const char* value, size_t size);
  inline ::std::string* mutable_make();
  inline ::std::string* release_make();
  inline void set_allocated_make(::std::string* make);

  // optional string model = 10;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 10;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string os = 11;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 11;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // optional string osv = 12;
  inline bool has_osv() const;
  inline void clear_osv();
  static const int kOsvFieldNumber = 12;
  inline const ::std::string& osv() const;
  inline void set_osv(const ::std::string& value);
  inline void set_osv(const char* value);
  inline void set_osv(const char* value, size_t size);
  inline ::std::string* mutable_osv();
  inline ::std::string* release_osv();
  inline void set_allocated_osv(::std::string* osv);

  // optional bool js = 13;
  inline bool has_js() const;
  inline void clear_js();
  static const int kJsFieldNumber = 13;
  inline bool js() const;
  inline void set_js(bool value);

  // optional .toutiao_ssp.api.Device.ConnectionType connection_type = 14;
  inline bool has_connection_type() const;
  inline void clear_connection_type();
  static const int kConnectionTypeFieldNumber = 14;
  inline ::toutiao_ssp::api::Device_ConnectionType connection_type() const;
  inline void set_connection_type(::toutiao_ssp::api::Device_ConnectionType value);

  // optional .toutiao_ssp.api.Device.DeviceType device_type = 15;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 15;
  inline ::toutiao_ssp::api::Device_DeviceType device_type() const;
  inline void set_device_type(::toutiao_ssp::api::Device_DeviceType value);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.Device)
 private:
  inline void set_has_dnt();
  inline void clear_has_dnt();
  inline void set_has_ua();
  inline void clear_has_ua();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_geo();
  inline void clear_has_geo();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_device_id_md5();
  inline void clear_has_device_id_md5();
  inline void set_has_carrier();
  inline void clear_has_carrier();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_make();
  inline void clear_has_make();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_osv();
  inline void clear_has_osv();
  inline void set_has_js();
  inline void clear_has_js();
  inline void set_has_connection_type();
  inline void clear_has_connection_type();
  inline void set_has_device_type();
  inline void clear_has_device_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ua_;
  ::std::string* ip_;
  ::toutiao_ssp::api::Geo* geo_;
  ::std::string* device_id_;
  ::std::string* device_id_md5_;
  ::std::string* carrier_;
  ::std::string* language_;
  ::std::string* make_;
  bool dnt_;
  bool js_;
  int connection_type_;
  ::std::string* model_;
  ::std::string* os_;
  ::std::string* osv_;
  int device_type_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Device* default_instance_;
};
// -------------------------------------------------------------------

class Data_Segment : public ::google::protobuf::Message {
 public:
  Data_Segment();
  virtual ~Data_Segment();

  Data_Segment(const Data_Segment& from);

  inline Data_Segment& operator=(const Data_Segment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data_Segment& default_instance();

  void Swap(Data_Segment* other);

  // implements Message ----------------------------------------------

  Data_Segment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data_Segment& from);
  void MergeFrom(const Data_Segment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.Data.Segment)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Data_Segment* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Data_Segment Segment;

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .toutiao_ssp.api.Data.Segment segment = 3;
  inline bool has_segment() const;
  inline void clear_segment();
  static const int kSegmentFieldNumber = 3;
  inline const ::toutiao_ssp::api::Data_Segment& segment() const;
  inline ::toutiao_ssp::api::Data_Segment* mutable_segment();
  inline ::toutiao_ssp::api::Data_Segment* release_segment();
  inline void set_allocated_segment(::toutiao_ssp::api::Data_Segment* segment);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.Data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_segment();
  inline void clear_has_segment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::toutiao_ssp::api::Data_Segment* segment_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef User_Gender Gender;
  static const Gender MALE = User_Gender_MALE;
  static const Gender FEMALE = User_Gender_FEMALE;
  static const Gender UNKNOWN = User_Gender_UNKNOWN;
  static inline bool Gender_IsValid(int value) {
    return User_Gender_IsValid(value);
  }
  static const Gender Gender_MIN =
    User_Gender_Gender_MIN;
  static const Gender Gender_MAX =
    User_Gender_Gender_MAX;
  static const int Gender_ARRAYSIZE =
    User_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gender_descriptor() {
    return User_Gender_descriptor();
  }
  static inline const ::std::string& Gender_Name(Gender value) {
    return User_Gender_Name(value);
  }
  static inline bool Gender_Parse(const ::std::string& name,
      Gender* value) {
    return User_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string buyer_id = 2;
  inline bool has_buyer_id() const;
  inline void clear_buyer_id();
  static const int kBuyerIdFieldNumber = 2;
  inline const ::std::string& buyer_id() const;
  inline void set_buyer_id(const ::std::string& value);
  inline void set_buyer_id(const char* value);
  inline void set_buyer_id(const char* value, size_t size);
  inline ::std::string* mutable_buyer_id();
  inline ::std::string* release_buyer_id();
  inline void set_allocated_buyer_id(::std::string* buyer_id);

  // optional string yob = 3;
  inline bool has_yob() const;
  inline void clear_yob();
  static const int kYobFieldNumber = 3;
  inline const ::std::string& yob() const;
  inline void set_yob(const ::std::string& value);
  inline void set_yob(const char* value);
  inline void set_yob(const char* value, size_t size);
  inline ::std::string* mutable_yob();
  inline ::std::string* release_yob();
  inline void set_allocated_yob(::std::string* yob);

  // optional .toutiao_ssp.api.User.Gender gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::toutiao_ssp::api::User_Gender gender() const;
  inline void set_gender(::toutiao_ssp::api::User_Gender value);

  // optional string keywords = 5;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 5;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  inline void set_allocated_keywords(::std::string* keywords);

  // optional .toutiao_ssp.api.Geo geo = 6;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 6;
  inline const ::toutiao_ssp::api::Geo& geo() const;
  inline ::toutiao_ssp::api::Geo* mutable_geo();
  inline ::toutiao_ssp::api::Geo* release_geo();
  inline void set_allocated_geo(::toutiao_ssp::api::Geo* geo);

  // optional .toutiao_ssp.api.Data data = 7;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::toutiao_ssp::api::Data& data() const;
  inline ::toutiao_ssp::api::Data* mutable_data();
  inline ::toutiao_ssp::api::Data* release_data();
  inline void set_allocated_data(::toutiao_ssp::api::Data* data);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buyer_id();
  inline void clear_has_buyer_id();
  inline void set_has_yob();
  inline void clear_has_yob();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_geo();
  inline void clear_has_geo();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* buyer_id_;
  ::std::string* yob_;
  ::std::string* keywords_;
  ::toutiao_ssp::api::Geo* geo_;
  ::toutiao_ssp::api::Data* data_;
  int gender_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest : public ::google::protobuf::Message {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest& default_instance();

  void Swap(BidRequest* other);

  // implements Message ----------------------------------------------

  BidRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline const ::std::string& request_id() const;
  inline void set_request_id(const ::std::string& value);
  inline void set_request_id(const char* value);
  inline void set_request_id(const char* value, size_t size);
  inline ::std::string* mutable_request_id();
  inline ::std::string* release_request_id();
  inline void set_allocated_request_id(::std::string* request_id);

  // required string api_version = 2;
  inline bool has_api_version() const;
  inline void clear_api_version();
  static const int kApiVersionFieldNumber = 2;
  inline const ::std::string& api_version() const;
  inline void set_api_version(const ::std::string& value);
  inline void set_api_version(const char* value);
  inline void set_api_version(const char* value, size_t size);
  inline ::std::string* mutable_api_version();
  inline ::std::string* release_api_version();
  inline void set_allocated_api_version(::std::string* api_version);

  // repeated .toutiao_ssp.api.AdSlot adslots = 3;
  inline int adslots_size() const;
  inline void clear_adslots();
  static const int kAdslotsFieldNumber = 3;
  inline const ::toutiao_ssp::api::AdSlot& adslots(int index) const;
  inline ::toutiao_ssp::api::AdSlot* mutable_adslots(int index);
  inline ::toutiao_ssp::api::AdSlot* add_adslots();
  inline const ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot >&
      adslots() const;
  inline ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot >*
      mutable_adslots();

  // required .toutiao_ssp.api.App app = 4;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 4;
  inline const ::toutiao_ssp::api::App& app() const;
  inline ::toutiao_ssp::api::App* mutable_app();
  inline ::toutiao_ssp::api::App* release_app();
  inline void set_allocated_app(::toutiao_ssp::api::App* app);

  // required .toutiao_ssp.api.Device device = 5;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 5;
  inline const ::toutiao_ssp::api::Device& device() const;
  inline ::toutiao_ssp::api::Device* mutable_device();
  inline ::toutiao_ssp::api::Device* release_device();
  inline void set_allocated_device(::toutiao_ssp::api::Device* device);

  // required .toutiao_ssp.api.User user = 6;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 6;
  inline const ::toutiao_ssp::api::User& user() const;
  inline ::toutiao_ssp::api::User* mutable_user();
  inline ::toutiao_ssp::api::User* release_user();
  inline void set_allocated_user(::toutiao_ssp::api::User* user);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.BidRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_api_version();
  inline void clear_has_api_version();
  inline void set_has_app();
  inline void clear_has_app();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_id_;
  ::std::string* api_version_;
  ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot > adslots_;
  ::toutiao_ssp::api::App* app_;
  ::toutiao_ssp::api::Device* device_;
  ::toutiao_ssp::api::User* user_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static BidRequest* default_instance_;
};
// -------------------------------------------------------------------

class MaterialMeta_ImageMeta : public ::google::protobuf::Message {
 public:
  MaterialMeta_ImageMeta();
  virtual ~MaterialMeta_ImageMeta();

  MaterialMeta_ImageMeta(const MaterialMeta_ImageMeta& from);

  inline MaterialMeta_ImageMeta& operator=(const MaterialMeta_ImageMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaterialMeta_ImageMeta& default_instance();

  void Swap(MaterialMeta_ImageMeta* other);

  // implements Message ----------------------------------------------

  MaterialMeta_ImageMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaterialMeta_ImageMeta& from);
  void MergeFrom(const MaterialMeta_ImageMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // required uint32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required string url = 4;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 4;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.MaterialMeta.ImageMeta)
 private:
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* description_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::std::string* url_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static MaterialMeta_ImageMeta* default_instance_;
};
// -------------------------------------------------------------------

class MaterialMeta_ExternalMeta : public ::google::protobuf::Message {
 public:
  MaterialMeta_ExternalMeta();
  virtual ~MaterialMeta_ExternalMeta();

  MaterialMeta_ExternalMeta(const MaterialMeta_ExternalMeta& from);

  inline MaterialMeta_ExternalMeta& operator=(const MaterialMeta_ExternalMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaterialMeta_ExternalMeta& default_instance();

  void Swap(MaterialMeta_ExternalMeta* other);

  // implements Message ----------------------------------------------

  MaterialMeta_ExternalMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaterialMeta_ExternalMeta& from);
  void MergeFrom(const MaterialMeta_ExternalMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.MaterialMeta.ExternalMeta)
 private:
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static MaterialMeta_ExternalMeta* default_instance_;
};
// -------------------------------------------------------------------

class MaterialMeta_AndroidApp : public ::google::protobuf::Message {
 public:
  MaterialMeta_AndroidApp();
  virtual ~MaterialMeta_AndroidApp();

  MaterialMeta_AndroidApp(const MaterialMeta_AndroidApp& from);

  inline MaterialMeta_AndroidApp& operator=(const MaterialMeta_AndroidApp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaterialMeta_AndroidApp& default_instance();

  void Swap(MaterialMeta_AndroidApp* other);

  // implements Message ----------------------------------------------

  MaterialMeta_AndroidApp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaterialMeta_AndroidApp& from);
  void MergeFrom(const MaterialMeta_AndroidApp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string app_name = 1;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 1;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const char* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // required string download_url = 2;
  inline bool has_download_url() const;
  inline void clear_download_url();
  static const int kDownloadUrlFieldNumber = 2;
  inline const ::std::string& download_url() const;
  inline void set_download_url(const ::std::string& value);
  inline void set_download_url(const char* value);
  inline void set_download_url(const char* value, size_t size);
  inline ::std::string* mutable_download_url();
  inline ::std::string* release_download_url();
  inline void set_allocated_download_url(::std::string* download_url);

  // optional string open_url = 3;
  inline bool has_open_url() const;
  inline void clear_open_url();
  static const int kOpenUrlFieldNumber = 3;
  inline const ::std::string& open_url() const;
  inline void set_open_url(const ::std::string& value);
  inline void set_open_url(const char* value);
  inline void set_open_url(const char* value, size_t size);
  inline ::std::string* mutable_open_url();
  inline ::std::string* release_open_url();
  inline void set_allocated_open_url(::std::string* open_url);

  // optional string package = 4;
  inline bool has_package() const;
  inline void clear_package();
  static const int kPackageFieldNumber = 4;
  inline const ::std::string& package() const;
  inline void set_package(const ::std::string& value);
  inline void set_package(const char* value);
  inline void set_package(const char* value, size_t size);
  inline ::std::string* mutable_package();
  inline ::std::string* release_package();
  inline void set_allocated_package(::std::string* package);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.MaterialMeta.AndroidApp)
 private:
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_download_url();
  inline void clear_has_download_url();
  inline void set_has_open_url();
  inline void clear_has_open_url();
  inline void set_has_package();
  inline void clear_has_package();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* app_name_;
  ::std::string* download_url_;
  ::std::string* open_url_;
  ::std::string* package_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static MaterialMeta_AndroidApp* default_instance_;
};
// -------------------------------------------------------------------

class MaterialMeta_IosApp : public ::google::protobuf::Message {
 public:
  MaterialMeta_IosApp();
  virtual ~MaterialMeta_IosApp();

  MaterialMeta_IosApp(const MaterialMeta_IosApp& from);

  inline MaterialMeta_IosApp& operator=(const MaterialMeta_IosApp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaterialMeta_IosApp& default_instance();

  void Swap(MaterialMeta_IosApp* other);

  // implements Message ----------------------------------------------

  MaterialMeta_IosApp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaterialMeta_IosApp& from);
  void MergeFrom(const MaterialMeta_IosApp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string app_name = 1;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 1;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const char* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // required string download_url = 2;
  inline bool has_download_url() const;
  inline void clear_download_url();
  static const int kDownloadUrlFieldNumber = 2;
  inline const ::std::string& download_url() const;
  inline void set_download_url(const ::std::string& value);
  inline void set_download_url(const char* value);
  inline void set_download_url(const char* value, size_t size);
  inline ::std::string* mutable_download_url();
  inline ::std::string* release_download_url();
  inline void set_allocated_download_url(::std::string* download_url);

  // optional string open_url = 3;
  inline bool has_open_url() const;
  inline void clear_open_url();
  static const int kOpenUrlFieldNumber = 3;
  inline const ::std::string& open_url() const;
  inline void set_open_url(const ::std::string& value);
  inline void set_open_url(const char* value);
  inline void set_open_url(const char* value, size_t size);
  inline ::std::string* mutable_open_url();
  inline ::std::string* release_open_url();
  inline void set_allocated_open_url(::std::string* open_url);

  // optional string appleid = 4;
  inline bool has_appleid() const;
  inline void clear_appleid();
  static const int kAppleidFieldNumber = 4;
  inline const ::std::string& appleid() const;
  inline void set_appleid(const ::std::string& value);
  inline void set_appleid(const char* value);
  inline void set_appleid(const char* value, size_t size);
  inline ::std::string* mutable_appleid();
  inline ::std::string* release_appleid();
  inline void set_allocated_appleid(::std::string* appleid);

  // optional string ipa_url = 5;
  inline bool has_ipa_url() const;
  inline void clear_ipa_url();
  static const int kIpaUrlFieldNumber = 5;
  inline const ::std::string& ipa_url() const;
  inline void set_ipa_url(const ::std::string& value);
  inline void set_ipa_url(const char* value);
  inline void set_ipa_url(const char* value, size_t size);
  inline ::std::string* mutable_ipa_url();
  inline ::std::string* release_ipa_url();
  inline void set_allocated_ipa_url(::std::string* ipa_url);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.MaterialMeta.IosApp)
 private:
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_download_url();
  inline void clear_has_download_url();
  inline void set_has_open_url();
  inline void clear_has_open_url();
  inline void set_has_appleid();
  inline void clear_has_appleid();
  inline void set_has_ipa_url();
  inline void clear_has_ipa_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* app_name_;
  ::std::string* download_url_;
  ::std::string* open_url_;
  ::std::string* appleid_;
  ::std::string* ipa_url_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static MaterialMeta_IosApp* default_instance_;
};
// -------------------------------------------------------------------

class MaterialMeta : public ::google::protobuf::Message {
 public:
  MaterialMeta();
  virtual ~MaterialMeta();

  MaterialMeta(const MaterialMeta& from);

  inline MaterialMeta& operator=(const MaterialMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaterialMeta& default_instance();

  void Swap(MaterialMeta* other);

  // implements Message ----------------------------------------------

  MaterialMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaterialMeta& from);
  void MergeFrom(const MaterialMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MaterialMeta_ImageMeta ImageMeta;
  typedef MaterialMeta_ExternalMeta ExternalMeta;
  typedef MaterialMeta_AndroidApp AndroidApp;
  typedef MaterialMeta_IosApp IosApp;

  // accessors -------------------------------------------------------

  // required .toutiao_ssp.api.AdType ad_type = 1;
  inline bool has_ad_type() const;
  inline void clear_ad_type();
  static const int kAdTypeFieldNumber = 1;
  inline ::toutiao_ssp::api::AdType ad_type() const;
  inline void set_ad_type(::toutiao_ssp::api::AdType value);

  // required string nurl = 2;
  inline bool has_nurl() const;
  inline void clear_nurl();
  static const int kNurlFieldNumber = 2;
  inline const ::std::string& nurl() const;
  inline void set_nurl(const ::std::string& value);
  inline void set_nurl(const char* value);
  inline void set_nurl(const char* value, size_t size);
  inline ::std::string* mutable_nurl();
  inline ::std::string* release_nurl();
  inline void set_allocated_nurl(::std::string* nurl);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional .toutiao_ssp.api.MaterialMeta.ImageMeta image_banner = 5;
  inline bool has_image_banner() const;
  inline void clear_image_banner();
  static const int kImageBannerFieldNumber = 5;
  inline const ::toutiao_ssp::api::MaterialMeta_ImageMeta& image_banner() const;
  inline ::toutiao_ssp::api::MaterialMeta_ImageMeta* mutable_image_banner();
  inline ::toutiao_ssp::api::MaterialMeta_ImageMeta* release_image_banner();
  inline void set_allocated_image_banner(::toutiao_ssp::api::MaterialMeta_ImageMeta* image_banner);

  // optional .toutiao_ssp.api.MaterialMeta.ExternalMeta external = 6;
  inline bool has_external() const;
  inline void clear_external();
  static const int kExternalFieldNumber = 6;
  inline const ::toutiao_ssp::api::MaterialMeta_ExternalMeta& external() const;
  inline ::toutiao_ssp::api::MaterialMeta_ExternalMeta* mutable_external();
  inline ::toutiao_ssp::api::MaterialMeta_ExternalMeta* release_external();
  inline void set_allocated_external(::toutiao_ssp::api::MaterialMeta_ExternalMeta* external);

  // optional .toutiao_ssp.api.MaterialMeta.AndroidApp android_app = 7;
  inline bool has_android_app() const;
  inline void clear_android_app();
  static const int kAndroidAppFieldNumber = 7;
  inline const ::toutiao_ssp::api::MaterialMeta_AndroidApp& android_app() const;
  inline ::toutiao_ssp::api::MaterialMeta_AndroidApp* mutable_android_app();
  inline ::toutiao_ssp::api::MaterialMeta_AndroidApp* release_android_app();
  inline void set_allocated_android_app(::toutiao_ssp::api::MaterialMeta_AndroidApp* android_app);

  // optional .toutiao_ssp.api.MaterialMeta.IosApp ios_app = 8;
  inline bool has_ios_app() const;
  inline void clear_ios_app();
  static const int kIosAppFieldNumber = 8;
  inline const ::toutiao_ssp::api::MaterialMeta_IosApp& ios_app() const;
  inline ::toutiao_ssp::api::MaterialMeta_IosApp* mutable_ios_app();
  inline ::toutiao_ssp::api::MaterialMeta_IosApp* release_ios_app();
  inline void set_allocated_ios_app(::toutiao_ssp::api::MaterialMeta_IosApp* ios_app);

  // repeated string show_url = 9;
  inline int show_url_size() const;
  inline void clear_show_url();
  static const int kShowUrlFieldNumber = 9;
  inline const ::std::string& show_url(int index) const;
  inline ::std::string* mutable_show_url(int index);
  inline void set_show_url(int index, const ::std::string& value);
  inline void set_show_url(int index, const char* value);
  inline void set_show_url(int index, const char* value, size_t size);
  inline ::std::string* add_show_url();
  inline void add_show_url(const ::std::string& value);
  inline void add_show_url(const char* value);
  inline void add_show_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& show_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_show_url();

  // repeated string click_url = 10;
  inline int click_url_size() const;
  inline void clear_click_url();
  static const int kClickUrlFieldNumber = 10;
  inline const ::std::string& click_url(int index) const;
  inline ::std::string* mutable_click_url(int index);
  inline void set_click_url(int index, const ::std::string& value);
  inline void set_click_url(int index, const char* value);
  inline void set_click_url(int index, const char* value, size_t size);
  inline ::std::string* add_click_url();
  inline void add_click_url(const ::std::string& value);
  inline void add_click_url(const char* value);
  inline void add_click_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& click_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_click_url();

  // optional bool is_inapp = 11;
  inline bool has_is_inapp() const;
  inline void clear_is_inapp();
  static const int kIsInappFieldNumber = 11;
  inline bool is_inapp() const;
  inline void set_is_inapp(bool value);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.MaterialMeta)
 private:
  inline void set_has_ad_type();
  inline void clear_has_ad_type();
  inline void set_has_nurl();
  inline void clear_has_nurl();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_image_banner();
  inline void clear_has_image_banner();
  inline void set_has_external();
  inline void clear_has_external();
  inline void set_has_android_app();
  inline void clear_has_android_app();
  inline void set_has_ios_app();
  inline void clear_has_ios_app();
  inline void set_has_is_inapp();
  inline void clear_has_is_inapp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nurl_;
  ::std::string* title_;
  ::std::string* source_;
  ::toutiao_ssp::api::MaterialMeta_ImageMeta* image_banner_;
  ::toutiao_ssp::api::MaterialMeta_ExternalMeta* external_;
  int ad_type_;
  bool is_inapp_;
  ::toutiao_ssp::api::MaterialMeta_AndroidApp* android_app_;
  ::toutiao_ssp::api::MaterialMeta_IosApp* ios_app_;
  ::google::protobuf::RepeatedPtrField< ::std::string> show_url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> click_url_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static MaterialMeta* default_instance_;
};
// -------------------------------------------------------------------

class Bid : public ::google::protobuf::Message {
 public:
  Bid();
  virtual ~Bid();

  Bid(const Bid& from);

  inline Bid& operator=(const Bid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bid& default_instance();

  void Swap(Bid* other);

  // implements Message ----------------------------------------------

  Bid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bid& from);
  void MergeFrom(const Bid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string adslot_id = 2;
  inline bool has_adslot_id() const;
  inline void clear_adslot_id();
  static const int kAdslotIdFieldNumber = 2;
  inline const ::std::string& adslot_id() const;
  inline void set_adslot_id(const ::std::string& value);
  inline void set_adslot_id(const char* value);
  inline void set_adslot_id(const char* value, size_t size);
  inline ::std::string* mutable_adslot_id();
  inline ::std::string* release_adslot_id();
  inline void set_allocated_adslot_id(::std::string* adslot_id);

  // required uint32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // required uint64 adid = 4;
  inline bool has_adid() const;
  inline void clear_adid();
  static const int kAdidFieldNumber = 4;
  inline ::google::protobuf::uint64 adid() const;
  inline void set_adid(::google::protobuf::uint64 value);

  // required .toutiao_ssp.api.MaterialMeta creative = 5;
  inline bool has_creative() const;
  inline void clear_creative();
  static const int kCreativeFieldNumber = 5;
  inline const ::toutiao_ssp::api::MaterialMeta& creative() const;
  inline ::toutiao_ssp::api::MaterialMeta* mutable_creative();
  inline ::toutiao_ssp::api::MaterialMeta* release_creative();
  inline void set_allocated_creative(::toutiao_ssp::api::MaterialMeta* creative);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.Bid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_adslot_id();
  inline void clear_has_adslot_id();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_adid();
  inline void clear_has_adid();
  inline void set_has_creative();
  inline void clear_has_creative();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* adslot_id_;
  ::google::protobuf::uint64 adid_;
  ::toutiao_ssp::api::MaterialMeta* creative_;
  ::google::protobuf::uint32 price_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static Bid* default_instance_;
};
// -------------------------------------------------------------------

class SeatBid : public ::google::protobuf::Message {
 public:
  SeatBid();
  virtual ~SeatBid();

  SeatBid(const SeatBid& from);

  inline SeatBid& operator=(const SeatBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeatBid& default_instance();

  void Swap(SeatBid* other);

  // implements Message ----------------------------------------------

  SeatBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeatBid& from);
  void MergeFrom(const SeatBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .toutiao_ssp.api.Bid ads = 1;
  inline int ads_size() const;
  inline void clear_ads();
  static const int kAdsFieldNumber = 1;
  inline const ::toutiao_ssp::api::Bid& ads(int index) const;
  inline ::toutiao_ssp::api::Bid* mutable_ads(int index);
  inline ::toutiao_ssp::api::Bid* add_ads();
  inline const ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::Bid >&
      ads() const;
  inline ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::Bid >*
      mutable_ads();

  // optional string seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline const ::std::string& seat() const;
  inline void set_seat(const ::std::string& value);
  inline void set_seat(const char* value);
  inline void set_seat(const char* value, size_t size);
  inline ::std::string* mutable_seat();
  inline ::std::string* release_seat();
  inline void set_allocated_seat(::std::string* seat);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.SeatBid)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::Bid > ads_;
  ::std::string* seat_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static SeatBid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse : public ::google::protobuf::Message {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();

  void Swap(BidResponse* other);

  // implements Message ----------------------------------------------

  BidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline const ::std::string& request_id() const;
  inline void set_request_id(const ::std::string& value);
  inline void set_request_id(const char* value);
  inline void set_request_id(const char* value, size_t size);
  inline ::std::string* mutable_request_id();
  inline ::std::string* release_request_id();
  inline void set_allocated_request_id(::std::string* request_id);

  // repeated .toutiao_ssp.api.SeatBid seatbids = 2;
  inline int seatbids_size() const;
  inline void clear_seatbids();
  static const int kSeatbidsFieldNumber = 2;
  inline const ::toutiao_ssp::api::SeatBid& seatbids(int index) const;
  inline ::toutiao_ssp::api::SeatBid* mutable_seatbids(int index);
  inline ::toutiao_ssp::api::SeatBid* add_seatbids();
  inline const ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::SeatBid >&
      seatbids() const;
  inline ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::SeatBid >*
      mutable_seatbids();

  // optional uint64 error_code = 3;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline ::google::protobuf::uint64 error_code() const;
  inline void set_error_code(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:toutiao_ssp.api.BidResponse)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_id_;
  ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::SeatBid > seatbids_;
  ::google::protobuf::uint64 error_code_;
  friend void  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto();
  friend void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto();

  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AdSlot_Banner

// required uint32 width = 1;
inline bool AdSlot_Banner::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdSlot_Banner::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdSlot_Banner::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdSlot_Banner::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 AdSlot_Banner::width() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.AdSlot.Banner.width)
  return width_;
}
inline void AdSlot_Banner::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.AdSlot.Banner.width)
}

// required uint32 height = 2;
inline bool AdSlot_Banner::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdSlot_Banner::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdSlot_Banner::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdSlot_Banner::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 AdSlot_Banner::height() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.AdSlot.Banner.height)
  return height_;
}
inline void AdSlot_Banner::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.AdSlot.Banner.height)
}

// required .toutiao_ssp.api.AdSlot.Position pos = 3;
inline bool AdSlot_Banner::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdSlot_Banner::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdSlot_Banner::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdSlot_Banner::clear_pos() {
  pos_ = 1;
  clear_has_pos();
}
inline ::toutiao_ssp::api::AdSlot_Position AdSlot_Banner::pos() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.AdSlot.Banner.pos)
  return static_cast< ::toutiao_ssp::api::AdSlot_Position >(pos_);
}
inline void AdSlot_Banner::set_pos(::toutiao_ssp::api::AdSlot_Position value) {
  assert(::toutiao_ssp::api::AdSlot_Position_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.AdSlot.Banner.pos)
}

// -------------------------------------------------------------------

// AdSlot

// required string id = 1;
inline bool AdSlot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdSlot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdSlot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdSlot::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& AdSlot::id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.AdSlot.id)
  return *id_;
}
inline void AdSlot::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.AdSlot.id)
}
inline void AdSlot::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.AdSlot.id)
}
inline void AdSlot::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.AdSlot.id)
}
inline ::std::string* AdSlot::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.AdSlot.id)
  return id_;
}
inline ::std::string* AdSlot::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AdSlot::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.AdSlot.id)
}

// repeated .toutiao_ssp.api.AdSlot.Banner banner = 2;
inline int AdSlot::banner_size() const {
  return banner_.size();
}
inline void AdSlot::clear_banner() {
  banner_.Clear();
}
inline const ::toutiao_ssp::api::AdSlot_Banner& AdSlot::banner(int index) const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.AdSlot.banner)
  return banner_.Get(index);
}
inline ::toutiao_ssp::api::AdSlot_Banner* AdSlot::mutable_banner(int index) {
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.AdSlot.banner)
  return banner_.Mutable(index);
}
inline ::toutiao_ssp::api::AdSlot_Banner* AdSlot::add_banner() {
  // @@protoc_insertion_point(field_add:toutiao_ssp.api.AdSlot.banner)
  return banner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot_Banner >&
AdSlot::banner() const {
  // @@protoc_insertion_point(field_list:toutiao_ssp.api.AdSlot.banner)
  return banner_;
}
inline ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot_Banner >*
AdSlot::mutable_banner() {
  // @@protoc_insertion_point(field_mutable_list:toutiao_ssp.api.AdSlot.banner)
  return &banner_;
}

// repeated .toutiao_ssp.api.AdType ad_type = 3;
inline int AdSlot::ad_type_size() const {
  return ad_type_.size();
}
inline void AdSlot::clear_ad_type() {
  ad_type_.Clear();
}
inline ::toutiao_ssp::api::AdType AdSlot::ad_type(int index) const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.AdSlot.ad_type)
  return static_cast< ::toutiao_ssp::api::AdType >(ad_type_.Get(index));
}
inline void AdSlot::set_ad_type(int index, ::toutiao_ssp::api::AdType value) {
  assert(::toutiao_ssp::api::AdType_IsValid(value));
  ad_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.AdSlot.ad_type)
}
inline void AdSlot::add_ad_type(::toutiao_ssp::api::AdType value) {
  assert(::toutiao_ssp::api::AdType_IsValid(value));
  ad_type_.Add(value);
  // @@protoc_insertion_point(field_add:toutiao_ssp.api.AdSlot.ad_type)
}
inline const ::google::protobuf::RepeatedField<int>&
AdSlot::ad_type() const {
  // @@protoc_insertion_point(field_list:toutiao_ssp.api.AdSlot.ad_type)
  return ad_type_;
}
inline ::google::protobuf::RepeatedField<int>*
AdSlot::mutable_ad_type() {
  // @@protoc_insertion_point(field_mutable_list:toutiao_ssp.api.AdSlot.ad_type)
  return &ad_type_;
}

// optional uint32 bid_floor = 4;
inline bool AdSlot::has_bid_floor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdSlot::set_has_bid_floor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdSlot::clear_has_bid_floor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdSlot::clear_bid_floor() {
  bid_floor_ = 0u;
  clear_has_bid_floor();
}
inline ::google::protobuf::uint32 AdSlot::bid_floor() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.AdSlot.bid_floor)
  return bid_floor_;
}
inline void AdSlot::set_bid_floor(::google::protobuf::uint32 value) {
  set_has_bid_floor();
  bid_floor_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.AdSlot.bid_floor)
}

// -------------------------------------------------------------------

// Publisher

// required string id = 1;
inline bool Publisher::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Publisher::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Publisher::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Publisher::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Publisher::id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Publisher.id)
  return *id_;
}
inline void Publisher::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Publisher.id)
}
inline void Publisher::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Publisher.id)
}
inline void Publisher::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Publisher.id)
}
inline ::std::string* Publisher::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Publisher.id)
  return id_;
}
inline ::std::string* Publisher::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Publisher::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Publisher.id)
}

// optional string name = 2;
inline bool Publisher::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Publisher::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Publisher::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Publisher::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Publisher::name() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Publisher.name)
  return *name_;
}
inline void Publisher::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Publisher.name)
}
inline void Publisher::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Publisher.name)
}
inline void Publisher::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Publisher.name)
}
inline ::std::string* Publisher::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Publisher.name)
  return name_;
}
inline ::std::string* Publisher::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Publisher::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Publisher.name)
}

// optional string cat = 3;
inline bool Publisher::has_cat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Publisher::set_has_cat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Publisher::clear_has_cat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Publisher::clear_cat() {
  if (cat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_->clear();
  }
  clear_has_cat();
}
inline const ::std::string& Publisher::cat() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Publisher.cat)
  return *cat_;
}
inline void Publisher::set_cat(const ::std::string& value) {
  set_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_ = new ::std::string;
  }
  cat_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Publisher.cat)
}
inline void Publisher::set_cat(const char* value) {
  set_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_ = new ::std::string;
  }
  cat_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Publisher.cat)
}
inline void Publisher::set_cat(const char* value, size_t size) {
  set_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_ = new ::std::string;
  }
  cat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Publisher.cat)
}
inline ::std::string* Publisher::mutable_cat() {
  set_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Publisher.cat)
  return cat_;
}
inline ::std::string* Publisher::release_cat() {
  clear_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cat_;
    cat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Publisher::set_allocated_cat(::std::string* cat) {
  if (cat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cat_;
  }
  if (cat) {
    set_has_cat();
    cat_ = cat;
  } else {
    clear_has_cat();
    cat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Publisher.cat)
}

// optional string domain = 4;
inline bool Publisher::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Publisher::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Publisher::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Publisher::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& Publisher::domain() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Publisher.domain)
  return *domain_;
}
inline void Publisher::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Publisher.domain)
}
inline void Publisher::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Publisher.domain)
}
inline void Publisher::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Publisher.domain)
}
inline ::std::string* Publisher::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Publisher.domain)
  return domain_;
}
inline ::std::string* Publisher::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Publisher::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Publisher.domain)
}

// -------------------------------------------------------------------

// Content_Producer

// required string id = 1;
inline bool Content_Producer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Content_Producer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Content_Producer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Content_Producer::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Content_Producer::id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.Producer.id)
  return *id_;
}
inline void Content_Producer::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.Producer.id)
}
inline void Content_Producer::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.Producer.id)
}
inline void Content_Producer::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.Producer.id)
}
inline ::std::string* Content_Producer::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.Producer.id)
  return id_;
}
inline ::std::string* Content_Producer::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content_Producer::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.Producer.id)
}

// optional string name = 2;
inline bool Content_Producer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Content_Producer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Content_Producer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Content_Producer::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Content_Producer::name() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.Producer.name)
  return *name_;
}
inline void Content_Producer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.Producer.name)
}
inline void Content_Producer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.Producer.name)
}
inline void Content_Producer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.Producer.name)
}
inline ::std::string* Content_Producer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.Producer.name)
  return name_;
}
inline ::std::string* Content_Producer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content_Producer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.Producer.name)
}

// optional string cat = 3;
inline bool Content_Producer::has_cat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Content_Producer::set_has_cat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Content_Producer::clear_has_cat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Content_Producer::clear_cat() {
  if (cat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_->clear();
  }
  clear_has_cat();
}
inline const ::std::string& Content_Producer::cat() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.Producer.cat)
  return *cat_;
}
inline void Content_Producer::set_cat(const ::std::string& value) {
  set_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_ = new ::std::string;
  }
  cat_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.Producer.cat)
}
inline void Content_Producer::set_cat(const char* value) {
  set_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_ = new ::std::string;
  }
  cat_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.Producer.cat)
}
inline void Content_Producer::set_cat(const char* value, size_t size) {
  set_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_ = new ::std::string;
  }
  cat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.Producer.cat)
}
inline ::std::string* Content_Producer::mutable_cat() {
  set_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.Producer.cat)
  return cat_;
}
inline ::std::string* Content_Producer::release_cat() {
  clear_has_cat();
  if (cat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cat_;
    cat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content_Producer::set_allocated_cat(::std::string* cat) {
  if (cat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cat_;
  }
  if (cat) {
    set_has_cat();
    cat_ = cat;
  } else {
    clear_has_cat();
    cat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.Producer.cat)
}

// optional string domain = 4;
inline bool Content_Producer::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Content_Producer::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Content_Producer::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Content_Producer::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& Content_Producer::domain() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.Producer.domain)
  return *domain_;
}
inline void Content_Producer::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.Producer.domain)
}
inline void Content_Producer::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.Producer.domain)
}
inline void Content_Producer::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.Producer.domain)
}
inline ::std::string* Content_Producer::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.Producer.domain)
  return domain_;
}
inline ::std::string* Content_Producer::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content_Producer::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.Producer.domain)
}

// -------------------------------------------------------------------

// Content

// required string id = 1;
inline bool Content::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Content::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Content::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Content::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Content::id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.id)
  return *id_;
}
inline void Content::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.id)
}
inline void Content::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.id)
}
inline void Content::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.id)
}
inline ::std::string* Content::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.id)
  return id_;
}
inline ::std::string* Content::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.id)
}

// optional string title = 2;
inline bool Content::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Content::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Content::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Content::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Content::title() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.title)
  return *title_;
}
inline void Content::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.title)
}
inline void Content::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.title)
}
inline void Content::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.title)
}
inline ::std::string* Content::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.title)
  return title_;
}
inline ::std::string* Content::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.title)
}

// optional string series = 3;
inline bool Content::has_series() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Content::set_has_series() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Content::clear_has_series() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Content::clear_series() {
  if (series_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_->clear();
  }
  clear_has_series();
}
inline const ::std::string& Content::series() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.series)
  return *series_;
}
inline void Content::set_series(const ::std::string& value) {
  set_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_ = new ::std::string;
  }
  series_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.series)
}
inline void Content::set_series(const char* value) {
  set_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_ = new ::std::string;
  }
  series_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.series)
}
inline void Content::set_series(const char* value, size_t size) {
  set_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_ = new ::std::string;
  }
  series_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.series)
}
inline ::std::string* Content::mutable_series() {
  set_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    series_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.series)
  return series_;
}
inline ::std::string* Content::release_series() {
  clear_has_series();
  if (series_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = series_;
    series_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content::set_allocated_series(::std::string* series) {
  if (series_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete series_;
  }
  if (series) {
    set_has_series();
    series_ = series;
  } else {
    clear_has_series();
    series_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.series)
}

// optional string url = 4;
inline bool Content::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Content::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Content::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Content::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Content::url() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.url)
  return *url_;
}
inline void Content::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.url)
}
inline void Content::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.url)
}
inline void Content::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.url)
}
inline ::std::string* Content::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.url)
  return url_;
}
inline ::std::string* Content::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.url)
}

// optional string keywords = 5;
inline bool Content::has_keywords() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Content::set_has_keywords() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Content::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Content::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& Content::keywords() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.keywords)
  return *keywords_;
}
inline void Content::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.keywords)
}
inline void Content::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.keywords)
}
inline void Content::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.keywords)
}
inline ::std::string* Content::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.keywords)
  return keywords_;
}
inline ::std::string* Content::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.keywords)
}

// optional string contentrating = 6;
inline bool Content::has_contentrating() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Content::set_has_contentrating() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Content::clear_has_contentrating() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Content::clear_contentrating() {
  if (contentrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_->clear();
  }
  clear_has_contentrating();
}
inline const ::std::string& Content::contentrating() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.contentrating)
  return *contentrating_;
}
inline void Content::set_contentrating(const ::std::string& value) {
  set_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_ = new ::std::string;
  }
  contentrating_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.contentrating)
}
inline void Content::set_contentrating(const char* value) {
  set_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_ = new ::std::string;
  }
  contentrating_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.contentrating)
}
inline void Content::set_contentrating(const char* value, size_t size) {
  set_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_ = new ::std::string;
  }
  contentrating_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.contentrating)
}
inline ::std::string* Content::mutable_contentrating() {
  set_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentrating_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.contentrating)
  return contentrating_;
}
inline ::std::string* Content::release_contentrating() {
  clear_has_contentrating();
  if (contentrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contentrating_;
    contentrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content::set_allocated_contentrating(::std::string* contentrating) {
  if (contentrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contentrating_;
  }
  if (contentrating) {
    set_has_contentrating();
    contentrating_ = contentrating;
  } else {
    clear_has_contentrating();
    contentrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.contentrating)
}

// optional string userrating = 7;
inline bool Content::has_userrating() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Content::set_has_userrating() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Content::clear_has_userrating() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Content::clear_userrating() {
  if (userrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_->clear();
  }
  clear_has_userrating();
}
inline const ::std::string& Content::userrating() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.userrating)
  return *userrating_;
}
inline void Content::set_userrating(const ::std::string& value) {
  set_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_ = new ::std::string;
  }
  userrating_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.userrating)
}
inline void Content::set_userrating(const char* value) {
  set_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_ = new ::std::string;
  }
  userrating_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.userrating)
}
inline void Content::set_userrating(const char* value, size_t size) {
  set_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_ = new ::std::string;
  }
  userrating_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.userrating)
}
inline ::std::string* Content::mutable_userrating() {
  set_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrating_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.userrating)
  return userrating_;
}
inline ::std::string* Content::release_userrating() {
  clear_has_userrating();
  if (userrating_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userrating_;
    userrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content::set_allocated_userrating(::std::string* userrating) {
  if (userrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userrating_;
  }
  if (userrating) {
    set_has_userrating();
    userrating_ = userrating;
  } else {
    clear_has_userrating();
    userrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.userrating)
}

// optional string context = 8;
inline bool Content::has_context() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Content::set_has_context() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Content::clear_has_context() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Content::clear_context() {
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& Content::context() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.context)
  return *context_;
}
inline void Content::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  context_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.context)
}
inline void Content::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  context_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.context)
}
inline void Content::set_context(const char* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.context)
}
inline ::std::string* Content::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.context)
  return context_;
}
inline ::std::string* Content::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.context)
}

// optional .toutiao_ssp.api.Content.Producer producer = 9;
inline bool Content::has_producer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Content::set_has_producer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Content::clear_has_producer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Content::clear_producer() {
  if (producer_ != NULL) producer_->::toutiao_ssp::api::Content_Producer::Clear();
  clear_has_producer();
}
inline const ::toutiao_ssp::api::Content_Producer& Content::producer() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.producer)
  return producer_ != NULL ? *producer_ : *default_instance_->producer_;
}
inline ::toutiao_ssp::api::Content_Producer* Content::mutable_producer() {
  set_has_producer();
  if (producer_ == NULL) producer_ = new ::toutiao_ssp::api::Content_Producer;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.producer)
  return producer_;
}
inline ::toutiao_ssp::api::Content_Producer* Content::release_producer() {
  clear_has_producer();
  ::toutiao_ssp::api::Content_Producer* temp = producer_;
  producer_ = NULL;
  return temp;
}
inline void Content::set_allocated_producer(::toutiao_ssp::api::Content_Producer* producer) {
  delete producer_;
  producer_ = producer;
  if (producer) {
    set_has_producer();
  } else {
    clear_has_producer();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.producer)
}

// optional string language = 10;
inline bool Content::has_language() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Content::set_has_language() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Content::clear_has_language() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Content::clear_language() {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& Content::language() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Content.language)
  return *language_;
}
inline void Content::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Content.language)
}
inline void Content::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Content.language)
}
inline void Content::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Content.language)
}
inline ::std::string* Content::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Content.language)
  return language_;
}
inline ::std::string* Content::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Content::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Content.language)
}

// -------------------------------------------------------------------

// App

// required string id = 1 [default = "11"];
inline bool App::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void App::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void App::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void App::clear_id() {
  if (id_ != _default_id_) {
    id_->assign(*_default_id_);
  }
  clear_has_id();
}
inline const ::std::string& App::id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.id)
  return *id_;
}
inline void App::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.App.id)
}
inline void App::set_id(const char* value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.App.id)
}
inline void App::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.App.id)
}
inline ::std::string* App::mutable_id() {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string(*_default_id_);
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.App.id)
  return id_;
}
inline ::std::string* App::release_id() {
  clear_has_id();
  if (id_ == _default_id_) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(_default_id_);
    return temp;
  }
}
inline void App::set_allocated_id(::std::string* id) {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(_default_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.App.id)
}

// optional string name = 2;
inline bool App::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void App::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void App::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void App::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& App::name() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.name)
  return *name_;
}
inline void App::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.App.name)
}
inline void App::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.App.name)
}
inline void App::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.App.name)
}
inline ::std::string* App::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.App.name)
  return name_;
}
inline ::std::string* App::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void App::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.App.name)
}

// optional string domain = 3;
inline bool App::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void App::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void App::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void App::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& App::domain() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.domain)
  return *domain_;
}
inline void App::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.App.domain)
}
inline void App::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.App.domain)
}
inline void App::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.App.domain)
}
inline ::std::string* App::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.App.domain)
  return domain_;
}
inline ::std::string* App::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void App::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.App.domain)
}

// optional string ver = 4;
inline bool App::has_ver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void App::set_has_ver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void App::clear_has_ver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void App::clear_ver() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& App::ver() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.ver)
  return *ver_;
}
inline void App::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.App.ver)
}
inline void App::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.App.ver)
}
inline void App::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.App.ver)
}
inline ::std::string* App::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.App.ver)
  return ver_;
}
inline ::std::string* App::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void App::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.App.ver)
}

// optional string bundle = 5;
inline bool App::has_bundle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void App::set_has_bundle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void App::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void App::clear_bundle() {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_->clear();
  }
  clear_has_bundle();
}
inline const ::std::string& App::bundle() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.bundle)
  return *bundle_;
}
inline void App::set_bundle(const ::std::string& value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.App.bundle)
}
inline void App::set_bundle(const char* value) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.App.bundle)
}
inline void App::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  bundle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.App.bundle)
}
inline ::std::string* App::mutable_bundle() {
  set_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bundle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.App.bundle)
  return bundle_;
}
inline ::std::string* App::release_bundle() {
  clear_has_bundle();
  if (bundle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bundle_;
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void App::set_allocated_bundle(::std::string* bundle) {
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (bundle) {
    set_has_bundle();
    bundle_ = bundle;
  } else {
    clear_has_bundle();
    bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.App.bundle)
}

// optional uint32 privacypolicy = 6;
inline bool App::has_privacypolicy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void App::set_has_privacypolicy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void App::clear_has_privacypolicy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void App::clear_privacypolicy() {
  privacypolicy_ = 0u;
  clear_has_privacypolicy();
}
inline ::google::protobuf::uint32 App::privacypolicy() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.privacypolicy)
  return privacypolicy_;
}
inline void App::set_privacypolicy(::google::protobuf::uint32 value) {
  set_has_privacypolicy();
  privacypolicy_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.App.privacypolicy)
}

// optional uint32 paid = 7;
inline bool App::has_paid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void App::set_has_paid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void App::clear_has_paid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void App::clear_paid() {
  paid_ = 0u;
  clear_has_paid();
}
inline ::google::protobuf::uint32 App::paid() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.paid)
  return paid_;
}
inline void App::set_paid(::google::protobuf::uint32 value) {
  set_has_paid();
  paid_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.App.paid)
}

// optional .toutiao_ssp.api.Publisher publisher = 8;
inline bool App::has_publisher() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void App::set_has_publisher() {
  _has_bits_[0] |= 0x00000080u;
}
inline void App::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void App::clear_publisher() {
  if (publisher_ != NULL) publisher_->::toutiao_ssp::api::Publisher::Clear();
  clear_has_publisher();
}
inline const ::toutiao_ssp::api::Publisher& App::publisher() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.publisher)
  return publisher_ != NULL ? *publisher_ : *default_instance_->publisher_;
}
inline ::toutiao_ssp::api::Publisher* App::mutable_publisher() {
  set_has_publisher();
  if (publisher_ == NULL) publisher_ = new ::toutiao_ssp::api::Publisher;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.App.publisher)
  return publisher_;
}
inline ::toutiao_ssp::api::Publisher* App::release_publisher() {
  clear_has_publisher();
  ::toutiao_ssp::api::Publisher* temp = publisher_;
  publisher_ = NULL;
  return temp;
}
inline void App::set_allocated_publisher(::toutiao_ssp::api::Publisher* publisher) {
  delete publisher_;
  publisher_ = publisher;
  if (publisher) {
    set_has_publisher();
  } else {
    clear_has_publisher();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.App.publisher)
}

// optional .toutiao_ssp.api.Content content = 9;
inline bool App::has_content() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void App::set_has_content() {
  _has_bits_[0] |= 0x00000100u;
}
inline void App::clear_has_content() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void App::clear_content() {
  if (content_ != NULL) content_->::toutiao_ssp::api::Content::Clear();
  clear_has_content();
}
inline const ::toutiao_ssp::api::Content& App::content() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::toutiao_ssp::api::Content* App::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::toutiao_ssp::api::Content;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.App.content)
  return content_;
}
inline ::toutiao_ssp::api::Content* App::release_content() {
  clear_has_content();
  ::toutiao_ssp::api::Content* temp = content_;
  content_ = NULL;
  return temp;
}
inline void App::set_allocated_content(::toutiao_ssp::api::Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.App.content)
}

// optional string keywords = 10;
inline bool App::has_keywords() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void App::set_has_keywords() {
  _has_bits_[0] |= 0x00000200u;
}
inline void App::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void App::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& App::keywords() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.App.keywords)
  return *keywords_;
}
inline void App::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.App.keywords)
}
inline void App::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.App.keywords)
}
inline void App::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.App.keywords)
}
inline ::std::string* App::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.App.keywords)
  return keywords_;
}
inline ::std::string* App::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void App::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.App.keywords)
}

// -------------------------------------------------------------------

// Geo

// optional double lat = 1;
inline bool Geo::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geo::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geo::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geo::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double Geo::lat() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Geo.lat)
  return lat_;
}
inline void Geo::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Geo.lat)
}

// optional double lon = 2;
inline bool Geo::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geo::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geo::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geo::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double Geo::lon() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Geo.lon)
  return lon_;
}
inline void Geo::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Geo.lon)
}

// optional string country = 3;
inline bool Geo::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geo::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geo::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geo::clear_country() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& Geo::country() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Geo.country)
  return *country_;
}
inline void Geo::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Geo.country)
}
inline void Geo::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Geo.country)
}
inline void Geo::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Geo.country)
}
inline ::std::string* Geo::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Geo.country)
  return country_;
}
inline ::std::string* Geo::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Geo::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Geo.country)
}

// optional string region = 4;
inline bool Geo::has_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Geo::set_has_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Geo::clear_has_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Geo::clear_region() {
  if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_->clear();
  }
  clear_has_region();
}
inline const ::std::string& Geo::region() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Geo.region)
  return *region_;
}
inline void Geo::set_region(const ::std::string& value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_ = new ::std::string;
  }
  region_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Geo.region)
}
inline void Geo::set_region(const char* value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_ = new ::std::string;
  }
  region_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Geo.region)
}
inline void Geo::set_region(const char* value, size_t size) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_ = new ::std::string;
  }
  region_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Geo.region)
}
inline ::std::string* Geo::mutable_region() {
  set_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Geo.region)
  return region_;
}
inline ::std::string* Geo::release_region() {
  clear_has_region();
  if (region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = region_;
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Geo::set_allocated_region(::std::string* region) {
  if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete region_;
  }
  if (region) {
    set_has_region();
    region_ = region;
  } else {
    clear_has_region();
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Geo.region)
}

// optional string city = 5;
inline bool Geo::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Geo::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Geo::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Geo::clear_city() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& Geo::city() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Geo.city)
  return *city_;
}
inline void Geo::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Geo.city)
}
inline void Geo::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Geo.city)
}
inline void Geo::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Geo.city)
}
inline ::std::string* Geo::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Geo.city)
  return city_;
}
inline ::std::string* Geo::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Geo::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Geo.city)
}

// optional string type = 6;
inline bool Geo::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Geo::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Geo::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Geo::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Geo::type() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Geo.type)
  return *type_;
}
inline void Geo::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Geo.type)
}
inline void Geo::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Geo.type)
}
inline void Geo::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Geo.type)
}
inline ::std::string* Geo::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Geo.type)
  return type_;
}
inline ::std::string* Geo::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Geo::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Geo.type)
}

// -------------------------------------------------------------------

// Device

// required bool dnt = 1;
inline bool Device::has_dnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Device::set_has_dnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Device::clear_has_dnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Device::clear_dnt() {
  dnt_ = false;
  clear_has_dnt();
}
inline bool Device::dnt() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.dnt)
  return dnt_;
}
inline void Device::set_dnt(bool value) {
  set_has_dnt();
  dnt_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.dnt)
}

// required string ua = 2;
inline bool Device::has_ua() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Device::set_has_ua() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Device::clear_ua() {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_->clear();
  }
  clear_has_ua();
}
inline const ::std::string& Device::ua() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.ua)
  return *ua_;
}
inline void Device::set_ua(const ::std::string& value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.ua)
}
inline void Device::set_ua(const char* value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.ua)
}
inline void Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  ua_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.ua)
}
inline ::std::string* Device::mutable_ua() {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.ua)
  return ua_;
}
inline ::std::string* Device::release_ua() {
  clear_has_ua();
  if (ua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_;
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_ua(::std::string* ua) {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (ua) {
    set_has_ua();
    ua_ = ua;
  } else {
    clear_has_ua();
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.ua)
}

// optional string ip = 3;
inline bool Device::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Device::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Device::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Device::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Device::ip() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.ip)
  return *ip_;
}
inline void Device::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.ip)
}
inline void Device::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.ip)
}
inline void Device::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.ip)
}
inline ::std::string* Device::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.ip)
  return ip_;
}
inline ::std::string* Device::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.ip)
}

// optional .toutiao_ssp.api.Geo geo = 4;
inline bool Device::has_geo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Device::set_has_geo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Device::clear_has_geo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Device::clear_geo() {
  if (geo_ != NULL) geo_->::toutiao_ssp::api::Geo::Clear();
  clear_has_geo();
}
inline const ::toutiao_ssp::api::Geo& Device::geo() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::toutiao_ssp::api::Geo* Device::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::toutiao_ssp::api::Geo;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.geo)
  return geo_;
}
inline ::toutiao_ssp::api::Geo* Device::release_geo() {
  clear_has_geo();
  ::toutiao_ssp::api::Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void Device::set_allocated_geo(::toutiao_ssp::api::Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.geo)
}

// optional string device_id = 5;
inline bool Device::has_device_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Device::set_has_device_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Device::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Device::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& Device::device_id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.device_id)
  return *device_id_;
}
inline void Device::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.device_id)
}
inline void Device::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.device_id)
}
inline void Device::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.device_id)
}
inline ::std::string* Device::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.device_id)
  return device_id_;
}
inline ::std::string* Device::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.device_id)
}

// optional string device_id_md5 = 6;
inline bool Device::has_device_id_md5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Device::set_has_device_id_md5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Device::clear_has_device_id_md5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Device::clear_device_id_md5() {
  if (device_id_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_md5_->clear();
  }
  clear_has_device_id_md5();
}
inline const ::std::string& Device::device_id_md5() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.device_id_md5)
  return *device_id_md5_;
}
inline void Device::set_device_id_md5(const ::std::string& value) {
  set_has_device_id_md5();
  if (device_id_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_md5_ = new ::std::string;
  }
  device_id_md5_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.device_id_md5)
}
inline void Device::set_device_id_md5(const char* value) {
  set_has_device_id_md5();
  if (device_id_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_md5_ = new ::std::string;
  }
  device_id_md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.device_id_md5)
}
inline void Device::set_device_id_md5(const char* value, size_t size) {
  set_has_device_id_md5();
  if (device_id_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_md5_ = new ::std::string;
  }
  device_id_md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.device_id_md5)
}
inline ::std::string* Device::mutable_device_id_md5() {
  set_has_device_id_md5();
  if (device_id_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.device_id_md5)
  return device_id_md5_;
}
inline ::std::string* Device::release_device_id_md5() {
  clear_has_device_id_md5();
  if (device_id_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_md5_;
    device_id_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_device_id_md5(::std::string* device_id_md5) {
  if (device_id_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_md5_;
  }
  if (device_id_md5) {
    set_has_device_id_md5();
    device_id_md5_ = device_id_md5;
  } else {
    clear_has_device_id_md5();
    device_id_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.device_id_md5)
}

// optional string carrier = 7;
inline bool Device::has_carrier() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Device::set_has_carrier() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Device::clear_has_carrier() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Device::clear_carrier() {
  if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_->clear();
  }
  clear_has_carrier();
}
inline const ::std::string& Device::carrier() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.carrier)
  return *carrier_;
}
inline void Device::set_carrier(const ::std::string& value) {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_ = new ::std::string;
  }
  carrier_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.carrier)
}
inline void Device::set_carrier(const char* value) {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_ = new ::std::string;
  }
  carrier_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.carrier)
}
inline void Device::set_carrier(const char* value, size_t size) {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_ = new ::std::string;
  }
  carrier_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.carrier)
}
inline ::std::string* Device::mutable_carrier() {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carrier_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.carrier)
  return carrier_;
}
inline ::std::string* Device::release_carrier() {
  clear_has_carrier();
  if (carrier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = carrier_;
    carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_carrier(::std::string* carrier) {
  if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carrier_;
  }
  if (carrier) {
    set_has_carrier();
    carrier_ = carrier;
  } else {
    clear_has_carrier();
    carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.carrier)
}

// optional string language = 8;
inline bool Device::has_language() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Device::set_has_language() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Device::clear_has_language() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Device::clear_language() {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& Device::language() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.language)
  return *language_;
}
inline void Device::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.language)
}
inline void Device::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.language)
}
inline void Device::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.language)
}
inline ::std::string* Device::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.language)
  return language_;
}
inline ::std::string* Device::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.language)
}

// optional string make = 9;
inline bool Device::has_make() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Device::set_has_make() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Device::clear_has_make() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Device::clear_make() {
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_->clear();
  }
  clear_has_make();
}
inline const ::std::string& Device::make() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.make)
  return *make_;
}
inline void Device::set_make(const ::std::string& value) {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  make_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.make)
}
inline void Device::set_make(const char* value) {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  make_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.make)
}
inline void Device::set_make(const char* value, size_t size) {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  make_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.make)
}
inline ::std::string* Device::mutable_make() {
  set_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    make_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.make)
  return make_;
}
inline ::std::string* Device::release_make() {
  clear_has_make();
  if (make_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = make_;
    make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_make(::std::string* make) {
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete make_;
  }
  if (make) {
    set_has_make();
    make_ = make;
  } else {
    clear_has_make();
    make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.make)
}

// optional string model = 10;
inline bool Device::has_model() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Device::set_has_model() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Device::clear_has_model() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Device::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& Device::model() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.model)
  return *model_;
}
inline void Device::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.model)
}
inline void Device::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.model)
}
inline void Device::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.model)
}
inline ::std::string* Device::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.model)
  return model_;
}
inline ::std::string* Device::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.model)
}

// optional string os = 11;
inline bool Device::has_os() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Device::set_has_os() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Device::clear_os() {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& Device::os() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.os)
  return *os_;
}
inline void Device::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.os)
}
inline void Device::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.os)
}
inline void Device::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.os)
}
inline ::std::string* Device::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.os)
  return os_;
}
inline ::std::string* Device::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.os)
}

// optional string osv = 12;
inline bool Device::has_osv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Device::set_has_osv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Device::clear_has_osv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Device::clear_osv() {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_->clear();
  }
  clear_has_osv();
}
inline const ::std::string& Device::osv() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.osv)
  return *osv_;
}
inline void Device::set_osv(const ::std::string& value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.osv)
}
inline void Device::set_osv(const char* value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Device.osv)
}
inline void Device::set_osv(const char* value, size_t size) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Device.osv)
}
inline ::std::string* Device::mutable_osv() {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Device.osv)
  return osv_;
}
inline ::std::string* Device::release_osv() {
  clear_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = osv_;
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Device::set_allocated_osv(::std::string* osv) {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (osv) {
    set_has_osv();
    osv_ = osv;
  } else {
    clear_has_osv();
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Device.osv)
}

// optional bool js = 13;
inline bool Device::has_js() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Device::set_has_js() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Device::clear_has_js() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Device::clear_js() {
  js_ = false;
  clear_has_js();
}
inline bool Device::js() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.js)
  return js_;
}
inline void Device::set_js(bool value) {
  set_has_js();
  js_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.js)
}

// optional .toutiao_ssp.api.Device.ConnectionType connection_type = 14;
inline bool Device::has_connection_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Device::set_has_connection_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Device::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Device::clear_connection_type() {
  connection_type_ = 1;
  clear_has_connection_type();
}
inline ::toutiao_ssp::api::Device_ConnectionType Device::connection_type() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.connection_type)
  return static_cast< ::toutiao_ssp::api::Device_ConnectionType >(connection_type_);
}
inline void Device::set_connection_type(::toutiao_ssp::api::Device_ConnectionType value) {
  assert(::toutiao_ssp::api::Device_ConnectionType_IsValid(value));
  set_has_connection_type();
  connection_type_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.connection_type)
}

// optional .toutiao_ssp.api.Device.DeviceType device_type = 15;
inline bool Device::has_device_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Device::set_has_device_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Device::clear_has_device_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Device::clear_device_type() {
  device_type_ = 1;
  clear_has_device_type();
}
inline ::toutiao_ssp::api::Device_DeviceType Device::device_type() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Device.device_type)
  return static_cast< ::toutiao_ssp::api::Device_DeviceType >(device_type_);
}
inline void Device::set_device_type(::toutiao_ssp::api::Device_DeviceType value) {
  assert(::toutiao_ssp::api::Device_DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Device.device_type)
}

// -------------------------------------------------------------------

// Data_Segment

// optional string id = 1;
inline bool Data_Segment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data_Segment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data_Segment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data_Segment::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Data_Segment::id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Data.Segment.id)
  return *id_;
}
inline void Data_Segment::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Data.Segment.id)
}
inline void Data_Segment::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Data.Segment.id)
}
inline void Data_Segment::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Data.Segment.id)
}
inline ::std::string* Data_Segment::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Data.Segment.id)
  return id_;
}
inline ::std::string* Data_Segment::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data_Segment::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Data.Segment.id)
}

// optional string name = 2;
inline bool Data_Segment::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data_Segment::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data_Segment::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data_Segment::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Data_Segment::name() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Data.Segment.name)
  return *name_;
}
inline void Data_Segment::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Data.Segment.name)
}
inline void Data_Segment::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Data.Segment.name)
}
inline void Data_Segment::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Data.Segment.name)
}
inline ::std::string* Data_Segment::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Data.Segment.name)
  return name_;
}
inline ::std::string* Data_Segment::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data_Segment::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Data.Segment.name)
}

// optional string value = 3;
inline bool Data_Segment::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data_Segment::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data_Segment::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data_Segment::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Data_Segment::value() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Data.Segment.value)
  return *value_;
}
inline void Data_Segment::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Data.Segment.value)
}
inline void Data_Segment::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Data.Segment.value)
}
inline void Data_Segment::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Data.Segment.value)
}
inline ::std::string* Data_Segment::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Data.Segment.value)
  return value_;
}
inline ::std::string* Data_Segment::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data_Segment::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Data.Segment.value)
}

// -------------------------------------------------------------------

// Data

// required string id = 1;
inline bool Data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Data::id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Data.id)
  return *id_;
}
inline void Data::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Data.id)
}
inline void Data::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Data.id)
}
inline void Data::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Data.id)
}
inline ::std::string* Data::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Data.id)
  return id_;
}
inline ::std::string* Data::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Data.id)
}

// optional string name = 2;
inline bool Data::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Data::name() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Data.name)
  return *name_;
}
inline void Data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Data.name)
}
inline void Data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Data.name)
}
inline void Data::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Data.name)
}
inline ::std::string* Data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Data.name)
  return name_;
}
inline ::std::string* Data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Data.name)
}

// optional .toutiao_ssp.api.Data.Segment segment = 3;
inline bool Data::has_segment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::set_has_segment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data::clear_has_segment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data::clear_segment() {
  if (segment_ != NULL) segment_->::toutiao_ssp::api::Data_Segment::Clear();
  clear_has_segment();
}
inline const ::toutiao_ssp::api::Data_Segment& Data::segment() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Data.segment)
  return segment_ != NULL ? *segment_ : *default_instance_->segment_;
}
inline ::toutiao_ssp::api::Data_Segment* Data::mutable_segment() {
  set_has_segment();
  if (segment_ == NULL) segment_ = new ::toutiao_ssp::api::Data_Segment;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Data.segment)
  return segment_;
}
inline ::toutiao_ssp::api::Data_Segment* Data::release_segment() {
  clear_has_segment();
  ::toutiao_ssp::api::Data_Segment* temp = segment_;
  segment_ = NULL;
  return temp;
}
inline void Data::set_allocated_segment(::toutiao_ssp::api::Data_Segment* segment) {
  delete segment_;
  segment_ = segment;
  if (segment) {
    set_has_segment();
  } else {
    clear_has_segment();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Data.segment)
}

// -------------------------------------------------------------------

// User

// required string id = 1;
inline bool User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.User.id)
  return *id_;
}
inline void User::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.User.id)
}
inline void User::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.User.id)
}
inline void User::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.User.id)
}
inline ::std::string* User::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.User.id)
  return id_;
}
inline ::std::string* User::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.User.id)
}

// optional string buyer_id = 2;
inline bool User::has_buyer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_buyer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_buyer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_buyer_id() {
  if (buyer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_id_->clear();
  }
  clear_has_buyer_id();
}
inline const ::std::string& User::buyer_id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.User.buyer_id)
  return *buyer_id_;
}
inline void User::set_buyer_id(const ::std::string& value) {
  set_has_buyer_id();
  if (buyer_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_id_ = new ::std::string;
  }
  buyer_id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.User.buyer_id)
}
inline void User::set_buyer_id(const char* value) {
  set_has_buyer_id();
  if (buyer_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_id_ = new ::std::string;
  }
  buyer_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.User.buyer_id)
}
inline void User::set_buyer_id(const char* value, size_t size) {
  set_has_buyer_id();
  if (buyer_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_id_ = new ::std::string;
  }
  buyer_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.User.buyer_id)
}
inline ::std::string* User::mutable_buyer_id() {
  set_has_buyer_id();
  if (buyer_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.User.buyer_id)
  return buyer_id_;
}
inline ::std::string* User::release_buyer_id() {
  clear_has_buyer_id();
  if (buyer_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buyer_id_;
    buyer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_buyer_id(::std::string* buyer_id) {
  if (buyer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyer_id_;
  }
  if (buyer_id) {
    set_has_buyer_id();
    buyer_id_ = buyer_id;
  } else {
    clear_has_buyer_id();
    buyer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.User.buyer_id)
}

// optional string yob = 3;
inline bool User::has_yob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_yob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_yob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_yob() {
  if (yob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yob_->clear();
  }
  clear_has_yob();
}
inline const ::std::string& User::yob() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.User.yob)
  return *yob_;
}
inline void User::set_yob(const ::std::string& value) {
  set_has_yob();
  if (yob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yob_ = new ::std::string;
  }
  yob_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.User.yob)
}
inline void User::set_yob(const char* value) {
  set_has_yob();
  if (yob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yob_ = new ::std::string;
  }
  yob_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.User.yob)
}
inline void User::set_yob(const char* value, size_t size) {
  set_has_yob();
  if (yob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yob_ = new ::std::string;
  }
  yob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.User.yob)
}
inline ::std::string* User::mutable_yob() {
  set_has_yob();
  if (yob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yob_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.User.yob)
  return yob_;
}
inline ::std::string* User::release_yob() {
  clear_has_yob();
  if (yob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = yob_;
    yob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_yob(::std::string* yob) {
  if (yob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete yob_;
  }
  if (yob) {
    set_has_yob();
    yob_ = yob;
  } else {
    clear_has_yob();
    yob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.User.yob)
}

// optional .toutiao_ssp.api.User.Gender gender = 4;
inline bool User::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void User::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void User::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
inline ::toutiao_ssp::api::User_Gender User::gender() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.User.gender)
  return static_cast< ::toutiao_ssp::api::User_Gender >(gender_);
}
inline void User::set_gender(::toutiao_ssp::api::User_Gender value) {
  assert(::toutiao_ssp::api::User_Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.User.gender)
}

// optional string keywords = 5;
inline bool User::has_keywords() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_keywords() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& User::keywords() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.User.keywords)
  return *keywords_;
}
inline void User::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.User.keywords)
}
inline void User::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.User.keywords)
}
inline void User::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.User.keywords)
}
inline ::std::string* User::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keywords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.User.keywords)
  return keywords_;
}
inline ::std::string* User::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_keywords(::std::string* keywords) {
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (keywords) {
    set_has_keywords();
    keywords_ = keywords;
  } else {
    clear_has_keywords();
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.User.keywords)
}

// optional .toutiao_ssp.api.Geo geo = 6;
inline bool User::has_geo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_geo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_geo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_geo() {
  if (geo_ != NULL) geo_->::toutiao_ssp::api::Geo::Clear();
  clear_has_geo();
}
inline const ::toutiao_ssp::api::Geo& User::geo() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.User.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::toutiao_ssp::api::Geo* User::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::toutiao_ssp::api::Geo;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.User.geo)
  return geo_;
}
inline ::toutiao_ssp::api::Geo* User::release_geo() {
  clear_has_geo();
  ::toutiao_ssp::api::Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void User::set_allocated_geo(::toutiao_ssp::api::Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.User.geo)
}

// optional .toutiao_ssp.api.Data data = 7;
inline bool User::has_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::set_has_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void User::clear_has_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void User::clear_data() {
  if (data_ != NULL) data_->::toutiao_ssp::api::Data::Clear();
  clear_has_data();
}
inline const ::toutiao_ssp::api::Data& User::data() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.User.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::toutiao_ssp::api::Data* User::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::toutiao_ssp::api::Data;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.User.data)
  return data_;
}
inline ::toutiao_ssp::api::Data* User::release_data() {
  clear_has_data();
  ::toutiao_ssp::api::Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void User::set_allocated_data(::toutiao_ssp::api::Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.User.data)
}

// -------------------------------------------------------------------

// BidRequest

// required string request_id = 1;
inline bool BidRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest::clear_request_id() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_->clear();
  }
  clear_has_request_id();
}
inline const ::std::string& BidRequest::request_id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.BidRequest.request_id)
  return *request_id_;
}
inline void BidRequest::set_request_id(const ::std::string& value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.BidRequest.request_id)
}
inline void BidRequest::set_request_id(const char* value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.BidRequest.request_id)
}
inline void BidRequest::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.BidRequest.request_id)
}
inline ::std::string* BidRequest::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.BidRequest.request_id)
  return request_id_;
}
inline ::std::string* BidRequest::release_request_id() {
  clear_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_id_;
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (request_id) {
    set_has_request_id();
    request_id_ = request_id;
  } else {
    clear_has_request_id();
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.BidRequest.request_id)
}

// required string api_version = 2;
inline bool BidRequest::has_api_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest::set_has_api_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest::clear_has_api_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest::clear_api_version() {
  if (api_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_version_->clear();
  }
  clear_has_api_version();
}
inline const ::std::string& BidRequest::api_version() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.BidRequest.api_version)
  return *api_version_;
}
inline void BidRequest::set_api_version(const ::std::string& value) {
  set_has_api_version();
  if (api_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_version_ = new ::std::string;
  }
  api_version_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.BidRequest.api_version)
}
inline void BidRequest::set_api_version(const char* value) {
  set_has_api_version();
  if (api_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_version_ = new ::std::string;
  }
  api_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.BidRequest.api_version)
}
inline void BidRequest::set_api_version(const char* value, size_t size) {
  set_has_api_version();
  if (api_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_version_ = new ::std::string;
  }
  api_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.BidRequest.api_version)
}
inline ::std::string* BidRequest::mutable_api_version() {
  set_has_api_version();
  if (api_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.BidRequest.api_version)
  return api_version_;
}
inline ::std::string* BidRequest::release_api_version() {
  clear_has_api_version();
  if (api_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = api_version_;
    api_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_api_version(::std::string* api_version) {
  if (api_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_version_;
  }
  if (api_version) {
    set_has_api_version();
    api_version_ = api_version;
  } else {
    clear_has_api_version();
    api_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.BidRequest.api_version)
}

// repeated .toutiao_ssp.api.AdSlot adslots = 3;
inline int BidRequest::adslots_size() const {
  return adslots_.size();
}
inline void BidRequest::clear_adslots() {
  adslots_.Clear();
}
inline const ::toutiao_ssp::api::AdSlot& BidRequest::adslots(int index) const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.BidRequest.adslots)
  return adslots_.Get(index);
}
inline ::toutiao_ssp::api::AdSlot* BidRequest::mutable_adslots(int index) {
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.BidRequest.adslots)
  return adslots_.Mutable(index);
}
inline ::toutiao_ssp::api::AdSlot* BidRequest::add_adslots() {
  // @@protoc_insertion_point(field_add:toutiao_ssp.api.BidRequest.adslots)
  return adslots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot >&
BidRequest::adslots() const {
  // @@protoc_insertion_point(field_list:toutiao_ssp.api.BidRequest.adslots)
  return adslots_;
}
inline ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::AdSlot >*
BidRequest::mutable_adslots() {
  // @@protoc_insertion_point(field_mutable_list:toutiao_ssp.api.BidRequest.adslots)
  return &adslots_;
}

// required .toutiao_ssp.api.App app = 4;
inline bool BidRequest::has_app() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest::set_has_app() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest::clear_has_app() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest::clear_app() {
  if (app_ != NULL) app_->::toutiao_ssp::api::App::Clear();
  clear_has_app();
}
inline const ::toutiao_ssp::api::App& BidRequest::app() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.BidRequest.app)
  return app_ != NULL ? *app_ : *default_instance_->app_;
}
inline ::toutiao_ssp::api::App* BidRequest::mutable_app() {
  set_has_app();
  if (app_ == NULL) app_ = new ::toutiao_ssp::api::App;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.BidRequest.app)
  return app_;
}
inline ::toutiao_ssp::api::App* BidRequest::release_app() {
  clear_has_app();
  ::toutiao_ssp::api::App* temp = app_;
  app_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_app(::toutiao_ssp::api::App* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.BidRequest.app)
}

// required .toutiao_ssp.api.Device device = 5;
inline bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest::clear_device() {
  if (device_ != NULL) device_->::toutiao_ssp::api::Device::Clear();
  clear_has_device();
}
inline const ::toutiao_ssp::api::Device& BidRequest::device() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.BidRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::toutiao_ssp::api::Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::toutiao_ssp::api::Device;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.BidRequest.device)
  return device_;
}
inline ::toutiao_ssp::api::Device* BidRequest::release_device() {
  clear_has_device();
  ::toutiao_ssp::api::Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_device(::toutiao_ssp::api::Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.BidRequest.device)
}

// required .toutiao_ssp.api.User user = 6;
inline bool BidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest::clear_user() {
  if (user_ != NULL) user_->::toutiao_ssp::api::User::Clear();
  clear_has_user();
}
inline const ::toutiao_ssp::api::User& BidRequest::user() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.BidRequest.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::toutiao_ssp::api::User* BidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::toutiao_ssp::api::User;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.BidRequest.user)
  return user_;
}
inline ::toutiao_ssp::api::User* BidRequest::release_user() {
  clear_has_user();
  ::toutiao_ssp::api::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_user(::toutiao_ssp::api::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.BidRequest.user)
}

// -------------------------------------------------------------------

// MaterialMeta_ImageMeta

// optional string description = 1;
inline bool MaterialMeta_ImageMeta::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaterialMeta_ImageMeta::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaterialMeta_ImageMeta::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaterialMeta_ImageMeta::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& MaterialMeta_ImageMeta::description() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.ImageMeta.description)
  return *description_;
}
inline void MaterialMeta_ImageMeta::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.ImageMeta.description)
}
inline void MaterialMeta_ImageMeta::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.ImageMeta.description)
}
inline void MaterialMeta_ImageMeta::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.ImageMeta.description)
}
inline ::std::string* MaterialMeta_ImageMeta::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.ImageMeta.description)
  return description_;
}
inline ::std::string* MaterialMeta_ImageMeta::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_ImageMeta::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.ImageMeta.description)
}

// required uint32 width = 2;
inline bool MaterialMeta_ImageMeta::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaterialMeta_ImageMeta::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaterialMeta_ImageMeta::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaterialMeta_ImageMeta::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MaterialMeta_ImageMeta::width() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.ImageMeta.width)
  return width_;
}
inline void MaterialMeta_ImageMeta::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.ImageMeta.width)
}

// optional uint32 height = 3;
inline bool MaterialMeta_ImageMeta::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaterialMeta_ImageMeta::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaterialMeta_ImageMeta::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaterialMeta_ImageMeta::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MaterialMeta_ImageMeta::height() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.ImageMeta.height)
  return height_;
}
inline void MaterialMeta_ImageMeta::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.ImageMeta.height)
}

// required string url = 4;
inline bool MaterialMeta_ImageMeta::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaterialMeta_ImageMeta::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaterialMeta_ImageMeta::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaterialMeta_ImageMeta::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& MaterialMeta_ImageMeta::url() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.ImageMeta.url)
  return *url_;
}
inline void MaterialMeta_ImageMeta::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.ImageMeta.url)
}
inline void MaterialMeta_ImageMeta::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.ImageMeta.url)
}
inline void MaterialMeta_ImageMeta::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.ImageMeta.url)
}
inline ::std::string* MaterialMeta_ImageMeta::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.ImageMeta.url)
  return url_;
}
inline ::std::string* MaterialMeta_ImageMeta::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_ImageMeta::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.ImageMeta.url)
}

// -------------------------------------------------------------------

// MaterialMeta_ExternalMeta

// required string url = 1;
inline bool MaterialMeta_ExternalMeta::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaterialMeta_ExternalMeta::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaterialMeta_ExternalMeta::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaterialMeta_ExternalMeta::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& MaterialMeta_ExternalMeta::url() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.ExternalMeta.url)
  return *url_;
}
inline void MaterialMeta_ExternalMeta::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.ExternalMeta.url)
}
inline void MaterialMeta_ExternalMeta::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.ExternalMeta.url)
}
inline void MaterialMeta_ExternalMeta::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.ExternalMeta.url)
}
inline ::std::string* MaterialMeta_ExternalMeta::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.ExternalMeta.url)
  return url_;
}
inline ::std::string* MaterialMeta_ExternalMeta::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_ExternalMeta::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.ExternalMeta.url)
}

// -------------------------------------------------------------------

// MaterialMeta_AndroidApp

// required string app_name = 1;
inline bool MaterialMeta_AndroidApp::has_app_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaterialMeta_AndroidApp::set_has_app_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaterialMeta_AndroidApp::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaterialMeta_AndroidApp::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& MaterialMeta_AndroidApp::app_name() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.AndroidApp.app_name)
  return *app_name_;
}
inline void MaterialMeta_AndroidApp::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.AndroidApp.app_name)
}
inline void MaterialMeta_AndroidApp::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.AndroidApp.app_name)
}
inline void MaterialMeta_AndroidApp::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.AndroidApp.app_name)
}
inline ::std::string* MaterialMeta_AndroidApp::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.AndroidApp.app_name)
  return app_name_;
}
inline ::std::string* MaterialMeta_AndroidApp::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_AndroidApp::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.AndroidApp.app_name)
}

// required string download_url = 2;
inline bool MaterialMeta_AndroidApp::has_download_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaterialMeta_AndroidApp::set_has_download_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaterialMeta_AndroidApp::clear_has_download_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaterialMeta_AndroidApp::clear_download_url() {
  if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_->clear();
  }
  clear_has_download_url();
}
inline const ::std::string& MaterialMeta_AndroidApp::download_url() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.AndroidApp.download_url)
  return *download_url_;
}
inline void MaterialMeta_AndroidApp::set_download_url(const ::std::string& value) {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  download_url_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.AndroidApp.download_url)
}
inline void MaterialMeta_AndroidApp::set_download_url(const char* value) {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  download_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.AndroidApp.download_url)
}
inline void MaterialMeta_AndroidApp::set_download_url(const char* value, size_t size) {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  download_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.AndroidApp.download_url)
}
inline ::std::string* MaterialMeta_AndroidApp::mutable_download_url() {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.AndroidApp.download_url)
  return download_url_;
}
inline ::std::string* MaterialMeta_AndroidApp::release_download_url() {
  clear_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = download_url_;
    download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_AndroidApp::set_allocated_download_url(::std::string* download_url) {
  if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_url_;
  }
  if (download_url) {
    set_has_download_url();
    download_url_ = download_url;
  } else {
    clear_has_download_url();
    download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.AndroidApp.download_url)
}

// optional string open_url = 3;
inline bool MaterialMeta_AndroidApp::has_open_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaterialMeta_AndroidApp::set_has_open_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaterialMeta_AndroidApp::clear_has_open_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaterialMeta_AndroidApp::clear_open_url() {
  if (open_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_->clear();
  }
  clear_has_open_url();
}
inline const ::std::string& MaterialMeta_AndroidApp::open_url() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.AndroidApp.open_url)
  return *open_url_;
}
inline void MaterialMeta_AndroidApp::set_open_url(const ::std::string& value) {
  set_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_ = new ::std::string;
  }
  open_url_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.AndroidApp.open_url)
}
inline void MaterialMeta_AndroidApp::set_open_url(const char* value) {
  set_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_ = new ::std::string;
  }
  open_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.AndroidApp.open_url)
}
inline void MaterialMeta_AndroidApp::set_open_url(const char* value, size_t size) {
  set_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_ = new ::std::string;
  }
  open_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.AndroidApp.open_url)
}
inline ::std::string* MaterialMeta_AndroidApp::mutable_open_url() {
  set_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.AndroidApp.open_url)
  return open_url_;
}
inline ::std::string* MaterialMeta_AndroidApp::release_open_url() {
  clear_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = open_url_;
    open_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_AndroidApp::set_allocated_open_url(::std::string* open_url) {
  if (open_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete open_url_;
  }
  if (open_url) {
    set_has_open_url();
    open_url_ = open_url;
  } else {
    clear_has_open_url();
    open_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.AndroidApp.open_url)
}

// optional string package = 4;
inline bool MaterialMeta_AndroidApp::has_package() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaterialMeta_AndroidApp::set_has_package() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaterialMeta_AndroidApp::clear_has_package() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaterialMeta_AndroidApp::clear_package() {
  if (package_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_->clear();
  }
  clear_has_package();
}
inline const ::std::string& MaterialMeta_AndroidApp::package() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.AndroidApp.package)
  return *package_;
}
inline void MaterialMeta_AndroidApp::set_package(const ::std::string& value) {
  set_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_ = new ::std::string;
  }
  package_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.AndroidApp.package)
}
inline void MaterialMeta_AndroidApp::set_package(const char* value) {
  set_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_ = new ::std::string;
  }
  package_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.AndroidApp.package)
}
inline void MaterialMeta_AndroidApp::set_package(const char* value, size_t size) {
  set_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_ = new ::std::string;
  }
  package_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.AndroidApp.package)
}
inline ::std::string* MaterialMeta_AndroidApp::mutable_package() {
  set_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.AndroidApp.package)
  return package_;
}
inline ::std::string* MaterialMeta_AndroidApp::release_package() {
  clear_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = package_;
    package_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_AndroidApp::set_allocated_package(::std::string* package) {
  if (package_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete package_;
  }
  if (package) {
    set_has_package();
    package_ = package;
  } else {
    clear_has_package();
    package_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.AndroidApp.package)
}

// -------------------------------------------------------------------

// MaterialMeta_IosApp

// required string app_name = 1;
inline bool MaterialMeta_IosApp::has_app_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaterialMeta_IosApp::set_has_app_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaterialMeta_IosApp::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaterialMeta_IosApp::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& MaterialMeta_IosApp::app_name() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.IosApp.app_name)
  return *app_name_;
}
inline void MaterialMeta_IosApp::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.IosApp.app_name)
}
inline void MaterialMeta_IosApp::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.IosApp.app_name)
}
inline void MaterialMeta_IosApp::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.IosApp.app_name)
}
inline ::std::string* MaterialMeta_IosApp::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.IosApp.app_name)
  return app_name_;
}
inline ::std::string* MaterialMeta_IosApp::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_IosApp::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.IosApp.app_name)
}

// required string download_url = 2;
inline bool MaterialMeta_IosApp::has_download_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaterialMeta_IosApp::set_has_download_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaterialMeta_IosApp::clear_has_download_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaterialMeta_IosApp::clear_download_url() {
  if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_->clear();
  }
  clear_has_download_url();
}
inline const ::std::string& MaterialMeta_IosApp::download_url() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.IosApp.download_url)
  return *download_url_;
}
inline void MaterialMeta_IosApp::set_download_url(const ::std::string& value) {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  download_url_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.IosApp.download_url)
}
inline void MaterialMeta_IosApp::set_download_url(const char* value) {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  download_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.IosApp.download_url)
}
inline void MaterialMeta_IosApp::set_download_url(const char* value, size_t size) {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  download_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.IosApp.download_url)
}
inline ::std::string* MaterialMeta_IosApp::mutable_download_url() {
  set_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    download_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.IosApp.download_url)
  return download_url_;
}
inline ::std::string* MaterialMeta_IosApp::release_download_url() {
  clear_has_download_url();
  if (download_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = download_url_;
    download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_IosApp::set_allocated_download_url(::std::string* download_url) {
  if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_url_;
  }
  if (download_url) {
    set_has_download_url();
    download_url_ = download_url;
  } else {
    clear_has_download_url();
    download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.IosApp.download_url)
}

// optional string open_url = 3;
inline bool MaterialMeta_IosApp::has_open_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaterialMeta_IosApp::set_has_open_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaterialMeta_IosApp::clear_has_open_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaterialMeta_IosApp::clear_open_url() {
  if (open_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_->clear();
  }
  clear_has_open_url();
}
inline const ::std::string& MaterialMeta_IosApp::open_url() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.IosApp.open_url)
  return *open_url_;
}
inline void MaterialMeta_IosApp::set_open_url(const ::std::string& value) {
  set_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_ = new ::std::string;
  }
  open_url_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.IosApp.open_url)
}
inline void MaterialMeta_IosApp::set_open_url(const char* value) {
  set_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_ = new ::std::string;
  }
  open_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.IosApp.open_url)
}
inline void MaterialMeta_IosApp::set_open_url(const char* value, size_t size) {
  set_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_ = new ::std::string;
  }
  open_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.IosApp.open_url)
}
inline ::std::string* MaterialMeta_IosApp::mutable_open_url() {
  set_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    open_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.IosApp.open_url)
  return open_url_;
}
inline ::std::string* MaterialMeta_IosApp::release_open_url() {
  clear_has_open_url();
  if (open_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = open_url_;
    open_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_IosApp::set_allocated_open_url(::std::string* open_url) {
  if (open_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete open_url_;
  }
  if (open_url) {
    set_has_open_url();
    open_url_ = open_url;
  } else {
    clear_has_open_url();
    open_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.IosApp.open_url)
}

// optional string appleid = 4;
inline bool MaterialMeta_IosApp::has_appleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaterialMeta_IosApp::set_has_appleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaterialMeta_IosApp::clear_has_appleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaterialMeta_IosApp::clear_appleid() {
  if (appleid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appleid_->clear();
  }
  clear_has_appleid();
}
inline const ::std::string& MaterialMeta_IosApp::appleid() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.IosApp.appleid)
  return *appleid_;
}
inline void MaterialMeta_IosApp::set_appleid(const ::std::string& value) {
  set_has_appleid();
  if (appleid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appleid_ = new ::std::string;
  }
  appleid_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.IosApp.appleid)
}
inline void MaterialMeta_IosApp::set_appleid(const char* value) {
  set_has_appleid();
  if (appleid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appleid_ = new ::std::string;
  }
  appleid_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.IosApp.appleid)
}
inline void MaterialMeta_IosApp::set_appleid(const char* value, size_t size) {
  set_has_appleid();
  if (appleid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appleid_ = new ::std::string;
  }
  appleid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.IosApp.appleid)
}
inline ::std::string* MaterialMeta_IosApp::mutable_appleid() {
  set_has_appleid();
  if (appleid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appleid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.IosApp.appleid)
  return appleid_;
}
inline ::std::string* MaterialMeta_IosApp::release_appleid() {
  clear_has_appleid();
  if (appleid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = appleid_;
    appleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_IosApp::set_allocated_appleid(::std::string* appleid) {
  if (appleid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appleid_;
  }
  if (appleid) {
    set_has_appleid();
    appleid_ = appleid;
  } else {
    clear_has_appleid();
    appleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.IosApp.appleid)
}

// optional string ipa_url = 5;
inline bool MaterialMeta_IosApp::has_ipa_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaterialMeta_IosApp::set_has_ipa_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaterialMeta_IosApp::clear_has_ipa_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaterialMeta_IosApp::clear_ipa_url() {
  if (ipa_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipa_url_->clear();
  }
  clear_has_ipa_url();
}
inline const ::std::string& MaterialMeta_IosApp::ipa_url() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.IosApp.ipa_url)
  return *ipa_url_;
}
inline void MaterialMeta_IosApp::set_ipa_url(const ::std::string& value) {
  set_has_ipa_url();
  if (ipa_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipa_url_ = new ::std::string;
  }
  ipa_url_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.IosApp.ipa_url)
}
inline void MaterialMeta_IosApp::set_ipa_url(const char* value) {
  set_has_ipa_url();
  if (ipa_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipa_url_ = new ::std::string;
  }
  ipa_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.IosApp.ipa_url)
}
inline void MaterialMeta_IosApp::set_ipa_url(const char* value, size_t size) {
  set_has_ipa_url();
  if (ipa_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipa_url_ = new ::std::string;
  }
  ipa_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.IosApp.ipa_url)
}
inline ::std::string* MaterialMeta_IosApp::mutable_ipa_url() {
  set_has_ipa_url();
  if (ipa_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipa_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.IosApp.ipa_url)
  return ipa_url_;
}
inline ::std::string* MaterialMeta_IosApp::release_ipa_url() {
  clear_has_ipa_url();
  if (ipa_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipa_url_;
    ipa_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta_IosApp::set_allocated_ipa_url(::std::string* ipa_url) {
  if (ipa_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipa_url_;
  }
  if (ipa_url) {
    set_has_ipa_url();
    ipa_url_ = ipa_url;
  } else {
    clear_has_ipa_url();
    ipa_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.IosApp.ipa_url)
}

// -------------------------------------------------------------------

// MaterialMeta

// required .toutiao_ssp.api.AdType ad_type = 1;
inline bool MaterialMeta::has_ad_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaterialMeta::set_has_ad_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaterialMeta::clear_has_ad_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaterialMeta::clear_ad_type() {
  ad_type_ = 1;
  clear_has_ad_type();
}
inline ::toutiao_ssp::api::AdType MaterialMeta::ad_type() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.ad_type)
  return static_cast< ::toutiao_ssp::api::AdType >(ad_type_);
}
inline void MaterialMeta::set_ad_type(::toutiao_ssp::api::AdType value) {
  assert(::toutiao_ssp::api::AdType_IsValid(value));
  set_has_ad_type();
  ad_type_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.ad_type)
}

// required string nurl = 2;
inline bool MaterialMeta::has_nurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaterialMeta::set_has_nurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaterialMeta::clear_has_nurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaterialMeta::clear_nurl() {
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_->clear();
  }
  clear_has_nurl();
}
inline const ::std::string& MaterialMeta::nurl() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.nurl)
  return *nurl_;
}
inline void MaterialMeta::set_nurl(const ::std::string& value) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.nurl)
}
inline void MaterialMeta::set_nurl(const char* value) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.nurl)
}
inline void MaterialMeta::set_nurl(const char* value, size_t size) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.nurl)
}
inline ::std::string* MaterialMeta::mutable_nurl() {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.nurl)
  return nurl_;
}
inline ::std::string* MaterialMeta::release_nurl() {
  clear_has_nurl();
  if (nurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nurl_;
    nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta::set_allocated_nurl(::std::string* nurl) {
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nurl_;
  }
  if (nurl) {
    set_has_nurl();
    nurl_ = nurl;
  } else {
    clear_has_nurl();
    nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.nurl)
}

// optional string title = 3;
inline bool MaterialMeta::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaterialMeta::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaterialMeta::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaterialMeta::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MaterialMeta::title() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.title)
  return *title_;
}
inline void MaterialMeta::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.title)
}
inline void MaterialMeta::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.title)
}
inline void MaterialMeta::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.title)
}
inline ::std::string* MaterialMeta::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.title)
  return title_;
}
inline ::std::string* MaterialMeta::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.title)
}

// required string source = 4;
inline bool MaterialMeta::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaterialMeta::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaterialMeta::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaterialMeta::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& MaterialMeta::source() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.source)
  return *source_;
}
inline void MaterialMeta::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.source)
}
inline void MaterialMeta::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.source)
}
inline void MaterialMeta::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.source)
}
inline ::std::string* MaterialMeta::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.source)
  return source_;
}
inline ::std::string* MaterialMeta::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaterialMeta::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.source)
}

// optional .toutiao_ssp.api.MaterialMeta.ImageMeta image_banner = 5;
inline bool MaterialMeta::has_image_banner() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaterialMeta::set_has_image_banner() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaterialMeta::clear_has_image_banner() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaterialMeta::clear_image_banner() {
  if (image_banner_ != NULL) image_banner_->::toutiao_ssp::api::MaterialMeta_ImageMeta::Clear();
  clear_has_image_banner();
}
inline const ::toutiao_ssp::api::MaterialMeta_ImageMeta& MaterialMeta::image_banner() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.image_banner)
  return image_banner_ != NULL ? *image_banner_ : *default_instance_->image_banner_;
}
inline ::toutiao_ssp::api::MaterialMeta_ImageMeta* MaterialMeta::mutable_image_banner() {
  set_has_image_banner();
  if (image_banner_ == NULL) image_banner_ = new ::toutiao_ssp::api::MaterialMeta_ImageMeta;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.image_banner)
  return image_banner_;
}
inline ::toutiao_ssp::api::MaterialMeta_ImageMeta* MaterialMeta::release_image_banner() {
  clear_has_image_banner();
  ::toutiao_ssp::api::MaterialMeta_ImageMeta* temp = image_banner_;
  image_banner_ = NULL;
  return temp;
}
inline void MaterialMeta::set_allocated_image_banner(::toutiao_ssp::api::MaterialMeta_ImageMeta* image_banner) {
  delete image_banner_;
  image_banner_ = image_banner;
  if (image_banner) {
    set_has_image_banner();
  } else {
    clear_has_image_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.image_banner)
}

// optional .toutiao_ssp.api.MaterialMeta.ExternalMeta external = 6;
inline bool MaterialMeta::has_external() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MaterialMeta::set_has_external() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MaterialMeta::clear_has_external() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MaterialMeta::clear_external() {
  if (external_ != NULL) external_->::toutiao_ssp::api::MaterialMeta_ExternalMeta::Clear();
  clear_has_external();
}
inline const ::toutiao_ssp::api::MaterialMeta_ExternalMeta& MaterialMeta::external() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.external)
  return external_ != NULL ? *external_ : *default_instance_->external_;
}
inline ::toutiao_ssp::api::MaterialMeta_ExternalMeta* MaterialMeta::mutable_external() {
  set_has_external();
  if (external_ == NULL) external_ = new ::toutiao_ssp::api::MaterialMeta_ExternalMeta;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.external)
  return external_;
}
inline ::toutiao_ssp::api::MaterialMeta_ExternalMeta* MaterialMeta::release_external() {
  clear_has_external();
  ::toutiao_ssp::api::MaterialMeta_ExternalMeta* temp = external_;
  external_ = NULL;
  return temp;
}
inline void MaterialMeta::set_allocated_external(::toutiao_ssp::api::MaterialMeta_ExternalMeta* external) {
  delete external_;
  external_ = external;
  if (external) {
    set_has_external();
  } else {
    clear_has_external();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.external)
}

// optional .toutiao_ssp.api.MaterialMeta.AndroidApp android_app = 7;
inline bool MaterialMeta::has_android_app() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MaterialMeta::set_has_android_app() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MaterialMeta::clear_has_android_app() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MaterialMeta::clear_android_app() {
  if (android_app_ != NULL) android_app_->::toutiao_ssp::api::MaterialMeta_AndroidApp::Clear();
  clear_has_android_app();
}
inline const ::toutiao_ssp::api::MaterialMeta_AndroidApp& MaterialMeta::android_app() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.android_app)
  return android_app_ != NULL ? *android_app_ : *default_instance_->android_app_;
}
inline ::toutiao_ssp::api::MaterialMeta_AndroidApp* MaterialMeta::mutable_android_app() {
  set_has_android_app();
  if (android_app_ == NULL) android_app_ = new ::toutiao_ssp::api::MaterialMeta_AndroidApp;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.android_app)
  return android_app_;
}
inline ::toutiao_ssp::api::MaterialMeta_AndroidApp* MaterialMeta::release_android_app() {
  clear_has_android_app();
  ::toutiao_ssp::api::MaterialMeta_AndroidApp* temp = android_app_;
  android_app_ = NULL;
  return temp;
}
inline void MaterialMeta::set_allocated_android_app(::toutiao_ssp::api::MaterialMeta_AndroidApp* android_app) {
  delete android_app_;
  android_app_ = android_app;
  if (android_app) {
    set_has_android_app();
  } else {
    clear_has_android_app();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.android_app)
}

// optional .toutiao_ssp.api.MaterialMeta.IosApp ios_app = 8;
inline bool MaterialMeta::has_ios_app() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MaterialMeta::set_has_ios_app() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MaterialMeta::clear_has_ios_app() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MaterialMeta::clear_ios_app() {
  if (ios_app_ != NULL) ios_app_->::toutiao_ssp::api::MaterialMeta_IosApp::Clear();
  clear_has_ios_app();
}
inline const ::toutiao_ssp::api::MaterialMeta_IosApp& MaterialMeta::ios_app() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.ios_app)
  return ios_app_ != NULL ? *ios_app_ : *default_instance_->ios_app_;
}
inline ::toutiao_ssp::api::MaterialMeta_IosApp* MaterialMeta::mutable_ios_app() {
  set_has_ios_app();
  if (ios_app_ == NULL) ios_app_ = new ::toutiao_ssp::api::MaterialMeta_IosApp;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.ios_app)
  return ios_app_;
}
inline ::toutiao_ssp::api::MaterialMeta_IosApp* MaterialMeta::release_ios_app() {
  clear_has_ios_app();
  ::toutiao_ssp::api::MaterialMeta_IosApp* temp = ios_app_;
  ios_app_ = NULL;
  return temp;
}
inline void MaterialMeta::set_allocated_ios_app(::toutiao_ssp::api::MaterialMeta_IosApp* ios_app) {
  delete ios_app_;
  ios_app_ = ios_app;
  if (ios_app) {
    set_has_ios_app();
  } else {
    clear_has_ios_app();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.MaterialMeta.ios_app)
}

// repeated string show_url = 9;
inline int MaterialMeta::show_url_size() const {
  return show_url_.size();
}
inline void MaterialMeta::clear_show_url() {
  show_url_.Clear();
}
inline const ::std::string& MaterialMeta::show_url(int index) const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.show_url)
  return show_url_.Get(index);
}
inline ::std::string* MaterialMeta::mutable_show_url(int index) {
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.show_url)
  return show_url_.Mutable(index);
}
inline void MaterialMeta::set_show_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.show_url)
  show_url_.Mutable(index)->assign(value);
}
inline void MaterialMeta::set_show_url(int index, const char* value) {
  show_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.show_url)
}
inline void MaterialMeta::set_show_url(int index, const char* value, size_t size) {
  show_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.show_url)
}
inline ::std::string* MaterialMeta::add_show_url() {
  return show_url_.Add();
}
inline void MaterialMeta::add_show_url(const ::std::string& value) {
  show_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toutiao_ssp.api.MaterialMeta.show_url)
}
inline void MaterialMeta::add_show_url(const char* value) {
  show_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toutiao_ssp.api.MaterialMeta.show_url)
}
inline void MaterialMeta::add_show_url(const char* value, size_t size) {
  show_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toutiao_ssp.api.MaterialMeta.show_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MaterialMeta::show_url() const {
  // @@protoc_insertion_point(field_list:toutiao_ssp.api.MaterialMeta.show_url)
  return show_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MaterialMeta::mutable_show_url() {
  // @@protoc_insertion_point(field_mutable_list:toutiao_ssp.api.MaterialMeta.show_url)
  return &show_url_;
}

// repeated string click_url = 10;
inline int MaterialMeta::click_url_size() const {
  return click_url_.size();
}
inline void MaterialMeta::clear_click_url() {
  click_url_.Clear();
}
inline const ::std::string& MaterialMeta::click_url(int index) const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.click_url)
  return click_url_.Get(index);
}
inline ::std::string* MaterialMeta::mutable_click_url(int index) {
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.MaterialMeta.click_url)
  return click_url_.Mutable(index);
}
inline void MaterialMeta::set_click_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.click_url)
  click_url_.Mutable(index)->assign(value);
}
inline void MaterialMeta::set_click_url(int index, const char* value) {
  click_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.MaterialMeta.click_url)
}
inline void MaterialMeta::set_click_url(int index, const char* value, size_t size) {
  click_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.MaterialMeta.click_url)
}
inline ::std::string* MaterialMeta::add_click_url() {
  return click_url_.Add();
}
inline void MaterialMeta::add_click_url(const ::std::string& value) {
  click_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toutiao_ssp.api.MaterialMeta.click_url)
}
inline void MaterialMeta::add_click_url(const char* value) {
  click_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toutiao_ssp.api.MaterialMeta.click_url)
}
inline void MaterialMeta::add_click_url(const char* value, size_t size) {
  click_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toutiao_ssp.api.MaterialMeta.click_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MaterialMeta::click_url() const {
  // @@protoc_insertion_point(field_list:toutiao_ssp.api.MaterialMeta.click_url)
  return click_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MaterialMeta::mutable_click_url() {
  // @@protoc_insertion_point(field_mutable_list:toutiao_ssp.api.MaterialMeta.click_url)
  return &click_url_;
}

// optional bool is_inapp = 11;
inline bool MaterialMeta::has_is_inapp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MaterialMeta::set_has_is_inapp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MaterialMeta::clear_has_is_inapp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MaterialMeta::clear_is_inapp() {
  is_inapp_ = false;
  clear_has_is_inapp();
}
inline bool MaterialMeta::is_inapp() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.MaterialMeta.is_inapp)
  return is_inapp_;
}
inline void MaterialMeta::set_is_inapp(bool value) {
  set_has_is_inapp();
  is_inapp_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.MaterialMeta.is_inapp)
}

// -------------------------------------------------------------------

// Bid

// required string id = 1;
inline bool Bid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bid::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Bid::id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Bid.id)
  return *id_;
}
inline void Bid::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Bid.id)
}
inline void Bid::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Bid.id)
}
inline void Bid::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Bid.id)
}
inline ::std::string* Bid::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Bid.id)
  return id_;
}
inline ::std::string* Bid::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Bid::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Bid.id)
}

// required string adslot_id = 2;
inline bool Bid::has_adslot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bid::set_has_adslot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bid::clear_has_adslot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bid::clear_adslot_id() {
  if (adslot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adslot_id_->clear();
  }
  clear_has_adslot_id();
}
inline const ::std::string& Bid::adslot_id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Bid.adslot_id)
  return *adslot_id_;
}
inline void Bid::set_adslot_id(const ::std::string& value) {
  set_has_adslot_id();
  if (adslot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adslot_id_ = new ::std::string;
  }
  adslot_id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Bid.adslot_id)
}
inline void Bid::set_adslot_id(const char* value) {
  set_has_adslot_id();
  if (adslot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adslot_id_ = new ::std::string;
  }
  adslot_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.Bid.adslot_id)
}
inline void Bid::set_adslot_id(const char* value, size_t size) {
  set_has_adslot_id();
  if (adslot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adslot_id_ = new ::std::string;
  }
  adslot_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.Bid.adslot_id)
}
inline ::std::string* Bid::mutable_adslot_id() {
  set_has_adslot_id();
  if (adslot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adslot_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Bid.adslot_id)
  return adslot_id_;
}
inline ::std::string* Bid::release_adslot_id() {
  clear_has_adslot_id();
  if (adslot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adslot_id_;
    adslot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Bid::set_allocated_adslot_id(::std::string* adslot_id) {
  if (adslot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adslot_id_;
  }
  if (adslot_id) {
    set_has_adslot_id();
    adslot_id_ = adslot_id;
  } else {
    clear_has_adslot_id();
    adslot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Bid.adslot_id)
}

// required uint32 price = 3;
inline bool Bid::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bid::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bid::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bid::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 Bid::price() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Bid.price)
  return price_;
}
inline void Bid::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Bid.price)
}

// required uint64 adid = 4;
inline bool Bid::has_adid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bid::set_has_adid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bid::clear_has_adid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bid::clear_adid() {
  adid_ = GOOGLE_ULONGLONG(0);
  clear_has_adid();
}
inline ::google::protobuf::uint64 Bid::adid() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Bid.adid)
  return adid_;
}
inline void Bid::set_adid(::google::protobuf::uint64 value) {
  set_has_adid();
  adid_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.Bid.adid)
}

// required .toutiao_ssp.api.MaterialMeta creative = 5;
inline bool Bid::has_creative() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bid::set_has_creative() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bid::clear_has_creative() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bid::clear_creative() {
  if (creative_ != NULL) creative_->::toutiao_ssp::api::MaterialMeta::Clear();
  clear_has_creative();
}
inline const ::toutiao_ssp::api::MaterialMeta& Bid::creative() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.Bid.creative)
  return creative_ != NULL ? *creative_ : *default_instance_->creative_;
}
inline ::toutiao_ssp::api::MaterialMeta* Bid::mutable_creative() {
  set_has_creative();
  if (creative_ == NULL) creative_ = new ::toutiao_ssp::api::MaterialMeta;
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.Bid.creative)
  return creative_;
}
inline ::toutiao_ssp::api::MaterialMeta* Bid::release_creative() {
  clear_has_creative();
  ::toutiao_ssp::api::MaterialMeta* temp = creative_;
  creative_ = NULL;
  return temp;
}
inline void Bid::set_allocated_creative(::toutiao_ssp::api::MaterialMeta* creative) {
  delete creative_;
  creative_ = creative;
  if (creative) {
    set_has_creative();
  } else {
    clear_has_creative();
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.Bid.creative)
}

// -------------------------------------------------------------------

// SeatBid

// repeated .toutiao_ssp.api.Bid ads = 1;
inline int SeatBid::ads_size() const {
  return ads_.size();
}
inline void SeatBid::clear_ads() {
  ads_.Clear();
}
inline const ::toutiao_ssp::api::Bid& SeatBid::ads(int index) const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.SeatBid.ads)
  return ads_.Get(index);
}
inline ::toutiao_ssp::api::Bid* SeatBid::mutable_ads(int index) {
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.SeatBid.ads)
  return ads_.Mutable(index);
}
inline ::toutiao_ssp::api::Bid* SeatBid::add_ads() {
  // @@protoc_insertion_point(field_add:toutiao_ssp.api.SeatBid.ads)
  return ads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::Bid >&
SeatBid::ads() const {
  // @@protoc_insertion_point(field_list:toutiao_ssp.api.SeatBid.ads)
  return ads_;
}
inline ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::Bid >*
SeatBid::mutable_ads() {
  // @@protoc_insertion_point(field_mutable_list:toutiao_ssp.api.SeatBid.ads)
  return &ads_;
}

// optional string seat = 2;
inline bool SeatBid::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeatBid::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeatBid::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeatBid::clear_seat() {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_->clear();
  }
  clear_has_seat();
}
inline const ::std::string& SeatBid::seat() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.SeatBid.seat)
  return *seat_;
}
inline void SeatBid::set_seat(const ::std::string& value) {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  seat_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.SeatBid.seat)
}
inline void SeatBid::set_seat(const char* value) {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  seat_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.SeatBid.seat)
}
inline void SeatBid::set_seat(const char* value, size_t size) {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  seat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.SeatBid.seat)
}
inline ::std::string* SeatBid::mutable_seat() {
  set_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.SeatBid.seat)
  return seat_;
}
inline ::std::string* SeatBid::release_seat() {
  clear_has_seat();
  if (seat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = seat_;
    seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SeatBid::set_allocated_seat(::std::string* seat) {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seat_;
  }
  if (seat) {
    set_has_seat();
    seat_ = seat;
  } else {
    clear_has_seat();
    seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.SeatBid.seat)
}

// -------------------------------------------------------------------

// BidResponse

// required string request_id = 1;
inline bool BidResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse::clear_request_id() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_->clear();
  }
  clear_has_request_id();
}
inline const ::std::string& BidResponse::request_id() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.BidResponse.request_id)
  return *request_id_;
}
inline void BidResponse::set_request_id(const ::std::string& value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.BidResponse.request_id)
}
inline void BidResponse::set_request_id(const char* value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:toutiao_ssp.api.BidResponse.request_id)
}
inline void BidResponse::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toutiao_ssp.api.BidResponse.request_id)
}
inline ::std::string* BidResponse::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.BidResponse.request_id)
  return request_id_;
}
inline ::std::string* BidResponse::release_request_id() {
  clear_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_id_;
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (request_id) {
    set_has_request_id();
    request_id_ = request_id;
  } else {
    clear_has_request_id();
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:toutiao_ssp.api.BidResponse.request_id)
}

// repeated .toutiao_ssp.api.SeatBid seatbids = 2;
inline int BidResponse::seatbids_size() const {
  return seatbids_.size();
}
inline void BidResponse::clear_seatbids() {
  seatbids_.Clear();
}
inline const ::toutiao_ssp::api::SeatBid& BidResponse::seatbids(int index) const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.BidResponse.seatbids)
  return seatbids_.Get(index);
}
inline ::toutiao_ssp::api::SeatBid* BidResponse::mutable_seatbids(int index) {
  // @@protoc_insertion_point(field_mutable:toutiao_ssp.api.BidResponse.seatbids)
  return seatbids_.Mutable(index);
}
inline ::toutiao_ssp::api::SeatBid* BidResponse::add_seatbids() {
  // @@protoc_insertion_point(field_add:toutiao_ssp.api.BidResponse.seatbids)
  return seatbids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::SeatBid >&
BidResponse::seatbids() const {
  // @@protoc_insertion_point(field_list:toutiao_ssp.api.BidResponse.seatbids)
  return seatbids_;
}
inline ::google::protobuf::RepeatedPtrField< ::toutiao_ssp::api::SeatBid >*
BidResponse::mutable_seatbids() {
  // @@protoc_insertion_point(field_mutable_list:toutiao_ssp.api.BidResponse.seatbids)
  return &seatbids_;
}

// optional uint64 error_code = 3;
inline bool BidResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse::clear_error_code() {
  error_code_ = GOOGLE_ULONGLONG(0);
  clear_has_error_code();
}
inline ::google::protobuf::uint64 BidResponse::error_code() const {
  // @@protoc_insertion_point(field_get:toutiao_ssp.api.BidResponse.error_code)
  return error_code_;
}
inline void BidResponse::set_error_code(::google::protobuf::uint64 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:toutiao_ssp.api.BidResponse.error_code)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace toutiao_ssp

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::toutiao_ssp::api::AdSlot_Position> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toutiao_ssp::api::AdSlot_Position>() {
  return ::toutiao_ssp::api::AdSlot_Position_descriptor();
}
template <> struct is_proto_enum< ::toutiao_ssp::api::Device_ConnectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toutiao_ssp::api::Device_ConnectionType>() {
  return ::toutiao_ssp::api::Device_ConnectionType_descriptor();
}
template <> struct is_proto_enum< ::toutiao_ssp::api::Device_DeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toutiao_ssp::api::Device_DeviceType>() {
  return ::toutiao_ssp::api::Device_DeviceType_descriptor();
}
template <> struct is_proto_enum< ::toutiao_ssp::api::User_Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toutiao_ssp::api::User_Gender>() {
  return ::toutiao_ssp::api::User_Gender_descriptor();
}
template <> struct is_proto_enum< ::toutiao_ssp::api::AdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toutiao_ssp::api::AdType>() {
  return ::toutiao_ssp::api::AdType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_toutiao_5fssp_5fapi_2eproto__INCLUDED

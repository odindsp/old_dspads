// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: realtime-bidding.proto

#ifndef PROTOBUF_realtime_2dbidding_2eproto__INCLUDED
#define PROTOBUF_realtime_2dbidding_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_realtime_2dbidding_2eproto();
void protobuf_AssignDesc_realtime_2dbidding_2eproto();
void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

class BidRequest;
class BidRequest_Hyperlocal;
class BidRequest_Hyperlocal_Point;
class BidRequest_HyperlocalSet;
class BidRequest_UserDemographic;
class BidRequest_UserList;
class BidRequest_Vertical;
class BidRequest_Device;
class BidRequest_Device_OsVersion;
class BidRequest_KeyValue;
class BidRequest_Mobile;
class BidRequest_Mobile_DeviceOsVersion;
class BidRequest_Video;
class BidRequest_Video_CompanionSlot;
class BidRequest_Video_ContentAttributes;
class BidRequest_AdSlot;
class BidRequest_AdSlot_MatchingAdData;
class BidRequest_AdSlot_MatchingAdData_BuyerPricingRule;
class BidRequest_AdSlot_MatchingAdData_DirectDeal;
class BidRequest_AdSlot_ExchangeBidding;
class BidRequest_AdSlot_NativeAdTemplate;
class BidRequest_AdSlot_AutoRefresh;
class BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings;
class BidRequest_BidResponseFeedback;
class BidRequest_MatchingNetwork;
class BidResponse;
class BidResponse_Ad;
class BidResponse_Ad_NativeAd;
class BidResponse_Ad_NativeAd_Image;
class BidResponse_Ad_AdSlot;
class BidResponse_Ad_TemplateParameter;

enum BidRequest_UserDemographic_Gender {
  BidRequest_UserDemographic_Gender_UNKNOWN = 0,
  BidRequest_UserDemographic_Gender_MALE = 1,
  BidRequest_UserDemographic_Gender_FEMALE = 2
};
bool BidRequest_UserDemographic_Gender_IsValid(int value);
const BidRequest_UserDemographic_Gender BidRequest_UserDemographic_Gender_Gender_MIN = BidRequest_UserDemographic_Gender_UNKNOWN;
const BidRequest_UserDemographic_Gender BidRequest_UserDemographic_Gender_Gender_MAX = BidRequest_UserDemographic_Gender_FEMALE;
const int BidRequest_UserDemographic_Gender_Gender_ARRAYSIZE = BidRequest_UserDemographic_Gender_Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_UserDemographic_Gender_descriptor();
inline const ::std::string& BidRequest_UserDemographic_Gender_Name(BidRequest_UserDemographic_Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_UserDemographic_Gender_descriptor(), value);
}
inline bool BidRequest_UserDemographic_Gender_Parse(
    const ::std::string& name, BidRequest_UserDemographic_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_UserDemographic_Gender>(
    BidRequest_UserDemographic_Gender_descriptor(), name, value);
}
enum BidRequest_Device_DeviceType {
  BidRequest_Device_DeviceType_UNKNOWN_DEVICE = 0,
  BidRequest_Device_DeviceType_HIGHEND_PHONE = 1,
  BidRequest_Device_DeviceType_TABLET = 2,
  BidRequest_Device_DeviceType_PERSONAL_COMPUTER = 3,
  BidRequest_Device_DeviceType_CONNECTED_TV = 4,
  BidRequest_Device_DeviceType_GAME_CONSOLE = 5
};
bool BidRequest_Device_DeviceType_IsValid(int value);
const BidRequest_Device_DeviceType BidRequest_Device_DeviceType_DeviceType_MIN = BidRequest_Device_DeviceType_UNKNOWN_DEVICE;
const BidRequest_Device_DeviceType BidRequest_Device_DeviceType_DeviceType_MAX = BidRequest_Device_DeviceType_GAME_CONSOLE;
const int BidRequest_Device_DeviceType_DeviceType_ARRAYSIZE = BidRequest_Device_DeviceType_DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor();
inline const ::std::string& BidRequest_Device_DeviceType_Name(BidRequest_Device_DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Device_DeviceType_descriptor(), value);
}
inline bool BidRequest_Device_DeviceType_Parse(
    const ::std::string& name, BidRequest_Device_DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Device_DeviceType>(
    BidRequest_Device_DeviceType_descriptor(), name, value);
}
enum BidRequest_Device_ScreenOrientation {
  BidRequest_Device_ScreenOrientation_UNKNOWN_ORIENTATION = 0,
  BidRequest_Device_ScreenOrientation_PORTRAIT = 1,
  BidRequest_Device_ScreenOrientation_LANDSCAPE = 2
};
bool BidRequest_Device_ScreenOrientation_IsValid(int value);
const BidRequest_Device_ScreenOrientation BidRequest_Device_ScreenOrientation_ScreenOrientation_MIN = BidRequest_Device_ScreenOrientation_UNKNOWN_ORIENTATION;
const BidRequest_Device_ScreenOrientation BidRequest_Device_ScreenOrientation_ScreenOrientation_MAX = BidRequest_Device_ScreenOrientation_LANDSCAPE;
const int BidRequest_Device_ScreenOrientation_ScreenOrientation_ARRAYSIZE = BidRequest_Device_ScreenOrientation_ScreenOrientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Device_ScreenOrientation_descriptor();
inline const ::std::string& BidRequest_Device_ScreenOrientation_Name(BidRequest_Device_ScreenOrientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Device_ScreenOrientation_descriptor(), value);
}
inline bool BidRequest_Device_ScreenOrientation_Parse(
    const ::std::string& name, BidRequest_Device_ScreenOrientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Device_ScreenOrientation>(
    BidRequest_Device_ScreenOrientation_descriptor(), name, value);
}
enum BidRequest_Mobile_MobileDeviceType {
  BidRequest_Mobile_MobileDeviceType_UNKNOWN = 0,
  BidRequest_Mobile_MobileDeviceType_HIGHEND_PHONE = 1,
  BidRequest_Mobile_MobileDeviceType_TABLET = 2
};
bool BidRequest_Mobile_MobileDeviceType_IsValid(int value);
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile_MobileDeviceType_MobileDeviceType_MIN = BidRequest_Mobile_MobileDeviceType_UNKNOWN;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile_MobileDeviceType_MobileDeviceType_MAX = BidRequest_Mobile_MobileDeviceType_TABLET;
const int BidRequest_Mobile_MobileDeviceType_MobileDeviceType_ARRAYSIZE = BidRequest_Mobile_MobileDeviceType_MobileDeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileDeviceType_descriptor();
inline const ::std::string& BidRequest_Mobile_MobileDeviceType_Name(BidRequest_Mobile_MobileDeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Mobile_MobileDeviceType_descriptor(), value);
}
inline bool BidRequest_Mobile_MobileDeviceType_Parse(
    const ::std::string& name, BidRequest_Mobile_MobileDeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Mobile_MobileDeviceType>(
    BidRequest_Mobile_MobileDeviceType_descriptor(), name, value);
}
enum BidRequest_Mobile_ScreenOrientation {
  BidRequest_Mobile_ScreenOrientation_SCREEN_ORIENTATION_UNKNOWN = 0,
  BidRequest_Mobile_ScreenOrientation_SCREEN_ORIENTATION_PORTRAIT = 1,
  BidRequest_Mobile_ScreenOrientation_SCREEN_ORIENTATION_LANDSCAPE = 2
};
bool BidRequest_Mobile_ScreenOrientation_IsValid(int value);
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile_ScreenOrientation_ScreenOrientation_MIN = BidRequest_Mobile_ScreenOrientation_SCREEN_ORIENTATION_UNKNOWN;
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile_ScreenOrientation_ScreenOrientation_MAX = BidRequest_Mobile_ScreenOrientation_SCREEN_ORIENTATION_LANDSCAPE;
const int BidRequest_Mobile_ScreenOrientation_ScreenOrientation_ARRAYSIZE = BidRequest_Mobile_ScreenOrientation_ScreenOrientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_ScreenOrientation_descriptor();
inline const ::std::string& BidRequest_Mobile_ScreenOrientation_Name(BidRequest_Mobile_ScreenOrientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Mobile_ScreenOrientation_descriptor(), value);
}
inline bool BidRequest_Mobile_ScreenOrientation_Parse(
    const ::std::string& name, BidRequest_Mobile_ScreenOrientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Mobile_ScreenOrientation>(
    BidRequest_Mobile_ScreenOrientation_descriptor(), name, value);
}
enum BidRequest_Video_CompanionSlot_CreativeFormat {
  BidRequest_Video_CompanionSlot_CreativeFormat_IMAGE_CREATIVE = 0,
  BidRequest_Video_CompanionSlot_CreativeFormat_FLASH_CREATIVE = 1,
  BidRequest_Video_CompanionSlot_CreativeFormat_HTML_CREATIVE = 2
};
bool BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(int value);
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot_CreativeFormat_CreativeFormat_MIN = BidRequest_Video_CompanionSlot_CreativeFormat_IMAGE_CREATIVE;
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot_CreativeFormat_CreativeFormat_MAX = BidRequest_Video_CompanionSlot_CreativeFormat_HTML_CREATIVE;
const int BidRequest_Video_CompanionSlot_CreativeFormat_CreativeFormat_ARRAYSIZE = BidRequest_Video_CompanionSlot_CreativeFormat_CreativeFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Video_CompanionSlot_CreativeFormat_descriptor();
inline const ::std::string& BidRequest_Video_CompanionSlot_CreativeFormat_Name(BidRequest_Video_CompanionSlot_CreativeFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Video_CompanionSlot_CreativeFormat_descriptor(), value);
}
inline bool BidRequest_Video_CompanionSlot_CreativeFormat_Parse(
    const ::std::string& name, BidRequest_Video_CompanionSlot_CreativeFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Video_CompanionSlot_CreativeFormat>(
    BidRequest_Video_CompanionSlot_CreativeFormat_descriptor(), name, value);
}
enum BidRequest_Video_Placement {
  BidRequest_Video_Placement_UNKNOWN_PLACEMENT = 0,
  BidRequest_Video_Placement_INSTREAM = 1,
  BidRequest_Video_Placement_INTERSTITIAL = 2
};
bool BidRequest_Video_Placement_IsValid(int value);
const BidRequest_Video_Placement BidRequest_Video_Placement_Placement_MIN = BidRequest_Video_Placement_UNKNOWN_PLACEMENT;
const BidRequest_Video_Placement BidRequest_Video_Placement_Placement_MAX = BidRequest_Video_Placement_INTERSTITIAL;
const int BidRequest_Video_Placement_Placement_ARRAYSIZE = BidRequest_Video_Placement_Placement_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Video_Placement_descriptor();
inline const ::std::string& BidRequest_Video_Placement_Name(BidRequest_Video_Placement value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Video_Placement_descriptor(), value);
}
inline bool BidRequest_Video_Placement_Parse(
    const ::std::string& name, BidRequest_Video_Placement* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Video_Placement>(
    BidRequest_Video_Placement_descriptor(), name, value);
}
enum BidRequest_Video_VideoPlaybackMethod {
  BidRequest_Video_VideoPlaybackMethod_METHOD_UNKNOWN = 0,
  BidRequest_Video_VideoPlaybackMethod_AUTO_PLAY_SOUND_ON = 1,
  BidRequest_Video_VideoPlaybackMethod_AUTO_PLAY_SOUND_OFF = 2,
  BidRequest_Video_VideoPlaybackMethod_CLICK_TO_PLAY = 3
};
bool BidRequest_Video_VideoPlaybackMethod_IsValid(int value);
const BidRequest_Video_VideoPlaybackMethod BidRequest_Video_VideoPlaybackMethod_VideoPlaybackMethod_MIN = BidRequest_Video_VideoPlaybackMethod_METHOD_UNKNOWN;
const BidRequest_Video_VideoPlaybackMethod BidRequest_Video_VideoPlaybackMethod_VideoPlaybackMethod_MAX = BidRequest_Video_VideoPlaybackMethod_CLICK_TO_PLAY;
const int BidRequest_Video_VideoPlaybackMethod_VideoPlaybackMethod_ARRAYSIZE = BidRequest_Video_VideoPlaybackMethod_VideoPlaybackMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoPlaybackMethod_descriptor();
inline const ::std::string& BidRequest_Video_VideoPlaybackMethod_Name(BidRequest_Video_VideoPlaybackMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Video_VideoPlaybackMethod_descriptor(), value);
}
inline bool BidRequest_Video_VideoPlaybackMethod_Parse(
    const ::std::string& name, BidRequest_Video_VideoPlaybackMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Video_VideoPlaybackMethod>(
    BidRequest_Video_VideoPlaybackMethod_descriptor(), name, value);
}
enum BidRequest_Video_SkippableBidRequestType {
  BidRequest_Video_SkippableBidRequestType_ALLOW_SKIPPABLE = 0,
  BidRequest_Video_SkippableBidRequestType_REQUIRE_SKIPPABLE = 1,
  BidRequest_Video_SkippableBidRequestType_BLOCK_SKIPPABLE = 2
};
bool BidRequest_Video_SkippableBidRequestType_IsValid(int value);
const BidRequest_Video_SkippableBidRequestType BidRequest_Video_SkippableBidRequestType_SkippableBidRequestType_MIN = BidRequest_Video_SkippableBidRequestType_ALLOW_SKIPPABLE;
const BidRequest_Video_SkippableBidRequestType BidRequest_Video_SkippableBidRequestType_SkippableBidRequestType_MAX = BidRequest_Video_SkippableBidRequestType_BLOCK_SKIPPABLE;
const int BidRequest_Video_SkippableBidRequestType_SkippableBidRequestType_ARRAYSIZE = BidRequest_Video_SkippableBidRequestType_SkippableBidRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Video_SkippableBidRequestType_descriptor();
inline const ::std::string& BidRequest_Video_SkippableBidRequestType_Name(BidRequest_Video_SkippableBidRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Video_SkippableBidRequestType_descriptor(), value);
}
inline bool BidRequest_Video_SkippableBidRequestType_Parse(
    const ::std::string& name, BidRequest_Video_SkippableBidRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Video_SkippableBidRequestType>(
    BidRequest_Video_SkippableBidRequestType_descriptor(), name, value);
}
enum BidRequest_Video_VideoFormat {
  BidRequest_Video_VideoFormat_VIDEO_FLV = 0,
  BidRequest_Video_VideoFormat_VIDEO_MP4 = 1,
  BidRequest_Video_VideoFormat_YT_HOSTED = 2,
  BidRequest_Video_VideoFormat_VPAID_FLASH = 3,
  BidRequest_Video_VideoFormat_VPAID_JS = 4
};
bool BidRequest_Video_VideoFormat_IsValid(int value);
const BidRequest_Video_VideoFormat BidRequest_Video_VideoFormat_VideoFormat_MIN = BidRequest_Video_VideoFormat_VIDEO_FLV;
const BidRequest_Video_VideoFormat BidRequest_Video_VideoFormat_VideoFormat_MAX = BidRequest_Video_VideoFormat_VPAID_JS;
const int BidRequest_Video_VideoFormat_VideoFormat_ARRAYSIZE = BidRequest_Video_VideoFormat_VideoFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor();
inline const ::std::string& BidRequest_Video_VideoFormat_Name(BidRequest_Video_VideoFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Video_VideoFormat_descriptor(), value);
}
inline bool BidRequest_Video_VideoFormat_Parse(
    const ::std::string& name, BidRequest_Video_VideoFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Video_VideoFormat>(
    BidRequest_Video_VideoFormat_descriptor(), name, value);
}
enum BidRequest_Video_EndCapSupport {
  BidRequest_Video_EndCapSupport_END_CAP_NOT_ENABLED = 0,
  BidRequest_Video_EndCapSupport_END_CAP_OPTIONAL = 1,
  BidRequest_Video_EndCapSupport_END_CAP_FORBIDDEN = 2,
  BidRequest_Video_EndCapSupport_END_CAP_REQUIRED = 3
};
bool BidRequest_Video_EndCapSupport_IsValid(int value);
const BidRequest_Video_EndCapSupport BidRequest_Video_EndCapSupport_EndCapSupport_MIN = BidRequest_Video_EndCapSupport_END_CAP_NOT_ENABLED;
const BidRequest_Video_EndCapSupport BidRequest_Video_EndCapSupport_EndCapSupport_MAX = BidRequest_Video_EndCapSupport_END_CAP_REQUIRED;
const int BidRequest_Video_EndCapSupport_EndCapSupport_ARRAYSIZE = BidRequest_Video_EndCapSupport_EndCapSupport_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Video_EndCapSupport_descriptor();
inline const ::std::string& BidRequest_Video_EndCapSupport_Name(BidRequest_Video_EndCapSupport value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Video_EndCapSupport_descriptor(), value);
}
inline bool BidRequest_Video_EndCapSupport_Parse(
    const ::std::string& name, BidRequest_Video_EndCapSupport* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Video_EndCapSupport>(
    BidRequest_Video_EndCapSupport_descriptor(), name, value);
}
enum BidRequest_Video_InventoryType {
  BidRequest_Video_InventoryType_WEB_VIDEO = 0,
  BidRequest_Video_InventoryType_GAMES = 1,
  BidRequest_Video_InventoryType_MOBILE_INTERSTITIAL = 2,
  BidRequest_Video_InventoryType_MOBILE_APP_VIDEO = 3
};
bool BidRequest_Video_InventoryType_IsValid(int value);
const BidRequest_Video_InventoryType BidRequest_Video_InventoryType_InventoryType_MIN = BidRequest_Video_InventoryType_WEB_VIDEO;
const BidRequest_Video_InventoryType BidRequest_Video_InventoryType_InventoryType_MAX = BidRequest_Video_InventoryType_MOBILE_APP_VIDEO;
const int BidRequest_Video_InventoryType_InventoryType_ARRAYSIZE = BidRequest_Video_InventoryType_InventoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Video_InventoryType_descriptor();
inline const ::std::string& BidRequest_Video_InventoryType_Name(BidRequest_Video_InventoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Video_InventoryType_descriptor(), value);
}
inline bool BidRequest_Video_InventoryType_Parse(
    const ::std::string& name, BidRequest_Video_InventoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Video_InventoryType>(
    BidRequest_Video_InventoryType_descriptor(), name, value);
}
enum BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType {
  BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_UNKNOWN_DEAL_TYPE = 0,
  BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_PREFERRED_DEAL = 1,
  BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_PRIVATE_AUCTION = 2
};
bool BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_IsValid(int value);
const BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_DealType_MIN = BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_UNKNOWN_DEAL_TYPE;
const BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_DealType_MAX = BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_PRIVATE_AUCTION;
const int BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_DealType_ARRAYSIZE = BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_DealType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_descriptor();
inline const ::std::string& BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_Name(BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_descriptor(), value);
}
inline bool BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_Parse(
    const ::std::string& name, BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType>(
    BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_descriptor(), name, value);
}
enum BidRequest_AdSlot_NativeAdTemplate_Fields {
  BidRequest_AdSlot_NativeAdTemplate_Fields_HEADLINE = 1,
  BidRequest_AdSlot_NativeAdTemplate_Fields_BODY = 2,
  BidRequest_AdSlot_NativeAdTemplate_Fields_CALL_TO_ACTION = 4,
  BidRequest_AdSlot_NativeAdTemplate_Fields_ADVERTISER = 8,
  BidRequest_AdSlot_NativeAdTemplate_Fields_IMAGE = 16,
  BidRequest_AdSlot_NativeAdTemplate_Fields_LOGO = 32,
  BidRequest_AdSlot_NativeAdTemplate_Fields_APP_ICON = 64,
  BidRequest_AdSlot_NativeAdTemplate_Fields_STAR_RATING = 128,
  BidRequest_AdSlot_NativeAdTemplate_Fields_PRICE = 256,
  BidRequest_AdSlot_NativeAdTemplate_Fields_STORE = 512
};
bool BidRequest_AdSlot_NativeAdTemplate_Fields_IsValid(int value);
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate_Fields_Fields_MIN = BidRequest_AdSlot_NativeAdTemplate_Fields_HEADLINE;
const BidRequest_AdSlot_NativeAdTemplate_Fields BidRequest_AdSlot_NativeAdTemplate_Fields_Fields_MAX = BidRequest_AdSlot_NativeAdTemplate_Fields_STORE;
const int BidRequest_AdSlot_NativeAdTemplate_Fields_Fields_ARRAYSIZE = BidRequest_AdSlot_NativeAdTemplate_Fields_Fields_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_NativeAdTemplate_Fields_descriptor();
inline const ::std::string& BidRequest_AdSlot_NativeAdTemplate_Fields_Name(BidRequest_AdSlot_NativeAdTemplate_Fields value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_NativeAdTemplate_Fields_descriptor(), value);
}
inline bool BidRequest_AdSlot_NativeAdTemplate_Fields_Parse(
    const ::std::string& name, BidRequest_AdSlot_NativeAdTemplate_Fields* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_NativeAdTemplate_Fields>(
    BidRequest_AdSlot_NativeAdTemplate_Fields_descriptor(), name, value);
}
enum BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType {
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_UNKNOWN_AUTO_REFRESH_TYPE = 0,
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_USER_ACTION = 1,
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_EVENT = 2,
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_TIME = 3
};
bool BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_IsValid(int value);
const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_AutoRefreshType_MIN = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_UNKNOWN_AUTO_REFRESH_TYPE;
const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_AutoRefreshType_MAX = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_TIME;
const int BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_AutoRefreshType_ARRAYSIZE = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_AutoRefreshType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_descriptor();
inline const ::std::string& BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_Name(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_descriptor(), value);
}
inline bool BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_Parse(
    const ::std::string& name, BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType>(
    BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_descriptor(), name, value);
}
enum BidRequest_AdSlot_SlotVisibility {
  BidRequest_AdSlot_SlotVisibility_NO_DETECTION = 0,
  BidRequest_AdSlot_SlotVisibility_ABOVE_THE_FOLD = 1,
  BidRequest_AdSlot_SlotVisibility_BELOW_THE_FOLD = 2
};
bool BidRequest_AdSlot_SlotVisibility_IsValid(int value);
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot_SlotVisibility_SlotVisibility_MIN = BidRequest_AdSlot_SlotVisibility_NO_DETECTION;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot_SlotVisibility_SlotVisibility_MAX = BidRequest_AdSlot_SlotVisibility_BELOW_THE_FOLD;
const int BidRequest_AdSlot_SlotVisibility_SlotVisibility_ARRAYSIZE = BidRequest_AdSlot_SlotVisibility_SlotVisibility_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_SlotVisibility_descriptor();
inline const ::std::string& BidRequest_AdSlot_SlotVisibility_Name(BidRequest_AdSlot_SlotVisibility value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_SlotVisibility_descriptor(), value);
}
inline bool BidRequest_AdSlot_SlotVisibility_Parse(
    const ::std::string& name, BidRequest_AdSlot_SlotVisibility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_SlotVisibility>(
    BidRequest_AdSlot_SlotVisibility_descriptor(), name, value);
}
enum BidRequest_AdSlot_IFramingState {
  BidRequest_AdSlot_IFramingState_UNKNOWN_IFRAME_STATE = 0,
  BidRequest_AdSlot_IFramingState_NO_IFRAME = 1,
  BidRequest_AdSlot_IFramingState_SAME_DOMAIN_IFRAME = 2,
  BidRequest_AdSlot_IFramingState_CROSS_DOMAIN_IFRAME = 3
};
bool BidRequest_AdSlot_IFramingState_IsValid(int value);
const BidRequest_AdSlot_IFramingState BidRequest_AdSlot_IFramingState_IFramingState_MIN = BidRequest_AdSlot_IFramingState_UNKNOWN_IFRAME_STATE;
const BidRequest_AdSlot_IFramingState BidRequest_AdSlot_IFramingState_IFramingState_MAX = BidRequest_AdSlot_IFramingState_CROSS_DOMAIN_IFRAME;
const int BidRequest_AdSlot_IFramingState_IFramingState_ARRAYSIZE = BidRequest_AdSlot_IFramingState_IFramingState_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_IFramingState_descriptor();
inline const ::std::string& BidRequest_AdSlot_IFramingState_Name(BidRequest_AdSlot_IFramingState value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_IFramingState_descriptor(), value);
}
inline bool BidRequest_AdSlot_IFramingState_Parse(
    const ::std::string& name, BidRequest_AdSlot_IFramingState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_IFramingState>(
    BidRequest_AdSlot_IFramingState_descriptor(), name, value);
}
enum BidRequest_AdSlot_IFramingDepth {
  BidRequest_AdSlot_IFramingDepth_UNKNOWN_IFRAME_DEPTH = 0,
  BidRequest_AdSlot_IFramingDepth_NOT_IN_IFRAME = 1,
  BidRequest_AdSlot_IFramingDepth_ONE_IFRAME = 2,
  BidRequest_AdSlot_IFramingDepth_MULTIPLE_IFRAME = 3
};
bool BidRequest_AdSlot_IFramingDepth_IsValid(int value);
const BidRequest_AdSlot_IFramingDepth BidRequest_AdSlot_IFramingDepth_IFramingDepth_MIN = BidRequest_AdSlot_IFramingDepth_UNKNOWN_IFRAME_DEPTH;
const BidRequest_AdSlot_IFramingDepth BidRequest_AdSlot_IFramingDepth_IFramingDepth_MAX = BidRequest_AdSlot_IFramingDepth_MULTIPLE_IFRAME;
const int BidRequest_AdSlot_IFramingDepth_IFramingDepth_ARRAYSIZE = BidRequest_AdSlot_IFramingDepth_IFramingDepth_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_IFramingDepth_descriptor();
inline const ::std::string& BidRequest_AdSlot_IFramingDepth_Name(BidRequest_AdSlot_IFramingDepth value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_IFramingDepth_descriptor(), value);
}
inline bool BidRequest_AdSlot_IFramingDepth_Parse(
    const ::std::string& name, BidRequest_AdSlot_IFramingDepth* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_IFramingDepth>(
    BidRequest_AdSlot_IFramingDepth_descriptor(), name, value);
}
enum BidRequest_AdSlot_MediationStatus {
  BidRequest_AdSlot_MediationStatus_UNKNOWN = 0,
  BidRequest_AdSlot_MediationStatus_DIRECT_REQUEST = 1,
  BidRequest_AdSlot_MediationStatus_MEDIATED = 2
};
bool BidRequest_AdSlot_MediationStatus_IsValid(int value);
const BidRequest_AdSlot_MediationStatus BidRequest_AdSlot_MediationStatus_MediationStatus_MIN = BidRequest_AdSlot_MediationStatus_UNKNOWN;
const BidRequest_AdSlot_MediationStatus BidRequest_AdSlot_MediationStatus_MediationStatus_MAX = BidRequest_AdSlot_MediationStatus_MEDIATED;
const int BidRequest_AdSlot_MediationStatus_MediationStatus_ARRAYSIZE = BidRequest_AdSlot_MediationStatus_MediationStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_MediationStatus_descriptor();
inline const ::std::string& BidRequest_AdSlot_MediationStatus_Name(BidRequest_AdSlot_MediationStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_MediationStatus_descriptor(), value);
}
inline bool BidRequest_AdSlot_MediationStatus_Parse(
    const ::std::string& name, BidRequest_AdSlot_MediationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_MediationStatus>(
    BidRequest_AdSlot_MediationStatus_descriptor(), name, value);
}
enum BidRequest_AdSlot_Stickiness {
  BidRequest_AdSlot_Stickiness_UNKNOWN_STICKINESS = 0,
  BidRequest_AdSlot_Stickiness_IS_STICKY = 1
};
bool BidRequest_AdSlot_Stickiness_IsValid(int value);
const BidRequest_AdSlot_Stickiness BidRequest_AdSlot_Stickiness_Stickiness_MIN = BidRequest_AdSlot_Stickiness_UNKNOWN_STICKINESS;
const BidRequest_AdSlot_Stickiness BidRequest_AdSlot_Stickiness_Stickiness_MAX = BidRequest_AdSlot_Stickiness_IS_STICKY;
const int BidRequest_AdSlot_Stickiness_Stickiness_ARRAYSIZE = BidRequest_AdSlot_Stickiness_Stickiness_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_Stickiness_descriptor();
inline const ::std::string& BidRequest_AdSlot_Stickiness_Name(BidRequest_AdSlot_Stickiness value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_Stickiness_descriptor(), value);
}
inline bool BidRequest_AdSlot_Stickiness_Parse(
    const ::std::string& name, BidRequest_AdSlot_Stickiness* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_Stickiness>(
    BidRequest_AdSlot_Stickiness_descriptor(), name, value);
}
enum BidRequest_AdSlot_Renderer {
  BidRequest_AdSlot_Renderer_UNKNOWN_RENDERER = 0,
  BidRequest_AdSlot_Renderer_GOOGLE = 1,
  BidRequest_AdSlot_Renderer_PUBLISHER = 2
};
bool BidRequest_AdSlot_Renderer_IsValid(int value);
const BidRequest_AdSlot_Renderer BidRequest_AdSlot_Renderer_Renderer_MIN = BidRequest_AdSlot_Renderer_UNKNOWN_RENDERER;
const BidRequest_AdSlot_Renderer BidRequest_AdSlot_Renderer_Renderer_MAX = BidRequest_AdSlot_Renderer_PUBLISHER;
const int BidRequest_AdSlot_Renderer_Renderer_ARRAYSIZE = BidRequest_AdSlot_Renderer_Renderer_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_Renderer_descriptor();
inline const ::std::string& BidRequest_AdSlot_Renderer_Name(BidRequest_AdSlot_Renderer value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_Renderer_descriptor(), value);
}
inline bool BidRequest_AdSlot_Renderer_Parse(
    const ::std::string& name, BidRequest_AdSlot_Renderer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_Renderer>(
    BidRequest_AdSlot_Renderer_descriptor(), name, value);
}
enum BidRequest_AdSlot_AmpAdRequestType {
  BidRequest_AdSlot_AmpAdRequestType_UNKNOWN_AMP = 0,
  BidRequest_AdSlot_AmpAdRequestType_NON_AMP_PAGE = 1,
  BidRequest_AdSlot_AmpAdRequestType_AMP_PAGE_LATE_REQUEST = 2
};
bool BidRequest_AdSlot_AmpAdRequestType_IsValid(int value);
const BidRequest_AdSlot_AmpAdRequestType BidRequest_AdSlot_AmpAdRequestType_AmpAdRequestType_MIN = BidRequest_AdSlot_AmpAdRequestType_UNKNOWN_AMP;
const BidRequest_AdSlot_AmpAdRequestType BidRequest_AdSlot_AmpAdRequestType_AmpAdRequestType_MAX = BidRequest_AdSlot_AmpAdRequestType_AMP_PAGE_LATE_REQUEST;
const int BidRequest_AdSlot_AmpAdRequestType_AmpAdRequestType_ARRAYSIZE = BidRequest_AdSlot_AmpAdRequestType_AmpAdRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_AmpAdRequestType_descriptor();
inline const ::std::string& BidRequest_AdSlot_AmpAdRequestType_Name(BidRequest_AdSlot_AmpAdRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_AmpAdRequestType_descriptor(), value);
}
inline bool BidRequest_AdSlot_AmpAdRequestType_Parse(
    const ::std::string& name, BidRequest_AdSlot_AmpAdRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_AmpAdRequestType>(
    BidRequest_AdSlot_AmpAdRequestType_descriptor(), name, value);
}
enum BidRequest_UserDataTreatment {
  BidRequest_UserDataTreatment_TAG_FOR_CHILD_DIRECTED_TREATMENT = 0
};
bool BidRequest_UserDataTreatment_IsValid(int value);
const BidRequest_UserDataTreatment BidRequest_UserDataTreatment_UserDataTreatment_MIN = BidRequest_UserDataTreatment_TAG_FOR_CHILD_DIRECTED_TREATMENT;
const BidRequest_UserDataTreatment BidRequest_UserDataTreatment_UserDataTreatment_MAX = BidRequest_UserDataTreatment_TAG_FOR_CHILD_DIRECTED_TREATMENT;
const int BidRequest_UserDataTreatment_UserDataTreatment_ARRAYSIZE = BidRequest_UserDataTreatment_UserDataTreatment_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_UserDataTreatment_descriptor();
inline const ::std::string& BidRequest_UserDataTreatment_Name(BidRequest_UserDataTreatment value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_UserDataTreatment_descriptor(), value);
}
inline bool BidRequest_UserDataTreatment_Parse(
    const ::std::string& name, BidRequest_UserDataTreatment* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_UserDataTreatment>(
    BidRequest_UserDataTreatment_descriptor(), name, value);
}
enum BidRequest_PublisherType {
  BidRequest_PublisherType_UNKNOWN_PUBLISHER_TYPE = 0,
  BidRequest_PublisherType_ADX_PUBLISHER_OWNED_AND_OPERATED = 1,
  BidRequest_PublisherType_ADX_PUBLISHER_REPRESENTED = 2,
  BidRequest_PublisherType_GOOGLE_REPRESENTED = 3
};
bool BidRequest_PublisherType_IsValid(int value);
const BidRequest_PublisherType BidRequest_PublisherType_PublisherType_MIN = BidRequest_PublisherType_UNKNOWN_PUBLISHER_TYPE;
const BidRequest_PublisherType BidRequest_PublisherType_PublisherType_MAX = BidRequest_PublisherType_GOOGLE_REPRESENTED;
const int BidRequest_PublisherType_PublisherType_ARRAYSIZE = BidRequest_PublisherType_PublisherType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_PublisherType_descriptor();
inline const ::std::string& BidRequest_PublisherType_Name(BidRequest_PublisherType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_PublisherType_descriptor(), value);
}
inline bool BidRequest_PublisherType_Parse(
    const ::std::string& name, BidRequest_PublisherType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_PublisherType>(
    BidRequest_PublisherType_descriptor(), name, value);
}
// ===================================================================

class BidRequest_Hyperlocal_Point : public ::google::protobuf::Message {
 public:
  BidRequest_Hyperlocal_Point();
  virtual ~BidRequest_Hyperlocal_Point();

  BidRequest_Hyperlocal_Point(const BidRequest_Hyperlocal_Point& from);

  inline BidRequest_Hyperlocal_Point& operator=(const BidRequest_Hyperlocal_Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Hyperlocal_Point& default_instance();

  void Swap(BidRequest_Hyperlocal_Point* other);

  // implements Message ----------------------------------------------

  BidRequest_Hyperlocal_Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Hyperlocal_Point& from);
  void MergeFrom(const BidRequest_Hyperlocal_Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional float longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline float longitude() const;
  inline void set_longitude(float value);

  // @@protoc_insertion_point(class_scope:BidRequest.Hyperlocal.Point)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float latitude_;
  float longitude_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Hyperlocal_Point* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Hyperlocal : public ::google::protobuf::Message {
 public:
  BidRequest_Hyperlocal();
  virtual ~BidRequest_Hyperlocal();

  BidRequest_Hyperlocal(const BidRequest_Hyperlocal& from);

  inline BidRequest_Hyperlocal& operator=(const BidRequest_Hyperlocal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Hyperlocal& default_instance();

  void Swap(BidRequest_Hyperlocal* other);

  // implements Message ----------------------------------------------

  BidRequest_Hyperlocal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Hyperlocal& from);
  void MergeFrom(const BidRequest_Hyperlocal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Hyperlocal_Point Point;

  // accessors -------------------------------------------------------

  // repeated .BidRequest.Hyperlocal.Point corners = 1;
  inline int corners_size() const;
  inline void clear_corners();
  static const int kCornersFieldNumber = 1;
  inline const ::BidRequest_Hyperlocal_Point& corners(int index) const;
  inline ::BidRequest_Hyperlocal_Point* mutable_corners(int index);
  inline ::BidRequest_Hyperlocal_Point* add_corners();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal_Point >&
      corners() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal_Point >*
      mutable_corners();

  // @@protoc_insertion_point(class_scope:BidRequest.Hyperlocal)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal_Point > corners_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Hyperlocal* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_HyperlocalSet : public ::google::protobuf::Message {
 public:
  BidRequest_HyperlocalSet();
  virtual ~BidRequest_HyperlocalSet();

  BidRequest_HyperlocalSet(const BidRequest_HyperlocalSet& from);

  inline BidRequest_HyperlocalSet& operator=(const BidRequest_HyperlocalSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_HyperlocalSet& default_instance();

  void Swap(BidRequest_HyperlocalSet* other);

  // implements Message ----------------------------------------------

  BidRequest_HyperlocalSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_HyperlocalSet& from);
  void MergeFrom(const BidRequest_HyperlocalSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BidRequest.Hyperlocal hyperlocal = 1;
  inline int hyperlocal_size() const;
  inline void clear_hyperlocal();
  static const int kHyperlocalFieldNumber = 1;
  inline const ::BidRequest_Hyperlocal& hyperlocal(int index) const;
  inline ::BidRequest_Hyperlocal* mutable_hyperlocal(int index);
  inline ::BidRequest_Hyperlocal* add_hyperlocal();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal >&
      hyperlocal() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal >*
      mutable_hyperlocal();

  // optional .BidRequest.Hyperlocal.Point center_point = 2;
  inline bool has_center_point() const;
  inline void clear_center_point();
  static const int kCenterPointFieldNumber = 2;
  inline const ::BidRequest_Hyperlocal_Point& center_point() const;
  inline ::BidRequest_Hyperlocal_Point* mutable_center_point();
  inline ::BidRequest_Hyperlocal_Point* release_center_point();
  inline void set_allocated_center_point(::BidRequest_Hyperlocal_Point* center_point);

  // @@protoc_insertion_point(class_scope:BidRequest.HyperlocalSet)
 private:
  inline void set_has_center_point();
  inline void clear_has_center_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal > hyperlocal_;
  ::BidRequest_Hyperlocal_Point* center_point_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_HyperlocalSet* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_UserDemographic : public ::google::protobuf::Message {
 public:
  BidRequest_UserDemographic();
  virtual ~BidRequest_UserDemographic();

  BidRequest_UserDemographic(const BidRequest_UserDemographic& from);

  inline BidRequest_UserDemographic& operator=(const BidRequest_UserDemographic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_UserDemographic& default_instance();

  void Swap(BidRequest_UserDemographic* other);

  // implements Message ----------------------------------------------

  BidRequest_UserDemographic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_UserDemographic& from);
  void MergeFrom(const BidRequest_UserDemographic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_UserDemographic_Gender Gender;
  static const Gender UNKNOWN = BidRequest_UserDemographic_Gender_UNKNOWN;
  static const Gender MALE = BidRequest_UserDemographic_Gender_MALE;
  static const Gender FEMALE = BidRequest_UserDemographic_Gender_FEMALE;
  static inline bool Gender_IsValid(int value) {
    return BidRequest_UserDemographic_Gender_IsValid(value);
  }
  static const Gender Gender_MIN =
    BidRequest_UserDemographic_Gender_Gender_MIN;
  static const Gender Gender_MAX =
    BidRequest_UserDemographic_Gender_Gender_MAX;
  static const int Gender_ARRAYSIZE =
    BidRequest_UserDemographic_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gender_descriptor() {
    return BidRequest_UserDemographic_Gender_descriptor();
  }
  static inline const ::std::string& Gender_Name(Gender value) {
    return BidRequest_UserDemographic_Gender_Name(value);
  }
  static inline bool Gender_Parse(const ::std::string& name,
      Gender* value) {
    return BidRequest_UserDemographic_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .BidRequest.UserDemographic.Gender gender = 1 [default = UNKNOWN];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 1;
  inline ::BidRequest_UserDemographic_Gender gender() const;
  inline void set_gender(::BidRequest_UserDemographic_Gender value);

  // optional int32 age_low = 2 [default = 0];
  inline bool has_age_low() const;
  inline void clear_age_low();
  static const int kAgeLowFieldNumber = 2;
  inline ::google::protobuf::int32 age_low() const;
  inline void set_age_low(::google::protobuf::int32 value);

  // optional int32 age_high = 3 [default = 999];
  inline bool has_age_high() const;
  inline void clear_age_high();
  static const int kAgeHighFieldNumber = 3;
  inline ::google::protobuf::int32 age_high() const;
  inline void set_age_high(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidRequest.UserDemographic)
 private:
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_age_low();
  inline void clear_has_age_low();
  inline void set_has_age_high();
  inline void clear_has_age_high();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int gender_;
  ::google::protobuf::int32 age_low_;
  ::google::protobuf::int32 age_high_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_UserDemographic* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_UserList : public ::google::protobuf::Message {
 public:
  BidRequest_UserList();
  virtual ~BidRequest_UserList();

  BidRequest_UserList(const BidRequest_UserList& from);

  inline BidRequest_UserList& operator=(const BidRequest_UserList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_UserList& default_instance();

  void Swap(BidRequest_UserList* other);

  // implements Message ----------------------------------------------

  BidRequest_UserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_UserList& from);
  void MergeFrom(const BidRequest_UserList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 age_seconds = 2;
  inline bool has_age_seconds() const;
  inline void clear_age_seconds();
  static const int kAgeSecondsFieldNumber = 2;
  inline ::google::protobuf::int32 age_seconds() const;
  inline void set_age_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidRequest.UserList)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_age_seconds();
  inline void clear_has_age_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 age_seconds_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_UserList* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Vertical : public ::google::protobuf::Message {
 public:
  BidRequest_Vertical();
  virtual ~BidRequest_Vertical();

  BidRequest_Vertical(const BidRequest_Vertical& from);

  inline BidRequest_Vertical& operator=(const BidRequest_Vertical& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Vertical& default_instance();

  void Swap(BidRequest_Vertical* other);

  // implements Message ----------------------------------------------

  BidRequest_Vertical* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Vertical& from);
  void MergeFrom(const BidRequest_Vertical& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required float weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline float weight() const;
  inline void set_weight(float value);

  // @@protoc_insertion_point(class_scope:BidRequest.Vertical)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  float weight_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Vertical* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Device_OsVersion : public ::google::protobuf::Message {
 public:
  BidRequest_Device_OsVersion();
  virtual ~BidRequest_Device_OsVersion();

  BidRequest_Device_OsVersion(const BidRequest_Device_OsVersion& from);

  inline BidRequest_Device_OsVersion& operator=(const BidRequest_Device_OsVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Device_OsVersion& default_instance();

  void Swap(BidRequest_Device_OsVersion* other);

  // implements Message ----------------------------------------------

  BidRequest_Device_OsVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Device_OsVersion& from);
  void MergeFrom(const BidRequest_Device_OsVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 major = 1;
  inline bool has_major() const;
  inline void clear_major();
  static const int kMajorFieldNumber = 1;
  inline ::google::protobuf::int32 major() const;
  inline void set_major(::google::protobuf::int32 value);

  // optional int32 minor = 2;
  inline bool has_minor() const;
  inline void clear_minor();
  static const int kMinorFieldNumber = 2;
  inline ::google::protobuf::int32 minor() const;
  inline void set_minor(::google::protobuf::int32 value);

  // optional int32 micro = 3;
  inline bool has_micro() const;
  inline void clear_micro();
  static const int kMicroFieldNumber = 3;
  inline ::google::protobuf::int32 micro() const;
  inline void set_micro(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidRequest.Device.OsVersion)
 private:
  inline void set_has_major();
  inline void clear_has_major();
  inline void set_has_minor();
  inline void clear_has_minor();
  inline void set_has_micro();
  inline void clear_has_micro();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 major_;
  ::google::protobuf::int32 minor_;
  ::google::protobuf::int32 micro_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Device_OsVersion* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Device : public ::google::protobuf::Message {
 public:
  BidRequest_Device();
  virtual ~BidRequest_Device();

  BidRequest_Device(const BidRequest_Device& from);

  inline BidRequest_Device& operator=(const BidRequest_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Device& default_instance();

  void Swap(BidRequest_Device* other);

  // implements Message ----------------------------------------------

  BidRequest_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Device& from);
  void MergeFrom(const BidRequest_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Device_OsVersion OsVersion;

  typedef BidRequest_Device_DeviceType DeviceType;
  static const DeviceType UNKNOWN_DEVICE = BidRequest_Device_DeviceType_UNKNOWN_DEVICE;
  static const DeviceType HIGHEND_PHONE = BidRequest_Device_DeviceType_HIGHEND_PHONE;
  static const DeviceType TABLET = BidRequest_Device_DeviceType_TABLET;
  static const DeviceType PERSONAL_COMPUTER = BidRequest_Device_DeviceType_PERSONAL_COMPUTER;
  static const DeviceType CONNECTED_TV = BidRequest_Device_DeviceType_CONNECTED_TV;
  static const DeviceType GAME_CONSOLE = BidRequest_Device_DeviceType_GAME_CONSOLE;
  static inline bool DeviceType_IsValid(int value) {
    return BidRequest_Device_DeviceType_IsValid(value);
  }
  static const DeviceType DeviceType_MIN =
    BidRequest_Device_DeviceType_DeviceType_MIN;
  static const DeviceType DeviceType_MAX =
    BidRequest_Device_DeviceType_DeviceType_MAX;
  static const int DeviceType_ARRAYSIZE =
    BidRequest_Device_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceType_descriptor() {
    return BidRequest_Device_DeviceType_descriptor();
  }
  static inline const ::std::string& DeviceType_Name(DeviceType value) {
    return BidRequest_Device_DeviceType_Name(value);
  }
  static inline bool DeviceType_Parse(const ::std::string& name,
      DeviceType* value) {
    return BidRequest_Device_DeviceType_Parse(name, value);
  }

  typedef BidRequest_Device_ScreenOrientation ScreenOrientation;
  static const ScreenOrientation UNKNOWN_ORIENTATION = BidRequest_Device_ScreenOrientation_UNKNOWN_ORIENTATION;
  static const ScreenOrientation PORTRAIT = BidRequest_Device_ScreenOrientation_PORTRAIT;
  static const ScreenOrientation LANDSCAPE = BidRequest_Device_ScreenOrientation_LANDSCAPE;
  static inline bool ScreenOrientation_IsValid(int value) {
    return BidRequest_Device_ScreenOrientation_IsValid(value);
  }
  static const ScreenOrientation ScreenOrientation_MIN =
    BidRequest_Device_ScreenOrientation_ScreenOrientation_MIN;
  static const ScreenOrientation ScreenOrientation_MAX =
    BidRequest_Device_ScreenOrientation_ScreenOrientation_MAX;
  static const int ScreenOrientation_ARRAYSIZE =
    BidRequest_Device_ScreenOrientation_ScreenOrientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScreenOrientation_descriptor() {
    return BidRequest_Device_ScreenOrientation_descriptor();
  }
  static inline const ::std::string& ScreenOrientation_Name(ScreenOrientation value) {
    return BidRequest_Device_ScreenOrientation_Name(value);
  }
  static inline bool ScreenOrientation_Parse(const ::std::string& name,
      ScreenOrientation* value) {
    return BidRequest_Device_ScreenOrientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .BidRequest.Device.DeviceType device_type = 1 [default = UNKNOWN_DEVICE];
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 1;
  inline ::BidRequest_Device_DeviceType device_type() const;
  inline void set_device_type(::BidRequest_Device_DeviceType value);

  // optional string platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string brand = 3 [default = ""];
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 3;
  inline const ::std::string& brand() const;
  inline void set_brand(const ::std::string& value);
  inline void set_brand(const char* value);
  inline void set_brand(const char* value, size_t size);
  inline ::std::string* mutable_brand();
  inline ::std::string* release_brand();
  inline void set_allocated_brand(::std::string* brand);

  // optional string model = 4 [default = ""];
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 4;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional .BidRequest.Device.OsVersion os_version = 5;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 5;
  inline const ::BidRequest_Device_OsVersion& os_version() const;
  inline ::BidRequest_Device_OsVersion* mutable_os_version();
  inline ::BidRequest_Device_OsVersion* release_os_version();
  inline void set_allocated_os_version(::BidRequest_Device_OsVersion* os_version);

  // optional int64 carrier_id = 6;
  inline bool has_carrier_id() const;
  inline void clear_carrier_id();
  static const int kCarrierIdFieldNumber = 6;
  inline ::google::protobuf::int64 carrier_id() const;
  inline void set_carrier_id(::google::protobuf::int64 value);

  // optional int32 screen_width = 7 [default = 0];
  inline bool has_screen_width() const;
  inline void clear_screen_width();
  static const int kScreenWidthFieldNumber = 7;
  inline ::google::protobuf::int32 screen_width() const;
  inline void set_screen_width(::google::protobuf::int32 value);

  // optional int32 screen_height = 8 [default = 0];
  inline bool has_screen_height() const;
  inline void clear_screen_height();
  static const int kScreenHeightFieldNumber = 8;
  inline ::google::protobuf::int32 screen_height() const;
  inline void set_screen_height(::google::protobuf::int32 value);

  // optional int32 screen_pixel_ratio_millis = 9 [default = 0];
  inline bool has_screen_pixel_ratio_millis() const;
  inline void clear_screen_pixel_ratio_millis();
  static const int kScreenPixelRatioMillisFieldNumber = 9;
  inline ::google::protobuf::int32 screen_pixel_ratio_millis() const;
  inline void set_screen_pixel_ratio_millis(::google::protobuf::int32 value);

  // optional .BidRequest.Device.ScreenOrientation screen_orientation = 10 [default = UNKNOWN_ORIENTATION];
  inline bool has_screen_orientation() const;
  inline void clear_screen_orientation();
  static const int kScreenOrientationFieldNumber = 10;
  inline ::BidRequest_Device_ScreenOrientation screen_orientation() const;
  inline void set_screen_orientation(::BidRequest_Device_ScreenOrientation value);

  // optional string hardware_version = 11;
  inline bool has_hardware_version() const;
  inline void clear_hardware_version();
  static const int kHardwareVersionFieldNumber = 11;
  inline const ::std::string& hardware_version() const;
  inline void set_hardware_version(const ::std::string& value);
  inline void set_hardware_version(const char* value);
  inline void set_hardware_version(const char* value, size_t size);
  inline ::std::string* mutable_hardware_version();
  inline ::std::string* release_hardware_version();
  inline void set_allocated_hardware_version(::std::string* hardware_version);

  // @@protoc_insertion_point(class_scope:BidRequest.Device)
 private:
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  inline void set_has_carrier_id();
  inline void clear_has_carrier_id();
  inline void set_has_screen_width();
  inline void clear_has_screen_width();
  inline void set_has_screen_height();
  inline void clear_has_screen_height();
  inline void set_has_screen_pixel_ratio_millis();
  inline void clear_has_screen_pixel_ratio_millis();
  inline void set_has_screen_orientation();
  inline void clear_has_screen_orientation();
  inline void set_has_hardware_version();
  inline void clear_has_hardware_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* platform_;
  ::std::string* brand_;
  ::std::string* model_;
  int device_type_;
  ::google::protobuf::int32 screen_width_;
  ::BidRequest_Device_OsVersion* os_version_;
  ::google::protobuf::int64 carrier_id_;
  ::google::protobuf::int32 screen_height_;
  ::google::protobuf::int32 screen_pixel_ratio_millis_;
  ::std::string* hardware_version_;
  int screen_orientation_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Device* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_KeyValue : public ::google::protobuf::Message {
 public:
  BidRequest_KeyValue();
  virtual ~BidRequest_KeyValue();

  BidRequest_KeyValue(const BidRequest_KeyValue& from);

  inline BidRequest_KeyValue& operator=(const BidRequest_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_KeyValue& default_instance();

  void Swap(BidRequest_KeyValue* other);

  // implements Message ----------------------------------------------

  BidRequest_KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_KeyValue& from);
  void MergeFrom(const BidRequest_KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:BidRequest.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile_DeviceOsVersion : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile_DeviceOsVersion();
  virtual ~BidRequest_Mobile_DeviceOsVersion();

  BidRequest_Mobile_DeviceOsVersion(const BidRequest_Mobile_DeviceOsVersion& from);

  inline BidRequest_Mobile_DeviceOsVersion& operator=(const BidRequest_Mobile_DeviceOsVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile_DeviceOsVersion& default_instance();

  void Swap(BidRequest_Mobile_DeviceOsVersion* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile_DeviceOsVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile_DeviceOsVersion& from);
  void MergeFrom(const BidRequest_Mobile_DeviceOsVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 os_version_major = 1;
  inline bool has_os_version_major() const;
  inline void clear_os_version_major();
  static const int kOsVersionMajorFieldNumber = 1;
  inline ::google::protobuf::int32 os_version_major() const;
  inline void set_os_version_major(::google::protobuf::int32 value);

  // optional int32 os_version_minor = 2;
  inline bool has_os_version_minor() const;
  inline void clear_os_version_minor();
  static const int kOsVersionMinorFieldNumber = 2;
  inline ::google::protobuf::int32 os_version_minor() const;
  inline void set_os_version_minor(::google::protobuf::int32 value);

  // optional int32 os_version_micro = 3;
  inline bool has_os_version_micro() const;
  inline void clear_os_version_micro();
  static const int kOsVersionMicroFieldNumber = 3;
  inline ::google::protobuf::int32 os_version_micro() const;
  inline void set_os_version_micro(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidRequest.Mobile.DeviceOsVersion)
 private:
  inline void set_has_os_version_major();
  inline void clear_has_os_version_major();
  inline void set_has_os_version_minor();
  inline void clear_has_os_version_minor();
  inline void set_has_os_version_micro();
  inline void clear_has_os_version_micro();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 os_version_major_;
  ::google::protobuf::int32 os_version_minor_;
  ::google::protobuf::int32 os_version_micro_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile_DeviceOsVersion* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile();
  virtual ~BidRequest_Mobile();

  BidRequest_Mobile(const BidRequest_Mobile& from);

  inline BidRequest_Mobile& operator=(const BidRequest_Mobile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile& default_instance();

  void Swap(BidRequest_Mobile* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile& from);
  void MergeFrom(const BidRequest_Mobile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Mobile_DeviceOsVersion DeviceOsVersion;

  typedef BidRequest_Mobile_MobileDeviceType MobileDeviceType;
  static const MobileDeviceType UNKNOWN = BidRequest_Mobile_MobileDeviceType_UNKNOWN;
  static const MobileDeviceType HIGHEND_PHONE = BidRequest_Mobile_MobileDeviceType_HIGHEND_PHONE;
  static const MobileDeviceType TABLET = BidRequest_Mobile_MobileDeviceType_TABLET;
  static inline bool MobileDeviceType_IsValid(int value) {
    return BidRequest_Mobile_MobileDeviceType_IsValid(value);
  }
  static const MobileDeviceType MobileDeviceType_MIN =
    BidRequest_Mobile_MobileDeviceType_MobileDeviceType_MIN;
  static const MobileDeviceType MobileDeviceType_MAX =
    BidRequest_Mobile_MobileDeviceType_MobileDeviceType_MAX;
  static const int MobileDeviceType_ARRAYSIZE =
    BidRequest_Mobile_MobileDeviceType_MobileDeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MobileDeviceType_descriptor() {
    return BidRequest_Mobile_MobileDeviceType_descriptor();
  }
  static inline const ::std::string& MobileDeviceType_Name(MobileDeviceType value) {
    return BidRequest_Mobile_MobileDeviceType_Name(value);
  }
  static inline bool MobileDeviceType_Parse(const ::std::string& name,
      MobileDeviceType* value) {
    return BidRequest_Mobile_MobileDeviceType_Parse(name, value);
  }

  typedef BidRequest_Mobile_ScreenOrientation ScreenOrientation;
  static const ScreenOrientation SCREEN_ORIENTATION_UNKNOWN = BidRequest_Mobile_ScreenOrientation_SCREEN_ORIENTATION_UNKNOWN;
  static const ScreenOrientation SCREEN_ORIENTATION_PORTRAIT = BidRequest_Mobile_ScreenOrientation_SCREEN_ORIENTATION_PORTRAIT;
  static const ScreenOrientation SCREEN_ORIENTATION_LANDSCAPE = BidRequest_Mobile_ScreenOrientation_SCREEN_ORIENTATION_LANDSCAPE;
  static inline bool ScreenOrientation_IsValid(int value) {
    return BidRequest_Mobile_ScreenOrientation_IsValid(value);
  }
  static const ScreenOrientation ScreenOrientation_MIN =
    BidRequest_Mobile_ScreenOrientation_ScreenOrientation_MIN;
  static const ScreenOrientation ScreenOrientation_MAX =
    BidRequest_Mobile_ScreenOrientation_ScreenOrientation_MAX;
  static const int ScreenOrientation_ARRAYSIZE =
    BidRequest_Mobile_ScreenOrientation_ScreenOrientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScreenOrientation_descriptor() {
    return BidRequest_Mobile_ScreenOrientation_descriptor();
  }
  static inline const ::std::string& ScreenOrientation_Name(ScreenOrientation value) {
    return BidRequest_Mobile_ScreenOrientation_Name(value);
  }
  static inline bool ScreenOrientation_Parse(const ::std::string& name,
      ScreenOrientation* value) {
    return BidRequest_Mobile_ScreenOrientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool is_app = 7 [default = false];
  inline bool has_is_app() const;
  inline void clear_is_app();
  static const int kIsAppFieldNumber = 7;
  inline bool is_app() const;
  inline void set_is_app(bool value);

  // optional string app_id = 6;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 6;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const char* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  inline void set_allocated_app_id(::std::string* app_id);

  // optional bool is_interstitial_request = 10 [default = false];
  inline bool has_is_interstitial_request() const;
  inline void clear_is_interstitial_request();
  static const int kIsInterstitialRequestFieldNumber = 10;
  inline bool is_interstitial_request() const;
  inline void set_is_interstitial_request(bool value);

  // repeated int32 app_category_ids = 11;
  inline int app_category_ids_size() const;
  inline void clear_app_category_ids();
  static const int kAppCategoryIdsFieldNumber = 11;
  inline ::google::protobuf::int32 app_category_ids(int index) const;
  inline void set_app_category_ids(int index, ::google::protobuf::int32 value);
  inline void add_app_category_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      app_category_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_app_category_ids();

  // optional bool is_mobile_web_optimized = 17 [default = false];
  inline bool has_is_mobile_web_optimized() const;
  inline void clear_is_mobile_web_optimized();
  static const int kIsMobileWebOptimizedFieldNumber = 17;
  inline bool is_mobile_web_optimized() const;
  inline void set_is_mobile_web_optimized(bool value);

  // optional bytes encrypted_advertising_id = 20;
  inline bool has_encrypted_advertising_id() const;
  inline void clear_encrypted_advertising_id();
  static const int kEncryptedAdvertisingIdFieldNumber = 20;
  inline const ::std::string& encrypted_advertising_id() const;
  inline void set_encrypted_advertising_id(const ::std::string& value);
  inline void set_encrypted_advertising_id(const char* value);
  inline void set_encrypted_advertising_id(const void* value, size_t size);
  inline ::std::string* mutable_encrypted_advertising_id();
  inline ::std::string* release_encrypted_advertising_id();
  inline void set_allocated_encrypted_advertising_id(::std::string* encrypted_advertising_id);

  // optional bytes advertising_id = 27;
  inline bool has_advertising_id() const;
  inline void clear_advertising_id();
  static const int kAdvertisingIdFieldNumber = 27;
  inline const ::std::string& advertising_id() const;
  inline void set_advertising_id(const ::std::string& value);
  inline void set_advertising_id(const char* value);
  inline void set_advertising_id(const void* value, size_t size);
  inline ::std::string* mutable_advertising_id();
  inline ::std::string* release_advertising_id();
  inline void set_allocated_advertising_id(::std::string* advertising_id);

  // optional bytes encrypted_hashed_idfa = 21;
  inline bool has_encrypted_hashed_idfa() const;
  inline void clear_encrypted_hashed_idfa();
  static const int kEncryptedHashedIdfaFieldNumber = 21;
  inline const ::std::string& encrypted_hashed_idfa() const;
  inline void set_encrypted_hashed_idfa(const ::std::string& value);
  inline void set_encrypted_hashed_idfa(const char* value);
  inline void set_encrypted_hashed_idfa(const void* value, size_t size);
  inline ::std::string* mutable_encrypted_hashed_idfa();
  inline ::std::string* release_encrypted_hashed_idfa();
  inline void set_allocated_encrypted_hashed_idfa(::std::string* encrypted_hashed_idfa);

  // optional bytes hashed_idfa = 28;
  inline bool has_hashed_idfa() const;
  inline void clear_hashed_idfa();
  static const int kHashedIdfaFieldNumber = 28;
  inline const ::std::string& hashed_idfa() const;
  inline void set_hashed_idfa(const ::std::string& value);
  inline void set_hashed_idfa(const char* value);
  inline void set_hashed_idfa(const void* value, size_t size);
  inline ::std::string* mutable_hashed_idfa();
  inline ::std::string* release_hashed_idfa();
  inline void set_allocated_hashed_idfa(::std::string* hashed_idfa);

  // optional bytes constrained_usage_encrypted_advertising_id = 22;
  inline bool has_constrained_usage_encrypted_advertising_id() const;
  inline void clear_constrained_usage_encrypted_advertising_id();
  static const int kConstrainedUsageEncryptedAdvertisingIdFieldNumber = 22;
  inline const ::std::string& constrained_usage_encrypted_advertising_id() const;
  inline void set_constrained_usage_encrypted_advertising_id(const ::std::string& value);
  inline void set_constrained_usage_encrypted_advertising_id(const char* value);
  inline void set_constrained_usage_encrypted_advertising_id(const void* value, size_t size);
  inline ::std::string* mutable_constrained_usage_encrypted_advertising_id();
  inline ::std::string* release_constrained_usage_encrypted_advertising_id();
  inline void set_allocated_constrained_usage_encrypted_advertising_id(::std::string* constrained_usage_encrypted_advertising_id);

  // optional bytes constrained_usage_advertising_id = 29;
  inline bool has_constrained_usage_advertising_id() const;
  inline void clear_constrained_usage_advertising_id();
  static const int kConstrainedUsageAdvertisingIdFieldNumber = 29;
  inline const ::std::string& constrained_usage_advertising_id() const;
  inline void set_constrained_usage_advertising_id(const ::std::string& value);
  inline void set_constrained_usage_advertising_id(const char* value);
  inline void set_constrained_usage_advertising_id(const void* value, size_t size);
  inline ::std::string* mutable_constrained_usage_advertising_id();
  inline ::std::string* release_constrained_usage_advertising_id();
  inline void set_allocated_constrained_usage_advertising_id(::std::string* constrained_usage_advertising_id);

  // optional bytes constrained_usage_encrypted_hashed_idfa = 23;
  inline bool has_constrained_usage_encrypted_hashed_idfa() const;
  inline void clear_constrained_usage_encrypted_hashed_idfa();
  static const int kConstrainedUsageEncryptedHashedIdfaFieldNumber = 23;
  inline const ::std::string& constrained_usage_encrypted_hashed_idfa() const;
  inline void set_constrained_usage_encrypted_hashed_idfa(const ::std::string& value);
  inline void set_constrained_usage_encrypted_hashed_idfa(const char* value);
  inline void set_constrained_usage_encrypted_hashed_idfa(const void* value, size_t size);
  inline ::std::string* mutable_constrained_usage_encrypted_hashed_idfa();
  inline ::std::string* release_constrained_usage_encrypted_hashed_idfa();
  inline void set_allocated_constrained_usage_encrypted_hashed_idfa(::std::string* constrained_usage_encrypted_hashed_idfa);

  // optional bytes constrained_usage_hashed_idfa = 30;
  inline bool has_constrained_usage_hashed_idfa() const;
  inline void clear_constrained_usage_hashed_idfa();
  static const int kConstrainedUsageHashedIdfaFieldNumber = 30;
  inline const ::std::string& constrained_usage_hashed_idfa() const;
  inline void set_constrained_usage_hashed_idfa(const ::std::string& value);
  inline void set_constrained_usage_hashed_idfa(const char* value);
  inline void set_constrained_usage_hashed_idfa(const void* value, size_t size);
  inline ::std::string* mutable_constrained_usage_hashed_idfa();
  inline ::std::string* release_constrained_usage_hashed_idfa();
  inline void set_allocated_constrained_usage_hashed_idfa(::std::string* constrained_usage_hashed_idfa);

  // optional string app_name = 24;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 24;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const char* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // optional float app_rating = 25;
  inline bool has_app_rating() const;
  inline void clear_app_rating();
  static const int kAppRatingFieldNumber = 25;
  inline float app_rating() const;
  inline void set_app_rating(float value);

  // optional string DEPRECATED_app_name = 1;
  inline bool has_deprecated_app_name() const;
  inline void clear_deprecated_app_name();
  static const int kDEPRECATEDAppNameFieldNumber = 1;
  inline const ::std::string& deprecated_app_name() const;
  inline void set_deprecated_app_name(const ::std::string& value);
  inline void set_deprecated_app_name(const char* value);
  inline void set_deprecated_app_name(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_app_name();
  inline ::std::string* release_deprecated_app_name();
  inline void set_allocated_deprecated_app_name(::std::string* deprecated_app_name);

  // optional string DEPRECATED_company_name = 2;
  inline bool has_deprecated_company_name() const;
  inline void clear_deprecated_company_name();
  static const int kDEPRECATEDCompanyNameFieldNumber = 2;
  inline const ::std::string& deprecated_company_name() const;
  inline void set_deprecated_company_name(const ::std::string& value);
  inline void set_deprecated_company_name(const char* value);
  inline void set_deprecated_company_name(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_company_name();
  inline ::std::string* release_deprecated_company_name();
  inline void set_allocated_deprecated_company_name(::std::string* deprecated_company_name);

  // optional string DEPRECATED_platform = 3;
  inline bool has_deprecated_platform() const;
  inline void clear_deprecated_platform();
  static const int kDEPRECATEDPlatformFieldNumber = 3;
  inline const ::std::string& deprecated_platform() const;
  inline void set_deprecated_platform(const ::std::string& value);
  inline void set_deprecated_platform(const char* value);
  inline void set_deprecated_platform(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_platform();
  inline ::std::string* release_deprecated_platform();
  inline void set_allocated_deprecated_platform(::std::string* deprecated_platform);

  // optional string DEPRECATED_carrier_name = 4;
  inline bool has_deprecated_carrier_name() const;
  inline void clear_deprecated_carrier_name();
  static const int kDEPRECATEDCarrierNameFieldNumber = 4;
  inline const ::std::string& deprecated_carrier_name() const;
  inline void set_deprecated_carrier_name(const ::std::string& value);
  inline void set_deprecated_carrier_name(const char* value);
  inline void set_deprecated_carrier_name(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_carrier_name();
  inline ::std::string* release_deprecated_carrier_name();
  inline void set_allocated_deprecated_carrier_name(::std::string* deprecated_carrier_name);

  // optional string DEPRECATED_carrier_country = 5;
  inline bool has_deprecated_carrier_country() const;
  inline void clear_deprecated_carrier_country();
  static const int kDEPRECATEDCarrierCountryFieldNumber = 5;
  inline const ::std::string& deprecated_carrier_country() const;
  inline void set_deprecated_carrier_country(const ::std::string& value);
  inline void set_deprecated_carrier_country(const char* value);
  inline void set_deprecated_carrier_country(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_carrier_country();
  inline ::std::string* release_deprecated_carrier_country();
  inline void set_allocated_deprecated_carrier_country(::std::string* deprecated_carrier_country);

  // optional .BidRequest.Mobile.MobileDeviceType DEPRECATED_mobile_device_type = 8 [default = UNKNOWN];
  inline bool has_deprecated_mobile_device_type() const;
  inline void clear_deprecated_mobile_device_type();
  static const int kDEPRECATEDMobileDeviceTypeFieldNumber = 8;
  inline ::BidRequest_Mobile_MobileDeviceType deprecated_mobile_device_type() const;
  inline void set_deprecated_mobile_device_type(::BidRequest_Mobile_MobileDeviceType value);

  // optional int32 DEPRECATED_screen_orientation = 9 [default = 0];
  inline bool has_deprecated_screen_orientation() const;
  inline void clear_deprecated_screen_orientation();
  static const int kDEPRECATEDScreenOrientationFieldNumber = 9;
  inline ::google::protobuf::int32 deprecated_screen_orientation() const;
  inline void set_deprecated_screen_orientation(::google::protobuf::int32 value);

  // optional string DEPRECATED_brand = 12;
  inline bool has_deprecated_brand() const;
  inline void clear_deprecated_brand();
  static const int kDEPRECATEDBrandFieldNumber = 12;
  inline const ::std::string& deprecated_brand() const;
  inline void set_deprecated_brand(const ::std::string& value);
  inline void set_deprecated_brand(const char* value);
  inline void set_deprecated_brand(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_brand();
  inline ::std::string* release_deprecated_brand();
  inline void set_allocated_deprecated_brand(::std::string* deprecated_brand);

  // optional string DEPRECATED_model = 13;
  inline bool has_deprecated_model() const;
  inline void clear_deprecated_model();
  static const int kDEPRECATEDModelFieldNumber = 13;
  inline const ::std::string& deprecated_model() const;
  inline void set_deprecated_model(const ::std::string& value);
  inline void set_deprecated_model(const char* value);
  inline void set_deprecated_model(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_model();
  inline ::std::string* release_deprecated_model();
  inline void set_allocated_deprecated_model(::std::string* deprecated_model);

  // optional .BidRequest.Mobile.DeviceOsVersion DEPRECATED_os_version = 14;
  inline bool has_deprecated_os_version() const;
  inline void clear_deprecated_os_version();
  static const int kDEPRECATEDOsVersionFieldNumber = 14;
  inline const ::BidRequest_Mobile_DeviceOsVersion& deprecated_os_version() const;
  inline ::BidRequest_Mobile_DeviceOsVersion* mutable_deprecated_os_version();
  inline ::BidRequest_Mobile_DeviceOsVersion* release_deprecated_os_version();
  inline void set_allocated_deprecated_os_version(::BidRequest_Mobile_DeviceOsVersion* deprecated_os_version);

  // optional int32 DEPRECATED_screen_width = 15;
  inline bool has_deprecated_screen_width() const;
  inline void clear_deprecated_screen_width();
  static const int kDEPRECATEDScreenWidthFieldNumber = 15;
  inline ::google::protobuf::int32 deprecated_screen_width() const;
  inline void set_deprecated_screen_width(::google::protobuf::int32 value);

  // optional int32 DEPRECATED_screen_height = 16;
  inline bool has_deprecated_screen_height() const;
  inline void clear_deprecated_screen_height();
  static const int kDEPRECATEDScreenHeightFieldNumber = 16;
  inline ::google::protobuf::int32 deprecated_screen_height() const;
  inline void set_deprecated_screen_height(::google::protobuf::int32 value);

  // optional int64 DEPRECATED_carrier_id = 18;
  inline bool has_deprecated_carrier_id() const;
  inline void clear_deprecated_carrier_id();
  static const int kDEPRECATEDCarrierIdFieldNumber = 18;
  inline ::google::protobuf::int64 deprecated_carrier_id() const;
  inline void set_deprecated_carrier_id(::google::protobuf::int64 value);

  // optional int32 DEPRECATED_device_pixel_ratio_millis = 19 [default = 1000];
  inline bool has_deprecated_device_pixel_ratio_millis() const;
  inline void clear_deprecated_device_pixel_ratio_millis();
  static const int kDEPRECATEDDevicePixelRatioMillisFieldNumber = 19;
  inline ::google::protobuf::int32 deprecated_device_pixel_ratio_millis() const;
  inline void set_deprecated_device_pixel_ratio_millis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidRequest.Mobile)
 private:
  inline void set_has_is_app();
  inline void clear_has_is_app();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_is_interstitial_request();
  inline void clear_has_is_interstitial_request();
  inline void set_has_is_mobile_web_optimized();
  inline void clear_has_is_mobile_web_optimized();
  inline void set_has_encrypted_advertising_id();
  inline void clear_has_encrypted_advertising_id();
  inline void set_has_advertising_id();
  inline void clear_has_advertising_id();
  inline void set_has_encrypted_hashed_idfa();
  inline void clear_has_encrypted_hashed_idfa();
  inline void set_has_hashed_idfa();
  inline void clear_has_hashed_idfa();
  inline void set_has_constrained_usage_encrypted_advertising_id();
  inline void clear_has_constrained_usage_encrypted_advertising_id();
  inline void set_has_constrained_usage_advertising_id();
  inline void clear_has_constrained_usage_advertising_id();
  inline void set_has_constrained_usage_encrypted_hashed_idfa();
  inline void clear_has_constrained_usage_encrypted_hashed_idfa();
  inline void set_has_constrained_usage_hashed_idfa();
  inline void clear_has_constrained_usage_hashed_idfa();
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_app_rating();
  inline void clear_has_app_rating();
  inline void set_has_deprecated_app_name();
  inline void clear_has_deprecated_app_name();
  inline void set_has_deprecated_company_name();
  inline void clear_has_deprecated_company_name();
  inline void set_has_deprecated_platform();
  inline void clear_has_deprecated_platform();
  inline void set_has_deprecated_carrier_name();
  inline void clear_has_deprecated_carrier_name();
  inline void set_has_deprecated_carrier_country();
  inline void clear_has_deprecated_carrier_country();
  inline void set_has_deprecated_mobile_device_type();
  inline void clear_has_deprecated_mobile_device_type();
  inline void set_has_deprecated_screen_orientation();
  inline void clear_has_deprecated_screen_orientation();
  inline void set_has_deprecated_brand();
  inline void clear_has_deprecated_brand();
  inline void set_has_deprecated_model();
  inline void clear_has_deprecated_model();
  inline void set_has_deprecated_os_version();
  inline void clear_has_deprecated_os_version();
  inline void set_has_deprecated_screen_width();
  inline void clear_has_deprecated_screen_width();
  inline void set_has_deprecated_screen_height();
  inline void clear_has_deprecated_screen_height();
  inline void set_has_deprecated_carrier_id();
  inline void clear_has_deprecated_carrier_id();
  inline void set_has_deprecated_device_pixel_ratio_millis();
  inline void clear_has_deprecated_device_pixel_ratio_millis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* app_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > app_category_ids_;
  ::std::string* encrypted_advertising_id_;
  bool is_app_;
  bool is_interstitial_request_;
  bool is_mobile_web_optimized_;
  float app_rating_;
  ::std::string* advertising_id_;
  ::std::string* encrypted_hashed_idfa_;
  ::std::string* hashed_idfa_;
  ::std::string* constrained_usage_encrypted_advertising_id_;
  ::std::string* constrained_usage_advertising_id_;
  ::std::string* constrained_usage_encrypted_hashed_idfa_;
  ::std::string* constrained_usage_hashed_idfa_;
  ::std::string* app_name_;
  ::std::string* deprecated_app_name_;
  ::std::string* deprecated_company_name_;
  ::std::string* deprecated_platform_;
  ::std::string* deprecated_carrier_name_;
  ::std::string* deprecated_carrier_country_;
  int deprecated_mobile_device_type_;
  ::google::protobuf::int32 deprecated_screen_orientation_;
  ::std::string* deprecated_brand_;
  ::std::string* deprecated_model_;
  ::BidRequest_Mobile_DeviceOsVersion* deprecated_os_version_;
  ::google::protobuf::int32 deprecated_screen_width_;
  ::google::protobuf::int32 deprecated_screen_height_;
  ::google::protobuf::int64 deprecated_carrier_id_;
  ::google::protobuf::int32 deprecated_device_pixel_ratio_millis_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Video_CompanionSlot : public ::google::protobuf::Message {
 public:
  BidRequest_Video_CompanionSlot();
  virtual ~BidRequest_Video_CompanionSlot();

  BidRequest_Video_CompanionSlot(const BidRequest_Video_CompanionSlot& from);

  inline BidRequest_Video_CompanionSlot& operator=(const BidRequest_Video_CompanionSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Video_CompanionSlot& default_instance();

  void Swap(BidRequest_Video_CompanionSlot* other);

  // implements Message ----------------------------------------------

  BidRequest_Video_CompanionSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Video_CompanionSlot& from);
  void MergeFrom(const BidRequest_Video_CompanionSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Video_CompanionSlot_CreativeFormat CreativeFormat;
  static const CreativeFormat IMAGE_CREATIVE = BidRequest_Video_CompanionSlot_CreativeFormat_IMAGE_CREATIVE;
  static const CreativeFormat FLASH_CREATIVE = BidRequest_Video_CompanionSlot_CreativeFormat_FLASH_CREATIVE;
  static const CreativeFormat HTML_CREATIVE = BidRequest_Video_CompanionSlot_CreativeFormat_HTML_CREATIVE;
  static inline bool CreativeFormat_IsValid(int value) {
    return BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(value);
  }
  static const CreativeFormat CreativeFormat_MIN =
    BidRequest_Video_CompanionSlot_CreativeFormat_CreativeFormat_MIN;
  static const CreativeFormat CreativeFormat_MAX =
    BidRequest_Video_CompanionSlot_CreativeFormat_CreativeFormat_MAX;
  static const int CreativeFormat_ARRAYSIZE =
    BidRequest_Video_CompanionSlot_CreativeFormat_CreativeFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CreativeFormat_descriptor() {
    return BidRequest_Video_CompanionSlot_CreativeFormat_descriptor();
  }
  static inline const ::std::string& CreativeFormat_Name(CreativeFormat value) {
    return BidRequest_Video_CompanionSlot_CreativeFormat_Name(value);
  }
  static inline bool CreativeFormat_Parse(const ::std::string& name,
      CreativeFormat* value) {
    return BidRequest_Video_CompanionSlot_CreativeFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 height = 1 [packed = true];
  inline int height_size() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 1;
  inline ::google::protobuf::int32 height(int index) const;
  inline void set_height(int index, ::google::protobuf::int32 value);
  inline void add_height(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      height() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_height();

  // repeated int32 width = 2 [packed = true];
  inline int width_size() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width(int index) const;
  inline void set_width(int index, ::google::protobuf::int32 value);
  inline void add_width(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_width();

  // repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
  inline int creative_format_size() const;
  inline void clear_creative_format();
  static const int kCreativeFormatFieldNumber = 3;
  inline ::BidRequest_Video_CompanionSlot_CreativeFormat creative_format(int index) const;
  inline void set_creative_format(int index, ::BidRequest_Video_CompanionSlot_CreativeFormat value);
  inline void add_creative_format(::BidRequest_Video_CompanionSlot_CreativeFormat value);
  inline const ::google::protobuf::RepeatedField<int>& creative_format() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_creative_format();

  // @@protoc_insertion_point(class_scope:BidRequest.Video.CompanionSlot)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > height_;
  mutable int _height_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > width_;
  mutable int _width_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> creative_format_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Video_CompanionSlot* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Video_ContentAttributes : public ::google::protobuf::Message {
 public:
  BidRequest_Video_ContentAttributes();
  virtual ~BidRequest_Video_ContentAttributes();

  BidRequest_Video_ContentAttributes(const BidRequest_Video_ContentAttributes& from);

  inline BidRequest_Video_ContentAttributes& operator=(const BidRequest_Video_ContentAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Video_ContentAttributes& default_instance();

  void Swap(BidRequest_Video_ContentAttributes* other);

  // implements Message ----------------------------------------------

  BidRequest_Video_ContentAttributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Video_ContentAttributes& from);
  void MergeFrom(const BidRequest_Video_ContentAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 duration_seconds = 2;
  inline bool has_duration_seconds() const;
  inline void clear_duration_seconds();
  static const int kDurationSecondsFieldNumber = 2;
  inline ::google::protobuf::int32 duration_seconds() const;
  inline void set_duration_seconds(::google::protobuf::int32 value);

  // repeated string keywords = 3;
  inline int keywords_size() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 3;
  inline const ::std::string& keywords(int index) const;
  inline ::std::string* mutable_keywords(int index);
  inline void set_keywords(int index, const ::std::string& value);
  inline void set_keywords(int index, const char* value);
  inline void set_keywords(int index, const char* value, size_t size);
  inline ::std::string* add_keywords();
  inline void add_keywords(const ::std::string& value);
  inline void add_keywords(const char* value);
  inline void add_keywords(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keywords() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keywords();

  // @@protoc_insertion_point(class_scope:BidRequest.Video.ContentAttributes)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_duration_seconds();
  inline void clear_has_duration_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keywords_;
  ::google::protobuf::int32 duration_seconds_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Video_ContentAttributes* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Video : public ::google::protobuf::Message {
 public:
  BidRequest_Video();
  virtual ~BidRequest_Video();

  BidRequest_Video(const BidRequest_Video& from);

  inline BidRequest_Video& operator=(const BidRequest_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Video& default_instance();

  void Swap(BidRequest_Video* other);

  // implements Message ----------------------------------------------

  BidRequest_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Video& from);
  void MergeFrom(const BidRequest_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Video_CompanionSlot CompanionSlot;
  typedef BidRequest_Video_ContentAttributes ContentAttributes;

  typedef BidRequest_Video_Placement Placement;
  static const Placement UNKNOWN_PLACEMENT = BidRequest_Video_Placement_UNKNOWN_PLACEMENT;
  static const Placement INSTREAM = BidRequest_Video_Placement_INSTREAM;
  static const Placement INTERSTITIAL = BidRequest_Video_Placement_INTERSTITIAL;
  static inline bool Placement_IsValid(int value) {
    return BidRequest_Video_Placement_IsValid(value);
  }
  static const Placement Placement_MIN =
    BidRequest_Video_Placement_Placement_MIN;
  static const Placement Placement_MAX =
    BidRequest_Video_Placement_Placement_MAX;
  static const int Placement_ARRAYSIZE =
    BidRequest_Video_Placement_Placement_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Placement_descriptor() {
    return BidRequest_Video_Placement_descriptor();
  }
  static inline const ::std::string& Placement_Name(Placement value) {
    return BidRequest_Video_Placement_Name(value);
  }
  static inline bool Placement_Parse(const ::std::string& name,
      Placement* value) {
    return BidRequest_Video_Placement_Parse(name, value);
  }

  typedef BidRequest_Video_VideoPlaybackMethod VideoPlaybackMethod;
  static const VideoPlaybackMethod METHOD_UNKNOWN = BidRequest_Video_VideoPlaybackMethod_METHOD_UNKNOWN;
  static const VideoPlaybackMethod AUTO_PLAY_SOUND_ON = BidRequest_Video_VideoPlaybackMethod_AUTO_PLAY_SOUND_ON;
  static const VideoPlaybackMethod AUTO_PLAY_SOUND_OFF = BidRequest_Video_VideoPlaybackMethod_AUTO_PLAY_SOUND_OFF;
  static const VideoPlaybackMethod CLICK_TO_PLAY = BidRequest_Video_VideoPlaybackMethod_CLICK_TO_PLAY;
  static inline bool VideoPlaybackMethod_IsValid(int value) {
    return BidRequest_Video_VideoPlaybackMethod_IsValid(value);
  }
  static const VideoPlaybackMethod VideoPlaybackMethod_MIN =
    BidRequest_Video_VideoPlaybackMethod_VideoPlaybackMethod_MIN;
  static const VideoPlaybackMethod VideoPlaybackMethod_MAX =
    BidRequest_Video_VideoPlaybackMethod_VideoPlaybackMethod_MAX;
  static const int VideoPlaybackMethod_ARRAYSIZE =
    BidRequest_Video_VideoPlaybackMethod_VideoPlaybackMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoPlaybackMethod_descriptor() {
    return BidRequest_Video_VideoPlaybackMethod_descriptor();
  }
  static inline const ::std::string& VideoPlaybackMethod_Name(VideoPlaybackMethod value) {
    return BidRequest_Video_VideoPlaybackMethod_Name(value);
  }
  static inline bool VideoPlaybackMethod_Parse(const ::std::string& name,
      VideoPlaybackMethod* value) {
    return BidRequest_Video_VideoPlaybackMethod_Parse(name, value);
  }

  typedef BidRequest_Video_SkippableBidRequestType SkippableBidRequestType;
  static const SkippableBidRequestType ALLOW_SKIPPABLE = BidRequest_Video_SkippableBidRequestType_ALLOW_SKIPPABLE;
  static const SkippableBidRequestType REQUIRE_SKIPPABLE = BidRequest_Video_SkippableBidRequestType_REQUIRE_SKIPPABLE;
  static const SkippableBidRequestType BLOCK_SKIPPABLE = BidRequest_Video_SkippableBidRequestType_BLOCK_SKIPPABLE;
  static inline bool SkippableBidRequestType_IsValid(int value) {
    return BidRequest_Video_SkippableBidRequestType_IsValid(value);
  }
  static const SkippableBidRequestType SkippableBidRequestType_MIN =
    BidRequest_Video_SkippableBidRequestType_SkippableBidRequestType_MIN;
  static const SkippableBidRequestType SkippableBidRequestType_MAX =
    BidRequest_Video_SkippableBidRequestType_SkippableBidRequestType_MAX;
  static const int SkippableBidRequestType_ARRAYSIZE =
    BidRequest_Video_SkippableBidRequestType_SkippableBidRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SkippableBidRequestType_descriptor() {
    return BidRequest_Video_SkippableBidRequestType_descriptor();
  }
  static inline const ::std::string& SkippableBidRequestType_Name(SkippableBidRequestType value) {
    return BidRequest_Video_SkippableBidRequestType_Name(value);
  }
  static inline bool SkippableBidRequestType_Parse(const ::std::string& name,
      SkippableBidRequestType* value) {
    return BidRequest_Video_SkippableBidRequestType_Parse(name, value);
  }

  typedef BidRequest_Video_VideoFormat VideoFormat;
  static const VideoFormat VIDEO_FLV = BidRequest_Video_VideoFormat_VIDEO_FLV;
  static const VideoFormat VIDEO_MP4 = BidRequest_Video_VideoFormat_VIDEO_MP4;
  static const VideoFormat YT_HOSTED = BidRequest_Video_VideoFormat_YT_HOSTED;
  static const VideoFormat VPAID_FLASH = BidRequest_Video_VideoFormat_VPAID_FLASH;
  static const VideoFormat VPAID_JS = BidRequest_Video_VideoFormat_VPAID_JS;
  static inline bool VideoFormat_IsValid(int value) {
    return BidRequest_Video_VideoFormat_IsValid(value);
  }
  static const VideoFormat VideoFormat_MIN =
    BidRequest_Video_VideoFormat_VideoFormat_MIN;
  static const VideoFormat VideoFormat_MAX =
    BidRequest_Video_VideoFormat_VideoFormat_MAX;
  static const int VideoFormat_ARRAYSIZE =
    BidRequest_Video_VideoFormat_VideoFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoFormat_descriptor() {
    return BidRequest_Video_VideoFormat_descriptor();
  }
  static inline const ::std::string& VideoFormat_Name(VideoFormat value) {
    return BidRequest_Video_VideoFormat_Name(value);
  }
  static inline bool VideoFormat_Parse(const ::std::string& name,
      VideoFormat* value) {
    return BidRequest_Video_VideoFormat_Parse(name, value);
  }

  typedef BidRequest_Video_EndCapSupport EndCapSupport;
  static const EndCapSupport END_CAP_NOT_ENABLED = BidRequest_Video_EndCapSupport_END_CAP_NOT_ENABLED;
  static const EndCapSupport END_CAP_OPTIONAL = BidRequest_Video_EndCapSupport_END_CAP_OPTIONAL;
  static const EndCapSupport END_CAP_FORBIDDEN = BidRequest_Video_EndCapSupport_END_CAP_FORBIDDEN;
  static const EndCapSupport END_CAP_REQUIRED = BidRequest_Video_EndCapSupport_END_CAP_REQUIRED;
  static inline bool EndCapSupport_IsValid(int value) {
    return BidRequest_Video_EndCapSupport_IsValid(value);
  }
  static const EndCapSupport EndCapSupport_MIN =
    BidRequest_Video_EndCapSupport_EndCapSupport_MIN;
  static const EndCapSupport EndCapSupport_MAX =
    BidRequest_Video_EndCapSupport_EndCapSupport_MAX;
  static const int EndCapSupport_ARRAYSIZE =
    BidRequest_Video_EndCapSupport_EndCapSupport_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EndCapSupport_descriptor() {
    return BidRequest_Video_EndCapSupport_descriptor();
  }
  static inline const ::std::string& EndCapSupport_Name(EndCapSupport value) {
    return BidRequest_Video_EndCapSupport_Name(value);
  }
  static inline bool EndCapSupport_Parse(const ::std::string& name,
      EndCapSupport* value) {
    return BidRequest_Video_EndCapSupport_Parse(name, value);
  }

  typedef BidRequest_Video_InventoryType InventoryType;
  static const InventoryType WEB_VIDEO = BidRequest_Video_InventoryType_WEB_VIDEO;
  static const InventoryType GAMES = BidRequest_Video_InventoryType_GAMES;
  static const InventoryType MOBILE_INTERSTITIAL = BidRequest_Video_InventoryType_MOBILE_INTERSTITIAL;
  static const InventoryType MOBILE_APP_VIDEO = BidRequest_Video_InventoryType_MOBILE_APP_VIDEO;
  static inline bool InventoryType_IsValid(int value) {
    return BidRequest_Video_InventoryType_IsValid(value);
  }
  static const InventoryType InventoryType_MIN =
    BidRequest_Video_InventoryType_InventoryType_MIN;
  static const InventoryType InventoryType_MAX =
    BidRequest_Video_InventoryType_InventoryType_MAX;
  static const int InventoryType_ARRAYSIZE =
    BidRequest_Video_InventoryType_InventoryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InventoryType_descriptor() {
    return BidRequest_Video_InventoryType_descriptor();
  }
  static inline const ::std::string& InventoryType_Name(InventoryType value) {
    return BidRequest_Video_InventoryType_Name(value);
  }
  static inline bool InventoryType_Parse(const ::std::string& name,
      InventoryType* value) {
    return BidRequest_Video_InventoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .BidRequest.Video.Placement placement = 16 [default = UNKNOWN_PLACEMENT];
  inline bool has_placement() const;
  inline void clear_placement();
  static const int kPlacementFieldNumber = 16;
  inline ::BidRequest_Video_Placement placement() const;
  inline void set_placement(::BidRequest_Video_Placement value);

  // optional string description_url = 10;
  inline bool has_description_url() const;
  inline void clear_description_url();
  static const int kDescriptionUrlFieldNumber = 10;
  inline const ::std::string& description_url() const;
  inline void set_description_url(const ::std::string& value);
  inline void set_description_url(const char* value);
  inline void set_description_url(const char* value, size_t size);
  inline ::std::string* mutable_description_url();
  inline ::std::string* release_description_url();
  inline void set_allocated_description_url(::std::string* description_url);

  // optional bool is_embedded_offsite = 11 [default = false];
  inline bool has_is_embedded_offsite() const;
  inline void clear_is_embedded_offsite();
  static const int kIsEmbeddedOffsiteFieldNumber = 11;
  inline bool is_embedded_offsite() const;
  inline void set_is_embedded_offsite(bool value);

  // optional .BidRequest.Video.VideoPlaybackMethod playback_method = 14 [default = METHOD_UNKNOWN];
  inline bool has_playback_method() const;
  inline void clear_playback_method();
  static const int kPlaybackMethodFieldNumber = 14;
  inline ::BidRequest_Video_VideoPlaybackMethod playback_method() const;
  inline void set_playback_method(::BidRequest_Video_VideoPlaybackMethod value);

  // optional bool is_clickable = 15;
  inline bool has_is_clickable() const;
  inline void clear_is_clickable();
  static const int kIsClickableFieldNumber = 15;
  inline bool is_clickable() const;
  inline void set_is_clickable(bool value);

  // optional int32 videoad_start_delay = 1;
  inline bool has_videoad_start_delay() const;
  inline void clear_videoad_start_delay();
  static const int kVideoadStartDelayFieldNumber = 1;
  inline ::google::protobuf::int32 videoad_start_delay() const;
  inline void set_videoad_start_delay(::google::protobuf::int32 value);

  // optional int32 max_ad_duration = 2;
  inline bool has_max_ad_duration() const;
  inline void clear_max_ad_duration();
  static const int kMaxAdDurationFieldNumber = 2;
  inline ::google::protobuf::int32 max_ad_duration() const;
  inline void set_max_ad_duration(::google::protobuf::int32 value);

  // optional int32 min_ad_duration = 8;
  inline bool has_min_ad_duration() const;
  inline void clear_min_ad_duration();
  static const int kMinAdDurationFieldNumber = 8;
  inline ::google::protobuf::int32 min_ad_duration() const;
  inline void set_min_ad_duration(::google::protobuf::int32 value);

  // optional int32 max_ads_in_pod = 12;
  inline bool has_max_ads_in_pod() const;
  inline void clear_max_ads_in_pod();
  static const int kMaxAdsInPodFieldNumber = 12;
  inline ::google::protobuf::int32 max_ads_in_pod() const;
  inline void set_max_ads_in_pod(::google::protobuf::int32 value);

  // optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
  inline bool has_video_ad_skippable() const;
  inline void clear_video_ad_skippable();
  static const int kVideoAdSkippableFieldNumber = 4;
  inline ::BidRequest_Video_SkippableBidRequestType video_ad_skippable() const;
  inline void set_video_ad_skippable(::BidRequest_Video_SkippableBidRequestType value);

  // optional int32 skippable_max_ad_duration = 5;
  inline bool has_skippable_max_ad_duration() const;
  inline void clear_skippable_max_ad_duration();
  static const int kSkippableMaxAdDurationFieldNumber = 5;
  inline ::google::protobuf::int32 skippable_max_ad_duration() const;
  inline void set_skippable_max_ad_duration(::google::protobuf::int32 value);

  // repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
  inline int allowed_video_formats_size() const;
  inline void clear_allowed_video_formats();
  static const int kAllowedVideoFormatsFieldNumber = 6;
  inline ::BidRequest_Video_VideoFormat allowed_video_formats(int index) const;
  inline void set_allowed_video_formats(int index, ::BidRequest_Video_VideoFormat value);
  inline void add_allowed_video_formats(::BidRequest_Video_VideoFormat value);
  inline const ::google::protobuf::RepeatedField<int>& allowed_video_formats() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_allowed_video_formats();

  // repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
  inline int companion_slot_size() const;
  inline void clear_companion_slot();
  static const int kCompanionSlotFieldNumber = 7;
  inline const ::BidRequest_Video_CompanionSlot& companion_slot(int index) const;
  inline ::BidRequest_Video_CompanionSlot* mutable_companion_slot(int index);
  inline ::BidRequest_Video_CompanionSlot* add_companion_slot();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_Video_CompanionSlot >&
      companion_slot() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_Video_CompanionSlot >*
      mutable_companion_slot();

  // optional .BidRequest.Video.EndCapSupport end_cap_support = 13 [default = END_CAP_NOT_ENABLED];
  inline bool has_end_cap_support() const;
  inline void clear_end_cap_support();
  static const int kEndCapSupportFieldNumber = 13;
  inline ::BidRequest_Video_EndCapSupport end_cap_support() const;
  inline void set_end_cap_support(::BidRequest_Video_EndCapSupport value);

  // optional .BidRequest.Video.ContentAttributes content_attributes = 9;
  inline bool has_content_attributes() const;
  inline void clear_content_attributes();
  static const int kContentAttributesFieldNumber = 9;
  inline const ::BidRequest_Video_ContentAttributes& content_attributes() const;
  inline ::BidRequest_Video_ContentAttributes* mutable_content_attributes();
  inline ::BidRequest_Video_ContentAttributes* release_content_attributes();
  inline void set_allocated_content_attributes(::BidRequest_Video_ContentAttributes* content_attributes);

  // optional .BidRequest.Video.InventoryType DEPRECATED_inventory_type = 3 [default = WEB_VIDEO];
  inline bool has_deprecated_inventory_type() const;
  inline void clear_deprecated_inventory_type();
  static const int kDEPRECATEDInventoryTypeFieldNumber = 3;
  inline ::BidRequest_Video_InventoryType deprecated_inventory_type() const;
  inline void set_deprecated_inventory_type(::BidRequest_Video_InventoryType value);

  // @@protoc_insertion_point(class_scope:BidRequest.Video)
 private:
  inline void set_has_placement();
  inline void clear_has_placement();
  inline void set_has_description_url();
  inline void clear_has_description_url();
  inline void set_has_is_embedded_offsite();
  inline void clear_has_is_embedded_offsite();
  inline void set_has_playback_method();
  inline void clear_has_playback_method();
  inline void set_has_is_clickable();
  inline void clear_has_is_clickable();
  inline void set_has_videoad_start_delay();
  inline void clear_has_videoad_start_delay();
  inline void set_has_max_ad_duration();
  inline void clear_has_max_ad_duration();
  inline void set_has_min_ad_duration();
  inline void clear_has_min_ad_duration();
  inline void set_has_max_ads_in_pod();
  inline void clear_has_max_ads_in_pod();
  inline void set_has_video_ad_skippable();
  inline void clear_has_video_ad_skippable();
  inline void set_has_skippable_max_ad_duration();
  inline void clear_has_skippable_max_ad_duration();
  inline void set_has_end_cap_support();
  inline void clear_has_end_cap_support();
  inline void set_has_content_attributes();
  inline void clear_has_content_attributes();
  inline void set_has_deprecated_inventory_type();
  inline void clear_has_deprecated_inventory_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* description_url_;
  int placement_;
  int playback_method_;
  bool is_embedded_offsite_;
  bool is_clickable_;
  ::google::protobuf::int32 videoad_start_delay_;
  ::google::protobuf::int32 max_ad_duration_;
  ::google::protobuf::int32 min_ad_duration_;
  ::google::protobuf::int32 max_ads_in_pod_;
  int video_ad_skippable_;
  ::google::protobuf::RepeatedField<int> allowed_video_formats_;
  ::google::protobuf::int32 skippable_max_ad_duration_;
  int end_cap_support_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_Video_CompanionSlot > companion_slot_;
  ::BidRequest_Video_ContentAttributes* content_attributes_;
  int deprecated_inventory_type_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Video* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdSlot_MatchingAdData_BuyerPricingRule : public ::google::protobuf::Message {
 public:
  BidRequest_AdSlot_MatchingAdData_BuyerPricingRule();
  virtual ~BidRequest_AdSlot_MatchingAdData_BuyerPricingRule();

  BidRequest_AdSlot_MatchingAdData_BuyerPricingRule(const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& from);

  inline BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& operator=(const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& default_instance();

  void Swap(BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* other);

  // implements Message ----------------------------------------------

  BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& from);
  void MergeFrom(const BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 included_advertisers = 1;
  inline int included_advertisers_size() const;
  inline void clear_included_advertisers();
  static const int kIncludedAdvertisersFieldNumber = 1;
  inline ::google::protobuf::int64 included_advertisers(int index) const;
  inline void set_included_advertisers(int index, ::google::protobuf::int64 value);
  inline void add_included_advertisers(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      included_advertisers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_included_advertisers();

  // repeated int64 excluded_advertisers = 2;
  inline int excluded_advertisers_size() const;
  inline void clear_excluded_advertisers();
  static const int kExcludedAdvertisersFieldNumber = 2;
  inline ::google::protobuf::int64 excluded_advertisers(int index) const;
  inline void set_excluded_advertisers(int index, ::google::protobuf::int64 value);
  inline void add_excluded_advertisers(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      excluded_advertisers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_excluded_advertisers();

  // repeated int64 included_agencies = 3;
  inline int included_agencies_size() const;
  inline void clear_included_agencies();
  static const int kIncludedAgenciesFieldNumber = 3;
  inline ::google::protobuf::int64 included_agencies(int index) const;
  inline void set_included_agencies(int index, ::google::protobuf::int64 value);
  inline void add_included_agencies(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      included_agencies() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_included_agencies();

  // repeated int64 excluded_agencies = 4;
  inline int excluded_agencies_size() const;
  inline void clear_excluded_agencies();
  static const int kExcludedAgenciesFieldNumber = 4;
  inline ::google::protobuf::int64 excluded_agencies(int index) const;
  inline void set_excluded_agencies(int index, ::google::protobuf::int64 value);
  inline void add_excluded_agencies(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      excluded_agencies() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_excluded_agencies();

  // optional bool blocked = 5;
  inline bool has_blocked() const;
  inline void clear_blocked();
  static const int kBlockedFieldNumber = 5;
  inline bool blocked() const;
  inline void set_blocked(bool value);

  // optional int64 minimum_cpm_micros = 6;
  inline bool has_minimum_cpm_micros() const;
  inline void clear_minimum_cpm_micros();
  static const int kMinimumCpmMicrosFieldNumber = 6;
  inline ::google::protobuf::int64 minimum_cpm_micros() const;
  inline void set_minimum_cpm_micros(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule)
 private:
  inline void set_has_blocked();
  inline void clear_has_blocked();
  inline void set_has_minimum_cpm_micros();
  inline void clear_has_minimum_cpm_micros();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > included_advertisers_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > excluded_advertisers_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > included_agencies_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > excluded_agencies_;
  ::google::protobuf::int64 minimum_cpm_micros_;
  bool blocked_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdSlot_MatchingAdData_DirectDeal : public ::google::protobuf::Message {
 public:
  BidRequest_AdSlot_MatchingAdData_DirectDeal();
  virtual ~BidRequest_AdSlot_MatchingAdData_DirectDeal();

  BidRequest_AdSlot_MatchingAdData_DirectDeal(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from);

  inline BidRequest_AdSlot_MatchingAdData_DirectDeal& operator=(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdSlot_MatchingAdData_DirectDeal& default_instance();

  void Swap(BidRequest_AdSlot_MatchingAdData_DirectDeal* other);

  // implements Message ----------------------------------------------

  BidRequest_AdSlot_MatchingAdData_DirectDeal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from);
  void MergeFrom(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType DealType;
  static const DealType UNKNOWN_DEAL_TYPE = BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_UNKNOWN_DEAL_TYPE;
  static const DealType PREFERRED_DEAL = BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_PREFERRED_DEAL;
  static const DealType PRIVATE_AUCTION = BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_PRIVATE_AUCTION;
  static inline bool DealType_IsValid(int value) {
    return BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_IsValid(value);
  }
  static const DealType DealType_MIN =
    BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_DealType_MIN;
  static const DealType DealType_MAX =
    BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_DealType_MAX;
  static const int DealType_ARRAYSIZE =
    BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_DealType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DealType_descriptor() {
    return BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_descriptor();
  }
  static inline const ::std::string& DealType_Name(DealType value) {
    return BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_Name(value);
  }
  static inline bool DealType_Parse(const ::std::string& name,
      DealType* value) {
    return BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 direct_deal_id = 1;
  inline bool has_direct_deal_id() const;
  inline void clear_direct_deal_id();
  static const int kDirectDealIdFieldNumber = 1;
  inline ::google::protobuf::int64 direct_deal_id() const;
  inline void set_direct_deal_id(::google::protobuf::int64 value);

  // optional int64 fixed_cpm_micros = 2;
  inline bool has_fixed_cpm_micros() const;
  inline void clear_fixed_cpm_micros();
  static const int kFixedCpmMicrosFieldNumber = 2;
  inline ::google::protobuf::int64 fixed_cpm_micros() const;
  inline void set_fixed_cpm_micros(::google::protobuf::int64 value);

  // optional .BidRequest.AdSlot.MatchingAdData.DirectDeal.DealType deal_type = 3 [default = UNKNOWN_DEAL_TYPE];
  inline bool has_deal_type() const;
  inline void clear_deal_type();
  static const int kDealTypeFieldNumber = 3;
  inline ::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType deal_type() const;
  inline void set_deal_type(::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType value);

  // optional bool publisher_blocks_overridden = 4 [default = false];
  inline bool has_publisher_blocks_overridden() const;
  inline void clear_publisher_blocks_overridden();
  static const int kPublisherBlocksOverriddenFieldNumber = 4;
  inline bool publisher_blocks_overridden() const;
  inline void set_publisher_blocks_overridden(bool value);

  // @@protoc_insertion_point(class_scope:BidRequest.AdSlot.MatchingAdData.DirectDeal)
 private:
  inline void set_has_direct_deal_id();
  inline void clear_has_direct_deal_id();
  inline void set_has_fixed_cpm_micros();
  inline void clear_has_fixed_cpm_micros();
  inline void set_has_deal_type();
  inline void clear_has_deal_type();
  inline void set_has_publisher_blocks_overridden();
  inline void clear_has_publisher_blocks_overridden();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 direct_deal_id_;
  ::google::protobuf::int64 fixed_cpm_micros_;
  int deal_type_;
  bool publisher_blocks_overridden_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdSlot_MatchingAdData_DirectDeal* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdSlot_MatchingAdData : public ::google::protobuf::Message {
 public:
  BidRequest_AdSlot_MatchingAdData();
  virtual ~BidRequest_AdSlot_MatchingAdData();

  BidRequest_AdSlot_MatchingAdData(const BidRequest_AdSlot_MatchingAdData& from);

  inline BidRequest_AdSlot_MatchingAdData& operator=(const BidRequest_AdSlot_MatchingAdData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdSlot_MatchingAdData& default_instance();

  void Swap(BidRequest_AdSlot_MatchingAdData* other);

  // implements Message ----------------------------------------------

  BidRequest_AdSlot_MatchingAdData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdSlot_MatchingAdData& from);
  void MergeFrom(const BidRequest_AdSlot_MatchingAdData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_AdSlot_MatchingAdData_BuyerPricingRule BuyerPricingRule;
  typedef BidRequest_AdSlot_MatchingAdData_DirectDeal DirectDeal;

  // accessors -------------------------------------------------------

  // repeated int64 billing_id = 2 [packed = false];
  inline int billing_id_size() const;
  inline void clear_billing_id();
  static const int kBillingIdFieldNumber = 2;
  inline ::google::protobuf::int64 billing_id(int index) const;
  inline void set_billing_id(int index, ::google::protobuf::int64 value);
  inline void add_billing_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      billing_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_billing_id();

  // optional int64 minimum_cpm_micros = 5;
  inline bool has_minimum_cpm_micros() const;
  inline void clear_minimum_cpm_micros();
  static const int kMinimumCpmMicrosFieldNumber = 5;
  inline ::google::protobuf::int64 minimum_cpm_micros() const;
  inline void set_minimum_cpm_micros(::google::protobuf::int64 value);

  // repeated .BidRequest.AdSlot.MatchingAdData.BuyerPricingRule pricing_rule = 7;
  inline int pricing_rule_size() const;
  inline void clear_pricing_rule();
  static const int kPricingRuleFieldNumber = 7;
  inline const ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& pricing_rule(int index) const;
  inline ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* mutable_pricing_rule(int index);
  inline ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* add_pricing_rule();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule >&
      pricing_rule() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule >*
      mutable_pricing_rule();

  // repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
  inline int direct_deal_size() const;
  inline void clear_direct_deal();
  static const int kDirectDealFieldNumber = 6;
  inline const ::BidRequest_AdSlot_MatchingAdData_DirectDeal& direct_deal(int index) const;
  inline ::BidRequest_AdSlot_MatchingAdData_DirectDeal* mutable_direct_deal(int index);
  inline ::BidRequest_AdSlot_MatchingAdData_DirectDeal* add_direct_deal();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_DirectDeal >&
      direct_deal() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_DirectDeal >*
      mutable_direct_deal();

  // optional int64 DEPRECATED_campaign_id = 1;
  inline bool has_deprecated_campaign_id() const;
  inline void clear_deprecated_campaign_id();
  static const int kDEPRECATEDCampaignIdFieldNumber = 1;
  inline ::google::protobuf::int64 deprecated_campaign_id() const;
  inline void set_deprecated_campaign_id(::google::protobuf::int64 value);

  // optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
  inline bool has_deprecated_per_buyer_minimum_cpm() const;
  inline void clear_deprecated_per_buyer_minimum_cpm();
  static const int kDEPRECATEDPerBuyerMinimumCpmFieldNumber = 3;
  inline bool deprecated_per_buyer_minimum_cpm() const;
  inline void set_deprecated_per_buyer_minimum_cpm(bool value);

  // optional int64 DEPRECATED_fixed_cpm_micros = 4;
  inline bool has_deprecated_fixed_cpm_micros() const;
  inline void clear_deprecated_fixed_cpm_micros();
  static const int kDEPRECATEDFixedCpmMicrosFieldNumber = 4;
  inline ::google::protobuf::int64 deprecated_fixed_cpm_micros() const;
  inline void set_deprecated_fixed_cpm_micros(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BidRequest.AdSlot.MatchingAdData)
 private:
  inline void set_has_minimum_cpm_micros();
  inline void clear_has_minimum_cpm_micros();
  inline void set_has_deprecated_campaign_id();
  inline void clear_has_deprecated_campaign_id();
  inline void set_has_deprecated_per_buyer_minimum_cpm();
  inline void clear_has_deprecated_per_buyer_minimum_cpm();
  inline void set_has_deprecated_fixed_cpm_micros();
  inline void clear_has_deprecated_fixed_cpm_micros();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > billing_id_;
  ::google::protobuf::int64 minimum_cpm_micros_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule > pricing_rule_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_DirectDeal > direct_deal_;
  ::google::protobuf::int64 deprecated_campaign_id_;
  ::google::protobuf::int64 deprecated_fixed_cpm_micros_;
  bool deprecated_per_buyer_minimum_cpm_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdSlot_MatchingAdData* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdSlot_ExchangeBidding : public ::google::protobuf::Message {
 public:
  BidRequest_AdSlot_ExchangeBidding();
  virtual ~BidRequest_AdSlot_ExchangeBidding();

  BidRequest_AdSlot_ExchangeBidding(const BidRequest_AdSlot_ExchangeBidding& from);

  inline BidRequest_AdSlot_ExchangeBidding& operator=(const BidRequest_AdSlot_ExchangeBidding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdSlot_ExchangeBidding& default_instance();

  void Swap(BidRequest_AdSlot_ExchangeBidding* other);

  // implements Message ----------------------------------------------

  BidRequest_AdSlot_ExchangeBidding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdSlot_ExchangeBidding& from);
  void MergeFrom(const BidRequest_AdSlot_ExchangeBidding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string publisher_parameter = 1;
  inline int publisher_parameter_size() const;
  inline void clear_publisher_parameter();
  static const int kPublisherParameterFieldNumber = 1;
  inline const ::std::string& publisher_parameter(int index) const;
  inline ::std::string* mutable_publisher_parameter(int index);
  inline void set_publisher_parameter(int index, const ::std::string& value);
  inline void set_publisher_parameter(int index, const char* value);
  inline void set_publisher_parameter(int index, const char* value, size_t size);
  inline ::std::string* add_publisher_parameter();
  inline void add_publisher_parameter(const ::std::string& value);
  inline void add_publisher_parameter(const char* value);
  inline void add_publisher_parameter(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& publisher_parameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_publisher_parameter();

  // @@protoc_insertion_point(class_scope:BidRequest.AdSlot.ExchangeBidding)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> publisher_parameter_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdSlot_ExchangeBidding* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdSlot_NativeAdTemplate : public ::google::protobuf::Message {
 public:
  BidRequest_AdSlot_NativeAdTemplate();
  virtual ~BidRequest_AdSlot_NativeAdTemplate();

  BidRequest_AdSlot_NativeAdTemplate(const BidRequest_AdSlot_NativeAdTemplate& from);

  inline BidRequest_AdSlot_NativeAdTemplate& operator=(const BidRequest_AdSlot_NativeAdTemplate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdSlot_NativeAdTemplate& default_instance();

  void Swap(BidRequest_AdSlot_NativeAdTemplate* other);

  // implements Message ----------------------------------------------

  BidRequest_AdSlot_NativeAdTemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdSlot_NativeAdTemplate& from);
  void MergeFrom(const BidRequest_AdSlot_NativeAdTemplate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_AdSlot_NativeAdTemplate_Fields Fields;
  static const Fields HEADLINE = BidRequest_AdSlot_NativeAdTemplate_Fields_HEADLINE;
  static const Fields BODY = BidRequest_AdSlot_NativeAdTemplate_Fields_BODY;
  static const Fields CALL_TO_ACTION = BidRequest_AdSlot_NativeAdTemplate_Fields_CALL_TO_ACTION;
  static const Fields ADVERTISER = BidRequest_AdSlot_NativeAdTemplate_Fields_ADVERTISER;
  static const Fields IMAGE = BidRequest_AdSlot_NativeAdTemplate_Fields_IMAGE;
  static const Fields LOGO = BidRequest_AdSlot_NativeAdTemplate_Fields_LOGO;
  static const Fields APP_ICON = BidRequest_AdSlot_NativeAdTemplate_Fields_APP_ICON;
  static const Fields STAR_RATING = BidRequest_AdSlot_NativeAdTemplate_Fields_STAR_RATING;
  static const Fields PRICE = BidRequest_AdSlot_NativeAdTemplate_Fields_PRICE;
  static const Fields STORE = BidRequest_AdSlot_NativeAdTemplate_Fields_STORE;
  static inline bool Fields_IsValid(int value) {
    return BidRequest_AdSlot_NativeAdTemplate_Fields_IsValid(value);
  }
  static const Fields Fields_MIN =
    BidRequest_AdSlot_NativeAdTemplate_Fields_Fields_MIN;
  static const Fields Fields_MAX =
    BidRequest_AdSlot_NativeAdTemplate_Fields_Fields_MAX;
  static const int Fields_ARRAYSIZE =
    BidRequest_AdSlot_NativeAdTemplate_Fields_Fields_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Fields_descriptor() {
    return BidRequest_AdSlot_NativeAdTemplate_Fields_descriptor();
  }
  static inline const ::std::string& Fields_Name(Fields value) {
    return BidRequest_AdSlot_NativeAdTemplate_Fields_Name(value);
  }
  static inline bool Fields_Parse(const ::std::string& name,
      Fields* value) {
    return BidRequest_AdSlot_NativeAdTemplate_Fields_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 required_fields = 1;
  inline bool has_required_fields() const;
  inline void clear_required_fields();
  static const int kRequiredFieldsFieldNumber = 1;
  inline ::google::protobuf::int64 required_fields() const;
  inline void set_required_fields(::google::protobuf::int64 value);

  // optional int64 recommended_fields = 2;
  inline bool has_recommended_fields() const;
  inline void clear_recommended_fields();
  static const int kRecommendedFieldsFieldNumber = 2;
  inline ::google::protobuf::int64 recommended_fields() const;
  inline void set_recommended_fields(::google::protobuf::int64 value);

  // optional int32 headline_max_safe_length = 3;
  inline bool has_headline_max_safe_length() const;
  inline void clear_headline_max_safe_length();
  static const int kHeadlineMaxSafeLengthFieldNumber = 3;
  inline ::google::protobuf::int32 headline_max_safe_length() const;
  inline void set_headline_max_safe_length(::google::protobuf::int32 value);

  // optional int32 body_max_safe_length = 4;
  inline bool has_body_max_safe_length() const;
  inline void clear_body_max_safe_length();
  static const int kBodyMaxSafeLengthFieldNumber = 4;
  inline ::google::protobuf::int32 body_max_safe_length() const;
  inline void set_body_max_safe_length(::google::protobuf::int32 value);

  // optional int32 call_to_action_max_safe_length = 5;
  inline bool has_call_to_action_max_safe_length() const;
  inline void clear_call_to_action_max_safe_length();
  static const int kCallToActionMaxSafeLengthFieldNumber = 5;
  inline ::google::protobuf::int32 call_to_action_max_safe_length() const;
  inline void set_call_to_action_max_safe_length(::google::protobuf::int32 value);

  // optional int32 advertiser_max_safe_length = 6;
  inline bool has_advertiser_max_safe_length() const;
  inline void clear_advertiser_max_safe_length();
  static const int kAdvertiserMaxSafeLengthFieldNumber = 6;
  inline ::google::protobuf::int32 advertiser_max_safe_length() const;
  inline void set_advertiser_max_safe_length(::google::protobuf::int32 value);

  // optional int32 store_max_safe_length = 14;
  inline bool has_store_max_safe_length() const;
  inline void clear_store_max_safe_length();
  static const int kStoreMaxSafeLengthFieldNumber = 14;
  inline ::google::protobuf::int32 store_max_safe_length() const;
  inline void set_store_max_safe_length(::google::protobuf::int32 value);

  // optional int32 price_max_safe_length = 15;
  inline bool has_price_max_safe_length() const;
  inline void clear_price_max_safe_length();
  static const int kPriceMaxSafeLengthFieldNumber = 15;
  inline ::google::protobuf::int32 price_max_safe_length() const;
  inline void set_price_max_safe_length(::google::protobuf::int32 value);

  // optional int32 image_width = 7;
  inline bool has_image_width() const;
  inline void clear_image_width();
  static const int kImageWidthFieldNumber = 7;
  inline ::google::protobuf::int32 image_width() const;
  inline void set_image_width(::google::protobuf::int32 value);

  // optional int32 image_height = 8;
  inline bool has_image_height() const;
  inline void clear_image_height();
  static const int kImageHeightFieldNumber = 8;
  inline ::google::protobuf::int32 image_height() const;
  inline void set_image_height(::google::protobuf::int32 value);

  // optional int32 logo_width = 9;
  inline bool has_logo_width() const;
  inline void clear_logo_width();
  static const int kLogoWidthFieldNumber = 9;
  inline ::google::protobuf::int32 logo_width() const;
  inline void set_logo_width(::google::protobuf::int32 value);

  // optional int32 logo_height = 10;
  inline bool has_logo_height() const;
  inline void clear_logo_height();
  static const int kLogoHeightFieldNumber = 10;
  inline ::google::protobuf::int32 logo_height() const;
  inline void set_logo_height(::google::protobuf::int32 value);

  // optional int32 app_icon_width = 11;
  inline bool has_app_icon_width() const;
  inline void clear_app_icon_width();
  static const int kAppIconWidthFieldNumber = 11;
  inline ::google::protobuf::int32 app_icon_width() const;
  inline void set_app_icon_width(::google::protobuf::int32 value);

  // optional int32 app_icon_height = 12;
  inline bool has_app_icon_height() const;
  inline void clear_app_icon_height();
  static const int kAppIconHeightFieldNumber = 12;
  inline ::google::protobuf::int32 app_icon_height() const;
  inline void set_app_icon_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidRequest.AdSlot.NativeAdTemplate)
 private:
  inline void set_has_required_fields();
  inline void clear_has_required_fields();
  inline void set_has_recommended_fields();
  inline void clear_has_recommended_fields();
  inline void set_has_headline_max_safe_length();
  inline void clear_has_headline_max_safe_length();
  inline void set_has_body_max_safe_length();
  inline void clear_has_body_max_safe_length();
  inline void set_has_call_to_action_max_safe_length();
  inline void clear_has_call_to_action_max_safe_length();
  inline void set_has_advertiser_max_safe_length();
  inline void clear_has_advertiser_max_safe_length();
  inline void set_has_store_max_safe_length();
  inline void clear_has_store_max_safe_length();
  inline void set_has_price_max_safe_length();
  inline void clear_has_price_max_safe_length();
  inline void set_has_image_width();
  inline void clear_has_image_width();
  inline void set_has_image_height();
  inline void clear_has_image_height();
  inline void set_has_logo_width();
  inline void clear_has_logo_width();
  inline void set_has_logo_height();
  inline void clear_has_logo_height();
  inline void set_has_app_icon_width();
  inline void clear_has_app_icon_width();
  inline void set_has_app_icon_height();
  inline void clear_has_app_icon_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 required_fields_;
  ::google::protobuf::int64 recommended_fields_;
  ::google::protobuf::int32 headline_max_safe_length_;
  ::google::protobuf::int32 body_max_safe_length_;
  ::google::protobuf::int32 call_to_action_max_safe_length_;
  ::google::protobuf::int32 advertiser_max_safe_length_;
  ::google::protobuf::int32 store_max_safe_length_;
  ::google::protobuf::int32 price_max_safe_length_;
  ::google::protobuf::int32 image_width_;
  ::google::protobuf::int32 image_height_;
  ::google::protobuf::int32 logo_width_;
  ::google::protobuf::int32 logo_height_;
  ::google::protobuf::int32 app_icon_width_;
  ::google::protobuf::int32 app_icon_height_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdSlot_NativeAdTemplate* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings : public ::google::protobuf::Message {
 public:
  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings();
  virtual ~BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings();

  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings(const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& from);

  inline BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& operator=(const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& default_instance();

  void Swap(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* other);

  // implements Message ----------------------------------------------

  BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& from);
  void MergeFrom(const BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType AutoRefreshType;
  static const AutoRefreshType UNKNOWN_AUTO_REFRESH_TYPE = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_UNKNOWN_AUTO_REFRESH_TYPE;
  static const AutoRefreshType USER_ACTION = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_USER_ACTION;
  static const AutoRefreshType EVENT = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_EVENT;
  static const AutoRefreshType TIME = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_TIME;
  static inline bool AutoRefreshType_IsValid(int value) {
    return BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_IsValid(value);
  }
  static const AutoRefreshType AutoRefreshType_MIN =
    BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_AutoRefreshType_MIN;
  static const AutoRefreshType AutoRefreshType_MAX =
    BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_AutoRefreshType_MAX;
  static const int AutoRefreshType_ARRAYSIZE =
    BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_AutoRefreshType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AutoRefreshType_descriptor() {
    return BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_descriptor();
  }
  static inline const ::std::string& AutoRefreshType_Name(AutoRefreshType value) {
    return BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_Name(value);
  }
  static inline bool AutoRefreshType_Parse(const ::std::string& name,
      AutoRefreshType* value) {
    return BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType refresh_type = 1 [default = UNKNOWN_AUTO_REFRESH_TYPE];
  inline bool has_refresh_type() const;
  inline void clear_refresh_type();
  static const int kRefreshTypeFieldNumber = 1;
  inline ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType refresh_type() const;
  inline void set_refresh_type(::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType value);

  // optional int32 min_refresh_interval_seconds = 2;
  inline bool has_min_refresh_interval_seconds() const;
  inline void clear_min_refresh_interval_seconds();
  static const int kMinRefreshIntervalSecondsFieldNumber = 2;
  inline ::google::protobuf::int32 min_refresh_interval_seconds() const;
  inline void set_min_refresh_interval_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings)
 private:
  inline void set_has_refresh_type();
  inline void clear_has_refresh_type();
  inline void set_has_min_refresh_interval_seconds();
  inline void clear_has_min_refresh_interval_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int refresh_type_;
  ::google::protobuf::int32 min_refresh_interval_seconds_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdSlot_AutoRefresh : public ::google::protobuf::Message {
 public:
  BidRequest_AdSlot_AutoRefresh();
  virtual ~BidRequest_AdSlot_AutoRefresh();

  BidRequest_AdSlot_AutoRefresh(const BidRequest_AdSlot_AutoRefresh& from);

  inline BidRequest_AdSlot_AutoRefresh& operator=(const BidRequest_AdSlot_AutoRefresh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdSlot_AutoRefresh& default_instance();

  void Swap(BidRequest_AdSlot_AutoRefresh* other);

  // implements Message ----------------------------------------------

  BidRequest_AdSlot_AutoRefresh* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdSlot_AutoRefresh& from);
  void MergeFrom(const BidRequest_AdSlot_AutoRefresh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings AutoRefreshSettings;

  // accessors -------------------------------------------------------

  // repeated .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings refresh_settings = 1;
  inline int refresh_settings_size() const;
  inline void clear_refresh_settings();
  static const int kRefreshSettingsFieldNumber = 1;
  inline const ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& refresh_settings(int index) const;
  inline ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* mutable_refresh_settings(int index);
  inline ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* add_refresh_settings();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings >&
      refresh_settings() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings >*
      mutable_refresh_settings();

  // optional int32 refresh_count = 2 [default = 0];
  inline bool has_refresh_count() const;
  inline void clear_refresh_count();
  static const int kRefreshCountFieldNumber = 2;
  inline ::google::protobuf::int32 refresh_count() const;
  inline void set_refresh_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidRequest.AdSlot.AutoRefresh)
 private:
  inline void set_has_refresh_count();
  inline void clear_has_refresh_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings > refresh_settings_;
  ::google::protobuf::int32 refresh_count_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdSlot_AutoRefresh* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdSlot : public ::google::protobuf::Message {
 public:
  BidRequest_AdSlot();
  virtual ~BidRequest_AdSlot();

  BidRequest_AdSlot(const BidRequest_AdSlot& from);

  inline BidRequest_AdSlot& operator=(const BidRequest_AdSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdSlot& default_instance();

  void Swap(BidRequest_AdSlot* other);

  // implements Message ----------------------------------------------

  BidRequest_AdSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdSlot& from);
  void MergeFrom(const BidRequest_AdSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_AdSlot_MatchingAdData MatchingAdData;
  typedef BidRequest_AdSlot_ExchangeBidding ExchangeBidding;
  typedef BidRequest_AdSlot_NativeAdTemplate NativeAdTemplate;
  typedef BidRequest_AdSlot_AutoRefresh AutoRefresh;

  typedef BidRequest_AdSlot_SlotVisibility SlotVisibility;
  static const SlotVisibility NO_DETECTION = BidRequest_AdSlot_SlotVisibility_NO_DETECTION;
  static const SlotVisibility ABOVE_THE_FOLD = BidRequest_AdSlot_SlotVisibility_ABOVE_THE_FOLD;
  static const SlotVisibility BELOW_THE_FOLD = BidRequest_AdSlot_SlotVisibility_BELOW_THE_FOLD;
  static inline bool SlotVisibility_IsValid(int value) {
    return BidRequest_AdSlot_SlotVisibility_IsValid(value);
  }
  static const SlotVisibility SlotVisibility_MIN =
    BidRequest_AdSlot_SlotVisibility_SlotVisibility_MIN;
  static const SlotVisibility SlotVisibility_MAX =
    BidRequest_AdSlot_SlotVisibility_SlotVisibility_MAX;
  static const int SlotVisibility_ARRAYSIZE =
    BidRequest_AdSlot_SlotVisibility_SlotVisibility_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SlotVisibility_descriptor() {
    return BidRequest_AdSlot_SlotVisibility_descriptor();
  }
  static inline const ::std::string& SlotVisibility_Name(SlotVisibility value) {
    return BidRequest_AdSlot_SlotVisibility_Name(value);
  }
  static inline bool SlotVisibility_Parse(const ::std::string& name,
      SlotVisibility* value) {
    return BidRequest_AdSlot_SlotVisibility_Parse(name, value);
  }

  typedef BidRequest_AdSlot_IFramingState IFramingState;
  static const IFramingState UNKNOWN_IFRAME_STATE = BidRequest_AdSlot_IFramingState_UNKNOWN_IFRAME_STATE;
  static const IFramingState NO_IFRAME = BidRequest_AdSlot_IFramingState_NO_IFRAME;
  static const IFramingState SAME_DOMAIN_IFRAME = BidRequest_AdSlot_IFramingState_SAME_DOMAIN_IFRAME;
  static const IFramingState CROSS_DOMAIN_IFRAME = BidRequest_AdSlot_IFramingState_CROSS_DOMAIN_IFRAME;
  static inline bool IFramingState_IsValid(int value) {
    return BidRequest_AdSlot_IFramingState_IsValid(value);
  }
  static const IFramingState IFramingState_MIN =
    BidRequest_AdSlot_IFramingState_IFramingState_MIN;
  static const IFramingState IFramingState_MAX =
    BidRequest_AdSlot_IFramingState_IFramingState_MAX;
  static const int IFramingState_ARRAYSIZE =
    BidRequest_AdSlot_IFramingState_IFramingState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IFramingState_descriptor() {
    return BidRequest_AdSlot_IFramingState_descriptor();
  }
  static inline const ::std::string& IFramingState_Name(IFramingState value) {
    return BidRequest_AdSlot_IFramingState_Name(value);
  }
  static inline bool IFramingState_Parse(const ::std::string& name,
      IFramingState* value) {
    return BidRequest_AdSlot_IFramingState_Parse(name, value);
  }

  typedef BidRequest_AdSlot_IFramingDepth IFramingDepth;
  static const IFramingDepth UNKNOWN_IFRAME_DEPTH = BidRequest_AdSlot_IFramingDepth_UNKNOWN_IFRAME_DEPTH;
  static const IFramingDepth NOT_IN_IFRAME = BidRequest_AdSlot_IFramingDepth_NOT_IN_IFRAME;
  static const IFramingDepth ONE_IFRAME = BidRequest_AdSlot_IFramingDepth_ONE_IFRAME;
  static const IFramingDepth MULTIPLE_IFRAME = BidRequest_AdSlot_IFramingDepth_MULTIPLE_IFRAME;
  static inline bool IFramingDepth_IsValid(int value) {
    return BidRequest_AdSlot_IFramingDepth_IsValid(value);
  }
  static const IFramingDepth IFramingDepth_MIN =
    BidRequest_AdSlot_IFramingDepth_IFramingDepth_MIN;
  static const IFramingDepth IFramingDepth_MAX =
    BidRequest_AdSlot_IFramingDepth_IFramingDepth_MAX;
  static const int IFramingDepth_ARRAYSIZE =
    BidRequest_AdSlot_IFramingDepth_IFramingDepth_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IFramingDepth_descriptor() {
    return BidRequest_AdSlot_IFramingDepth_descriptor();
  }
  static inline const ::std::string& IFramingDepth_Name(IFramingDepth value) {
    return BidRequest_AdSlot_IFramingDepth_Name(value);
  }
  static inline bool IFramingDepth_Parse(const ::std::string& name,
      IFramingDepth* value) {
    return BidRequest_AdSlot_IFramingDepth_Parse(name, value);
  }

  typedef BidRequest_AdSlot_MediationStatus MediationStatus;
  static const MediationStatus UNKNOWN = BidRequest_AdSlot_MediationStatus_UNKNOWN;
  static const MediationStatus DIRECT_REQUEST = BidRequest_AdSlot_MediationStatus_DIRECT_REQUEST;
  static const MediationStatus MEDIATED = BidRequest_AdSlot_MediationStatus_MEDIATED;
  static inline bool MediationStatus_IsValid(int value) {
    return BidRequest_AdSlot_MediationStatus_IsValid(value);
  }
  static const MediationStatus MediationStatus_MIN =
    BidRequest_AdSlot_MediationStatus_MediationStatus_MIN;
  static const MediationStatus MediationStatus_MAX =
    BidRequest_AdSlot_MediationStatus_MediationStatus_MAX;
  static const int MediationStatus_ARRAYSIZE =
    BidRequest_AdSlot_MediationStatus_MediationStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MediationStatus_descriptor() {
    return BidRequest_AdSlot_MediationStatus_descriptor();
  }
  static inline const ::std::string& MediationStatus_Name(MediationStatus value) {
    return BidRequest_AdSlot_MediationStatus_Name(value);
  }
  static inline bool MediationStatus_Parse(const ::std::string& name,
      MediationStatus* value) {
    return BidRequest_AdSlot_MediationStatus_Parse(name, value);
  }

  typedef BidRequest_AdSlot_Stickiness Stickiness;
  static const Stickiness UNKNOWN_STICKINESS = BidRequest_AdSlot_Stickiness_UNKNOWN_STICKINESS;
  static const Stickiness IS_STICKY = BidRequest_AdSlot_Stickiness_IS_STICKY;
  static inline bool Stickiness_IsValid(int value) {
    return BidRequest_AdSlot_Stickiness_IsValid(value);
  }
  static const Stickiness Stickiness_MIN =
    BidRequest_AdSlot_Stickiness_Stickiness_MIN;
  static const Stickiness Stickiness_MAX =
    BidRequest_AdSlot_Stickiness_Stickiness_MAX;
  static const int Stickiness_ARRAYSIZE =
    BidRequest_AdSlot_Stickiness_Stickiness_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Stickiness_descriptor() {
    return BidRequest_AdSlot_Stickiness_descriptor();
  }
  static inline const ::std::string& Stickiness_Name(Stickiness value) {
    return BidRequest_AdSlot_Stickiness_Name(value);
  }
  static inline bool Stickiness_Parse(const ::std::string& name,
      Stickiness* value) {
    return BidRequest_AdSlot_Stickiness_Parse(name, value);
  }

  typedef BidRequest_AdSlot_Renderer Renderer;
  static const Renderer UNKNOWN_RENDERER = BidRequest_AdSlot_Renderer_UNKNOWN_RENDERER;
  static const Renderer GOOGLE = BidRequest_AdSlot_Renderer_GOOGLE;
  static const Renderer PUBLISHER = BidRequest_AdSlot_Renderer_PUBLISHER;
  static inline bool Renderer_IsValid(int value) {
    return BidRequest_AdSlot_Renderer_IsValid(value);
  }
  static const Renderer Renderer_MIN =
    BidRequest_AdSlot_Renderer_Renderer_MIN;
  static const Renderer Renderer_MAX =
    BidRequest_AdSlot_Renderer_Renderer_MAX;
  static const int Renderer_ARRAYSIZE =
    BidRequest_AdSlot_Renderer_Renderer_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Renderer_descriptor() {
    return BidRequest_AdSlot_Renderer_descriptor();
  }
  static inline const ::std::string& Renderer_Name(Renderer value) {
    return BidRequest_AdSlot_Renderer_Name(value);
  }
  static inline bool Renderer_Parse(const ::std::string& name,
      Renderer* value) {
    return BidRequest_AdSlot_Renderer_Parse(name, value);
  }

  typedef BidRequest_AdSlot_AmpAdRequestType AmpAdRequestType;
  static const AmpAdRequestType UNKNOWN_AMP = BidRequest_AdSlot_AmpAdRequestType_UNKNOWN_AMP;
  static const AmpAdRequestType NON_AMP_PAGE = BidRequest_AdSlot_AmpAdRequestType_NON_AMP_PAGE;
  static const AmpAdRequestType AMP_PAGE_LATE_REQUEST = BidRequest_AdSlot_AmpAdRequestType_AMP_PAGE_LATE_REQUEST;
  static inline bool AmpAdRequestType_IsValid(int value) {
    return BidRequest_AdSlot_AmpAdRequestType_IsValid(value);
  }
  static const AmpAdRequestType AmpAdRequestType_MIN =
    BidRequest_AdSlot_AmpAdRequestType_AmpAdRequestType_MIN;
  static const AmpAdRequestType AmpAdRequestType_MAX =
    BidRequest_AdSlot_AmpAdRequestType_AmpAdRequestType_MAX;
  static const int AmpAdRequestType_ARRAYSIZE =
    BidRequest_AdSlot_AmpAdRequestType_AmpAdRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AmpAdRequestType_descriptor() {
    return BidRequest_AdSlot_AmpAdRequestType_descriptor();
  }
  static inline const ::std::string& AmpAdRequestType_Name(AmpAdRequestType value) {
    return BidRequest_AdSlot_AmpAdRequestType_Name(value);
  }
  static inline bool AmpAdRequestType_Parse(const ::std::string& name,
      AmpAdRequestType* value) {
    return BidRequest_AdSlot_AmpAdRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 ad_block_key = 14;
  inline bool has_ad_block_key() const;
  inline void clear_ad_block_key();
  static const int kAdBlockKeyFieldNumber = 14;
  inline ::google::protobuf::uint64 ad_block_key() const;
  inline void set_ad_block_key(::google::protobuf::uint64 value);

  // repeated string targetable_channel = 10;
  inline int targetable_channel_size() const;
  inline void clear_targetable_channel();
  static const int kTargetableChannelFieldNumber = 10;
  inline const ::std::string& targetable_channel(int index) const;
  inline ::std::string* mutable_targetable_channel(int index);
  inline void set_targetable_channel(int index, const ::std::string& value);
  inline void set_targetable_channel(int index, const char* value);
  inline void set_targetable_channel(int index, const char* value, size_t size);
  inline ::std::string* add_targetable_channel();
  inline void add_targetable_channel(const ::std::string& value);
  inline void add_targetable_channel(const char* value);
  inline void add_targetable_channel(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& targetable_channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_targetable_channel();

  // repeated int32 width = 2;
  inline int width_size() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width(int index) const;
  inline void set_width(int index, ::google::protobuf::int32 value);
  inline void add_width(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_width();

  // repeated int32 height = 3;
  inline int height_size() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height(int index) const;
  inline void set_height(int index, ::google::protobuf::int32 value);
  inline void add_height(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      height() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_height();

  // repeated int32 excluded_attribute = 4 [packed = true];
  inline int excluded_attribute_size() const;
  inline void clear_excluded_attribute();
  static const int kExcludedAttributeFieldNumber = 4;
  inline ::google::protobuf::int32 excluded_attribute(int index) const;
  inline void set_excluded_attribute(int index, ::google::protobuf::int32 value);
  inline void add_excluded_attribute(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      excluded_attribute() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_excluded_attribute();

  // repeated int32 allowed_vendor_type = 6 [packed = true];
  inline int allowed_vendor_type_size() const;
  inline void clear_allowed_vendor_type();
  static const int kAllowedVendorTypeFieldNumber = 6;
  inline ::google::protobuf::int32 allowed_vendor_type(int index) const;
  inline void set_allowed_vendor_type(int index, ::google::protobuf::int32 value);
  inline void add_allowed_vendor_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      allowed_vendor_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_allowed_vendor_type();

  // repeated int32 excluded_sensitive_category = 7 [packed = true];
  inline int excluded_sensitive_category_size() const;
  inline void clear_excluded_sensitive_category();
  static const int kExcludedSensitiveCategoryFieldNumber = 7;
  inline ::google::protobuf::int32 excluded_sensitive_category(int index) const;
  inline void set_excluded_sensitive_category(int index, ::google::protobuf::int32 value);
  inline void add_excluded_sensitive_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      excluded_sensitive_category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_excluded_sensitive_category();

  // repeated int32 allowed_restricted_category = 16 [packed = true];
  inline int allowed_restricted_category_size() const;
  inline void clear_allowed_restricted_category();
  static const int kAllowedRestrictedCategoryFieldNumber = 16;
  inline ::google::protobuf::int32 allowed_restricted_category(int index) const;
  inline void set_allowed_restricted_category(int index, ::google::protobuf::int32 value);
  inline void add_allowed_restricted_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      allowed_restricted_category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_allowed_restricted_category();

  // repeated int32 allowed_restricted_category_for_deals = 22 [packed = true];
  inline int allowed_restricted_category_for_deals_size() const;
  inline void clear_allowed_restricted_category_for_deals();
  static const int kAllowedRestrictedCategoryForDealsFieldNumber = 22;
  inline ::google::protobuf::int32 allowed_restricted_category_for_deals(int index) const;
  inline void set_allowed_restricted_category_for_deals(int index, ::google::protobuf::int32 value);
  inline void add_allowed_restricted_category_for_deals(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      allowed_restricted_category_for_deals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_allowed_restricted_category_for_deals();

  // repeated string allowed_languages = 27;
  inline int allowed_languages_size() const;
  inline void clear_allowed_languages();
  static const int kAllowedLanguagesFieldNumber = 27;
  inline const ::std::string& allowed_languages(int index) const;
  inline ::std::string* mutable_allowed_languages(int index);
  inline void set_allowed_languages(int index, const ::std::string& value);
  inline void set_allowed_languages(int index, const char* value);
  inline void set_allowed_languages(int index, const char* value, size_t size);
  inline ::std::string* add_allowed_languages();
  inline void add_allowed_languages(const ::std::string& value);
  inline void add_allowed_languages(const char* value);
  inline void add_allowed_languages(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& allowed_languages() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allowed_languages();

  // repeated int32 excluded_product_category = 13 [packed = true];
  inline int excluded_product_category_size() const;
  inline void clear_excluded_product_category();
  static const int kExcludedProductCategoryFieldNumber = 13;
  inline ::google::protobuf::int32 excluded_product_category(int index) const;
  inline void set_excluded_product_category(int index, ::google::protobuf::int32 value);
  inline void add_excluded_product_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      excluded_product_category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_excluded_product_category();

  // repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
  inline int matching_ad_data_size() const;
  inline void clear_matching_ad_data();
  static const int kMatchingAdDataFieldNumber = 9;
  inline const ::BidRequest_AdSlot_MatchingAdData& matching_ad_data(int index) const;
  inline ::BidRequest_AdSlot_MatchingAdData* mutable_matching_ad_data(int index);
  inline ::BidRequest_AdSlot_MatchingAdData* add_matching_ad_data();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData >&
      matching_ad_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData >*
      mutable_matching_ad_data();

  // repeated fixed64 publisher_settings_list_id = 15;
  inline int publisher_settings_list_id_size() const;
  inline void clear_publisher_settings_list_id();
  static const int kPublisherSettingsListIdFieldNumber = 15;
  inline ::google::protobuf::uint64 publisher_settings_list_id(int index) const;
  inline void set_publisher_settings_list_id(int index, ::google::protobuf::uint64 value);
  inline void add_publisher_settings_list_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      publisher_settings_list_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_publisher_settings_list_id();

  // optional .BidRequest.AdSlot.ExchangeBidding exchange_bidding = 28;
  inline bool has_exchange_bidding() const;
  inline void clear_exchange_bidding();
  static const int kExchangeBiddingFieldNumber = 28;
  inline const ::BidRequest_AdSlot_ExchangeBidding& exchange_bidding() const;
  inline ::BidRequest_AdSlot_ExchangeBidding* mutable_exchange_bidding();
  inline ::BidRequest_AdSlot_ExchangeBidding* release_exchange_bidding();
  inline void set_allocated_exchange_bidding(::BidRequest_AdSlot_ExchangeBidding* exchange_bidding);

  // optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
  inline bool has_slot_visibility() const;
  inline void clear_slot_visibility();
  static const int kSlotVisibilityFieldNumber = 12;
  inline ::BidRequest_AdSlot_SlotVisibility slot_visibility() const;
  inline void set_slot_visibility(::BidRequest_AdSlot_SlotVisibility value);

  // optional int32 viewability = 21 [default = -1];
  inline bool has_viewability() const;
  inline void clear_viewability();
  static const int kViewabilityFieldNumber = 21;
  inline ::google::protobuf::int32 viewability() const;
  inline void set_viewability(::google::protobuf::int32 value);

  // optional float click_through_rate = 25 [default = -1];
  inline bool has_click_through_rate() const;
  inline void clear_click_through_rate();
  static const int kClickThroughRateFieldNumber = 25;
  inline float click_through_rate() const;
  inline void set_click_through_rate(float value);

  // optional .BidRequest.AdSlot.IFramingState iframing_state = 19 [default = UNKNOWN_IFRAME_STATE];
  inline bool has_iframing_state() const;
  inline void clear_iframing_state();
  static const int kIframingStateFieldNumber = 19;
  inline ::BidRequest_AdSlot_IFramingState iframing_state() const;
  inline void set_iframing_state(::BidRequest_AdSlot_IFramingState value);

  // optional .BidRequest.AdSlot.IFramingDepth iframing_depth = 20 [default = UNKNOWN_IFRAME_DEPTH];
  inline bool has_iframing_depth() const;
  inline void clear_iframing_depth();
  static const int kIframingDepthFieldNumber = 20;
  inline ::BidRequest_AdSlot_IFramingDepth iframing_depth() const;
  inline void set_iframing_depth(::BidRequest_AdSlot_IFramingDepth value);

  // repeated .BidRequest.AdSlot.NativeAdTemplate native_ad_template = 51;
  inline int native_ad_template_size() const;
  inline void clear_native_ad_template();
  static const int kNativeAdTemplateFieldNumber = 51;
  inline const ::BidRequest_AdSlot_NativeAdTemplate& native_ad_template(int index) const;
  inline ::BidRequest_AdSlot_NativeAdTemplate* mutable_native_ad_template(int index);
  inline ::BidRequest_AdSlot_NativeAdTemplate* add_native_ad_template();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_NativeAdTemplate >&
      native_ad_template() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_NativeAdTemplate >*
      mutable_native_ad_template();

  // optional .BidRequest.AdSlot.MediationStatus mediation_status = 52 [default = UNKNOWN];
  inline bool has_mediation_status() const;
  inline void clear_mediation_status();
  static const int kMediationStatusFieldNumber = 52;
  inline ::BidRequest_AdSlot_MediationStatus mediation_status() const;
  inline void set_mediation_status(::BidRequest_AdSlot_MediationStatus value);

  // optional .BidRequest.AdSlot.AutoRefresh auto_refresh = 23;
  inline bool has_auto_refresh() const;
  inline void clear_auto_refresh();
  static const int kAutoRefreshFieldNumber = 23;
  inline const ::BidRequest_AdSlot_AutoRefresh& auto_refresh() const;
  inline ::BidRequest_AdSlot_AutoRefresh* mutable_auto_refresh();
  inline ::BidRequest_AdSlot_AutoRefresh* release_auto_refresh();
  inline void set_allocated_auto_refresh(::BidRequest_AdSlot_AutoRefresh* auto_refresh);

  // optional .BidRequest.AdSlot.Stickiness stickiness = 24 [default = UNKNOWN_STICKINESS];
  inline bool has_stickiness() const;
  inline void clear_stickiness();
  static const int kStickinessFieldNumber = 24;
  inline ::BidRequest_AdSlot_Stickiness stickiness() const;
  inline void set_stickiness(::BidRequest_AdSlot_Stickiness value);

  // optional .BidRequest.AdSlot.Renderer renderer = 26 [default = UNKNOWN_RENDERER];
  inline bool has_renderer() const;
  inline void clear_renderer();
  static const int kRendererFieldNumber = 26;
  inline ::BidRequest_AdSlot_Renderer renderer() const;
  inline void set_renderer(::BidRequest_AdSlot_Renderer value);

  // optional .BidRequest.AdSlot.AmpAdRequestType amp_ad_request_type = 29 [default = NON_AMP_PAGE];
  inline bool has_amp_ad_request_type() const;
  inline void clear_amp_ad_request_type();
  static const int kAmpAdRequestTypeFieldNumber = 29;
  inline ::BidRequest_AdSlot_AmpAdRequestType amp_ad_request_type() const;
  inline void set_amp_ad_request_type(::BidRequest_AdSlot_AmpAdRequestType value);

  // repeated int32 DEPRECATED_allowed_attribute = 5;
  inline int deprecated_allowed_attribute_size() const;
  inline void clear_deprecated_allowed_attribute();
  static const int kDEPRECATEDAllowedAttributeFieldNumber = 5;
  inline ::google::protobuf::int32 deprecated_allowed_attribute(int index) const;
  inline void set_deprecated_allowed_attribute(int index, ::google::protobuf::int32 value);
  inline void add_deprecated_allowed_attribute(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      deprecated_allowed_attribute() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_deprecated_allowed_attribute();

  // repeated bytes DEPRECATED_publisher_settings_list_id = 11;
  inline int deprecated_publisher_settings_list_id_size() const;
  inline void clear_deprecated_publisher_settings_list_id();
  static const int kDEPRECATEDPublisherSettingsListIdFieldNumber = 11;
  inline const ::std::string& deprecated_publisher_settings_list_id(int index) const;
  inline ::std::string* mutable_deprecated_publisher_settings_list_id(int index);
  inline void set_deprecated_publisher_settings_list_id(int index, const ::std::string& value);
  inline void set_deprecated_publisher_settings_list_id(int index, const char* value);
  inline void set_deprecated_publisher_settings_list_id(int index, const void* value, size_t size);
  inline ::std::string* add_deprecated_publisher_settings_list_id();
  inline void add_deprecated_publisher_settings_list_id(const ::std::string& value);
  inline void add_deprecated_publisher_settings_list_id(const char* value);
  inline void add_deprecated_publisher_settings_list_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& deprecated_publisher_settings_list_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deprecated_publisher_settings_list_id();

  // repeated string DEPRECATED_excluded_click_through_url = 8;
  inline int deprecated_excluded_click_through_url_size() const;
  inline void clear_deprecated_excluded_click_through_url();
  static const int kDEPRECATEDExcludedClickThroughUrlFieldNumber = 8;
  inline const ::std::string& deprecated_excluded_click_through_url(int index) const;
  inline ::std::string* mutable_deprecated_excluded_click_through_url(int index);
  inline void set_deprecated_excluded_click_through_url(int index, const ::std::string& value);
  inline void set_deprecated_excluded_click_through_url(int index, const char* value);
  inline void set_deprecated_excluded_click_through_url(int index, const char* value, size_t size);
  inline ::std::string* add_deprecated_excluded_click_through_url();
  inline void add_deprecated_excluded_click_through_url(const ::std::string& value);
  inline void add_deprecated_excluded_click_through_url(const char* value);
  inline void add_deprecated_excluded_click_through_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& deprecated_excluded_click_through_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deprecated_excluded_click_through_url();

  // @@protoc_insertion_point(class_scope:BidRequest.AdSlot)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ad_block_key();
  inline void clear_has_ad_block_key();
  inline void set_has_exchange_bidding();
  inline void clear_has_exchange_bidding();
  inline void set_has_slot_visibility();
  inline void clear_has_slot_visibility();
  inline void set_has_viewability();
  inline void clear_has_viewability();
  inline void set_has_click_through_rate();
  inline void clear_has_click_through_rate();
  inline void set_has_iframing_state();
  inline void clear_has_iframing_state();
  inline void set_has_iframing_depth();
  inline void clear_has_iframing_depth();
  inline void set_has_mediation_status();
  inline void clear_has_mediation_status();
  inline void set_has_auto_refresh();
  inline void clear_has_auto_refresh();
  inline void set_has_stickiness();
  inline void clear_has_stickiness();
  inline void set_has_renderer();
  inline void clear_has_renderer();
  inline void set_has_amp_ad_request_type();
  inline void clear_has_amp_ad_request_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ad_block_key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> targetable_channel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > excluded_attribute_;
  mutable int _excluded_attribute_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > allowed_vendor_type_;
  mutable int _allowed_vendor_type_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > excluded_sensitive_category_;
  mutable int _excluded_sensitive_category_cached_byte_size_;
  ::google::protobuf::int32 id_;
  int slot_visibility_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > allowed_restricted_category_;
  mutable int _allowed_restricted_category_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > allowed_restricted_category_for_deals_;
  mutable int _allowed_restricted_category_for_deals_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allowed_languages_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > excluded_product_category_;
  mutable int _excluded_product_category_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData > matching_ad_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > publisher_settings_list_id_;
  ::BidRequest_AdSlot_ExchangeBidding* exchange_bidding_;
  ::google::protobuf::int32 viewability_;
  float click_through_rate_;
  int iframing_state_;
  int iframing_depth_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_NativeAdTemplate > native_ad_template_;
  ::BidRequest_AdSlot_AutoRefresh* auto_refresh_;
  int mediation_status_;
  int stickiness_;
  int renderer_;
  int amp_ad_request_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > deprecated_allowed_attribute_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deprecated_publisher_settings_list_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deprecated_excluded_click_through_url_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdSlot* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_BidResponseFeedback : public ::google::protobuf::Message {
 public:
  BidRequest_BidResponseFeedback();
  virtual ~BidRequest_BidResponseFeedback();

  BidRequest_BidResponseFeedback(const BidRequest_BidResponseFeedback& from);

  inline BidRequest_BidResponseFeedback& operator=(const BidRequest_BidResponseFeedback& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_BidResponseFeedback& default_instance();

  void Swap(BidRequest_BidResponseFeedback* other);

  // implements Message ----------------------------------------------

  BidRequest_BidResponseFeedback* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_BidResponseFeedback& from);
  void MergeFrom(const BidRequest_BidResponseFeedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline const ::std::string& request_id() const;
  inline void set_request_id(const ::std::string& value);
  inline void set_request_id(const char* value);
  inline void set_request_id(const void* value, size_t size);
  inline ::std::string* mutable_request_id();
  inline ::std::string* release_request_id();
  inline void set_allocated_request_id(::std::string* request_id);

  // optional int32 creative_index = 2;
  inline bool has_creative_index() const;
  inline void clear_creative_index();
  static const int kCreativeIndexFieldNumber = 2;
  inline ::google::protobuf::int32 creative_index() const;
  inline void set_creative_index(::google::protobuf::int32 value);

  // optional int32 creative_status_code = 3;
  inline bool has_creative_status_code() const;
  inline void clear_creative_status_code();
  static const int kCreativeStatusCodeFieldNumber = 3;
  inline ::google::protobuf::int32 creative_status_code() const;
  inline void set_creative_status_code(::google::protobuf::int32 value);

  // optional int64 cpm_micros = 4;
  inline bool has_cpm_micros() const;
  inline void clear_cpm_micros();
  static const int kCpmMicrosFieldNumber = 4;
  inline ::google::protobuf::int64 cpm_micros() const;
  inline void set_cpm_micros(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BidRequest.BidResponseFeedback)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_creative_index();
  inline void clear_has_creative_index();
  inline void set_has_creative_status_code();
  inline void clear_has_creative_status_code();
  inline void set_has_cpm_micros();
  inline void clear_has_cpm_micros();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_id_;
  ::google::protobuf::int32 creative_index_;
  ::google::protobuf::int32 creative_status_code_;
  ::google::protobuf::int64 cpm_micros_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_BidResponseFeedback* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_MatchingNetwork : public ::google::protobuf::Message {
 public:
  BidRequest_MatchingNetwork();
  virtual ~BidRequest_MatchingNetwork();

  BidRequest_MatchingNetwork(const BidRequest_MatchingNetwork& from);

  inline BidRequest_MatchingNetwork& operator=(const BidRequest_MatchingNetwork& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_MatchingNetwork& default_instance();

  void Swap(BidRequest_MatchingNetwork* other);

  // implements Message ----------------------------------------------

  BidRequest_MatchingNetwork* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_MatchingNetwork& from);
  void MergeFrom(const BidRequest_MatchingNetwork& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DEPRECATED_network_id = 1;
  inline bool has_deprecated_network_id() const;
  inline void clear_deprecated_network_id();
  static const int kDEPRECATEDNetworkIdFieldNumber = 1;
  inline const ::std::string& deprecated_network_id() const;
  inline void set_deprecated_network_id(const ::std::string& value);
  inline void set_deprecated_network_id(const char* value);
  inline void set_deprecated_network_id(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_network_id();
  inline ::std::string* release_deprecated_network_id();
  inline void set_allocated_deprecated_network_id(::std::string* deprecated_network_id);

  // optional string DEPRECATED_google_user_id = 2;
  inline bool has_deprecated_google_user_id() const;
  inline void clear_deprecated_google_user_id();
  static const int kDEPRECATEDGoogleUserIdFieldNumber = 2;
  inline const ::std::string& deprecated_google_user_id() const;
  inline void set_deprecated_google_user_id(const ::std::string& value);
  inline void set_deprecated_google_user_id(const char* value);
  inline void set_deprecated_google_user_id(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_google_user_id();
  inline ::std::string* release_deprecated_google_user_id();
  inline void set_allocated_deprecated_google_user_id(::std::string* deprecated_google_user_id);

  // @@protoc_insertion_point(class_scope:BidRequest.MatchingNetwork)
 private:
  inline void set_has_deprecated_network_id();
  inline void clear_has_deprecated_network_id();
  inline void set_has_deprecated_google_user_id();
  inline void clear_has_deprecated_google_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* deprecated_network_id_;
  ::std::string* deprecated_google_user_id_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_MatchingNetwork* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest : public ::google::protobuf::Message {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest& default_instance();

  void Swap(BidRequest* other);

  // implements Message ----------------------------------------------

  BidRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Hyperlocal Hyperlocal;
  typedef BidRequest_HyperlocalSet HyperlocalSet;
  typedef BidRequest_UserDemographic UserDemographic;
  typedef BidRequest_UserList UserList;
  typedef BidRequest_Vertical Vertical;
  typedef BidRequest_Device Device;
  typedef BidRequest_KeyValue KeyValue;
  typedef BidRequest_Mobile Mobile;
  typedef BidRequest_Video Video;
  typedef BidRequest_AdSlot AdSlot;
  typedef BidRequest_BidResponseFeedback BidResponseFeedback;
  typedef BidRequest_MatchingNetwork MatchingNetwork;

  typedef BidRequest_UserDataTreatment UserDataTreatment;
  static const UserDataTreatment TAG_FOR_CHILD_DIRECTED_TREATMENT = BidRequest_UserDataTreatment_TAG_FOR_CHILD_DIRECTED_TREATMENT;
  static inline bool UserDataTreatment_IsValid(int value) {
    return BidRequest_UserDataTreatment_IsValid(value);
  }
  static const UserDataTreatment UserDataTreatment_MIN =
    BidRequest_UserDataTreatment_UserDataTreatment_MIN;
  static const UserDataTreatment UserDataTreatment_MAX =
    BidRequest_UserDataTreatment_UserDataTreatment_MAX;
  static const int UserDataTreatment_ARRAYSIZE =
    BidRequest_UserDataTreatment_UserDataTreatment_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UserDataTreatment_descriptor() {
    return BidRequest_UserDataTreatment_descriptor();
  }
  static inline const ::std::string& UserDataTreatment_Name(UserDataTreatment value) {
    return BidRequest_UserDataTreatment_Name(value);
  }
  static inline bool UserDataTreatment_Parse(const ::std::string& name,
      UserDataTreatment* value) {
    return BidRequest_UserDataTreatment_Parse(name, value);
  }

  typedef BidRequest_PublisherType PublisherType;
  static const PublisherType UNKNOWN_PUBLISHER_TYPE = BidRequest_PublisherType_UNKNOWN_PUBLISHER_TYPE;
  static const PublisherType ADX_PUBLISHER_OWNED_AND_OPERATED = BidRequest_PublisherType_ADX_PUBLISHER_OWNED_AND_OPERATED;
  static const PublisherType ADX_PUBLISHER_REPRESENTED = BidRequest_PublisherType_ADX_PUBLISHER_REPRESENTED;
  static const PublisherType GOOGLE_REPRESENTED = BidRequest_PublisherType_GOOGLE_REPRESENTED;
  static inline bool PublisherType_IsValid(int value) {
    return BidRequest_PublisherType_IsValid(value);
  }
  static const PublisherType PublisherType_MIN =
    BidRequest_PublisherType_PublisherType_MIN;
  static const PublisherType PublisherType_MAX =
    BidRequest_PublisherType_PublisherType_MAX;
  static const int PublisherType_ARRAYSIZE =
    BidRequest_PublisherType_PublisherType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PublisherType_descriptor() {
    return BidRequest_PublisherType_descriptor();
  }
  static inline const ::std::string& PublisherType_Name(PublisherType value) {
    return BidRequest_PublisherType_Name(value);
  }
  static inline bool PublisherType_Parse(const ::std::string& name,
      PublisherType* value) {
    return BidRequest_PublisherType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bytes ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // repeated .BidRequest.UserDataTreatment user_data_treatment = 49;
  inline int user_data_treatment_size() const;
  inline void clear_user_data_treatment();
  static const int kUserDataTreatmentFieldNumber = 49;
  inline ::BidRequest_UserDataTreatment user_data_treatment(int index) const;
  inline void set_user_data_treatment(int index, ::BidRequest_UserDataTreatment value);
  inline void add_user_data_treatment(::BidRequest_UserDataTreatment value);
  inline const ::google::protobuf::RepeatedField<int>& user_data_treatment() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_user_data_treatment();

  // optional string google_user_id = 21;
  inline bool has_google_user_id() const;
  inline void clear_google_user_id();
  static const int kGoogleUserIdFieldNumber = 21;
  inline const ::std::string& google_user_id() const;
  inline void set_google_user_id(const ::std::string& value);
  inline void set_google_user_id(const char* value);
  inline void set_google_user_id(const char* value, size_t size);
  inline ::std::string* mutable_google_user_id();
  inline ::std::string* release_google_user_id();
  inline void set_allocated_google_user_id(::std::string* google_user_id);

  // optional string constrained_usage_google_user_id = 47;
  inline bool has_constrained_usage_google_user_id() const;
  inline void clear_constrained_usage_google_user_id();
  static const int kConstrainedUsageGoogleUserIdFieldNumber = 47;
  inline const ::std::string& constrained_usage_google_user_id() const;
  inline void set_constrained_usage_google_user_id(const ::std::string& value);
  inline void set_constrained_usage_google_user_id(const char* value);
  inline void set_constrained_usage_google_user_id(const char* value, size_t size);
  inline ::std::string* mutable_constrained_usage_google_user_id();
  inline ::std::string* release_constrained_usage_google_user_id();
  inline void set_allocated_constrained_usage_google_user_id(::std::string* constrained_usage_google_user_id);

  // optional uint32 cookie_version = 20;
  inline bool has_cookie_version() const;
  inline void clear_cookie_version();
  static const int kCookieVersionFieldNumber = 20;
  inline ::google::protobuf::uint32 cookie_version() const;
  inline void set_cookie_version(::google::protobuf::uint32 value);

  // optional int32 cookie_age_seconds = 31;
  inline bool has_cookie_age_seconds() const;
  inline void clear_cookie_age_seconds();
  static const int kCookieAgeSecondsFieldNumber = 31;
  inline ::google::protobuf::int32 cookie_age_seconds() const;
  inline void set_cookie_age_seconds(::google::protobuf::int32 value);

  // optional bytes hosted_match_data = 37;
  inline bool has_hosted_match_data() const;
  inline void clear_hosted_match_data();
  static const int kHostedMatchDataFieldNumber = 37;
  inline const ::std::string& hosted_match_data() const;
  inline void set_hosted_match_data(const ::std::string& value);
  inline void set_hosted_match_data(const char* value);
  inline void set_hosted_match_data(const void* value, size_t size);
  inline ::std::string* mutable_hosted_match_data();
  inline ::std::string* release_hosted_match_data();
  inline void set_allocated_hosted_match_data(::std::string* hosted_match_data);

  // optional bytes constrained_usage_hosted_match_data = 48;
  inline bool has_constrained_usage_hosted_match_data() const;
  inline void clear_constrained_usage_hosted_match_data();
  static const int kConstrainedUsageHostedMatchDataFieldNumber = 48;
  inline const ::std::string& constrained_usage_hosted_match_data() const;
  inline void set_constrained_usage_hosted_match_data(const ::std::string& value);
  inline void set_constrained_usage_hosted_match_data(const char* value);
  inline void set_constrained_usage_hosted_match_data(const void* value, size_t size);
  inline ::std::string* mutable_constrained_usage_hosted_match_data();
  inline ::std::string* release_constrained_usage_hosted_match_data();
  inline void set_allocated_constrained_usage_hosted_match_data(::std::string* constrained_usage_hosted_match_data);

  // optional string user_agent = 6;
  inline bool has_user_agent() const;
  inline void clear_user_agent();
  static const int kUserAgentFieldNumber = 6;
  inline const ::std::string& user_agent() const;
  inline void set_user_agent(const ::std::string& value);
  inline void set_user_agent(const char* value);
  inline void set_user_agent(const char* value, size_t size);
  inline ::std::string* mutable_user_agent();
  inline ::std::string* release_user_agent();
  inline void set_allocated_user_agent(::std::string* user_agent);

  // optional int32 geo_criteria_id = 39;
  inline bool has_geo_criteria_id() const;
  inline void clear_geo_criteria_id();
  static const int kGeoCriteriaIdFieldNumber = 39;
  inline ::google::protobuf::int32 geo_criteria_id() const;
  inline void set_geo_criteria_id(::google::protobuf::int32 value);

  // optional string postal_code = 33;
  inline bool has_postal_code() const;
  inline void clear_postal_code();
  static const int kPostalCodeFieldNumber = 33;
  inline const ::std::string& postal_code() const;
  inline void set_postal_code(const ::std::string& value);
  inline void set_postal_code(const char* value);
  inline void set_postal_code(const char* value, size_t size);
  inline ::std::string* mutable_postal_code();
  inline ::std::string* release_postal_code();
  inline void set_allocated_postal_code(::std::string* postal_code);

  // optional string postal_code_prefix = 34;
  inline bool has_postal_code_prefix() const;
  inline void clear_postal_code_prefix();
  static const int kPostalCodePrefixFieldNumber = 34;
  inline const ::std::string& postal_code_prefix() const;
  inline void set_postal_code_prefix(const ::std::string& value);
  inline void set_postal_code_prefix(const char* value);
  inline void set_postal_code_prefix(const char* value, size_t size);
  inline ::std::string* mutable_postal_code_prefix();
  inline ::std::string* release_postal_code_prefix();
  inline void set_allocated_postal_code_prefix(::std::string* postal_code_prefix);

  // optional bytes encrypted_hyperlocal_set = 40;
  inline bool has_encrypted_hyperlocal_set() const;
  inline void clear_encrypted_hyperlocal_set();
  static const int kEncryptedHyperlocalSetFieldNumber = 40;
  inline const ::std::string& encrypted_hyperlocal_set() const;
  inline void set_encrypted_hyperlocal_set(const ::std::string& value);
  inline void set_encrypted_hyperlocal_set(const char* value);
  inline void set_encrypted_hyperlocal_set(const void* value, size_t size);
  inline ::std::string* mutable_encrypted_hyperlocal_set();
  inline ::std::string* release_encrypted_hyperlocal_set();
  inline void set_allocated_encrypted_hyperlocal_set(::std::string* encrypted_hyperlocal_set);

  // optional .BidRequest.HyperlocalSet hyperlocal_set = 53;
  inline bool has_hyperlocal_set() const;
  inline void clear_hyperlocal_set();
  static const int kHyperlocalSetFieldNumber = 53;
  inline const ::BidRequest_HyperlocalSet& hyperlocal_set() const;
  inline ::BidRequest_HyperlocalSet* mutable_hyperlocal_set();
  inline ::BidRequest_HyperlocalSet* release_hyperlocal_set();
  inline void set_allocated_hyperlocal_set(::BidRequest_HyperlocalSet* hyperlocal_set);

  // optional int32 timezone_offset = 25;
  inline bool has_timezone_offset() const;
  inline void clear_timezone_offset();
  static const int kTimezoneOffsetFieldNumber = 25;
  inline ::google::protobuf::int32 timezone_offset() const;
  inline void set_timezone_offset(::google::protobuf::int32 value);

  // repeated int32 user_vertical = 30 [packed = true];
  inline int user_vertical_size() const;
  inline void clear_user_vertical();
  static const int kUserVerticalFieldNumber = 30;
  inline ::google::protobuf::int32 user_vertical(int index) const;
  inline void set_user_vertical(int index, ::google::protobuf::int32 value);
  inline void add_user_vertical(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      user_vertical() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_user_vertical();

  // optional .BidRequest.UserDemographic user_demographic = 50;
  inline bool has_user_demographic() const;
  inline void clear_user_demographic();
  static const int kUserDemographicFieldNumber = 50;
  inline const ::BidRequest_UserDemographic& user_demographic() const;
  inline ::BidRequest_UserDemographic* mutable_user_demographic();
  inline ::BidRequest_UserDemographic* release_user_demographic();
  inline void set_allocated_user_demographic(::BidRequest_UserDemographic* user_demographic);

  // repeated .BidRequest.UserList user_list = 32;
  inline int user_list_size() const;
  inline void clear_user_list();
  static const int kUserListFieldNumber = 32;
  inline const ::BidRequest_UserList& user_list(int index) const;
  inline ::BidRequest_UserList* mutable_user_list(int index);
  inline ::BidRequest_UserList* add_user_list();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_UserList >&
      user_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_UserList >*
      mutable_user_list();

  // optional int32 seller_network_id = 41;
  inline bool has_seller_network_id() const;
  inline void clear_seller_network_id();
  static const int kSellerNetworkIdFieldNumber = 41;
  inline ::google::protobuf::int32 seller_network_id() const;
  inline void set_seller_network_id(::google::protobuf::int32 value);

  // optional fixed64 partner_id = 52;
  inline bool has_partner_id() const;
  inline void clear_partner_id();
  static const int kPartnerIdFieldNumber = 52;
  inline ::google::protobuf::uint64 partner_id() const;
  inline void set_partner_id(::google::protobuf::uint64 value);

  // optional string url = 11;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 11;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string anonymous_id = 19;
  inline bool has_anonymous_id() const;
  inline void clear_anonymous_id();
  static const int kAnonymousIdFieldNumber = 19;
  inline const ::std::string& anonymous_id() const;
  inline void set_anonymous_id(const ::std::string& value);
  inline void set_anonymous_id(const char* value);
  inline void set_anonymous_id(const char* value, size_t size);
  inline ::std::string* mutable_anonymous_id();
  inline ::std::string* release_anonymous_id();
  inline void set_allocated_anonymous_id(::std::string* anonymous_id);

  // repeated string detected_language = 12;
  inline int detected_language_size() const;
  inline void clear_detected_language();
  static const int kDetectedLanguageFieldNumber = 12;
  inline const ::std::string& detected_language(int index) const;
  inline ::std::string* mutable_detected_language(int index);
  inline void set_detected_language(int index, const ::std::string& value);
  inline void set_detected_language(int index, const char* value);
  inline void set_detected_language(int index, const char* value, size_t size);
  inline ::std::string* add_detected_language();
  inline void add_detected_language(const ::std::string& value);
  inline void add_detected_language(const char* value);
  inline void add_detected_language(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& detected_language() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_detected_language();

  // repeated .BidRequest.Vertical detected_vertical = 13;
  inline int detected_vertical_size() const;
  inline void clear_detected_vertical();
  static const int kDetectedVerticalFieldNumber = 13;
  inline const ::BidRequest_Vertical& detected_vertical(int index) const;
  inline ::BidRequest_Vertical* mutable_detected_vertical(int index);
  inline ::BidRequest_Vertical* add_detected_vertical();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_Vertical >&
      detected_vertical() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_Vertical >*
      mutable_detected_vertical();

  // repeated int32 detected_content_label = 26 [packed = true];
  inline int detected_content_label_size() const;
  inline void clear_detected_content_label();
  static const int kDetectedContentLabelFieldNumber = 26;
  inline ::google::protobuf::int32 detected_content_label(int index) const;
  inline void set_detected_content_label(int index, ::google::protobuf::int32 value);
  inline void add_detected_content_label(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      detected_content_label() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_detected_content_label();

  // optional .BidRequest.Device device = 54;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 54;
  inline const ::BidRequest_Device& device() const;
  inline ::BidRequest_Device* mutable_device();
  inline ::BidRequest_Device* release_device();
  inline void set_allocated_device(::BidRequest_Device* device);

  // repeated .BidRequest.KeyValue key_value = 38;
  inline int key_value_size() const;
  inline void clear_key_value();
  static const int kKeyValueFieldNumber = 38;
  inline const ::BidRequest_KeyValue& key_value(int index) const;
  inline ::BidRequest_KeyValue* mutable_key_value(int index);
  inline ::BidRequest_KeyValue* add_key_value();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_KeyValue >&
      key_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_KeyValue >*
      mutable_key_value();

  // optional .BidRequest.Mobile mobile = 28;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 28;
  inline const ::BidRequest_Mobile& mobile() const;
  inline ::BidRequest_Mobile* mutable_mobile();
  inline ::BidRequest_Mobile* release_mobile();
  inline void set_allocated_mobile(::BidRequest_Mobile* mobile);

  // optional .BidRequest.Video video = 29;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 29;
  inline const ::BidRequest_Video& video() const;
  inline ::BidRequest_Video* mutable_video();
  inline ::BidRequest_Video* release_video();
  inline void set_allocated_video(::BidRequest_Video* video);

  // optional fixed64 publisher_settings_list_id = 42;
  inline bool has_publisher_settings_list_id() const;
  inline void clear_publisher_settings_list_id();
  static const int kPublisherSettingsListIdFieldNumber = 42;
  inline ::google::protobuf::uint64 publisher_settings_list_id() const;
  inline void set_publisher_settings_list_id(::google::protobuf::uint64 value);

  // optional .BidRequest.PublisherType publisher_type = 51 [default = UNKNOWN_PUBLISHER_TYPE];
  inline bool has_publisher_type() const;
  inline void clear_publisher_type();
  static const int kPublisherTypeFieldNumber = 51;
  inline ::BidRequest_PublisherType publisher_type() const;
  inline void set_publisher_type(::BidRequest_PublisherType value);

  // repeated .BidRequest.AdSlot adslot = 14;
  inline int adslot_size() const;
  inline void clear_adslot();
  static const int kAdslotFieldNumber = 14;
  inline const ::BidRequest_AdSlot& adslot(int index) const;
  inline ::BidRequest_AdSlot* mutable_adslot(int index);
  inline ::BidRequest_AdSlot* add_adslot();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot >&
      adslot() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot >*
      mutable_adslot();

  // repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
  inline int bid_response_feedback_size() const;
  inline void clear_bid_response_feedback();
  static const int kBidResponseFeedbackFieldNumber = 44;
  inline const ::BidRequest_BidResponseFeedback& bid_response_feedback(int index) const;
  inline ::BidRequest_BidResponseFeedback* mutable_bid_response_feedback(int index);
  inline ::BidRequest_BidResponseFeedback* add_bid_response_feedback();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_BidResponseFeedback >&
      bid_response_feedback() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_BidResponseFeedback >*
      mutable_bid_response_feedback();

  // optional bool is_test = 15 [default = false];
  inline bool has_is_test() const;
  inline void clear_is_test();
  static const int kIsTestFieldNumber = 15;
  inline bool is_test() const;
  inline void set_is_test(bool value);

  // optional bool is_ping = 17 [default = false];
  inline bool has_is_ping() const;
  inline void clear_is_ping();
  static const int kIsPingFieldNumber = 17;
  inline bool is_ping() const;
  inline void set_is_ping(bool value);

  // optional bool is_predicted_to_be_ignored = 45 [default = false];
  inline bool has_is_predicted_to_be_ignored() const;
  inline void clear_is_predicted_to_be_ignored();
  static const int kIsPredictedToBeIgnoredFieldNumber = 45;
  inline bool is_predicted_to_be_ignored() const;
  inline void set_is_predicted_to_be_ignored(bool value);

  // optional int32 DEPRECATED_protocol_version = 1;
  inline bool has_deprecated_protocol_version() const;
  inline void clear_deprecated_protocol_version();
  static const int kDEPRECATEDProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::int32 deprecated_protocol_version() const;
  inline void set_deprecated_protocol_version(::google::protobuf::int32 value);

  // optional string DEPRECATED_click_tracking_url = 3;
  inline bool has_deprecated_click_tracking_url() const;
  inline void clear_deprecated_click_tracking_url();
  static const int kDEPRECATEDClickTrackingUrlFieldNumber = 3;
  inline const ::std::string& deprecated_click_tracking_url() const;
  inline void set_deprecated_click_tracking_url(const ::std::string& value);
  inline void set_deprecated_click_tracking_url(const char* value);
  inline void set_deprecated_click_tracking_url(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_click_tracking_url();
  inline ::std::string* release_deprecated_click_tracking_url();
  inline void set_allocated_deprecated_click_tracking_url(::std::string* deprecated_click_tracking_url);

  // optional uint64 DEPRECATED_cookie = 5;
  inline bool has_deprecated_cookie() const;
  inline void clear_deprecated_cookie();
  static const int kDEPRECATEDCookieFieldNumber = 5;
  inline ::google::protobuf::uint64 deprecated_cookie() const;
  inline void set_deprecated_cookie(::google::protobuf::uint64 value);

  // optional string DEPRECATED_country = 7;
  inline bool has_deprecated_country() const;
  inline void clear_deprecated_country();
  static const int kDEPRECATEDCountryFieldNumber = 7;
  inline const ::std::string& deprecated_country() const;
  inline void set_deprecated_country(const ::std::string& value);
  inline void set_deprecated_country(const char* value);
  inline void set_deprecated_country(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_country();
  inline ::std::string* release_deprecated_country();
  inline void set_allocated_deprecated_country(::std::string* deprecated_country);

  // optional string DEPRECATED_region = 8;
  inline bool has_deprecated_region() const;
  inline void clear_deprecated_region();
  static const int kDEPRECATEDRegionFieldNumber = 8;
  inline const ::std::string& deprecated_region() const;
  inline void set_deprecated_region(const ::std::string& value);
  inline void set_deprecated_region(const char* value);
  inline void set_deprecated_region(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_region();
  inline ::std::string* release_deprecated_region();
  inline void set_allocated_deprecated_region(::std::string* deprecated_region);

  // optional string DEPRECATED_city = 9;
  inline bool has_deprecated_city() const;
  inline void clear_deprecated_city();
  static const int kDEPRECATEDCityFieldNumber = 9;
  inline const ::std::string& deprecated_city() const;
  inline void set_deprecated_city(const ::std::string& value);
  inline void set_deprecated_city(const char* value);
  inline void set_deprecated_city(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_city();
  inline ::std::string* release_deprecated_city();
  inline void set_allocated_deprecated_city(::std::string* deprecated_city);

  // optional int32 DEPRECATED_metro = 10;
  inline bool has_deprecated_metro() const;
  inline void clear_deprecated_metro();
  static const int kDEPRECATEDMetroFieldNumber = 10;
  inline ::google::protobuf::int32 deprecated_metro() const;
  inline void set_deprecated_metro(::google::protobuf::int32 value);

  // optional bytes DEPRECATED_hashed_cookie = 16;
  inline bool has_deprecated_hashed_cookie() const;
  inline void clear_deprecated_hashed_cookie();
  static const int kDEPRECATEDHashedCookieFieldNumber = 16;
  inline const ::std::string& deprecated_hashed_cookie() const;
  inline void set_deprecated_hashed_cookie(const ::std::string& value);
  inline void set_deprecated_hashed_cookie(const char* value);
  inline void set_deprecated_hashed_cookie(const void* value, size_t size);
  inline ::std::string* mutable_deprecated_hashed_cookie();
  inline ::std::string* release_deprecated_hashed_cookie();
  inline void set_allocated_deprecated_hashed_cookie(::std::string* deprecated_hashed_cookie);

  // repeated string DEPRECATED_excluded_click_through_url = 18;
  inline int deprecated_excluded_click_through_url_size() const;
  inline void clear_deprecated_excluded_click_through_url();
  static const int kDEPRECATEDExcludedClickThroughUrlFieldNumber = 18;
  inline const ::std::string& deprecated_excluded_click_through_url(int index) const;
  inline ::std::string* mutable_deprecated_excluded_click_through_url(int index);
  inline void set_deprecated_excluded_click_through_url(int index, const ::std::string& value);
  inline void set_deprecated_excluded_click_through_url(int index, const char* value);
  inline void set_deprecated_excluded_click_through_url(int index, const char* value, size_t size);
  inline ::std::string* add_deprecated_excluded_click_through_url();
  inline void add_deprecated_excluded_click_through_url(const ::std::string& value);
  inline void add_deprecated_excluded_click_through_url(const char* value);
  inline void add_deprecated_excluded_click_through_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& deprecated_excluded_click_through_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deprecated_excluded_click_through_url();

  // optional string DEPRECATED_seller_network = 22;
  inline bool has_deprecated_seller_network() const;
  inline void clear_deprecated_seller_network();
  static const int kDEPRECATEDSellerNetworkFieldNumber = 22;
  inline const ::std::string& deprecated_seller_network() const;
  inline void set_deprecated_seller_network(const ::std::string& value);
  inline void set_deprecated_seller_network(const char* value);
  inline void set_deprecated_seller_network(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_seller_network();
  inline ::std::string* release_deprecated_seller_network();
  inline void set_allocated_deprecated_seller_network(::std::string* deprecated_seller_network);

  // optional bytes DEPRECATED_publisher_settings_list_id = 23;
  inline bool has_deprecated_publisher_settings_list_id() const;
  inline void clear_deprecated_publisher_settings_list_id();
  static const int kDEPRECATEDPublisherSettingsListIdFieldNumber = 23;
  inline const ::std::string& deprecated_publisher_settings_list_id() const;
  inline void set_deprecated_publisher_settings_list_id(const ::std::string& value);
  inline void set_deprecated_publisher_settings_list_id(const char* value);
  inline void set_deprecated_publisher_settings_list_id(const void* value, size_t size);
  inline ::std::string* mutable_deprecated_publisher_settings_list_id();
  inline ::std::string* release_deprecated_publisher_settings_list_id();
  inline void set_allocated_deprecated_publisher_settings_list_id(::std::string* deprecated_publisher_settings_list_id);

  // repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
  inline int deprecated_matching_network_size() const;
  inline void clear_deprecated_matching_network();
  static const int kDEPRECATEDMatchingNetworkFieldNumber = 27;
  inline const ::BidRequest_MatchingNetwork& deprecated_matching_network(int index) const;
  inline ::BidRequest_MatchingNetwork* mutable_deprecated_matching_network(int index);
  inline ::BidRequest_MatchingNetwork* add_deprecated_matching_network();
  inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_MatchingNetwork >&
      deprecated_matching_network() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidRequest_MatchingNetwork >*
      mutable_deprecated_matching_network();

  // optional bool DEPRECATED_experimental_deadline = 35 [default = false];
  inline bool has_deprecated_experimental_deadline() const;
  inline void clear_deprecated_experimental_deadline();
  static const int kDEPRECATEDExperimentalDeadlineFieldNumber = 35;
  inline bool deprecated_experimental_deadline() const;
  inline void set_deprecated_experimental_deadline(bool value);

  // repeated int32 DEPRECATED_site_list_id = 36;
  inline int deprecated_site_list_id_size() const;
  inline void clear_deprecated_site_list_id();
  static const int kDEPRECATEDSiteListIdFieldNumber = 36;
  inline ::google::protobuf::int32 deprecated_site_list_id(int index) const;
  inline void set_deprecated_site_list_id(int index, ::google::protobuf::int32 value);
  inline void add_deprecated_site_list_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      deprecated_site_list_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_deprecated_site_list_id();

  // optional int32 DEPRECATED_vertical_dictionary_version = 24;
  inline bool has_deprecated_vertical_dictionary_version() const;
  inline void clear_deprecated_vertical_dictionary_version();
  static const int kDEPRECATEDVerticalDictionaryVersionFieldNumber = 24;
  inline ::google::protobuf::int32 deprecated_vertical_dictionary_version() const;
  inline void set_deprecated_vertical_dictionary_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_google_user_id();
  inline void clear_has_google_user_id();
  inline void set_has_constrained_usage_google_user_id();
  inline void clear_has_constrained_usage_google_user_id();
  inline void set_has_cookie_version();
  inline void clear_has_cookie_version();
  inline void set_has_cookie_age_seconds();
  inline void clear_has_cookie_age_seconds();
  inline void set_has_hosted_match_data();
  inline void clear_has_hosted_match_data();
  inline void set_has_constrained_usage_hosted_match_data();
  inline void clear_has_constrained_usage_hosted_match_data();
  inline void set_has_user_agent();
  inline void clear_has_user_agent();
  inline void set_has_geo_criteria_id();
  inline void clear_has_geo_criteria_id();
  inline void set_has_postal_code();
  inline void clear_has_postal_code();
  inline void set_has_postal_code_prefix();
  inline void clear_has_postal_code_prefix();
  inline void set_has_encrypted_hyperlocal_set();
  inline void clear_has_encrypted_hyperlocal_set();
  inline void set_has_hyperlocal_set();
  inline void clear_has_hyperlocal_set();
  inline void set_has_timezone_offset();
  inline void clear_has_timezone_offset();
  inline void set_has_user_demographic();
  inline void clear_has_user_demographic();
  inline void set_has_seller_network_id();
  inline void clear_has_seller_network_id();
  inline void set_has_partner_id();
  inline void clear_has_partner_id();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_anonymous_id();
  inline void clear_has_anonymous_id();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_video();
  inline void clear_has_video();
  inline void set_has_publisher_settings_list_id();
  inline void clear_has_publisher_settings_list_id();
  inline void set_has_publisher_type();
  inline void clear_has_publisher_type();
  inline void set_has_is_test();
  inline void clear_has_is_test();
  inline void set_has_is_ping();
  inline void clear_has_is_ping();
  inline void set_has_is_predicted_to_be_ignored();
  inline void clear_has_is_predicted_to_be_ignored();
  inline void set_has_deprecated_protocol_version();
  inline void clear_has_deprecated_protocol_version();
  inline void set_has_deprecated_click_tracking_url();
  inline void clear_has_deprecated_click_tracking_url();
  inline void set_has_deprecated_cookie();
  inline void clear_has_deprecated_cookie();
  inline void set_has_deprecated_country();
  inline void clear_has_deprecated_country();
  inline void set_has_deprecated_region();
  inline void clear_has_deprecated_region();
  inline void set_has_deprecated_city();
  inline void clear_has_deprecated_city();
  inline void set_has_deprecated_metro();
  inline void clear_has_deprecated_metro();
  inline void set_has_deprecated_hashed_cookie();
  inline void clear_has_deprecated_hashed_cookie();
  inline void set_has_deprecated_seller_network();
  inline void clear_has_deprecated_seller_network();
  inline void set_has_deprecated_publisher_settings_list_id();
  inline void clear_has_deprecated_publisher_settings_list_id();
  inline void set_has_deprecated_experimental_deadline();
  inline void clear_has_deprecated_experimental_deadline();
  inline void set_has_deprecated_vertical_dictionary_version();
  inline void clear_has_deprecated_vertical_dictionary_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* id_;
  ::std::string* ip_;
  ::google::protobuf::RepeatedField<int> user_data_treatment_;
  ::std::string* google_user_id_;
  ::std::string* constrained_usage_google_user_id_;
  ::google::protobuf::uint32 cookie_version_;
  ::google::protobuf::int32 cookie_age_seconds_;
  ::std::string* hosted_match_data_;
  ::std::string* constrained_usage_hosted_match_data_;
  ::std::string* user_agent_;
  ::std::string* postal_code_;
  ::std::string* postal_code_prefix_;
  ::google::protobuf::int32 geo_criteria_id_;
  ::google::protobuf::int32 timezone_offset_;
  ::std::string* encrypted_hyperlocal_set_;
  ::BidRequest_HyperlocalSet* hyperlocal_set_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > user_vertical_;
  mutable int _user_vertical_cached_byte_size_;
  ::BidRequest_UserDemographic* user_demographic_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_UserList > user_list_;
  ::google::protobuf::uint64 partner_id_;
  ::std::string* url_;
  ::std::string* anonymous_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> detected_language_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_Vertical > detected_vertical_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > detected_content_label_;
  mutable int _detected_content_label_cached_byte_size_;
  ::google::protobuf::int32 seller_network_id_;
  int publisher_type_;
  ::BidRequest_Device* device_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_KeyValue > key_value_;
  ::BidRequest_Mobile* mobile_;
  ::BidRequest_Video* video_;
  ::google::protobuf::uint64 publisher_settings_list_id_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot > adslot_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_BidResponseFeedback > bid_response_feedback_;
  ::std::string* deprecated_click_tracking_url_;
  ::google::protobuf::int32 deprecated_protocol_version_;
  bool is_test_;
  bool is_ping_;
  bool is_predicted_to_be_ignored_;
  bool deprecated_experimental_deadline_;
  ::google::protobuf::uint64 deprecated_cookie_;
  ::std::string* deprecated_country_;
  ::std::string* deprecated_region_;
  ::std::string* deprecated_city_;
  ::std::string* deprecated_hashed_cookie_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deprecated_excluded_click_through_url_;
  ::std::string* deprecated_seller_network_;
  ::std::string* deprecated_publisher_settings_list_id_;
  ::google::protobuf::int32 deprecated_metro_;
  ::google::protobuf::int32 deprecated_vertical_dictionary_version_;
  ::google::protobuf::RepeatedPtrField< ::BidRequest_MatchingNetwork > deprecated_matching_network_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > deprecated_site_list_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_Ad_NativeAd_Image : public ::google::protobuf::Message {
 public:
  BidResponse_Ad_NativeAd_Image();
  virtual ~BidResponse_Ad_NativeAd_Image();

  BidResponse_Ad_NativeAd_Image(const BidResponse_Ad_NativeAd_Image& from);

  inline BidResponse_Ad_NativeAd_Image& operator=(const BidResponse_Ad_NativeAd_Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_Ad_NativeAd_Image& default_instance();

  void Swap(BidResponse_Ad_NativeAd_Image* other);

  // implements Message ----------------------------------------------

  BidResponse_Ad_NativeAd_Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_Ad_NativeAd_Image& from);
  void MergeFrom(const BidResponse_Ad_NativeAd_Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidResponse.Ad.NativeAd.Image)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_Ad_NativeAd_Image* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_Ad_NativeAd : public ::google::protobuf::Message {
 public:
  BidResponse_Ad_NativeAd();
  virtual ~BidResponse_Ad_NativeAd();

  BidResponse_Ad_NativeAd(const BidResponse_Ad_NativeAd& from);

  inline BidResponse_Ad_NativeAd& operator=(const BidResponse_Ad_NativeAd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_Ad_NativeAd& default_instance();

  void Swap(BidResponse_Ad_NativeAd* other);

  // implements Message ----------------------------------------------

  BidResponse_Ad_NativeAd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_Ad_NativeAd& from);
  void MergeFrom(const BidResponse_Ad_NativeAd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_Ad_NativeAd_Image Image;

  // accessors -------------------------------------------------------

  // optional string headline = 1;
  inline bool has_headline() const;
  inline void clear_headline();
  static const int kHeadlineFieldNumber = 1;
  inline const ::std::string& headline() const;
  inline void set_headline(const ::std::string& value);
  inline void set_headline(const char* value);
  inline void set_headline(const char* value, size_t size);
  inline ::std::string* mutable_headline();
  inline ::std::string* release_headline();
  inline void set_allocated_headline(::std::string* headline);

  // optional string body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional string call_to_action = 3;
  inline bool has_call_to_action() const;
  inline void clear_call_to_action();
  static const int kCallToActionFieldNumber = 3;
  inline const ::std::string& call_to_action() const;
  inline void set_call_to_action(const ::std::string& value);
  inline void set_call_to_action(const char* value);
  inline void set_call_to_action(const char* value, size_t size);
  inline ::std::string* mutable_call_to_action();
  inline ::std::string* release_call_to_action();
  inline void set_allocated_call_to_action(::std::string* call_to_action);

  // optional string advertiser = 4;
  inline bool has_advertiser() const;
  inline void clear_advertiser();
  static const int kAdvertiserFieldNumber = 4;
  inline const ::std::string& advertiser() const;
  inline void set_advertiser(const ::std::string& value);
  inline void set_advertiser(const char* value);
  inline void set_advertiser(const char* value, size_t size);
  inline ::std::string* mutable_advertiser();
  inline ::std::string* release_advertiser();
  inline void set_allocated_advertiser(::std::string* advertiser);

  // optional .BidResponse.Ad.NativeAd.Image image = 5;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 5;
  inline const ::BidResponse_Ad_NativeAd_Image& image() const;
  inline ::BidResponse_Ad_NativeAd_Image* mutable_image();
  inline ::BidResponse_Ad_NativeAd_Image* release_image();
  inline void set_allocated_image(::BidResponse_Ad_NativeAd_Image* image);

  // optional .BidResponse.Ad.NativeAd.Image logo = 6;
  inline bool has_logo() const;
  inline void clear_logo();
  static const int kLogoFieldNumber = 6;
  inline const ::BidResponse_Ad_NativeAd_Image& logo() const;
  inline ::BidResponse_Ad_NativeAd_Image* mutable_logo();
  inline ::BidResponse_Ad_NativeAd_Image* release_logo();
  inline void set_allocated_logo(::BidResponse_Ad_NativeAd_Image* logo);

  // optional .BidResponse.Ad.NativeAd.Image app_icon = 7;
  inline bool has_app_icon() const;
  inline void clear_app_icon();
  static const int kAppIconFieldNumber = 7;
  inline const ::BidResponse_Ad_NativeAd_Image& app_icon() const;
  inline ::BidResponse_Ad_NativeAd_Image* mutable_app_icon();
  inline ::BidResponse_Ad_NativeAd_Image* release_app_icon();
  inline void set_allocated_app_icon(::BidResponse_Ad_NativeAd_Image* app_icon);

  // optional double star_rating = 8;
  inline bool has_star_rating() const;
  inline void clear_star_rating();
  static const int kStarRatingFieldNumber = 8;
  inline double star_rating() const;
  inline void set_star_rating(double value);

  // optional string click_tracking_url = 11;
  inline bool has_click_tracking_url() const;
  inline void clear_click_tracking_url();
  static const int kClickTrackingUrlFieldNumber = 11;
  inline const ::std::string& click_tracking_url() const;
  inline void set_click_tracking_url(const ::std::string& value);
  inline void set_click_tracking_url(const char* value);
  inline void set_click_tracking_url(const char* value, size_t size);
  inline ::std::string* mutable_click_tracking_url();
  inline ::std::string* release_click_tracking_url();
  inline void set_allocated_click_tracking_url(::std::string* click_tracking_url);

  // optional string price = 10;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 10;
  inline const ::std::string& price() const;
  inline void set_price(const ::std::string& value);
  inline void set_price(const char* value);
  inline void set_price(const char* value, size_t size);
  inline ::std::string* mutable_price();
  inline ::std::string* release_price();
  inline void set_allocated_price(::std::string* price);

  // optional string store = 12;
  inline bool has_store() const;
  inline void clear_store();
  static const int kStoreFieldNumber = 12;
  inline const ::std::string& store() const;
  inline void set_store(const ::std::string& value);
  inline void set_store(const char* value);
  inline void set_store(const char* value, size_t size);
  inline ::std::string* mutable_store();
  inline ::std::string* release_store();
  inline void set_allocated_store(::std::string* store);

  // repeated string DEPRECATED_impression_tracking_url = 9;
  inline int deprecated_impression_tracking_url_size() const;
  inline void clear_deprecated_impression_tracking_url();
  static const int kDEPRECATEDImpressionTrackingUrlFieldNumber = 9;
  inline const ::std::string& deprecated_impression_tracking_url(int index) const;
  inline ::std::string* mutable_deprecated_impression_tracking_url(int index);
  inline void set_deprecated_impression_tracking_url(int index, const ::std::string& value);
  inline void set_deprecated_impression_tracking_url(int index, const char* value);
  inline void set_deprecated_impression_tracking_url(int index, const char* value, size_t size);
  inline ::std::string* add_deprecated_impression_tracking_url();
  inline void add_deprecated_impression_tracking_url(const ::std::string& value);
  inline void add_deprecated_impression_tracking_url(const char* value);
  inline void add_deprecated_impression_tracking_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& deprecated_impression_tracking_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deprecated_impression_tracking_url();

  // @@protoc_insertion_point(class_scope:BidResponse.Ad.NativeAd)
 private:
  inline void set_has_headline();
  inline void clear_has_headline();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_call_to_action();
  inline void clear_has_call_to_action();
  inline void set_has_advertiser();
  inline void clear_has_advertiser();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_logo();
  inline void clear_has_logo();
  inline void set_has_app_icon();
  inline void clear_has_app_icon();
  inline void set_has_star_rating();
  inline void clear_has_star_rating();
  inline void set_has_click_tracking_url();
  inline void clear_has_click_tracking_url();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_store();
  inline void clear_has_store();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* headline_;
  ::std::string* body_;
  ::std::string* call_to_action_;
  ::std::string* advertiser_;
  ::BidResponse_Ad_NativeAd_Image* image_;
  ::BidResponse_Ad_NativeAd_Image* logo_;
  ::BidResponse_Ad_NativeAd_Image* app_icon_;
  double star_rating_;
  ::std::string* click_tracking_url_;
  ::std::string* price_;
  ::std::string* store_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deprecated_impression_tracking_url_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_Ad_NativeAd* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_Ad_AdSlot : public ::google::protobuf::Message {
 public:
  BidResponse_Ad_AdSlot();
  virtual ~BidResponse_Ad_AdSlot();

  BidResponse_Ad_AdSlot(const BidResponse_Ad_AdSlot& from);

  inline BidResponse_Ad_AdSlot& operator=(const BidResponse_Ad_AdSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_Ad_AdSlot& default_instance();

  void Swap(BidResponse_Ad_AdSlot* other);

  // implements Message ----------------------------------------------

  BidResponse_Ad_AdSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_Ad_AdSlot& from);
  void MergeFrom(const BidResponse_Ad_AdSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int64 max_cpm_micros = 2;
  inline bool has_max_cpm_micros() const;
  inline void clear_max_cpm_micros();
  static const int kMaxCpmMicrosFieldNumber = 2;
  inline ::google::protobuf::int64 max_cpm_micros() const;
  inline void set_max_cpm_micros(::google::protobuf::int64 value);

  // optional int64 min_cpm_micros = 3;
  inline bool has_min_cpm_micros() const;
  inline void clear_min_cpm_micros();
  static const int kMinCpmMicrosFieldNumber = 3;
  inline ::google::protobuf::int64 min_cpm_micros() const;
  inline void set_min_cpm_micros(::google::protobuf::int64 value);

  // optional int64 billing_id = 4;
  inline bool has_billing_id() const;
  inline void clear_billing_id();
  static const int kBillingIdFieldNumber = 4;
  inline ::google::protobuf::int64 billing_id() const;
  inline void set_billing_id(::google::protobuf::int64 value);

  // optional int64 deal_id = 5 [default = 0];
  inline bool has_deal_id() const;
  inline void clear_deal_id();
  static const int kDealIdFieldNumber = 5;
  inline ::google::protobuf::int64 deal_id() const;
  inline void set_deal_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BidResponse.Ad.AdSlot)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_max_cpm_micros();
  inline void clear_has_max_cpm_micros();
  inline void set_has_min_cpm_micros();
  inline void clear_has_min_cpm_micros();
  inline void set_has_billing_id();
  inline void clear_has_billing_id();
  inline void set_has_deal_id();
  inline void clear_has_deal_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 max_cpm_micros_;
  ::google::protobuf::int64 min_cpm_micros_;
  ::google::protobuf::int64 billing_id_;
  ::google::protobuf::int64 deal_id_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_Ad_AdSlot* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_Ad_TemplateParameter : public ::google::protobuf::Message {
 public:
  BidResponse_Ad_TemplateParameter();
  virtual ~BidResponse_Ad_TemplateParameter();

  BidResponse_Ad_TemplateParameter(const BidResponse_Ad_TemplateParameter& from);

  inline BidResponse_Ad_TemplateParameter& operator=(const BidResponse_Ad_TemplateParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_Ad_TemplateParameter& default_instance();

  void Swap(BidResponse_Ad_TemplateParameter* other);

  // implements Message ----------------------------------------------

  BidResponse_Ad_TemplateParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_Ad_TemplateParameter& from);
  void MergeFrom(const BidResponse_Ad_TemplateParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string parameter_value = 1;
  inline bool has_parameter_value() const;
  inline void clear_parameter_value();
  static const int kParameterValueFieldNumber = 1;
  inline const ::std::string& parameter_value() const;
  inline void set_parameter_value(const ::std::string& value);
  inline void set_parameter_value(const char* value);
  inline void set_parameter_value(const char* value, size_t size);
  inline ::std::string* mutable_parameter_value();
  inline ::std::string* release_parameter_value();
  inline void set_allocated_parameter_value(::std::string* parameter_value);

  // optional string blank_ad_parameter_value = 8;
  inline bool has_blank_ad_parameter_value() const;
  inline void clear_blank_ad_parameter_value();
  static const int kBlankAdParameterValueFieldNumber = 8;
  inline const ::std::string& blank_ad_parameter_value() const;
  inline void set_blank_ad_parameter_value(const ::std::string& value);
  inline void set_blank_ad_parameter_value(const char* value);
  inline void set_blank_ad_parameter_value(const char* value, size_t size);
  inline ::std::string* mutable_blank_ad_parameter_value();
  inline ::std::string* release_blank_ad_parameter_value();
  inline void set_allocated_blank_ad_parameter_value(::std::string* blank_ad_parameter_value);

  // optional string buyer_creative_id = 2;
  inline bool has_buyer_creative_id() const;
  inline void clear_buyer_creative_id();
  static const int kBuyerCreativeIdFieldNumber = 2;
  inline const ::std::string& buyer_creative_id() const;
  inline void set_buyer_creative_id(const ::std::string& value);
  inline void set_buyer_creative_id(const char* value);
  inline void set_buyer_creative_id(const char* value, size_t size);
  inline ::std::string* mutable_buyer_creative_id();
  inline ::std::string* release_buyer_creative_id();
  inline void set_allocated_buyer_creative_id(::std::string* buyer_creative_id);

  // optional string click_through_url = 3;
  inline bool has_click_through_url() const;
  inline void clear_click_through_url();
  static const int kClickThroughUrlFieldNumber = 3;
  inline const ::std::string& click_through_url() const;
  inline void set_click_through_url(const ::std::string& value);
  inline void set_click_through_url(const char* value);
  inline void set_click_through_url(const char* value, size_t size);
  inline ::std::string* mutable_click_through_url();
  inline ::std::string* release_click_through_url();
  inline void set_allocated_click_through_url(::std::string* click_through_url);

  // optional int32 left = 4;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 4;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);

  // optional int32 right = 5;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 5;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);

  // optional int32 top = 6;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 6;
  inline ::google::protobuf::int32 top() const;
  inline void set_top(::google::protobuf::int32 value);

  // optional int32 bottom = 7;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 7;
  inline ::google::protobuf::int32 bottom() const;
  inline void set_bottom(::google::protobuf::int32 value);

  // optional int32 backup_index = 9;
  inline bool has_backup_index() const;
  inline void clear_backup_index();
  static const int kBackupIndexFieldNumber = 9;
  inline ::google::protobuf::int32 backup_index() const;
  inline void set_backup_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidResponse.Ad.TemplateParameter)
 private:
  inline void set_has_parameter_value();
  inline void clear_has_parameter_value();
  inline void set_has_blank_ad_parameter_value();
  inline void clear_has_blank_ad_parameter_value();
  inline void set_has_buyer_creative_id();
  inline void clear_has_buyer_creative_id();
  inline void set_has_click_through_url();
  inline void clear_has_click_through_url();
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_bottom();
  inline void clear_has_bottom();
  inline void set_has_backup_index();
  inline void clear_has_backup_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parameter_value_;
  ::std::string* blank_ad_parameter_value_;
  ::std::string* buyer_creative_id_;
  ::std::string* click_through_url_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 bottom_;
  ::google::protobuf::int32 backup_index_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_Ad_TemplateParameter* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_Ad : public ::google::protobuf::Message {
 public:
  BidResponse_Ad();
  virtual ~BidResponse_Ad();

  BidResponse_Ad(const BidResponse_Ad& from);

  inline BidResponse_Ad& operator=(const BidResponse_Ad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_Ad& default_instance();

  void Swap(BidResponse_Ad* other);

  // implements Message ----------------------------------------------

  BidResponse_Ad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_Ad& from);
  void MergeFrom(const BidResponse_Ad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_Ad_NativeAd NativeAd;
  typedef BidResponse_Ad_AdSlot AdSlot;
  typedef BidResponse_Ad_TemplateParameter TemplateParameter;

  // accessors -------------------------------------------------------

  // optional string buyer_creative_id = 10;
  inline bool has_buyer_creative_id() const;
  inline void clear_buyer_creative_id();
  static const int kBuyerCreativeIdFieldNumber = 10;
  inline const ::std::string& buyer_creative_id() const;
  inline void set_buyer_creative_id(const ::std::string& value);
  inline void set_buyer_creative_id(const char* value);
  inline void set_buyer_creative_id(const char* value, size_t size);
  inline ::std::string* mutable_buyer_creative_id();
  inline ::std::string* release_buyer_creative_id();
  inline void set_allocated_buyer_creative_id(::std::string* buyer_creative_id);

  // optional string html_snippet = 1;
  inline bool has_html_snippet() const;
  inline void clear_html_snippet();
  static const int kHtmlSnippetFieldNumber = 1;
  inline const ::std::string& html_snippet() const;
  inline void set_html_snippet(const ::std::string& value);
  inline void set_html_snippet(const char* value);
  inline void set_html_snippet(const char* value, size_t size);
  inline ::std::string* mutable_html_snippet();
  inline ::std::string* release_html_snippet();
  inline void set_allocated_html_snippet(::std::string* html_snippet);

  // optional string video_url = 9;
  inline bool has_video_url() const;
  inline void clear_video_url();
  static const int kVideoUrlFieldNumber = 9;
  inline const ::std::string& video_url() const;
  inline void set_video_url(const ::std::string& value);
  inline void set_video_url(const char* value);
  inline void set_video_url(const char* value, size_t size);
  inline ::std::string* mutable_video_url();
  inline ::std::string* release_video_url();
  inline void set_allocated_video_url(::std::string* video_url);

  // optional .BidResponse.Ad.NativeAd native_ad = 18;
  inline bool has_native_ad() const;
  inline void clear_native_ad();
  static const int kNativeAdFieldNumber = 18;
  inline const ::BidResponse_Ad_NativeAd& native_ad() const;
  inline ::BidResponse_Ad_NativeAd* mutable_native_ad();
  inline ::BidResponse_Ad_NativeAd* release_native_ad();
  inline void set_allocated_native_ad(::BidResponse_Ad_NativeAd* native_ad);

  // repeated string click_through_url = 4;
  inline int click_through_url_size() const;
  inline void clear_click_through_url();
  static const int kClickThroughUrlFieldNumber = 4;
  inline const ::std::string& click_through_url(int index) const;
  inline ::std::string* mutable_click_through_url(int index);
  inline void set_click_through_url(int index, const ::std::string& value);
  inline void set_click_through_url(int index, const char* value);
  inline void set_click_through_url(int index, const char* value, size_t size);
  inline ::std::string* add_click_through_url();
  inline void add_click_through_url(const ::std::string& value);
  inline void add_click_through_url(const char* value);
  inline void add_click_through_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& click_through_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_click_through_url();

  // repeated int32 vendor_type = 5;
  inline int vendor_type_size() const;
  inline void clear_vendor_type();
  static const int kVendorTypeFieldNumber = 5;
  inline ::google::protobuf::int32 vendor_type(int index) const;
  inline void set_vendor_type(int index, ::google::protobuf::int32 value);
  inline void add_vendor_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vendor_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vendor_type();

  // repeated int32 attribute = 6;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 6;
  inline ::google::protobuf::int32 attribute(int index) const;
  inline void set_attribute(int index, ::google::protobuf::int32 value);
  inline void add_attribute(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attribute() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attribute();

  // repeated int32 category = 7;
  inline int category_size() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 7;
  inline ::google::protobuf::int32 category(int index) const;
  inline void set_category(int index, ::google::protobuf::int32 value);
  inline void add_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_category();

  // repeated int32 restricted_category = 17;
  inline int restricted_category_size() const;
  inline void clear_restricted_category();
  static const int kRestrictedCategoryFieldNumber = 17;
  inline ::google::protobuf::int32 restricted_category(int index) const;
  inline void set_restricted_category(int index, ::google::protobuf::int32 value);
  inline void add_restricted_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      restricted_category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_restricted_category();

  // repeated string advertiser_name = 11;
  inline int advertiser_name_size() const;
  inline void clear_advertiser_name();
  static const int kAdvertiserNameFieldNumber = 11;
  inline const ::std::string& advertiser_name(int index) const;
  inline ::std::string* mutable_advertiser_name(int index);
  inline void set_advertiser_name(int index, const ::std::string& value);
  inline void set_advertiser_name(int index, const char* value);
  inline void set_advertiser_name(int index, const char* value, size_t size);
  inline ::std::string* add_advertiser_name();
  inline void add_advertiser_name(const ::std::string& value);
  inline void add_advertiser_name(const char* value);
  inline void add_advertiser_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& advertiser_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_advertiser_name();

  // optional string bidder_name = 22;
  inline bool has_bidder_name() const;
  inline void clear_bidder_name();
  static const int kBidderNameFieldNumber = 22;
  inline const ::std::string& bidder_name() const;
  inline void set_bidder_name(const ::std::string& value);
  inline void set_bidder_name(const char* value);
  inline void set_bidder_name(const char* value, size_t size);
  inline ::std::string* mutable_bidder_name();
  inline ::std::string* release_bidder_name();
  inline void set_allocated_bidder_name(::std::string* bidder_name);

  // optional int32 width = 14;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 14;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 15;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 15;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int64 agency_id = 16;
  inline bool has_agency_id() const;
  inline void clear_agency_id();
  static const int kAgencyIdFieldNumber = 16;
  inline ::google::protobuf::int64 agency_id() const;
  inline void set_agency_id(::google::protobuf::int64 value);

  // repeated .BidResponse.Ad.AdSlot adslot = 3;
  inline int adslot_size() const;
  inline void clear_adslot();
  static const int kAdslotFieldNumber = 3;
  inline const ::BidResponse_Ad_AdSlot& adslot(int index) const;
  inline ::BidResponse_Ad_AdSlot* mutable_adslot(int index);
  inline ::BidResponse_Ad_AdSlot* add_adslot();
  inline const ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_AdSlot >&
      adslot() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_AdSlot >*
      mutable_adslot();

  // repeated string impression_tracking_url = 19;
  inline int impression_tracking_url_size() const;
  inline void clear_impression_tracking_url();
  static const int kImpressionTrackingUrlFieldNumber = 19;
  inline const ::std::string& impression_tracking_url(int index) const;
  inline ::std::string* mutable_impression_tracking_url(int index);
  inline void set_impression_tracking_url(int index, const ::std::string& value);
  inline void set_impression_tracking_url(int index, const char* value);
  inline void set_impression_tracking_url(int index, const char* value, size_t size);
  inline ::std::string* add_impression_tracking_url();
  inline void add_impression_tracking_url(const ::std::string& value);
  inline void add_impression_tracking_url(const char* value);
  inline void add_impression_tracking_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& impression_tracking_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impression_tracking_url();

  // optional string ad_choices_destination_url = 21;
  inline bool has_ad_choices_destination_url() const;
  inline void clear_ad_choices_destination_url();
  static const int kAdChoicesDestinationUrlFieldNumber = 21;
  inline const ::std::string& ad_choices_destination_url() const;
  inline void set_ad_choices_destination_url(const ::std::string& value);
  inline void set_ad_choices_destination_url(const char* value);
  inline void set_ad_choices_destination_url(const char* value, size_t size);
  inline ::std::string* mutable_ad_choices_destination_url();
  inline ::std::string* release_ad_choices_destination_url();
  inline void set_allocated_ad_choices_destination_url(::std::string* ad_choices_destination_url);

  // optional int64 DEPRECATED_creative_id = 8;
  inline bool has_deprecated_creative_id() const;
  inline void clear_deprecated_creative_id();
  static const int kDEPRECATEDCreativeIdFieldNumber = 8;
  inline ::google::protobuf::int64 deprecated_creative_id() const;
  inline void set_deprecated_creative_id(::google::protobuf::int64 value);

  // optional string DEPRECATED_click_through_url = 2;
  inline bool has_deprecated_click_through_url() const;
  inline void clear_deprecated_click_through_url();
  static const int kDEPRECATEDClickThroughUrlFieldNumber = 2;
  inline const ::std::string& deprecated_click_through_url() const;
  inline void set_deprecated_click_through_url(const ::std::string& value);
  inline void set_deprecated_click_through_url(const char* value);
  inline void set_deprecated_click_through_url(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_click_through_url();
  inline ::std::string* release_deprecated_click_through_url();
  inline void set_allocated_deprecated_click_through_url(::std::string* deprecated_click_through_url);

  // optional string DEPRECATED_snippet_template = 12;
  inline bool has_deprecated_snippet_template() const;
  inline void clear_deprecated_snippet_template();
  static const int kDEPRECATEDSnippetTemplateFieldNumber = 12;
  inline const ::std::string& deprecated_snippet_template() const;
  inline void set_deprecated_snippet_template(const ::std::string& value);
  inline void set_deprecated_snippet_template(const char* value);
  inline void set_deprecated_snippet_template(const char* value, size_t size);
  inline ::std::string* mutable_deprecated_snippet_template();
  inline ::std::string* release_deprecated_snippet_template();
  inline void set_allocated_deprecated_snippet_template(::std::string* deprecated_snippet_template);

  // repeated .BidResponse.Ad.TemplateParameter DEPRECATED_template_parameter = 13;
  inline int deprecated_template_parameter_size() const;
  inline void clear_deprecated_template_parameter();
  static const int kDEPRECATEDTemplateParameterFieldNumber = 13;
  inline const ::BidResponse_Ad_TemplateParameter& deprecated_template_parameter(int index) const;
  inline ::BidResponse_Ad_TemplateParameter* mutable_deprecated_template_parameter(int index);
  inline ::BidResponse_Ad_TemplateParameter* add_deprecated_template_parameter();
  inline const ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_TemplateParameter >&
      deprecated_template_parameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_TemplateParameter >*
      mutable_deprecated_template_parameter();

  // @@protoc_insertion_point(class_scope:BidResponse.Ad)
 private:
  inline void set_has_buyer_creative_id();
  inline void clear_has_buyer_creative_id();
  inline void set_has_html_snippet();
  inline void clear_has_html_snippet();
  inline void set_has_video_url();
  inline void clear_has_video_url();
  inline void set_has_native_ad();
  inline void clear_has_native_ad();
  inline void set_has_bidder_name();
  inline void clear_has_bidder_name();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_agency_id();
  inline void clear_has_agency_id();
  inline void set_has_ad_choices_destination_url();
  inline void clear_has_ad_choices_destination_url();
  inline void set_has_deprecated_creative_id();
  inline void clear_has_deprecated_creative_id();
  inline void set_has_deprecated_click_through_url();
  inline void clear_has_deprecated_click_through_url();
  inline void set_has_deprecated_snippet_template();
  inline void clear_has_deprecated_snippet_template();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* buyer_creative_id_;
  ::std::string* html_snippet_;
  ::std::string* video_url_;
  ::BidResponse_Ad_NativeAd* native_ad_;
  ::google::protobuf::RepeatedPtrField< ::std::string> click_through_url_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vendor_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attribute_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > category_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > restricted_category_;
  ::google::protobuf::RepeatedPtrField< ::std::string> advertiser_name_;
  ::std::string* bidder_name_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int64 agency_id_;
  ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_AdSlot > adslot_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impression_tracking_url_;
  ::std::string* ad_choices_destination_url_;
  ::google::protobuf::int64 deprecated_creative_id_;
  ::std::string* deprecated_click_through_url_;
  ::std::string* deprecated_snippet_template_;
  ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_TemplateParameter > deprecated_template_parameter_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_Ad* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse : public ::google::protobuf::Message {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();

  void Swap(BidResponse* other);

  // implements Message ----------------------------------------------

  BidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_Ad Ad;

  // accessors -------------------------------------------------------

  // repeated .BidResponse.Ad ad = 2;
  inline int ad_size() const;
  inline void clear_ad();
  static const int kAdFieldNumber = 2;
  inline const ::BidResponse_Ad& ad(int index) const;
  inline ::BidResponse_Ad* mutable_ad(int index);
  inline ::BidResponse_Ad* add_ad();
  inline const ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad >&
      ad() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad >*
      mutable_ad();

  // optional string debug_string = 5;
  inline bool has_debug_string() const;
  inline void clear_debug_string();
  static const int kDebugStringFieldNumber = 5;
  inline const ::std::string& debug_string() const;
  inline void set_debug_string(const ::std::string& value);
  inline void set_debug_string(const char* value);
  inline void set_debug_string(const char* value, size_t size);
  inline ::std::string* mutable_debug_string();
  inline ::std::string* release_debug_string();
  inline void set_allocated_debug_string(::std::string* debug_string);

  // optional int32 processing_time_ms = 4;
  inline bool has_processing_time_ms() const;
  inline void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 4;
  inline ::google::protobuf::int32 processing_time_ms() const;
  inline void set_processing_time_ms(::google::protobuf::int32 value);

  // optional int32 DEPRECATED_protocol_version = 1;
  inline bool has_deprecated_protocol_version() const;
  inline void clear_deprecated_protocol_version();
  static const int kDEPRECATEDProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::int32 deprecated_protocol_version() const;
  inline void set_deprecated_protocol_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BidResponse)
 private:
  inline void set_has_debug_string();
  inline void clear_has_debug_string();
  inline void set_has_processing_time_ms();
  inline void clear_has_processing_time_ms();
  inline void set_has_deprecated_protocol_version();
  inline void clear_has_deprecated_protocol_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad > ad_;
  ::std::string* debug_string_;
  ::google::protobuf::int32 processing_time_ms_;
  ::google::protobuf::int32 deprecated_protocol_version_;
  friend void  protobuf_AddDesc_realtime_2dbidding_2eproto();
  friend void protobuf_AssignDesc_realtime_2dbidding_2eproto();
  friend void protobuf_ShutdownFile_realtime_2dbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BidRequest_Hyperlocal_Point

// optional float latitude = 1;
inline bool BidRequest_Hyperlocal_Point::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Hyperlocal_Point::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Hyperlocal_Point::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Hyperlocal_Point::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float BidRequest_Hyperlocal_Point::latitude() const {
  // @@protoc_insertion_point(field_get:BidRequest.Hyperlocal.Point.latitude)
  return latitude_;
}
inline void BidRequest_Hyperlocal_Point::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Hyperlocal.Point.latitude)
}

// optional float longitude = 2;
inline bool BidRequest_Hyperlocal_Point::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Hyperlocal_Point::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Hyperlocal_Point::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Hyperlocal_Point::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float BidRequest_Hyperlocal_Point::longitude() const {
  // @@protoc_insertion_point(field_get:BidRequest.Hyperlocal.Point.longitude)
  return longitude_;
}
inline void BidRequest_Hyperlocal_Point::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Hyperlocal.Point.longitude)
}

// -------------------------------------------------------------------

// BidRequest_Hyperlocal

// repeated .BidRequest.Hyperlocal.Point corners = 1;
inline int BidRequest_Hyperlocal::corners_size() const {
  return corners_.size();
}
inline void BidRequest_Hyperlocal::clear_corners() {
  corners_.Clear();
}
inline const ::BidRequest_Hyperlocal_Point& BidRequest_Hyperlocal::corners(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Hyperlocal.corners)
  return corners_.Get(index);
}
inline ::BidRequest_Hyperlocal_Point* BidRequest_Hyperlocal::mutable_corners(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.Hyperlocal.corners)
  return corners_.Mutable(index);
}
inline ::BidRequest_Hyperlocal_Point* BidRequest_Hyperlocal::add_corners() {
  // @@protoc_insertion_point(field_add:BidRequest.Hyperlocal.corners)
  return corners_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal_Point >&
BidRequest_Hyperlocal::corners() const {
  // @@protoc_insertion_point(field_list:BidRequest.Hyperlocal.corners)
  return corners_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal_Point >*
BidRequest_Hyperlocal::mutable_corners() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Hyperlocal.corners)
  return &corners_;
}

// -------------------------------------------------------------------

// BidRequest_HyperlocalSet

// repeated .BidRequest.Hyperlocal hyperlocal = 1;
inline int BidRequest_HyperlocalSet::hyperlocal_size() const {
  return hyperlocal_.size();
}
inline void BidRequest_HyperlocalSet::clear_hyperlocal() {
  hyperlocal_.Clear();
}
inline const ::BidRequest_Hyperlocal& BidRequest_HyperlocalSet::hyperlocal(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.HyperlocalSet.hyperlocal)
  return hyperlocal_.Get(index);
}
inline ::BidRequest_Hyperlocal* BidRequest_HyperlocalSet::mutable_hyperlocal(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.HyperlocalSet.hyperlocal)
  return hyperlocal_.Mutable(index);
}
inline ::BidRequest_Hyperlocal* BidRequest_HyperlocalSet::add_hyperlocal() {
  // @@protoc_insertion_point(field_add:BidRequest.HyperlocalSet.hyperlocal)
  return hyperlocal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal >&
BidRequest_HyperlocalSet::hyperlocal() const {
  // @@protoc_insertion_point(field_list:BidRequest.HyperlocalSet.hyperlocal)
  return hyperlocal_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal >*
BidRequest_HyperlocalSet::mutable_hyperlocal() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.HyperlocalSet.hyperlocal)
  return &hyperlocal_;
}

// optional .BidRequest.Hyperlocal.Point center_point = 2;
inline bool BidRequest_HyperlocalSet::has_center_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_HyperlocalSet::set_has_center_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_HyperlocalSet::clear_has_center_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_HyperlocalSet::clear_center_point() {
  if (center_point_ != NULL) center_point_->::BidRequest_Hyperlocal_Point::Clear();
  clear_has_center_point();
}
inline const ::BidRequest_Hyperlocal_Point& BidRequest_HyperlocalSet::center_point() const {
  // @@protoc_insertion_point(field_get:BidRequest.HyperlocalSet.center_point)
  return center_point_ != NULL ? *center_point_ : *default_instance_->center_point_;
}
inline ::BidRequest_Hyperlocal_Point* BidRequest_HyperlocalSet::mutable_center_point() {
  set_has_center_point();
  if (center_point_ == NULL) center_point_ = new ::BidRequest_Hyperlocal_Point;
  // @@protoc_insertion_point(field_mutable:BidRequest.HyperlocalSet.center_point)
  return center_point_;
}
inline ::BidRequest_Hyperlocal_Point* BidRequest_HyperlocalSet::release_center_point() {
  clear_has_center_point();
  ::BidRequest_Hyperlocal_Point* temp = center_point_;
  center_point_ = NULL;
  return temp;
}
inline void BidRequest_HyperlocalSet::set_allocated_center_point(::BidRequest_Hyperlocal_Point* center_point) {
  delete center_point_;
  center_point_ = center_point;
  if (center_point) {
    set_has_center_point();
  } else {
    clear_has_center_point();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.HyperlocalSet.center_point)
}

// -------------------------------------------------------------------

// BidRequest_UserDemographic

// optional .BidRequest.UserDemographic.Gender gender = 1 [default = UNKNOWN];
inline bool BidRequest_UserDemographic::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_UserDemographic::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_UserDemographic::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_UserDemographic::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::BidRequest_UserDemographic_Gender BidRequest_UserDemographic::gender() const {
  // @@protoc_insertion_point(field_get:BidRequest.UserDemographic.gender)
  return static_cast< ::BidRequest_UserDemographic_Gender >(gender_);
}
inline void BidRequest_UserDemographic::set_gender(::BidRequest_UserDemographic_Gender value) {
  assert(::BidRequest_UserDemographic_Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.UserDemographic.gender)
}

// optional int32 age_low = 2 [default = 0];
inline bool BidRequest_UserDemographic::has_age_low() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_UserDemographic::set_has_age_low() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_UserDemographic::clear_has_age_low() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_UserDemographic::clear_age_low() {
  age_low_ = 0;
  clear_has_age_low();
}
inline ::google::protobuf::int32 BidRequest_UserDemographic::age_low() const {
  // @@protoc_insertion_point(field_get:BidRequest.UserDemographic.age_low)
  return age_low_;
}
inline void BidRequest_UserDemographic::set_age_low(::google::protobuf::int32 value) {
  set_has_age_low();
  age_low_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.UserDemographic.age_low)
}

// optional int32 age_high = 3 [default = 999];
inline bool BidRequest_UserDemographic::has_age_high() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_UserDemographic::set_has_age_high() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_UserDemographic::clear_has_age_high() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_UserDemographic::clear_age_high() {
  age_high_ = 999;
  clear_has_age_high();
}
inline ::google::protobuf::int32 BidRequest_UserDemographic::age_high() const {
  // @@protoc_insertion_point(field_get:BidRequest.UserDemographic.age_high)
  return age_high_;
}
inline void BidRequest_UserDemographic::set_age_high(::google::protobuf::int32 value) {
  set_has_age_high();
  age_high_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.UserDemographic.age_high)
}

// -------------------------------------------------------------------

// BidRequest_UserList

// optional int64 id = 1;
inline bool BidRequest_UserList::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_UserList::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_UserList::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_UserList::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 BidRequest_UserList::id() const {
  // @@protoc_insertion_point(field_get:BidRequest.UserList.id)
  return id_;
}
inline void BidRequest_UserList::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.UserList.id)
}

// optional int32 age_seconds = 2;
inline bool BidRequest_UserList::has_age_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_UserList::set_has_age_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_UserList::clear_has_age_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_UserList::clear_age_seconds() {
  age_seconds_ = 0;
  clear_has_age_seconds();
}
inline ::google::protobuf::int32 BidRequest_UserList::age_seconds() const {
  // @@protoc_insertion_point(field_get:BidRequest.UserList.age_seconds)
  return age_seconds_;
}
inline void BidRequest_UserList::set_age_seconds(::google::protobuf::int32 value) {
  set_has_age_seconds();
  age_seconds_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.UserList.age_seconds)
}

// -------------------------------------------------------------------

// BidRequest_Vertical

// required int32 id = 1;
inline bool BidRequest_Vertical::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Vertical::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Vertical::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Vertical::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BidRequest_Vertical::id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Vertical.id)
  return id_;
}
inline void BidRequest_Vertical::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Vertical.id)
}

// required float weight = 2;
inline bool BidRequest_Vertical::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Vertical::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Vertical::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Vertical::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float BidRequest_Vertical::weight() const {
  // @@protoc_insertion_point(field_get:BidRequest.Vertical.weight)
  return weight_;
}
inline void BidRequest_Vertical::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Vertical.weight)
}

// -------------------------------------------------------------------

// BidRequest_Device_OsVersion

// optional int32 major = 1;
inline bool BidRequest_Device_OsVersion::has_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Device_OsVersion::set_has_major() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Device_OsVersion::clear_has_major() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Device_OsVersion::clear_major() {
  major_ = 0;
  clear_has_major();
}
inline ::google::protobuf::int32 BidRequest_Device_OsVersion::major() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.OsVersion.major)
  return major_;
}
inline void BidRequest_Device_OsVersion::set_major(::google::protobuf::int32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Device.OsVersion.major)
}

// optional int32 minor = 2;
inline bool BidRequest_Device_OsVersion::has_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Device_OsVersion::set_has_minor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Device_OsVersion::clear_has_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Device_OsVersion::clear_minor() {
  minor_ = 0;
  clear_has_minor();
}
inline ::google::protobuf::int32 BidRequest_Device_OsVersion::minor() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.OsVersion.minor)
  return minor_;
}
inline void BidRequest_Device_OsVersion::set_minor(::google::protobuf::int32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Device.OsVersion.minor)
}

// optional int32 micro = 3;
inline bool BidRequest_Device_OsVersion::has_micro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Device_OsVersion::set_has_micro() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Device_OsVersion::clear_has_micro() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Device_OsVersion::clear_micro() {
  micro_ = 0;
  clear_has_micro();
}
inline ::google::protobuf::int32 BidRequest_Device_OsVersion::micro() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.OsVersion.micro)
  return micro_;
}
inline void BidRequest_Device_OsVersion::set_micro(::google::protobuf::int32 value) {
  set_has_micro();
  micro_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Device.OsVersion.micro)
}

// -------------------------------------------------------------------

// BidRequest_Device

// optional .BidRequest.Device.DeviceType device_type = 1 [default = UNKNOWN_DEVICE];
inline bool BidRequest_Device::has_device_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Device::set_has_device_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Device::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Device::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
inline ::BidRequest_Device_DeviceType BidRequest_Device::device_type() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.device_type)
  return static_cast< ::BidRequest_Device_DeviceType >(device_type_);
}
inline void BidRequest_Device::set_device_type(::BidRequest_Device_DeviceType value) {
  assert(::BidRequest_Device_DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Device.device_type)
}

// optional string platform = 2;
inline bool BidRequest_Device::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Device::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Device::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Device::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& BidRequest_Device::platform() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.platform)
  return *platform_;
}
inline void BidRequest_Device::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Device.platform)
}
inline void BidRequest_Device::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Device.platform)
}
inline void BidRequest_Device::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Device.platform)
}
inline ::std::string* BidRequest_Device::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Device.platform)
  return platform_;
}
inline ::std::string* BidRequest_Device::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Device.platform)
}

// optional string brand = 3 [default = ""];
inline bool BidRequest_Device::has_brand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Device::set_has_brand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Device::clear_has_brand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Device::clear_brand() {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_->clear();
  }
  clear_has_brand();
}
inline const ::std::string& BidRequest_Device::brand() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.brand)
  return *brand_;
}
inline void BidRequest_Device::set_brand(const ::std::string& value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Device.brand)
}
inline void BidRequest_Device::set_brand(const char* value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Device.brand)
}
inline void BidRequest_Device::set_brand(const char* value, size_t size) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Device.brand)
}
inline ::std::string* BidRequest_Device::mutable_brand() {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Device.brand)
  return brand_;
}
inline ::std::string* BidRequest_Device::release_brand() {
  clear_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = brand_;
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_brand(::std::string* brand) {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (brand) {
    set_has_brand();
    brand_ = brand;
  } else {
    clear_has_brand();
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Device.brand)
}

// optional string model = 4 [default = ""];
inline bool BidRequest_Device::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Device::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Device::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Device::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& BidRequest_Device::model() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.model)
  return *model_;
}
inline void BidRequest_Device::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Device.model)
}
inline void BidRequest_Device::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Device.model)
}
inline void BidRequest_Device::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Device.model)
}
inline ::std::string* BidRequest_Device::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Device.model)
  return model_;
}
inline ::std::string* BidRequest_Device::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Device.model)
}

// optional .BidRequest.Device.OsVersion os_version = 5;
inline bool BidRequest_Device::has_os_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Device::set_has_os_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Device::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Device::clear_os_version() {
  if (os_version_ != NULL) os_version_->::BidRequest_Device_OsVersion::Clear();
  clear_has_os_version();
}
inline const ::BidRequest_Device_OsVersion& BidRequest_Device::os_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.os_version)
  return os_version_ != NULL ? *os_version_ : *default_instance_->os_version_;
}
inline ::BidRequest_Device_OsVersion* BidRequest_Device::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == NULL) os_version_ = new ::BidRequest_Device_OsVersion;
  // @@protoc_insertion_point(field_mutable:BidRequest.Device.os_version)
  return os_version_;
}
inline ::BidRequest_Device_OsVersion* BidRequest_Device::release_os_version() {
  clear_has_os_version();
  ::BidRequest_Device_OsVersion* temp = os_version_;
  os_version_ = NULL;
  return temp;
}
inline void BidRequest_Device::set_allocated_os_version(::BidRequest_Device_OsVersion* os_version) {
  delete os_version_;
  os_version_ = os_version;
  if (os_version) {
    set_has_os_version();
  } else {
    clear_has_os_version();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Device.os_version)
}

// optional int64 carrier_id = 6;
inline bool BidRequest_Device::has_carrier_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Device::set_has_carrier_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Device::clear_has_carrier_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Device::clear_carrier_id() {
  carrier_id_ = GOOGLE_LONGLONG(0);
  clear_has_carrier_id();
}
inline ::google::protobuf::int64 BidRequest_Device::carrier_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.carrier_id)
  return carrier_id_;
}
inline void BidRequest_Device::set_carrier_id(::google::protobuf::int64 value) {
  set_has_carrier_id();
  carrier_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Device.carrier_id)
}

// optional int32 screen_width = 7 [default = 0];
inline bool BidRequest_Device::has_screen_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Device::set_has_screen_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Device::clear_has_screen_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Device::clear_screen_width() {
  screen_width_ = 0;
  clear_has_screen_width();
}
inline ::google::protobuf::int32 BidRequest_Device::screen_width() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.screen_width)
  return screen_width_;
}
inline void BidRequest_Device::set_screen_width(::google::protobuf::int32 value) {
  set_has_screen_width();
  screen_width_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Device.screen_width)
}

// optional int32 screen_height = 8 [default = 0];
inline bool BidRequest_Device::has_screen_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Device::set_has_screen_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Device::clear_has_screen_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Device::clear_screen_height() {
  screen_height_ = 0;
  clear_has_screen_height();
}
inline ::google::protobuf::int32 BidRequest_Device::screen_height() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.screen_height)
  return screen_height_;
}
inline void BidRequest_Device::set_screen_height(::google::protobuf::int32 value) {
  set_has_screen_height();
  screen_height_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Device.screen_height)
}

// optional int32 screen_pixel_ratio_millis = 9 [default = 0];
inline bool BidRequest_Device::has_screen_pixel_ratio_millis() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Device::set_has_screen_pixel_ratio_millis() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Device::clear_has_screen_pixel_ratio_millis() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Device::clear_screen_pixel_ratio_millis() {
  screen_pixel_ratio_millis_ = 0;
  clear_has_screen_pixel_ratio_millis();
}
inline ::google::protobuf::int32 BidRequest_Device::screen_pixel_ratio_millis() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.screen_pixel_ratio_millis)
  return screen_pixel_ratio_millis_;
}
inline void BidRequest_Device::set_screen_pixel_ratio_millis(::google::protobuf::int32 value) {
  set_has_screen_pixel_ratio_millis();
  screen_pixel_ratio_millis_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Device.screen_pixel_ratio_millis)
}

// optional .BidRequest.Device.ScreenOrientation screen_orientation = 10 [default = UNKNOWN_ORIENTATION];
inline bool BidRequest_Device::has_screen_orientation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Device::set_has_screen_orientation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Device::clear_has_screen_orientation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Device::clear_screen_orientation() {
  screen_orientation_ = 0;
  clear_has_screen_orientation();
}
inline ::BidRequest_Device_ScreenOrientation BidRequest_Device::screen_orientation() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.screen_orientation)
  return static_cast< ::BidRequest_Device_ScreenOrientation >(screen_orientation_);
}
inline void BidRequest_Device::set_screen_orientation(::BidRequest_Device_ScreenOrientation value) {
  assert(::BidRequest_Device_ScreenOrientation_IsValid(value));
  set_has_screen_orientation();
  screen_orientation_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Device.screen_orientation)
}

// optional string hardware_version = 11;
inline bool BidRequest_Device::has_hardware_version() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Device::set_has_hardware_version() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Device::clear_has_hardware_version() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Device::clear_hardware_version() {
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_->clear();
  }
  clear_has_hardware_version();
}
inline const ::std::string& BidRequest_Device::hardware_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.Device.hardware_version)
  return *hardware_version_;
}
inline void BidRequest_Device::set_hardware_version(const ::std::string& value) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Device.hardware_version)
}
inline void BidRequest_Device::set_hardware_version(const char* value) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Device.hardware_version)
}
inline void BidRequest_Device::set_hardware_version(const char* value, size_t size) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Device.hardware_version)
}
inline ::std::string* BidRequest_Device::mutable_hardware_version() {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Device.hardware_version)
  return hardware_version_;
}
inline ::std::string* BidRequest_Device::release_hardware_version() {
  clear_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hardware_version_;
    hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_hardware_version(::std::string* hardware_version) {
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_version_;
  }
  if (hardware_version) {
    set_has_hardware_version();
    hardware_version_ = hardware_version;
  } else {
    clear_has_hardware_version();
    hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Device.hardware_version)
}

// -------------------------------------------------------------------

// BidRequest_KeyValue

// optional string key = 1;
inline bool BidRequest_KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& BidRequest_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:BidRequest.KeyValue.key)
  return *key_;
}
inline void BidRequest_KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.KeyValue.key)
}
inline void BidRequest_KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.KeyValue.key)
}
inline void BidRequest_KeyValue::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.KeyValue.key)
}
inline ::std::string* BidRequest_KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.KeyValue.key)
  return key_;
}
inline ::std::string* BidRequest_KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_KeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.KeyValue.key)
}

// optional string value = 2;
inline bool BidRequest_KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_KeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& BidRequest_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:BidRequest.KeyValue.value)
  return *value_;
}
inline void BidRequest_KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.KeyValue.value)
}
inline void BidRequest_KeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.KeyValue.value)
}
inline void BidRequest_KeyValue::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.KeyValue.value)
}
inline ::std::string* BidRequest_KeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.KeyValue.value)
  return value_;
}
inline ::std::string* BidRequest_KeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_KeyValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.KeyValue.value)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_DeviceOsVersion

// optional int32 os_version_major = 1;
inline bool BidRequest_Mobile_DeviceOsVersion::has_os_version_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Mobile_DeviceOsVersion::set_has_os_version_major() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Mobile_DeviceOsVersion::clear_has_os_version_major() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Mobile_DeviceOsVersion::clear_os_version_major() {
  os_version_major_ = 0;
  clear_has_os_version_major();
}
inline ::google::protobuf::int32 BidRequest_Mobile_DeviceOsVersion::os_version_major() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DeviceOsVersion.os_version_major)
  return os_version_major_;
}
inline void BidRequest_Mobile_DeviceOsVersion::set_os_version_major(::google::protobuf::int32 value) {
  set_has_os_version_major();
  os_version_major_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DeviceOsVersion.os_version_major)
}

// optional int32 os_version_minor = 2;
inline bool BidRequest_Mobile_DeviceOsVersion::has_os_version_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Mobile_DeviceOsVersion::set_has_os_version_minor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Mobile_DeviceOsVersion::clear_has_os_version_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Mobile_DeviceOsVersion::clear_os_version_minor() {
  os_version_minor_ = 0;
  clear_has_os_version_minor();
}
inline ::google::protobuf::int32 BidRequest_Mobile_DeviceOsVersion::os_version_minor() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DeviceOsVersion.os_version_minor)
  return os_version_minor_;
}
inline void BidRequest_Mobile_DeviceOsVersion::set_os_version_minor(::google::protobuf::int32 value) {
  set_has_os_version_minor();
  os_version_minor_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DeviceOsVersion.os_version_minor)
}

// optional int32 os_version_micro = 3;
inline bool BidRequest_Mobile_DeviceOsVersion::has_os_version_micro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Mobile_DeviceOsVersion::set_has_os_version_micro() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Mobile_DeviceOsVersion::clear_has_os_version_micro() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Mobile_DeviceOsVersion::clear_os_version_micro() {
  os_version_micro_ = 0;
  clear_has_os_version_micro();
}
inline ::google::protobuf::int32 BidRequest_Mobile_DeviceOsVersion::os_version_micro() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DeviceOsVersion.os_version_micro)
  return os_version_micro_;
}
inline void BidRequest_Mobile_DeviceOsVersion::set_os_version_micro(::google::protobuf::int32 value) {
  set_has_os_version_micro();
  os_version_micro_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DeviceOsVersion.os_version_micro)
}

// -------------------------------------------------------------------

// BidRequest_Mobile

// optional bool is_app = 7 [default = false];
inline bool BidRequest_Mobile::has_is_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Mobile::set_has_is_app() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Mobile::clear_has_is_app() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Mobile::clear_is_app() {
  is_app_ = false;
  clear_has_is_app();
}
inline bool BidRequest_Mobile::is_app() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.is_app)
  return is_app_;
}
inline void BidRequest_Mobile::set_is_app(bool value) {
  set_has_is_app();
  is_app_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.is_app)
}

// optional string app_id = 6;
inline bool BidRequest_Mobile::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Mobile::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Mobile::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Mobile::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& BidRequest_Mobile::app_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.app_id)
  return *app_id_;
}
inline void BidRequest_Mobile::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.app_id)
}
inline void BidRequest_Mobile::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.app_id)
}
inline void BidRequest_Mobile::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.app_id)
}
inline ::std::string* BidRequest_Mobile::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.app_id)
  return app_id_;
}
inline ::std::string* BidRequest_Mobile::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_app_id(::std::string* app_id) {
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_id_;
  }
  if (app_id) {
    set_has_app_id();
    app_id_ = app_id;
  } else {
    clear_has_app_id();
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.app_id)
}

// optional bool is_interstitial_request = 10 [default = false];
inline bool BidRequest_Mobile::has_is_interstitial_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Mobile::set_has_is_interstitial_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Mobile::clear_has_is_interstitial_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Mobile::clear_is_interstitial_request() {
  is_interstitial_request_ = false;
  clear_has_is_interstitial_request();
}
inline bool BidRequest_Mobile::is_interstitial_request() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.is_interstitial_request)
  return is_interstitial_request_;
}
inline void BidRequest_Mobile::set_is_interstitial_request(bool value) {
  set_has_is_interstitial_request();
  is_interstitial_request_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.is_interstitial_request)
}

// repeated int32 app_category_ids = 11;
inline int BidRequest_Mobile::app_category_ids_size() const {
  return app_category_ids_.size();
}
inline void BidRequest_Mobile::clear_app_category_ids() {
  app_category_ids_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Mobile::app_category_ids(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.app_category_ids)
  return app_category_ids_.Get(index);
}
inline void BidRequest_Mobile::set_app_category_ids(int index, ::google::protobuf::int32 value) {
  app_category_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.app_category_ids)
}
inline void BidRequest_Mobile::add_app_category_ids(::google::protobuf::int32 value) {
  app_category_ids_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Mobile.app_category_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile::app_category_ids() const {
  // @@protoc_insertion_point(field_list:BidRequest.Mobile.app_category_ids)
  return app_category_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile::mutable_app_category_ids() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Mobile.app_category_ids)
  return &app_category_ids_;
}

// optional bool is_mobile_web_optimized = 17 [default = false];
inline bool BidRequest_Mobile::has_is_mobile_web_optimized() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Mobile::set_has_is_mobile_web_optimized() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Mobile::clear_has_is_mobile_web_optimized() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Mobile::clear_is_mobile_web_optimized() {
  is_mobile_web_optimized_ = false;
  clear_has_is_mobile_web_optimized();
}
inline bool BidRequest_Mobile::is_mobile_web_optimized() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.is_mobile_web_optimized)
  return is_mobile_web_optimized_;
}
inline void BidRequest_Mobile::set_is_mobile_web_optimized(bool value) {
  set_has_is_mobile_web_optimized();
  is_mobile_web_optimized_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.is_mobile_web_optimized)
}

// optional bytes encrypted_advertising_id = 20;
inline bool BidRequest_Mobile::has_encrypted_advertising_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Mobile::set_has_encrypted_advertising_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Mobile::clear_has_encrypted_advertising_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Mobile::clear_encrypted_advertising_id() {
  if (encrypted_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_advertising_id_->clear();
  }
  clear_has_encrypted_advertising_id();
}
inline const ::std::string& BidRequest_Mobile::encrypted_advertising_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.encrypted_advertising_id)
  return *encrypted_advertising_id_;
}
inline void BidRequest_Mobile::set_encrypted_advertising_id(const ::std::string& value) {
  set_has_encrypted_advertising_id();
  if (encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_advertising_id_ = new ::std::string;
  }
  encrypted_advertising_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.encrypted_advertising_id)
}
inline void BidRequest_Mobile::set_encrypted_advertising_id(const char* value) {
  set_has_encrypted_advertising_id();
  if (encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_advertising_id_ = new ::std::string;
  }
  encrypted_advertising_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.encrypted_advertising_id)
}
inline void BidRequest_Mobile::set_encrypted_advertising_id(const void* value, size_t size) {
  set_has_encrypted_advertising_id();
  if (encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_advertising_id_ = new ::std::string;
  }
  encrypted_advertising_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.encrypted_advertising_id)
}
inline ::std::string* BidRequest_Mobile::mutable_encrypted_advertising_id() {
  set_has_encrypted_advertising_id();
  if (encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_advertising_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.encrypted_advertising_id)
  return encrypted_advertising_id_;
}
inline ::std::string* BidRequest_Mobile::release_encrypted_advertising_id() {
  clear_has_encrypted_advertising_id();
  if (encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encrypted_advertising_id_;
    encrypted_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_encrypted_advertising_id(::std::string* encrypted_advertising_id) {
  if (encrypted_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypted_advertising_id_;
  }
  if (encrypted_advertising_id) {
    set_has_encrypted_advertising_id();
    encrypted_advertising_id_ = encrypted_advertising_id;
  } else {
    clear_has_encrypted_advertising_id();
    encrypted_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.encrypted_advertising_id)
}

// optional bytes advertising_id = 27;
inline bool BidRequest_Mobile::has_advertising_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Mobile::set_has_advertising_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Mobile::clear_has_advertising_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Mobile::clear_advertising_id() {
  if (advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertising_id_->clear();
  }
  clear_has_advertising_id();
}
inline const ::std::string& BidRequest_Mobile::advertising_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.advertising_id)
  return *advertising_id_;
}
inline void BidRequest_Mobile::set_advertising_id(const ::std::string& value) {
  set_has_advertising_id();
  if (advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertising_id_ = new ::std::string;
  }
  advertising_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.advertising_id)
}
inline void BidRequest_Mobile::set_advertising_id(const char* value) {
  set_has_advertising_id();
  if (advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertising_id_ = new ::std::string;
  }
  advertising_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.advertising_id)
}
inline void BidRequest_Mobile::set_advertising_id(const void* value, size_t size) {
  set_has_advertising_id();
  if (advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertising_id_ = new ::std::string;
  }
  advertising_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.advertising_id)
}
inline ::std::string* BidRequest_Mobile::mutable_advertising_id() {
  set_has_advertising_id();
  if (advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertising_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.advertising_id)
  return advertising_id_;
}
inline ::std::string* BidRequest_Mobile::release_advertising_id() {
  clear_has_advertising_id();
  if (advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = advertising_id_;
    advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_advertising_id(::std::string* advertising_id) {
  if (advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete advertising_id_;
  }
  if (advertising_id) {
    set_has_advertising_id();
    advertising_id_ = advertising_id;
  } else {
    clear_has_advertising_id();
    advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.advertising_id)
}

// optional bytes encrypted_hashed_idfa = 21;
inline bool BidRequest_Mobile::has_encrypted_hashed_idfa() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Mobile::set_has_encrypted_hashed_idfa() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Mobile::clear_has_encrypted_hashed_idfa() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Mobile::clear_encrypted_hashed_idfa() {
  if (encrypted_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hashed_idfa_->clear();
  }
  clear_has_encrypted_hashed_idfa();
}
inline const ::std::string& BidRequest_Mobile::encrypted_hashed_idfa() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.encrypted_hashed_idfa)
  return *encrypted_hashed_idfa_;
}
inline void BidRequest_Mobile::set_encrypted_hashed_idfa(const ::std::string& value) {
  set_has_encrypted_hashed_idfa();
  if (encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hashed_idfa_ = new ::std::string;
  }
  encrypted_hashed_idfa_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.encrypted_hashed_idfa)
}
inline void BidRequest_Mobile::set_encrypted_hashed_idfa(const char* value) {
  set_has_encrypted_hashed_idfa();
  if (encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hashed_idfa_ = new ::std::string;
  }
  encrypted_hashed_idfa_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.encrypted_hashed_idfa)
}
inline void BidRequest_Mobile::set_encrypted_hashed_idfa(const void* value, size_t size) {
  set_has_encrypted_hashed_idfa();
  if (encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hashed_idfa_ = new ::std::string;
  }
  encrypted_hashed_idfa_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.encrypted_hashed_idfa)
}
inline ::std::string* BidRequest_Mobile::mutable_encrypted_hashed_idfa() {
  set_has_encrypted_hashed_idfa();
  if (encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hashed_idfa_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.encrypted_hashed_idfa)
  return encrypted_hashed_idfa_;
}
inline ::std::string* BidRequest_Mobile::release_encrypted_hashed_idfa() {
  clear_has_encrypted_hashed_idfa();
  if (encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encrypted_hashed_idfa_;
    encrypted_hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_encrypted_hashed_idfa(::std::string* encrypted_hashed_idfa) {
  if (encrypted_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypted_hashed_idfa_;
  }
  if (encrypted_hashed_idfa) {
    set_has_encrypted_hashed_idfa();
    encrypted_hashed_idfa_ = encrypted_hashed_idfa;
  } else {
    clear_has_encrypted_hashed_idfa();
    encrypted_hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.encrypted_hashed_idfa)
}

// optional bytes hashed_idfa = 28;
inline bool BidRequest_Mobile::has_hashed_idfa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Mobile::set_has_hashed_idfa() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Mobile::clear_has_hashed_idfa() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Mobile::clear_hashed_idfa() {
  if (hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashed_idfa_->clear();
  }
  clear_has_hashed_idfa();
}
inline const ::std::string& BidRequest_Mobile::hashed_idfa() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.hashed_idfa)
  return *hashed_idfa_;
}
inline void BidRequest_Mobile::set_hashed_idfa(const ::std::string& value) {
  set_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashed_idfa_ = new ::std::string;
  }
  hashed_idfa_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.hashed_idfa)
}
inline void BidRequest_Mobile::set_hashed_idfa(const char* value) {
  set_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashed_idfa_ = new ::std::string;
  }
  hashed_idfa_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.hashed_idfa)
}
inline void BidRequest_Mobile::set_hashed_idfa(const void* value, size_t size) {
  set_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashed_idfa_ = new ::std::string;
  }
  hashed_idfa_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.hashed_idfa)
}
inline ::std::string* BidRequest_Mobile::mutable_hashed_idfa() {
  set_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hashed_idfa_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.hashed_idfa)
  return hashed_idfa_;
}
inline ::std::string* BidRequest_Mobile::release_hashed_idfa() {
  clear_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hashed_idfa_;
    hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_hashed_idfa(::std::string* hashed_idfa) {
  if (hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hashed_idfa_;
  }
  if (hashed_idfa) {
    set_has_hashed_idfa();
    hashed_idfa_ = hashed_idfa;
  } else {
    clear_has_hashed_idfa();
    hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.hashed_idfa)
}

// optional bytes constrained_usage_encrypted_advertising_id = 22;
inline bool BidRequest_Mobile::has_constrained_usage_encrypted_advertising_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Mobile::set_has_constrained_usage_encrypted_advertising_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Mobile::clear_has_constrained_usage_encrypted_advertising_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Mobile::clear_constrained_usage_encrypted_advertising_id() {
  if (constrained_usage_encrypted_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_advertising_id_->clear();
  }
  clear_has_constrained_usage_encrypted_advertising_id();
}
inline const ::std::string& BidRequest_Mobile::constrained_usage_encrypted_advertising_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.constrained_usage_encrypted_advertising_id)
  return *constrained_usage_encrypted_advertising_id_;
}
inline void BidRequest_Mobile::set_constrained_usage_encrypted_advertising_id(const ::std::string& value) {
  set_has_constrained_usage_encrypted_advertising_id();
  if (constrained_usage_encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_advertising_id_ = new ::std::string;
  }
  constrained_usage_encrypted_advertising_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.constrained_usage_encrypted_advertising_id)
}
inline void BidRequest_Mobile::set_constrained_usage_encrypted_advertising_id(const char* value) {
  set_has_constrained_usage_encrypted_advertising_id();
  if (constrained_usage_encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_advertising_id_ = new ::std::string;
  }
  constrained_usage_encrypted_advertising_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.constrained_usage_encrypted_advertising_id)
}
inline void BidRequest_Mobile::set_constrained_usage_encrypted_advertising_id(const void* value, size_t size) {
  set_has_constrained_usage_encrypted_advertising_id();
  if (constrained_usage_encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_advertising_id_ = new ::std::string;
  }
  constrained_usage_encrypted_advertising_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.constrained_usage_encrypted_advertising_id)
}
inline ::std::string* BidRequest_Mobile::mutable_constrained_usage_encrypted_advertising_id() {
  set_has_constrained_usage_encrypted_advertising_id();
  if (constrained_usage_encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_advertising_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.constrained_usage_encrypted_advertising_id)
  return constrained_usage_encrypted_advertising_id_;
}
inline ::std::string* BidRequest_Mobile::release_constrained_usage_encrypted_advertising_id() {
  clear_has_constrained_usage_encrypted_advertising_id();
  if (constrained_usage_encrypted_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = constrained_usage_encrypted_advertising_id_;
    constrained_usage_encrypted_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_constrained_usage_encrypted_advertising_id(::std::string* constrained_usage_encrypted_advertising_id) {
  if (constrained_usage_encrypted_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_encrypted_advertising_id_;
  }
  if (constrained_usage_encrypted_advertising_id) {
    set_has_constrained_usage_encrypted_advertising_id();
    constrained_usage_encrypted_advertising_id_ = constrained_usage_encrypted_advertising_id;
  } else {
    clear_has_constrained_usage_encrypted_advertising_id();
    constrained_usage_encrypted_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.constrained_usage_encrypted_advertising_id)
}

// optional bytes constrained_usage_advertising_id = 29;
inline bool BidRequest_Mobile::has_constrained_usage_advertising_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Mobile::set_has_constrained_usage_advertising_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Mobile::clear_has_constrained_usage_advertising_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Mobile::clear_constrained_usage_advertising_id() {
  if (constrained_usage_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_advertising_id_->clear();
  }
  clear_has_constrained_usage_advertising_id();
}
inline const ::std::string& BidRequest_Mobile::constrained_usage_advertising_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.constrained_usage_advertising_id)
  return *constrained_usage_advertising_id_;
}
inline void BidRequest_Mobile::set_constrained_usage_advertising_id(const ::std::string& value) {
  set_has_constrained_usage_advertising_id();
  if (constrained_usage_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_advertising_id_ = new ::std::string;
  }
  constrained_usage_advertising_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.constrained_usage_advertising_id)
}
inline void BidRequest_Mobile::set_constrained_usage_advertising_id(const char* value) {
  set_has_constrained_usage_advertising_id();
  if (constrained_usage_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_advertising_id_ = new ::std::string;
  }
  constrained_usage_advertising_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.constrained_usage_advertising_id)
}
inline void BidRequest_Mobile::set_constrained_usage_advertising_id(const void* value, size_t size) {
  set_has_constrained_usage_advertising_id();
  if (constrained_usage_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_advertising_id_ = new ::std::string;
  }
  constrained_usage_advertising_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.constrained_usage_advertising_id)
}
inline ::std::string* BidRequest_Mobile::mutable_constrained_usage_advertising_id() {
  set_has_constrained_usage_advertising_id();
  if (constrained_usage_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_advertising_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.constrained_usage_advertising_id)
  return constrained_usage_advertising_id_;
}
inline ::std::string* BidRequest_Mobile::release_constrained_usage_advertising_id() {
  clear_has_constrained_usage_advertising_id();
  if (constrained_usage_advertising_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = constrained_usage_advertising_id_;
    constrained_usage_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_constrained_usage_advertising_id(::std::string* constrained_usage_advertising_id) {
  if (constrained_usage_advertising_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_advertising_id_;
  }
  if (constrained_usage_advertising_id) {
    set_has_constrained_usage_advertising_id();
    constrained_usage_advertising_id_ = constrained_usage_advertising_id;
  } else {
    clear_has_constrained_usage_advertising_id();
    constrained_usage_advertising_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.constrained_usage_advertising_id)
}

// optional bytes constrained_usage_encrypted_hashed_idfa = 23;
inline bool BidRequest_Mobile::has_constrained_usage_encrypted_hashed_idfa() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Mobile::set_has_constrained_usage_encrypted_hashed_idfa() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Mobile::clear_has_constrained_usage_encrypted_hashed_idfa() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Mobile::clear_constrained_usage_encrypted_hashed_idfa() {
  if (constrained_usage_encrypted_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_hashed_idfa_->clear();
  }
  clear_has_constrained_usage_encrypted_hashed_idfa();
}
inline const ::std::string& BidRequest_Mobile::constrained_usage_encrypted_hashed_idfa() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.constrained_usage_encrypted_hashed_idfa)
  return *constrained_usage_encrypted_hashed_idfa_;
}
inline void BidRequest_Mobile::set_constrained_usage_encrypted_hashed_idfa(const ::std::string& value) {
  set_has_constrained_usage_encrypted_hashed_idfa();
  if (constrained_usage_encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_hashed_idfa_ = new ::std::string;
  }
  constrained_usage_encrypted_hashed_idfa_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.constrained_usage_encrypted_hashed_idfa)
}
inline void BidRequest_Mobile::set_constrained_usage_encrypted_hashed_idfa(const char* value) {
  set_has_constrained_usage_encrypted_hashed_idfa();
  if (constrained_usage_encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_hashed_idfa_ = new ::std::string;
  }
  constrained_usage_encrypted_hashed_idfa_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.constrained_usage_encrypted_hashed_idfa)
}
inline void BidRequest_Mobile::set_constrained_usage_encrypted_hashed_idfa(const void* value, size_t size) {
  set_has_constrained_usage_encrypted_hashed_idfa();
  if (constrained_usage_encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_hashed_idfa_ = new ::std::string;
  }
  constrained_usage_encrypted_hashed_idfa_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.constrained_usage_encrypted_hashed_idfa)
}
inline ::std::string* BidRequest_Mobile::mutable_constrained_usage_encrypted_hashed_idfa() {
  set_has_constrained_usage_encrypted_hashed_idfa();
  if (constrained_usage_encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_encrypted_hashed_idfa_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.constrained_usage_encrypted_hashed_idfa)
  return constrained_usage_encrypted_hashed_idfa_;
}
inline ::std::string* BidRequest_Mobile::release_constrained_usage_encrypted_hashed_idfa() {
  clear_has_constrained_usage_encrypted_hashed_idfa();
  if (constrained_usage_encrypted_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = constrained_usage_encrypted_hashed_idfa_;
    constrained_usage_encrypted_hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_constrained_usage_encrypted_hashed_idfa(::std::string* constrained_usage_encrypted_hashed_idfa) {
  if (constrained_usage_encrypted_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_encrypted_hashed_idfa_;
  }
  if (constrained_usage_encrypted_hashed_idfa) {
    set_has_constrained_usage_encrypted_hashed_idfa();
    constrained_usage_encrypted_hashed_idfa_ = constrained_usage_encrypted_hashed_idfa;
  } else {
    clear_has_constrained_usage_encrypted_hashed_idfa();
    constrained_usage_encrypted_hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.constrained_usage_encrypted_hashed_idfa)
}

// optional bytes constrained_usage_hashed_idfa = 30;
inline bool BidRequest_Mobile::has_constrained_usage_hashed_idfa() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_Mobile::set_has_constrained_usage_hashed_idfa() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_Mobile::clear_has_constrained_usage_hashed_idfa() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_Mobile::clear_constrained_usage_hashed_idfa() {
  if (constrained_usage_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hashed_idfa_->clear();
  }
  clear_has_constrained_usage_hashed_idfa();
}
inline const ::std::string& BidRequest_Mobile::constrained_usage_hashed_idfa() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.constrained_usage_hashed_idfa)
  return *constrained_usage_hashed_idfa_;
}
inline void BidRequest_Mobile::set_constrained_usage_hashed_idfa(const ::std::string& value) {
  set_has_constrained_usage_hashed_idfa();
  if (constrained_usage_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hashed_idfa_ = new ::std::string;
  }
  constrained_usage_hashed_idfa_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.constrained_usage_hashed_idfa)
}
inline void BidRequest_Mobile::set_constrained_usage_hashed_idfa(const char* value) {
  set_has_constrained_usage_hashed_idfa();
  if (constrained_usage_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hashed_idfa_ = new ::std::string;
  }
  constrained_usage_hashed_idfa_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.constrained_usage_hashed_idfa)
}
inline void BidRequest_Mobile::set_constrained_usage_hashed_idfa(const void* value, size_t size) {
  set_has_constrained_usage_hashed_idfa();
  if (constrained_usage_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hashed_idfa_ = new ::std::string;
  }
  constrained_usage_hashed_idfa_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.constrained_usage_hashed_idfa)
}
inline ::std::string* BidRequest_Mobile::mutable_constrained_usage_hashed_idfa() {
  set_has_constrained_usage_hashed_idfa();
  if (constrained_usage_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hashed_idfa_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.constrained_usage_hashed_idfa)
  return constrained_usage_hashed_idfa_;
}
inline ::std::string* BidRequest_Mobile::release_constrained_usage_hashed_idfa() {
  clear_has_constrained_usage_hashed_idfa();
  if (constrained_usage_hashed_idfa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = constrained_usage_hashed_idfa_;
    constrained_usage_hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_constrained_usage_hashed_idfa(::std::string* constrained_usage_hashed_idfa) {
  if (constrained_usage_hashed_idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_hashed_idfa_;
  }
  if (constrained_usage_hashed_idfa) {
    set_has_constrained_usage_hashed_idfa();
    constrained_usage_hashed_idfa_ = constrained_usage_hashed_idfa;
  } else {
    clear_has_constrained_usage_hashed_idfa();
    constrained_usage_hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.constrained_usage_hashed_idfa)
}

// optional string app_name = 24;
inline bool BidRequest_Mobile::has_app_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_Mobile::set_has_app_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_Mobile::clear_has_app_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_Mobile::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& BidRequest_Mobile::app_name() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.app_name)
  return *app_name_;
}
inline void BidRequest_Mobile::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.app_name)
}
inline void BidRequest_Mobile::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.app_name)
}
inline void BidRequest_Mobile::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.app_name)
}
inline ::std::string* BidRequest_Mobile::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.app_name)
  return app_name_;
}
inline ::std::string* BidRequest_Mobile::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.app_name)
}

// optional float app_rating = 25;
inline bool BidRequest_Mobile::has_app_rating() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest_Mobile::set_has_app_rating() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest_Mobile::clear_has_app_rating() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest_Mobile::clear_app_rating() {
  app_rating_ = 0;
  clear_has_app_rating();
}
inline float BidRequest_Mobile::app_rating() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.app_rating)
  return app_rating_;
}
inline void BidRequest_Mobile::set_app_rating(float value) {
  set_has_app_rating();
  app_rating_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.app_rating)
}

// optional string DEPRECATED_app_name = 1;
inline bool BidRequest_Mobile::has_deprecated_app_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_app_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_app_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest_Mobile::clear_deprecated_app_name() {
  if (deprecated_app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_app_name_->clear();
  }
  clear_has_deprecated_app_name();
}
inline const ::std::string& BidRequest_Mobile::deprecated_app_name() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_app_name)
  return *deprecated_app_name_;
}
inline void BidRequest_Mobile::set_deprecated_app_name(const ::std::string& value) {
  set_has_deprecated_app_name();
  if (deprecated_app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_app_name_ = new ::std::string;
  }
  deprecated_app_name_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_app_name)
}
inline void BidRequest_Mobile::set_deprecated_app_name(const char* value) {
  set_has_deprecated_app_name();
  if (deprecated_app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_app_name_ = new ::std::string;
  }
  deprecated_app_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_app_name)
}
inline void BidRequest_Mobile::set_deprecated_app_name(const char* value, size_t size) {
  set_has_deprecated_app_name();
  if (deprecated_app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_app_name_ = new ::std::string;
  }
  deprecated_app_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_app_name)
}
inline ::std::string* BidRequest_Mobile::mutable_deprecated_app_name() {
  set_has_deprecated_app_name();
  if (deprecated_app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_app_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_app_name)
  return deprecated_app_name_;
}
inline ::std::string* BidRequest_Mobile::release_deprecated_app_name() {
  clear_has_deprecated_app_name();
  if (deprecated_app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_app_name_;
    deprecated_app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_deprecated_app_name(::std::string* deprecated_app_name) {
  if (deprecated_app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_app_name_;
  }
  if (deprecated_app_name) {
    set_has_deprecated_app_name();
    deprecated_app_name_ = deprecated_app_name;
  } else {
    clear_has_deprecated_app_name();
    deprecated_app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_app_name)
}

// optional string DEPRECATED_company_name = 2;
inline bool BidRequest_Mobile::has_deprecated_company_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_company_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_company_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidRequest_Mobile::clear_deprecated_company_name() {
  if (deprecated_company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_company_name_->clear();
  }
  clear_has_deprecated_company_name();
}
inline const ::std::string& BidRequest_Mobile::deprecated_company_name() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_company_name)
  return *deprecated_company_name_;
}
inline void BidRequest_Mobile::set_deprecated_company_name(const ::std::string& value) {
  set_has_deprecated_company_name();
  if (deprecated_company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_company_name_ = new ::std::string;
  }
  deprecated_company_name_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_company_name)
}
inline void BidRequest_Mobile::set_deprecated_company_name(const char* value) {
  set_has_deprecated_company_name();
  if (deprecated_company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_company_name_ = new ::std::string;
  }
  deprecated_company_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_company_name)
}
inline void BidRequest_Mobile::set_deprecated_company_name(const char* value, size_t size) {
  set_has_deprecated_company_name();
  if (deprecated_company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_company_name_ = new ::std::string;
  }
  deprecated_company_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_company_name)
}
inline ::std::string* BidRequest_Mobile::mutable_deprecated_company_name() {
  set_has_deprecated_company_name();
  if (deprecated_company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_company_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_company_name)
  return deprecated_company_name_;
}
inline ::std::string* BidRequest_Mobile::release_deprecated_company_name() {
  clear_has_deprecated_company_name();
  if (deprecated_company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_company_name_;
    deprecated_company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_deprecated_company_name(::std::string* deprecated_company_name) {
  if (deprecated_company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_company_name_;
  }
  if (deprecated_company_name) {
    set_has_deprecated_company_name();
    deprecated_company_name_ = deprecated_company_name;
  } else {
    clear_has_deprecated_company_name();
    deprecated_company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_company_name)
}

// optional string DEPRECATED_platform = 3;
inline bool BidRequest_Mobile::has_deprecated_platform() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_platform() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_platform() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest_Mobile::clear_deprecated_platform() {
  if (deprecated_platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_platform_->clear();
  }
  clear_has_deprecated_platform();
}
inline const ::std::string& BidRequest_Mobile::deprecated_platform() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_platform)
  return *deprecated_platform_;
}
inline void BidRequest_Mobile::set_deprecated_platform(const ::std::string& value) {
  set_has_deprecated_platform();
  if (deprecated_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_platform_ = new ::std::string;
  }
  deprecated_platform_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_platform)
}
inline void BidRequest_Mobile::set_deprecated_platform(const char* value) {
  set_has_deprecated_platform();
  if (deprecated_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_platform_ = new ::std::string;
  }
  deprecated_platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_platform)
}
inline void BidRequest_Mobile::set_deprecated_platform(const char* value, size_t size) {
  set_has_deprecated_platform();
  if (deprecated_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_platform_ = new ::std::string;
  }
  deprecated_platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_platform)
}
inline ::std::string* BidRequest_Mobile::mutable_deprecated_platform() {
  set_has_deprecated_platform();
  if (deprecated_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_platform)
  return deprecated_platform_;
}
inline ::std::string* BidRequest_Mobile::release_deprecated_platform() {
  clear_has_deprecated_platform();
  if (deprecated_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_platform_;
    deprecated_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_deprecated_platform(::std::string* deprecated_platform) {
  if (deprecated_platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_platform_;
  }
  if (deprecated_platform) {
    set_has_deprecated_platform();
    deprecated_platform_ = deprecated_platform;
  } else {
    clear_has_deprecated_platform();
    deprecated_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_platform)
}

// optional string DEPRECATED_carrier_name = 4;
inline bool BidRequest_Mobile::has_deprecated_carrier_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_carrier_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_carrier_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BidRequest_Mobile::clear_deprecated_carrier_name() {
  if (deprecated_carrier_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_name_->clear();
  }
  clear_has_deprecated_carrier_name();
}
inline const ::std::string& BidRequest_Mobile::deprecated_carrier_name() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_carrier_name)
  return *deprecated_carrier_name_;
}
inline void BidRequest_Mobile::set_deprecated_carrier_name(const ::std::string& value) {
  set_has_deprecated_carrier_name();
  if (deprecated_carrier_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_name_ = new ::std::string;
  }
  deprecated_carrier_name_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_carrier_name)
}
inline void BidRequest_Mobile::set_deprecated_carrier_name(const char* value) {
  set_has_deprecated_carrier_name();
  if (deprecated_carrier_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_name_ = new ::std::string;
  }
  deprecated_carrier_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_carrier_name)
}
inline void BidRequest_Mobile::set_deprecated_carrier_name(const char* value, size_t size) {
  set_has_deprecated_carrier_name();
  if (deprecated_carrier_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_name_ = new ::std::string;
  }
  deprecated_carrier_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_carrier_name)
}
inline ::std::string* BidRequest_Mobile::mutable_deprecated_carrier_name() {
  set_has_deprecated_carrier_name();
  if (deprecated_carrier_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_carrier_name)
  return deprecated_carrier_name_;
}
inline ::std::string* BidRequest_Mobile::release_deprecated_carrier_name() {
  clear_has_deprecated_carrier_name();
  if (deprecated_carrier_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_carrier_name_;
    deprecated_carrier_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_deprecated_carrier_name(::std::string* deprecated_carrier_name) {
  if (deprecated_carrier_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_carrier_name_;
  }
  if (deprecated_carrier_name) {
    set_has_deprecated_carrier_name();
    deprecated_carrier_name_ = deprecated_carrier_name;
  } else {
    clear_has_deprecated_carrier_name();
    deprecated_carrier_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_carrier_name)
}

// optional string DEPRECATED_carrier_country = 5;
inline bool BidRequest_Mobile::has_deprecated_carrier_country() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_carrier_country() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_carrier_country() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidRequest_Mobile::clear_deprecated_carrier_country() {
  if (deprecated_carrier_country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_country_->clear();
  }
  clear_has_deprecated_carrier_country();
}
inline const ::std::string& BidRequest_Mobile::deprecated_carrier_country() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_carrier_country)
  return *deprecated_carrier_country_;
}
inline void BidRequest_Mobile::set_deprecated_carrier_country(const ::std::string& value) {
  set_has_deprecated_carrier_country();
  if (deprecated_carrier_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_country_ = new ::std::string;
  }
  deprecated_carrier_country_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_carrier_country)
}
inline void BidRequest_Mobile::set_deprecated_carrier_country(const char* value) {
  set_has_deprecated_carrier_country();
  if (deprecated_carrier_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_country_ = new ::std::string;
  }
  deprecated_carrier_country_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_carrier_country)
}
inline void BidRequest_Mobile::set_deprecated_carrier_country(const char* value, size_t size) {
  set_has_deprecated_carrier_country();
  if (deprecated_carrier_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_country_ = new ::std::string;
  }
  deprecated_carrier_country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_carrier_country)
}
inline ::std::string* BidRequest_Mobile::mutable_deprecated_carrier_country() {
  set_has_deprecated_carrier_country();
  if (deprecated_carrier_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_carrier_country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_carrier_country)
  return deprecated_carrier_country_;
}
inline ::std::string* BidRequest_Mobile::release_deprecated_carrier_country() {
  clear_has_deprecated_carrier_country();
  if (deprecated_carrier_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_carrier_country_;
    deprecated_carrier_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_deprecated_carrier_country(::std::string* deprecated_carrier_country) {
  if (deprecated_carrier_country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_carrier_country_;
  }
  if (deprecated_carrier_country) {
    set_has_deprecated_carrier_country();
    deprecated_carrier_country_ = deprecated_carrier_country;
  } else {
    clear_has_deprecated_carrier_country();
    deprecated_carrier_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_carrier_country)
}

// optional .BidRequest.Mobile.MobileDeviceType DEPRECATED_mobile_device_type = 8 [default = UNKNOWN];
inline bool BidRequest_Mobile::has_deprecated_mobile_device_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_mobile_device_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_mobile_device_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BidRequest_Mobile::clear_deprecated_mobile_device_type() {
  deprecated_mobile_device_type_ = 0;
  clear_has_deprecated_mobile_device_type();
}
inline ::BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::deprecated_mobile_device_type() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_mobile_device_type)
  return static_cast< ::BidRequest_Mobile_MobileDeviceType >(deprecated_mobile_device_type_);
}
inline void BidRequest_Mobile::set_deprecated_mobile_device_type(::BidRequest_Mobile_MobileDeviceType value) {
  assert(::BidRequest_Mobile_MobileDeviceType_IsValid(value));
  set_has_deprecated_mobile_device_type();
  deprecated_mobile_device_type_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_mobile_device_type)
}

// optional int32 DEPRECATED_screen_orientation = 9 [default = 0];
inline bool BidRequest_Mobile::has_deprecated_screen_orientation() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_screen_orientation() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_screen_orientation() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BidRequest_Mobile::clear_deprecated_screen_orientation() {
  deprecated_screen_orientation_ = 0;
  clear_has_deprecated_screen_orientation();
}
inline ::google::protobuf::int32 BidRequest_Mobile::deprecated_screen_orientation() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_screen_orientation)
  return deprecated_screen_orientation_;
}
inline void BidRequest_Mobile::set_deprecated_screen_orientation(::google::protobuf::int32 value) {
  set_has_deprecated_screen_orientation();
  deprecated_screen_orientation_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_screen_orientation)
}

// optional string DEPRECATED_brand = 12;
inline bool BidRequest_Mobile::has_deprecated_brand() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_brand() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_brand() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BidRequest_Mobile::clear_deprecated_brand() {
  if (deprecated_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_brand_->clear();
  }
  clear_has_deprecated_brand();
}
inline const ::std::string& BidRequest_Mobile::deprecated_brand() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_brand)
  return *deprecated_brand_;
}
inline void BidRequest_Mobile::set_deprecated_brand(const ::std::string& value) {
  set_has_deprecated_brand();
  if (deprecated_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_brand_ = new ::std::string;
  }
  deprecated_brand_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_brand)
}
inline void BidRequest_Mobile::set_deprecated_brand(const char* value) {
  set_has_deprecated_brand();
  if (deprecated_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_brand_ = new ::std::string;
  }
  deprecated_brand_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_brand)
}
inline void BidRequest_Mobile::set_deprecated_brand(const char* value, size_t size) {
  set_has_deprecated_brand();
  if (deprecated_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_brand_ = new ::std::string;
  }
  deprecated_brand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_brand)
}
inline ::std::string* BidRequest_Mobile::mutable_deprecated_brand() {
  set_has_deprecated_brand();
  if (deprecated_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_brand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_brand)
  return deprecated_brand_;
}
inline ::std::string* BidRequest_Mobile::release_deprecated_brand() {
  clear_has_deprecated_brand();
  if (deprecated_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_brand_;
    deprecated_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_deprecated_brand(::std::string* deprecated_brand) {
  if (deprecated_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_brand_;
  }
  if (deprecated_brand) {
    set_has_deprecated_brand();
    deprecated_brand_ = deprecated_brand;
  } else {
    clear_has_deprecated_brand();
    deprecated_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_brand)
}

// optional string DEPRECATED_model = 13;
inline bool BidRequest_Mobile::has_deprecated_model() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_model() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_model() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BidRequest_Mobile::clear_deprecated_model() {
  if (deprecated_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_model_->clear();
  }
  clear_has_deprecated_model();
}
inline const ::std::string& BidRequest_Mobile::deprecated_model() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_model)
  return *deprecated_model_;
}
inline void BidRequest_Mobile::set_deprecated_model(const ::std::string& value) {
  set_has_deprecated_model();
  if (deprecated_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_model_ = new ::std::string;
  }
  deprecated_model_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_model)
}
inline void BidRequest_Mobile::set_deprecated_model(const char* value) {
  set_has_deprecated_model();
  if (deprecated_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_model_ = new ::std::string;
  }
  deprecated_model_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_model)
}
inline void BidRequest_Mobile::set_deprecated_model(const char* value, size_t size) {
  set_has_deprecated_model();
  if (deprecated_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_model_ = new ::std::string;
  }
  deprecated_model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_model)
}
inline ::std::string* BidRequest_Mobile::mutable_deprecated_model() {
  set_has_deprecated_model();
  if (deprecated_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_model)
  return deprecated_model_;
}
inline ::std::string* BidRequest_Mobile::release_deprecated_model() {
  clear_has_deprecated_model();
  if (deprecated_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_model_;
    deprecated_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_deprecated_model(::std::string* deprecated_model) {
  if (deprecated_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_model_;
  }
  if (deprecated_model) {
    set_has_deprecated_model();
    deprecated_model_ = deprecated_model;
  } else {
    clear_has_deprecated_model();
    deprecated_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_model)
}

// optional .BidRequest.Mobile.DeviceOsVersion DEPRECATED_os_version = 14;
inline bool BidRequest_Mobile::has_deprecated_os_version() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_os_version() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_os_version() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BidRequest_Mobile::clear_deprecated_os_version() {
  if (deprecated_os_version_ != NULL) deprecated_os_version_->::BidRequest_Mobile_DeviceOsVersion::Clear();
  clear_has_deprecated_os_version();
}
inline const ::BidRequest_Mobile_DeviceOsVersion& BidRequest_Mobile::deprecated_os_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_os_version)
  return deprecated_os_version_ != NULL ? *deprecated_os_version_ : *default_instance_->deprecated_os_version_;
}
inline ::BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile::mutable_deprecated_os_version() {
  set_has_deprecated_os_version();
  if (deprecated_os_version_ == NULL) deprecated_os_version_ = new ::BidRequest_Mobile_DeviceOsVersion;
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_os_version)
  return deprecated_os_version_;
}
inline ::BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile::release_deprecated_os_version() {
  clear_has_deprecated_os_version();
  ::BidRequest_Mobile_DeviceOsVersion* temp = deprecated_os_version_;
  deprecated_os_version_ = NULL;
  return temp;
}
inline void BidRequest_Mobile::set_allocated_deprecated_os_version(::BidRequest_Mobile_DeviceOsVersion* deprecated_os_version) {
  delete deprecated_os_version_;
  deprecated_os_version_ = deprecated_os_version;
  if (deprecated_os_version) {
    set_has_deprecated_os_version();
  } else {
    clear_has_deprecated_os_version();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_os_version)
}

// optional int32 DEPRECATED_screen_width = 15;
inline bool BidRequest_Mobile::has_deprecated_screen_width() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_screen_width() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_screen_width() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BidRequest_Mobile::clear_deprecated_screen_width() {
  deprecated_screen_width_ = 0;
  clear_has_deprecated_screen_width();
}
inline ::google::protobuf::int32 BidRequest_Mobile::deprecated_screen_width() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_screen_width)
  return deprecated_screen_width_;
}
inline void BidRequest_Mobile::set_deprecated_screen_width(::google::protobuf::int32 value) {
  set_has_deprecated_screen_width();
  deprecated_screen_width_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_screen_width)
}

// optional int32 DEPRECATED_screen_height = 16;
inline bool BidRequest_Mobile::has_deprecated_screen_height() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_screen_height() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_screen_height() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BidRequest_Mobile::clear_deprecated_screen_height() {
  deprecated_screen_height_ = 0;
  clear_has_deprecated_screen_height();
}
inline ::google::protobuf::int32 BidRequest_Mobile::deprecated_screen_height() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_screen_height)
  return deprecated_screen_height_;
}
inline void BidRequest_Mobile::set_deprecated_screen_height(::google::protobuf::int32 value) {
  set_has_deprecated_screen_height();
  deprecated_screen_height_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_screen_height)
}

// optional int64 DEPRECATED_carrier_id = 18;
inline bool BidRequest_Mobile::has_deprecated_carrier_id() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_carrier_id() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_carrier_id() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BidRequest_Mobile::clear_deprecated_carrier_id() {
  deprecated_carrier_id_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_carrier_id();
}
inline ::google::protobuf::int64 BidRequest_Mobile::deprecated_carrier_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_carrier_id)
  return deprecated_carrier_id_;
}
inline void BidRequest_Mobile::set_deprecated_carrier_id(::google::protobuf::int64 value) {
  set_has_deprecated_carrier_id();
  deprecated_carrier_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_carrier_id)
}

// optional int32 DEPRECATED_device_pixel_ratio_millis = 19 [default = 1000];
inline bool BidRequest_Mobile::has_deprecated_device_pixel_ratio_millis() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BidRequest_Mobile::set_has_deprecated_device_pixel_ratio_millis() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BidRequest_Mobile::clear_has_deprecated_device_pixel_ratio_millis() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BidRequest_Mobile::clear_deprecated_device_pixel_ratio_millis() {
  deprecated_device_pixel_ratio_millis_ = 1000;
  clear_has_deprecated_device_pixel_ratio_millis();
}
inline ::google::protobuf::int32 BidRequest_Mobile::deprecated_device_pixel_ratio_millis() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_device_pixel_ratio_millis)
  return deprecated_device_pixel_ratio_millis_;
}
inline void BidRequest_Mobile::set_deprecated_device_pixel_ratio_millis(::google::protobuf::int32 value) {
  set_has_deprecated_device_pixel_ratio_millis();
  deprecated_device_pixel_ratio_millis_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_device_pixel_ratio_millis)
}

// -------------------------------------------------------------------

// BidRequest_Video_CompanionSlot

// repeated int32 height = 1 [packed = true];
inline int BidRequest_Video_CompanionSlot::height_size() const {
  return height_.size();
}
inline void BidRequest_Video_CompanionSlot::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Video_CompanionSlot::height(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.CompanionSlot.height)
  return height_.Get(index);
}
inline void BidRequest_Video_CompanionSlot::set_height(int index, ::google::protobuf::int32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.CompanionSlot.height)
}
inline void BidRequest_Video_CompanionSlot::add_height(::google::protobuf::int32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Video.CompanionSlot.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Video_CompanionSlot::height() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.CompanionSlot.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Video_CompanionSlot::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.CompanionSlot.height)
  return &height_;
}

// repeated int32 width = 2 [packed = true];
inline int BidRequest_Video_CompanionSlot::width_size() const {
  return width_.size();
}
inline void BidRequest_Video_CompanionSlot::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Video_CompanionSlot::width(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.CompanionSlot.width)
  return width_.Get(index);
}
inline void BidRequest_Video_CompanionSlot::set_width(int index, ::google::protobuf::int32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.CompanionSlot.width)
}
inline void BidRequest_Video_CompanionSlot::add_width(::google::protobuf::int32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Video.CompanionSlot.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Video_CompanionSlot::width() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.CompanionSlot.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Video_CompanionSlot::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.CompanionSlot.width)
  return &width_;
}

// repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
inline int BidRequest_Video_CompanionSlot::creative_format_size() const {
  return creative_format_.size();
}
inline void BidRequest_Video_CompanionSlot::clear_creative_format() {
  creative_format_.Clear();
}
inline ::BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::creative_format(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.CompanionSlot.creative_format)
  return static_cast< ::BidRequest_Video_CompanionSlot_CreativeFormat >(creative_format_.Get(index));
}
inline void BidRequest_Video_CompanionSlot::set_creative_format(int index, ::BidRequest_Video_CompanionSlot_CreativeFormat value) {
  assert(::BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(value));
  creative_format_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.CompanionSlot.creative_format)
}
inline void BidRequest_Video_CompanionSlot::add_creative_format(::BidRequest_Video_CompanionSlot_CreativeFormat value) {
  assert(::BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(value));
  creative_format_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Video.CompanionSlot.creative_format)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Video_CompanionSlot::creative_format() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.CompanionSlot.creative_format)
  return creative_format_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Video_CompanionSlot::mutable_creative_format() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.CompanionSlot.creative_format)
  return &creative_format_;
}

// -------------------------------------------------------------------

// BidRequest_Video_ContentAttributes

// optional string title = 1;
inline bool BidRequest_Video_ContentAttributes::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Video_ContentAttributes::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Video_ContentAttributes::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Video_ContentAttributes::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& BidRequest_Video_ContentAttributes::title() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.ContentAttributes.title)
  return *title_;
}
inline void BidRequest_Video_ContentAttributes::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.ContentAttributes.title)
}
inline void BidRequest_Video_ContentAttributes::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Video.ContentAttributes.title)
}
inline void BidRequest_Video_ContentAttributes::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Video.ContentAttributes.title)
}
inline ::std::string* BidRequest_Video_ContentAttributes::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Video.ContentAttributes.title)
  return title_;
}
inline ::std::string* BidRequest_Video_ContentAttributes::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Video_ContentAttributes::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Video.ContentAttributes.title)
}

// optional int32 duration_seconds = 2;
inline bool BidRequest_Video_ContentAttributes::has_duration_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Video_ContentAttributes::set_has_duration_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Video_ContentAttributes::clear_has_duration_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Video_ContentAttributes::clear_duration_seconds() {
  duration_seconds_ = 0;
  clear_has_duration_seconds();
}
inline ::google::protobuf::int32 BidRequest_Video_ContentAttributes::duration_seconds() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.ContentAttributes.duration_seconds)
  return duration_seconds_;
}
inline void BidRequest_Video_ContentAttributes::set_duration_seconds(::google::protobuf::int32 value) {
  set_has_duration_seconds();
  duration_seconds_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.ContentAttributes.duration_seconds)
}

// repeated string keywords = 3;
inline int BidRequest_Video_ContentAttributes::keywords_size() const {
  return keywords_.size();
}
inline void BidRequest_Video_ContentAttributes::clear_keywords() {
  keywords_.Clear();
}
inline const ::std::string& BidRequest_Video_ContentAttributes::keywords(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.ContentAttributes.keywords)
  return keywords_.Get(index);
}
inline ::std::string* BidRequest_Video_ContentAttributes::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.Video.ContentAttributes.keywords)
  return keywords_.Mutable(index);
}
inline void BidRequest_Video_ContentAttributes::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.Video.ContentAttributes.keywords)
  keywords_.Mutable(index)->assign(value);
}
inline void BidRequest_Video_ContentAttributes::set_keywords(int index, const char* value) {
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Video.ContentAttributes.keywords)
}
inline void BidRequest_Video_ContentAttributes::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Video.ContentAttributes.keywords)
}
inline ::std::string* BidRequest_Video_ContentAttributes::add_keywords() {
  return keywords_.Add();
}
inline void BidRequest_Video_ContentAttributes::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.Video.ContentAttributes.keywords)
}
inline void BidRequest_Video_ContentAttributes::add_keywords(const char* value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.Video.ContentAttributes.keywords)
}
inline void BidRequest_Video_ContentAttributes::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.Video.ContentAttributes.keywords)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Video_ContentAttributes::keywords() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.ContentAttributes.keywords)
  return keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Video_ContentAttributes::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.ContentAttributes.keywords)
  return &keywords_;
}

// -------------------------------------------------------------------

// BidRequest_Video

// optional .BidRequest.Video.Placement placement = 16 [default = UNKNOWN_PLACEMENT];
inline bool BidRequest_Video::has_placement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Video::set_has_placement() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Video::clear_has_placement() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Video::clear_placement() {
  placement_ = 0;
  clear_has_placement();
}
inline ::BidRequest_Video_Placement BidRequest_Video::placement() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.placement)
  return static_cast< ::BidRequest_Video_Placement >(placement_);
}
inline void BidRequest_Video::set_placement(::BidRequest_Video_Placement value) {
  assert(::BidRequest_Video_Placement_IsValid(value));
  set_has_placement();
  placement_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.placement)
}

// optional string description_url = 10;
inline bool BidRequest_Video::has_description_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Video::set_has_description_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Video::clear_has_description_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Video::clear_description_url() {
  if (description_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_url_->clear();
  }
  clear_has_description_url();
}
inline const ::std::string& BidRequest_Video::description_url() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.description_url)
  return *description_url_;
}
inline void BidRequest_Video::set_description_url(const ::std::string& value) {
  set_has_description_url();
  if (description_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_url_ = new ::std::string;
  }
  description_url_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.description_url)
}
inline void BidRequest_Video::set_description_url(const char* value) {
  set_has_description_url();
  if (description_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_url_ = new ::std::string;
  }
  description_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.Video.description_url)
}
inline void BidRequest_Video::set_description_url(const char* value, size_t size) {
  set_has_description_url();
  if (description_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_url_ = new ::std::string;
  }
  description_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Video.description_url)
}
inline ::std::string* BidRequest_Video::mutable_description_url() {
  set_has_description_url();
  if (description_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Video.description_url)
  return description_url_;
}
inline ::std::string* BidRequest_Video::release_description_url() {
  clear_has_description_url();
  if (description_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_url_;
    description_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_Video::set_allocated_description_url(::std::string* description_url) {
  if (description_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_url_;
  }
  if (description_url) {
    set_has_description_url();
    description_url_ = description_url;
  } else {
    clear_has_description_url();
    description_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Video.description_url)
}

// optional bool is_embedded_offsite = 11 [default = false];
inline bool BidRequest_Video::has_is_embedded_offsite() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Video::set_has_is_embedded_offsite() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Video::clear_has_is_embedded_offsite() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Video::clear_is_embedded_offsite() {
  is_embedded_offsite_ = false;
  clear_has_is_embedded_offsite();
}
inline bool BidRequest_Video::is_embedded_offsite() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.is_embedded_offsite)
  return is_embedded_offsite_;
}
inline void BidRequest_Video::set_is_embedded_offsite(bool value) {
  set_has_is_embedded_offsite();
  is_embedded_offsite_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.is_embedded_offsite)
}

// optional .BidRequest.Video.VideoPlaybackMethod playback_method = 14 [default = METHOD_UNKNOWN];
inline bool BidRequest_Video::has_playback_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Video::set_has_playback_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Video::clear_has_playback_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Video::clear_playback_method() {
  playback_method_ = 0;
  clear_has_playback_method();
}
inline ::BidRequest_Video_VideoPlaybackMethod BidRequest_Video::playback_method() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.playback_method)
  return static_cast< ::BidRequest_Video_VideoPlaybackMethod >(playback_method_);
}
inline void BidRequest_Video::set_playback_method(::BidRequest_Video_VideoPlaybackMethod value) {
  assert(::BidRequest_Video_VideoPlaybackMethod_IsValid(value));
  set_has_playback_method();
  playback_method_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.playback_method)
}

// optional bool is_clickable = 15;
inline bool BidRequest_Video::has_is_clickable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Video::set_has_is_clickable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Video::clear_has_is_clickable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Video::clear_is_clickable() {
  is_clickable_ = false;
  clear_has_is_clickable();
}
inline bool BidRequest_Video::is_clickable() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.is_clickable)
  return is_clickable_;
}
inline void BidRequest_Video::set_is_clickable(bool value) {
  set_has_is_clickable();
  is_clickable_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.is_clickable)
}

// optional int32 videoad_start_delay = 1;
inline bool BidRequest_Video::has_videoad_start_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Video::set_has_videoad_start_delay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Video::clear_has_videoad_start_delay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Video::clear_videoad_start_delay() {
  videoad_start_delay_ = 0;
  clear_has_videoad_start_delay();
}
inline ::google::protobuf::int32 BidRequest_Video::videoad_start_delay() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.videoad_start_delay)
  return videoad_start_delay_;
}
inline void BidRequest_Video::set_videoad_start_delay(::google::protobuf::int32 value) {
  set_has_videoad_start_delay();
  videoad_start_delay_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.videoad_start_delay)
}

// optional int32 max_ad_duration = 2;
inline bool BidRequest_Video::has_max_ad_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Video::set_has_max_ad_duration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Video::clear_has_max_ad_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Video::clear_max_ad_duration() {
  max_ad_duration_ = 0;
  clear_has_max_ad_duration();
}
inline ::google::protobuf::int32 BidRequest_Video::max_ad_duration() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.max_ad_duration)
  return max_ad_duration_;
}
inline void BidRequest_Video::set_max_ad_duration(::google::protobuf::int32 value) {
  set_has_max_ad_duration();
  max_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.max_ad_duration)
}

// optional int32 min_ad_duration = 8;
inline bool BidRequest_Video::has_min_ad_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Video::set_has_min_ad_duration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Video::clear_has_min_ad_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Video::clear_min_ad_duration() {
  min_ad_duration_ = 0;
  clear_has_min_ad_duration();
}
inline ::google::protobuf::int32 BidRequest_Video::min_ad_duration() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.min_ad_duration)
  return min_ad_duration_;
}
inline void BidRequest_Video::set_min_ad_duration(::google::protobuf::int32 value) {
  set_has_min_ad_duration();
  min_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.min_ad_duration)
}

// optional int32 max_ads_in_pod = 12;
inline bool BidRequest_Video::has_max_ads_in_pod() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Video::set_has_max_ads_in_pod() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Video::clear_has_max_ads_in_pod() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Video::clear_max_ads_in_pod() {
  max_ads_in_pod_ = 0;
  clear_has_max_ads_in_pod();
}
inline ::google::protobuf::int32 BidRequest_Video::max_ads_in_pod() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.max_ads_in_pod)
  return max_ads_in_pod_;
}
inline void BidRequest_Video::set_max_ads_in_pod(::google::protobuf::int32 value) {
  set_has_max_ads_in_pod();
  max_ads_in_pod_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.max_ads_in_pod)
}

// optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
inline bool BidRequest_Video::has_video_ad_skippable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Video::set_has_video_ad_skippable() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Video::clear_has_video_ad_skippable() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Video::clear_video_ad_skippable() {
  video_ad_skippable_ = 0;
  clear_has_video_ad_skippable();
}
inline ::BidRequest_Video_SkippableBidRequestType BidRequest_Video::video_ad_skippable() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.video_ad_skippable)
  return static_cast< ::BidRequest_Video_SkippableBidRequestType >(video_ad_skippable_);
}
inline void BidRequest_Video::set_video_ad_skippable(::BidRequest_Video_SkippableBidRequestType value) {
  assert(::BidRequest_Video_SkippableBidRequestType_IsValid(value));
  set_has_video_ad_skippable();
  video_ad_skippable_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.video_ad_skippable)
}

// optional int32 skippable_max_ad_duration = 5;
inline bool BidRequest_Video::has_skippable_max_ad_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Video::set_has_skippable_max_ad_duration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Video::clear_has_skippable_max_ad_duration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Video::clear_skippable_max_ad_duration() {
  skippable_max_ad_duration_ = 0;
  clear_has_skippable_max_ad_duration();
}
inline ::google::protobuf::int32 BidRequest_Video::skippable_max_ad_duration() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.skippable_max_ad_duration)
  return skippable_max_ad_duration_;
}
inline void BidRequest_Video::set_skippable_max_ad_duration(::google::protobuf::int32 value) {
  set_has_skippable_max_ad_duration();
  skippable_max_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.skippable_max_ad_duration)
}

// repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
inline int BidRequest_Video::allowed_video_formats_size() const {
  return allowed_video_formats_.size();
}
inline void BidRequest_Video::clear_allowed_video_formats() {
  allowed_video_formats_.Clear();
}
inline ::BidRequest_Video_VideoFormat BidRequest_Video::allowed_video_formats(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.allowed_video_formats)
  return static_cast< ::BidRequest_Video_VideoFormat >(allowed_video_formats_.Get(index));
}
inline void BidRequest_Video::set_allowed_video_formats(int index, ::BidRequest_Video_VideoFormat value) {
  assert(::BidRequest_Video_VideoFormat_IsValid(value));
  allowed_video_formats_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.allowed_video_formats)
}
inline void BidRequest_Video::add_allowed_video_formats(::BidRequest_Video_VideoFormat value) {
  assert(::BidRequest_Video_VideoFormat_IsValid(value));
  allowed_video_formats_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Video.allowed_video_formats)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest_Video::allowed_video_formats() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.allowed_video_formats)
  return allowed_video_formats_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest_Video::mutable_allowed_video_formats() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.allowed_video_formats)
  return &allowed_video_formats_;
}

// repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
inline int BidRequest_Video::companion_slot_size() const {
  return companion_slot_.size();
}
inline void BidRequest_Video::clear_companion_slot() {
  companion_slot_.Clear();
}
inline const ::BidRequest_Video_CompanionSlot& BidRequest_Video::companion_slot(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.companion_slot)
  return companion_slot_.Get(index);
}
inline ::BidRequest_Video_CompanionSlot* BidRequest_Video::mutable_companion_slot(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.Video.companion_slot)
  return companion_slot_.Mutable(index);
}
inline ::BidRequest_Video_CompanionSlot* BidRequest_Video::add_companion_slot() {
  // @@protoc_insertion_point(field_add:BidRequest.Video.companion_slot)
  return companion_slot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_Video_CompanionSlot >&
BidRequest_Video::companion_slot() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.companion_slot)
  return companion_slot_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_Video_CompanionSlot >*
BidRequest_Video::mutable_companion_slot() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.companion_slot)
  return &companion_slot_;
}

// optional .BidRequest.Video.EndCapSupport end_cap_support = 13 [default = END_CAP_NOT_ENABLED];
inline bool BidRequest_Video::has_end_cap_support() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_Video::set_has_end_cap_support() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_Video::clear_has_end_cap_support() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_Video::clear_end_cap_support() {
  end_cap_support_ = 0;
  clear_has_end_cap_support();
}
inline ::BidRequest_Video_EndCapSupport BidRequest_Video::end_cap_support() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.end_cap_support)
  return static_cast< ::BidRequest_Video_EndCapSupport >(end_cap_support_);
}
inline void BidRequest_Video::set_end_cap_support(::BidRequest_Video_EndCapSupport value) {
  assert(::BidRequest_Video_EndCapSupport_IsValid(value));
  set_has_end_cap_support();
  end_cap_support_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.end_cap_support)
}

// optional .BidRequest.Video.ContentAttributes content_attributes = 9;
inline bool BidRequest_Video::has_content_attributes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest_Video::set_has_content_attributes() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest_Video::clear_has_content_attributes() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest_Video::clear_content_attributes() {
  if (content_attributes_ != NULL) content_attributes_->::BidRequest_Video_ContentAttributes::Clear();
  clear_has_content_attributes();
}
inline const ::BidRequest_Video_ContentAttributes& BidRequest_Video::content_attributes() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.content_attributes)
  return content_attributes_ != NULL ? *content_attributes_ : *default_instance_->content_attributes_;
}
inline ::BidRequest_Video_ContentAttributes* BidRequest_Video::mutable_content_attributes() {
  set_has_content_attributes();
  if (content_attributes_ == NULL) content_attributes_ = new ::BidRequest_Video_ContentAttributes;
  // @@protoc_insertion_point(field_mutable:BidRequest.Video.content_attributes)
  return content_attributes_;
}
inline ::BidRequest_Video_ContentAttributes* BidRequest_Video::release_content_attributes() {
  clear_has_content_attributes();
  ::BidRequest_Video_ContentAttributes* temp = content_attributes_;
  content_attributes_ = NULL;
  return temp;
}
inline void BidRequest_Video::set_allocated_content_attributes(::BidRequest_Video_ContentAttributes* content_attributes) {
  delete content_attributes_;
  content_attributes_ = content_attributes;
  if (content_attributes) {
    set_has_content_attributes();
  } else {
    clear_has_content_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Video.content_attributes)
}

// optional .BidRequest.Video.InventoryType DEPRECATED_inventory_type = 3 [default = WEB_VIDEO];
inline bool BidRequest_Video::has_deprecated_inventory_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest_Video::set_has_deprecated_inventory_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest_Video::clear_has_deprecated_inventory_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest_Video::clear_deprecated_inventory_type() {
  deprecated_inventory_type_ = 0;
  clear_has_deprecated_inventory_type();
}
inline ::BidRequest_Video_InventoryType BidRequest_Video::deprecated_inventory_type() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.DEPRECATED_inventory_type)
  return static_cast< ::BidRequest_Video_InventoryType >(deprecated_inventory_type_);
}
inline void BidRequest_Video::set_deprecated_inventory_type(::BidRequest_Video_InventoryType value) {
  assert(::BidRequest_Video_InventoryType_IsValid(value));
  set_has_deprecated_inventory_type();
  deprecated_inventory_type_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.DEPRECATED_inventory_type)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_MatchingAdData_BuyerPricingRule

// repeated int64 included_advertisers = 1;
inline int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::included_advertisers_size() const {
  return included_advertisers_.size();
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::clear_included_advertisers() {
  included_advertisers_.Clear();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::included_advertisers(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_advertisers)
  return included_advertisers_.Get(index);
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::set_included_advertisers(int index, ::google::protobuf::int64 value) {
  included_advertisers_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_advertisers)
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::add_included_advertisers(::google::protobuf::int64 value) {
  included_advertisers_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_advertisers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::included_advertisers() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_advertisers)
  return included_advertisers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::mutable_included_advertisers() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_advertisers)
  return &included_advertisers_;
}

// repeated int64 excluded_advertisers = 2;
inline int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::excluded_advertisers_size() const {
  return excluded_advertisers_.size();
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::clear_excluded_advertisers() {
  excluded_advertisers_.Clear();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::excluded_advertisers(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_advertisers)
  return excluded_advertisers_.Get(index);
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::set_excluded_advertisers(int index, ::google::protobuf::int64 value) {
  excluded_advertisers_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_advertisers)
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::add_excluded_advertisers(::google::protobuf::int64 value) {
  excluded_advertisers_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_advertisers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::excluded_advertisers() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_advertisers)
  return excluded_advertisers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::mutable_excluded_advertisers() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_advertisers)
  return &excluded_advertisers_;
}

// repeated int64 included_agencies = 3;
inline int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::included_agencies_size() const {
  return included_agencies_.size();
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::clear_included_agencies() {
  included_agencies_.Clear();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::included_agencies(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_agencies)
  return included_agencies_.Get(index);
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::set_included_agencies(int index, ::google::protobuf::int64 value) {
  included_agencies_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_agencies)
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::add_included_agencies(::google::protobuf::int64 value) {
  included_agencies_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_agencies)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::included_agencies() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_agencies)
  return included_agencies_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::mutable_included_agencies() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.included_agencies)
  return &included_agencies_;
}

// repeated int64 excluded_agencies = 4;
inline int BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::excluded_agencies_size() const {
  return excluded_agencies_.size();
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::clear_excluded_agencies() {
  excluded_agencies_.Clear();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::excluded_agencies(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_agencies)
  return excluded_agencies_.Get(index);
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::set_excluded_agencies(int index, ::google::protobuf::int64 value) {
  excluded_agencies_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_agencies)
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::add_excluded_agencies(::google::protobuf::int64 value) {
  excluded_agencies_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_agencies)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::excluded_agencies() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_agencies)
  return excluded_agencies_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::mutable_excluded_agencies() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.excluded_agencies)
  return &excluded_agencies_;
}

// optional bool blocked = 5;
inline bool BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::has_blocked() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::set_has_blocked() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::clear_has_blocked() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::clear_blocked() {
  blocked_ = false;
  clear_has_blocked();
}
inline bool BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::blocked() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.blocked)
  return blocked_;
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::set_blocked(bool value) {
  set_has_blocked();
  blocked_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.blocked)
}

// optional int64 minimum_cpm_micros = 6;
inline bool BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::has_minimum_cpm_micros() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::set_has_minimum_cpm_micros() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::clear_has_minimum_cpm_micros() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::clear_minimum_cpm_micros() {
  minimum_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_minimum_cpm_micros();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::minimum_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.minimum_cpm_micros)
  return minimum_cpm_micros_;
}
inline void BidRequest_AdSlot_MatchingAdData_BuyerPricingRule::set_minimum_cpm_micros(::google::protobuf::int64 value) {
  set_has_minimum_cpm_micros();
  minimum_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.BuyerPricingRule.minimum_cpm_micros)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_MatchingAdData_DirectDeal

// optional int64 direct_deal_id = 1;
inline bool BidRequest_AdSlot_MatchingAdData_DirectDeal::has_direct_deal_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_has_direct_deal_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_has_direct_deal_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_direct_deal_id() {
  direct_deal_id_ = GOOGLE_LONGLONG(0);
  clear_has_direct_deal_id();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData_DirectDeal::direct_deal_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DirectDeal.direct_deal_id)
  return direct_deal_id_;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_direct_deal_id(::google::protobuf::int64 value) {
  set_has_direct_deal_id();
  direct_deal_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DirectDeal.direct_deal_id)
}

// optional int64 fixed_cpm_micros = 2;
inline bool BidRequest_AdSlot_MatchingAdData_DirectDeal::has_fixed_cpm_micros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_has_fixed_cpm_micros() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_has_fixed_cpm_micros() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_fixed_cpm_micros() {
  fixed_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_fixed_cpm_micros();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData_DirectDeal::fixed_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DirectDeal.fixed_cpm_micros)
  return fixed_cpm_micros_;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_fixed_cpm_micros(::google::protobuf::int64 value) {
  set_has_fixed_cpm_micros();
  fixed_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DirectDeal.fixed_cpm_micros)
}

// optional .BidRequest.AdSlot.MatchingAdData.DirectDeal.DealType deal_type = 3 [default = UNKNOWN_DEAL_TYPE];
inline bool BidRequest_AdSlot_MatchingAdData_DirectDeal::has_deal_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_has_deal_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_has_deal_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_deal_type() {
  deal_type_ = 0;
  clear_has_deal_type();
}
inline ::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType BidRequest_AdSlot_MatchingAdData_DirectDeal::deal_type() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DirectDeal.deal_type)
  return static_cast< ::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType >(deal_type_);
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_deal_type(::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType value) {
  assert(::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_IsValid(value));
  set_has_deal_type();
  deal_type_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DirectDeal.deal_type)
}

// optional bool publisher_blocks_overridden = 4 [default = false];
inline bool BidRequest_AdSlot_MatchingAdData_DirectDeal::has_publisher_blocks_overridden() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_has_publisher_blocks_overridden() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_has_publisher_blocks_overridden() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_publisher_blocks_overridden() {
  publisher_blocks_overridden_ = false;
  clear_has_publisher_blocks_overridden();
}
inline bool BidRequest_AdSlot_MatchingAdData_DirectDeal::publisher_blocks_overridden() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DirectDeal.publisher_blocks_overridden)
  return publisher_blocks_overridden_;
}
inline void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_publisher_blocks_overridden(bool value) {
  set_has_publisher_blocks_overridden();
  publisher_blocks_overridden_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DirectDeal.publisher_blocks_overridden)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_MatchingAdData

// repeated int64 billing_id = 2 [packed = false];
inline int BidRequest_AdSlot_MatchingAdData::billing_id_size() const {
  return billing_id_.size();
}
inline void BidRequest_AdSlot_MatchingAdData::clear_billing_id() {
  billing_id_.Clear();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData::billing_id(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.billing_id)
  return billing_id_.Get(index);
}
inline void BidRequest_AdSlot_MatchingAdData::set_billing_id(int index, ::google::protobuf::int64 value) {
  billing_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.billing_id)
}
inline void BidRequest_AdSlot_MatchingAdData::add_billing_id(::google::protobuf::int64 value) {
  billing_id_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.MatchingAdData.billing_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BidRequest_AdSlot_MatchingAdData::billing_id() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.MatchingAdData.billing_id)
  return billing_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BidRequest_AdSlot_MatchingAdData::mutable_billing_id() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.MatchingAdData.billing_id)
  return &billing_id_;
}

// optional int64 minimum_cpm_micros = 5;
inline bool BidRequest_AdSlot_MatchingAdData::has_minimum_cpm_micros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData::set_has_minimum_cpm_micros() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdSlot_MatchingAdData::clear_has_minimum_cpm_micros() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdSlot_MatchingAdData::clear_minimum_cpm_micros() {
  minimum_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_minimum_cpm_micros();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData::minimum_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.minimum_cpm_micros)
  return minimum_cpm_micros_;
}
inline void BidRequest_AdSlot_MatchingAdData::set_minimum_cpm_micros(::google::protobuf::int64 value) {
  set_has_minimum_cpm_micros();
  minimum_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.minimum_cpm_micros)
}

// repeated .BidRequest.AdSlot.MatchingAdData.BuyerPricingRule pricing_rule = 7;
inline int BidRequest_AdSlot_MatchingAdData::pricing_rule_size() const {
  return pricing_rule_.size();
}
inline void BidRequest_AdSlot_MatchingAdData::clear_pricing_rule() {
  pricing_rule_.Clear();
}
inline const ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule& BidRequest_AdSlot_MatchingAdData::pricing_rule(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.pricing_rule)
  return pricing_rule_.Get(index);
}
inline ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* BidRequest_AdSlot_MatchingAdData::mutable_pricing_rule(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.MatchingAdData.pricing_rule)
  return pricing_rule_.Mutable(index);
}
inline ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule* BidRequest_AdSlot_MatchingAdData::add_pricing_rule() {
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.MatchingAdData.pricing_rule)
  return pricing_rule_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule >&
BidRequest_AdSlot_MatchingAdData::pricing_rule() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.MatchingAdData.pricing_rule)
  return pricing_rule_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_BuyerPricingRule >*
BidRequest_AdSlot_MatchingAdData::mutable_pricing_rule() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.MatchingAdData.pricing_rule)
  return &pricing_rule_;
}

// repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
inline int BidRequest_AdSlot_MatchingAdData::direct_deal_size() const {
  return direct_deal_.size();
}
inline void BidRequest_AdSlot_MatchingAdData::clear_direct_deal() {
  direct_deal_.Clear();
}
inline const ::BidRequest_AdSlot_MatchingAdData_DirectDeal& BidRequest_AdSlot_MatchingAdData::direct_deal(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return direct_deal_.Get(index);
}
inline ::BidRequest_AdSlot_MatchingAdData_DirectDeal* BidRequest_AdSlot_MatchingAdData::mutable_direct_deal(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return direct_deal_.Mutable(index);
}
inline ::BidRequest_AdSlot_MatchingAdData_DirectDeal* BidRequest_AdSlot_MatchingAdData::add_direct_deal() {
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return direct_deal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_DirectDeal >&
BidRequest_AdSlot_MatchingAdData::direct_deal() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return direct_deal_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_DirectDeal >*
BidRequest_AdSlot_MatchingAdData::mutable_direct_deal() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return &direct_deal_;
}

// optional int64 DEPRECATED_campaign_id = 1;
inline bool BidRequest_AdSlot_MatchingAdData::has_deprecated_campaign_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData::set_has_deprecated_campaign_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_AdSlot_MatchingAdData::clear_has_deprecated_campaign_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_AdSlot_MatchingAdData::clear_deprecated_campaign_id() {
  deprecated_campaign_id_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_campaign_id();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData::deprecated_campaign_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DEPRECATED_campaign_id)
  return deprecated_campaign_id_;
}
inline void BidRequest_AdSlot_MatchingAdData::set_deprecated_campaign_id(::google::protobuf::int64 value) {
  set_has_deprecated_campaign_id();
  deprecated_campaign_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DEPRECATED_campaign_id)
}

// optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
inline bool BidRequest_AdSlot_MatchingAdData::has_deprecated_per_buyer_minimum_cpm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData::set_has_deprecated_per_buyer_minimum_cpm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_AdSlot_MatchingAdData::clear_has_deprecated_per_buyer_minimum_cpm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_AdSlot_MatchingAdData::clear_deprecated_per_buyer_minimum_cpm() {
  deprecated_per_buyer_minimum_cpm_ = false;
  clear_has_deprecated_per_buyer_minimum_cpm();
}
inline bool BidRequest_AdSlot_MatchingAdData::deprecated_per_buyer_minimum_cpm() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DEPRECATED_per_buyer_minimum_cpm)
  return deprecated_per_buyer_minimum_cpm_;
}
inline void BidRequest_AdSlot_MatchingAdData::set_deprecated_per_buyer_minimum_cpm(bool value) {
  set_has_deprecated_per_buyer_minimum_cpm();
  deprecated_per_buyer_minimum_cpm_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DEPRECATED_per_buyer_minimum_cpm)
}

// optional int64 DEPRECATED_fixed_cpm_micros = 4;
inline bool BidRequest_AdSlot_MatchingAdData::has_deprecated_fixed_cpm_micros() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_AdSlot_MatchingAdData::set_has_deprecated_fixed_cpm_micros() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_AdSlot_MatchingAdData::clear_has_deprecated_fixed_cpm_micros() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_AdSlot_MatchingAdData::clear_deprecated_fixed_cpm_micros() {
  deprecated_fixed_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_fixed_cpm_micros();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData::deprecated_fixed_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DEPRECATED_fixed_cpm_micros)
  return deprecated_fixed_cpm_micros_;
}
inline void BidRequest_AdSlot_MatchingAdData::set_deprecated_fixed_cpm_micros(::google::protobuf::int64 value) {
  set_has_deprecated_fixed_cpm_micros();
  deprecated_fixed_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DEPRECATED_fixed_cpm_micros)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_ExchangeBidding

// repeated string publisher_parameter = 1;
inline int BidRequest_AdSlot_ExchangeBidding::publisher_parameter_size() const {
  return publisher_parameter_.size();
}
inline void BidRequest_AdSlot_ExchangeBidding::clear_publisher_parameter() {
  publisher_parameter_.Clear();
}
inline const ::std::string& BidRequest_AdSlot_ExchangeBidding::publisher_parameter(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
  return publisher_parameter_.Get(index);
}
inline ::std::string* BidRequest_AdSlot_ExchangeBidding::mutable_publisher_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
  return publisher_parameter_.Mutable(index);
}
inline void BidRequest_AdSlot_ExchangeBidding::set_publisher_parameter(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
  publisher_parameter_.Mutable(index)->assign(value);
}
inline void BidRequest_AdSlot_ExchangeBidding::set_publisher_parameter(int index, const char* value) {
  publisher_parameter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
}
inline void BidRequest_AdSlot_ExchangeBidding::set_publisher_parameter(int index, const char* value, size_t size) {
  publisher_parameter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
}
inline ::std::string* BidRequest_AdSlot_ExchangeBidding::add_publisher_parameter() {
  return publisher_parameter_.Add();
}
inline void BidRequest_AdSlot_ExchangeBidding::add_publisher_parameter(const ::std::string& value) {
  publisher_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
}
inline void BidRequest_AdSlot_ExchangeBidding::add_publisher_parameter(const char* value) {
  publisher_parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
}
inline void BidRequest_AdSlot_ExchangeBidding::add_publisher_parameter(const char* value, size_t size) {
  publisher_parameter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot_ExchangeBidding::publisher_parameter() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
  return publisher_parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot_ExchangeBidding::mutable_publisher_parameter() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.ExchangeBidding.publisher_parameter)
  return &publisher_parameter_;
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_NativeAdTemplate

// optional int64 required_fields = 1;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_required_fields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_required_fields() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_required_fields() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_required_fields() {
  required_fields_ = GOOGLE_LONGLONG(0);
  clear_has_required_fields();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_NativeAdTemplate::required_fields() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.required_fields)
  return required_fields_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_required_fields(::google::protobuf::int64 value) {
  set_has_required_fields();
  required_fields_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.required_fields)
}

// optional int64 recommended_fields = 2;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_recommended_fields() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_recommended_fields() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_recommended_fields() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_recommended_fields() {
  recommended_fields_ = GOOGLE_LONGLONG(0);
  clear_has_recommended_fields();
}
inline ::google::protobuf::int64 BidRequest_AdSlot_NativeAdTemplate::recommended_fields() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.recommended_fields)
  return recommended_fields_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_recommended_fields(::google::protobuf::int64 value) {
  set_has_recommended_fields();
  recommended_fields_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.recommended_fields)
}

// optional int32 headline_max_safe_length = 3;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_headline_max_safe_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_headline_max_safe_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_headline_max_safe_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_headline_max_safe_length() {
  headline_max_safe_length_ = 0;
  clear_has_headline_max_safe_length();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::headline_max_safe_length() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.headline_max_safe_length)
  return headline_max_safe_length_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_headline_max_safe_length(::google::protobuf::int32 value) {
  set_has_headline_max_safe_length();
  headline_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.headline_max_safe_length)
}

// optional int32 body_max_safe_length = 4;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_body_max_safe_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_body_max_safe_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_body_max_safe_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_body_max_safe_length() {
  body_max_safe_length_ = 0;
  clear_has_body_max_safe_length();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::body_max_safe_length() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.body_max_safe_length)
  return body_max_safe_length_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_body_max_safe_length(::google::protobuf::int32 value) {
  set_has_body_max_safe_length();
  body_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.body_max_safe_length)
}

// optional int32 call_to_action_max_safe_length = 5;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_call_to_action_max_safe_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_call_to_action_max_safe_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_call_to_action_max_safe_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_call_to_action_max_safe_length() {
  call_to_action_max_safe_length_ = 0;
  clear_has_call_to_action_max_safe_length();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::call_to_action_max_safe_length() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.call_to_action_max_safe_length)
  return call_to_action_max_safe_length_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_call_to_action_max_safe_length(::google::protobuf::int32 value) {
  set_has_call_to_action_max_safe_length();
  call_to_action_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.call_to_action_max_safe_length)
}

// optional int32 advertiser_max_safe_length = 6;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_advertiser_max_safe_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_advertiser_max_safe_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_advertiser_max_safe_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_advertiser_max_safe_length() {
  advertiser_max_safe_length_ = 0;
  clear_has_advertiser_max_safe_length();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::advertiser_max_safe_length() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.advertiser_max_safe_length)
  return advertiser_max_safe_length_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_advertiser_max_safe_length(::google::protobuf::int32 value) {
  set_has_advertiser_max_safe_length();
  advertiser_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.advertiser_max_safe_length)
}

// optional int32 store_max_safe_length = 14;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_store_max_safe_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_store_max_safe_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_store_max_safe_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_store_max_safe_length() {
  store_max_safe_length_ = 0;
  clear_has_store_max_safe_length();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::store_max_safe_length() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.store_max_safe_length)
  return store_max_safe_length_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_store_max_safe_length(::google::protobuf::int32 value) {
  set_has_store_max_safe_length();
  store_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.store_max_safe_length)
}

// optional int32 price_max_safe_length = 15;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_price_max_safe_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_price_max_safe_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_price_max_safe_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_price_max_safe_length() {
  price_max_safe_length_ = 0;
  clear_has_price_max_safe_length();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::price_max_safe_length() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.price_max_safe_length)
  return price_max_safe_length_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_price_max_safe_length(::google::protobuf::int32 value) {
  set_has_price_max_safe_length();
  price_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.price_max_safe_length)
}

// optional int32 image_width = 7;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_image_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_image_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_image_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_image_width() {
  image_width_ = 0;
  clear_has_image_width();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::image_width() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.image_width)
  return image_width_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_image_width(::google::protobuf::int32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.image_width)
}

// optional int32 image_height = 8;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_image_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_image_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_image_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_image_height() {
  image_height_ = 0;
  clear_has_image_height();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::image_height() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.image_height)
  return image_height_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_image_height(::google::protobuf::int32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.image_height)
}

// optional int32 logo_width = 9;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_logo_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_logo_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_logo_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_logo_width() {
  logo_width_ = 0;
  clear_has_logo_width();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::logo_width() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.logo_width)
  return logo_width_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_logo_width(::google::protobuf::int32 value) {
  set_has_logo_width();
  logo_width_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.logo_width)
}

// optional int32 logo_height = 10;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_logo_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_logo_height() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_logo_height() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_logo_height() {
  logo_height_ = 0;
  clear_has_logo_height();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::logo_height() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.logo_height)
  return logo_height_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_logo_height(::google::protobuf::int32 value) {
  set_has_logo_height();
  logo_height_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.logo_height)
}

// optional int32 app_icon_width = 11;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_app_icon_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_app_icon_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_app_icon_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_app_icon_width() {
  app_icon_width_ = 0;
  clear_has_app_icon_width();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::app_icon_width() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.app_icon_width)
  return app_icon_width_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_app_icon_width(::google::protobuf::int32 value) {
  set_has_app_icon_width();
  app_icon_width_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.app_icon_width)
}

// optional int32 app_icon_height = 12;
inline bool BidRequest_AdSlot_NativeAdTemplate::has_app_icon_height() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_has_app_icon_height() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_has_app_icon_height() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_AdSlot_NativeAdTemplate::clear_app_icon_height() {
  app_icon_height_ = 0;
  clear_has_app_icon_height();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_NativeAdTemplate::app_icon_height() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.NativeAdTemplate.app_icon_height)
  return app_icon_height_;
}
inline void BidRequest_AdSlot_NativeAdTemplate::set_app_icon_height(::google::protobuf::int32 value) {
  set_has_app_icon_height();
  app_icon_height_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.NativeAdTemplate.app_icon_height)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings

// optional .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType refresh_type = 1 [default = UNKNOWN_AUTO_REFRESH_TYPE];
inline bool BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::has_refresh_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::set_has_refresh_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::clear_has_refresh_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::clear_refresh_type() {
  refresh_type_ = 0;
  clear_has_refresh_type();
}
inline ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::refresh_type() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.refresh_type)
  return static_cast< ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType >(refresh_type_);
}
inline void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::set_refresh_type(::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType value) {
  assert(::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_IsValid(value));
  set_has_refresh_type();
  refresh_type_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.refresh_type)
}

// optional int32 min_refresh_interval_seconds = 2;
inline bool BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::has_min_refresh_interval_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::set_has_min_refresh_interval_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::clear_has_min_refresh_interval_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::clear_min_refresh_interval_seconds() {
  min_refresh_interval_seconds_ = 0;
  clear_has_min_refresh_interval_seconds();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::min_refresh_interval_seconds() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.min_refresh_interval_seconds)
  return min_refresh_interval_seconds_;
}
inline void BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings::set_min_refresh_interval_seconds(::google::protobuf::int32 value) {
  set_has_min_refresh_interval_seconds();
  min_refresh_interval_seconds_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.min_refresh_interval_seconds)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_AutoRefresh

// repeated .BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings refresh_settings = 1;
inline int BidRequest_AdSlot_AutoRefresh::refresh_settings_size() const {
  return refresh_settings_.size();
}
inline void BidRequest_AdSlot_AutoRefresh::clear_refresh_settings() {
  refresh_settings_.Clear();
}
inline const ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings& BidRequest_AdSlot_AutoRefresh::refresh_settings(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.AutoRefresh.refresh_settings)
  return refresh_settings_.Get(index);
}
inline ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* BidRequest_AdSlot_AutoRefresh::mutable_refresh_settings(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.AutoRefresh.refresh_settings)
  return refresh_settings_.Mutable(index);
}
inline ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings* BidRequest_AdSlot_AutoRefresh::add_refresh_settings() {
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.AutoRefresh.refresh_settings)
  return refresh_settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings >&
BidRequest_AdSlot_AutoRefresh::refresh_settings() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.AutoRefresh.refresh_settings)
  return refresh_settings_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings >*
BidRequest_AdSlot_AutoRefresh::mutable_refresh_settings() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.AutoRefresh.refresh_settings)
  return &refresh_settings_;
}

// optional int32 refresh_count = 2 [default = 0];
inline bool BidRequest_AdSlot_AutoRefresh::has_refresh_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdSlot_AutoRefresh::set_has_refresh_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdSlot_AutoRefresh::clear_has_refresh_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdSlot_AutoRefresh::clear_refresh_count() {
  refresh_count_ = 0;
  clear_has_refresh_count();
}
inline ::google::protobuf::int32 BidRequest_AdSlot_AutoRefresh::refresh_count() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.AutoRefresh.refresh_count)
  return refresh_count_;
}
inline void BidRequest_AdSlot_AutoRefresh::set_refresh_count(::google::protobuf::int32 value) {
  set_has_refresh_count();
  refresh_count_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.AutoRefresh.refresh_count)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot

// required int32 id = 1;
inline bool BidRequest_AdSlot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_AdSlot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_AdSlot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_AdSlot::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::id() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.id)
  return id_;
}
inline void BidRequest_AdSlot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.id)
}

// optional uint64 ad_block_key = 14;
inline bool BidRequest_AdSlot::has_ad_block_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdSlot::set_has_ad_block_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdSlot::clear_has_ad_block_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdSlot::clear_ad_block_key() {
  ad_block_key_ = GOOGLE_ULONGLONG(0);
  clear_has_ad_block_key();
}
inline ::google::protobuf::uint64 BidRequest_AdSlot::ad_block_key() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.ad_block_key)
  return ad_block_key_;
}
inline void BidRequest_AdSlot::set_ad_block_key(::google::protobuf::uint64 value) {
  set_has_ad_block_key();
  ad_block_key_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.ad_block_key)
}

// repeated string targetable_channel = 10;
inline int BidRequest_AdSlot::targetable_channel_size() const {
  return targetable_channel_.size();
}
inline void BidRequest_AdSlot::clear_targetable_channel() {
  targetable_channel_.Clear();
}
inline const ::std::string& BidRequest_AdSlot::targetable_channel(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.targetable_channel)
  return targetable_channel_.Get(index);
}
inline ::std::string* BidRequest_AdSlot::mutable_targetable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.targetable_channel)
  return targetable_channel_.Mutable(index);
}
inline void BidRequest_AdSlot::set_targetable_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.targetable_channel)
  targetable_channel_.Mutable(index)->assign(value);
}
inline void BidRequest_AdSlot::set_targetable_channel(int index, const char* value) {
  targetable_channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.AdSlot.targetable_channel)
}
inline void BidRequest_AdSlot::set_targetable_channel(int index, const char* value, size_t size) {
  targetable_channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.AdSlot.targetable_channel)
}
inline ::std::string* BidRequest_AdSlot::add_targetable_channel() {
  return targetable_channel_.Add();
}
inline void BidRequest_AdSlot::add_targetable_channel(const ::std::string& value) {
  targetable_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.targetable_channel)
}
inline void BidRequest_AdSlot::add_targetable_channel(const char* value) {
  targetable_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.AdSlot.targetable_channel)
}
inline void BidRequest_AdSlot::add_targetable_channel(const char* value, size_t size) {
  targetable_channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.AdSlot.targetable_channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot::targetable_channel() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.targetable_channel)
  return targetable_channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot::mutable_targetable_channel() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.targetable_channel)
  return &targetable_channel_;
}

// repeated int32 width = 2;
inline int BidRequest_AdSlot::width_size() const {
  return width_.size();
}
inline void BidRequest_AdSlot::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::width(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.width)
  return width_.Get(index);
}
inline void BidRequest_AdSlot::set_width(int index, ::google::protobuf::int32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.width)
}
inline void BidRequest_AdSlot::add_width(::google::protobuf::int32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::width() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.width)
  return &width_;
}

// repeated int32 height = 3;
inline int BidRequest_AdSlot::height_size() const {
  return height_.size();
}
inline void BidRequest_AdSlot::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::height(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.height)
  return height_.Get(index);
}
inline void BidRequest_AdSlot::set_height(int index, ::google::protobuf::int32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.height)
}
inline void BidRequest_AdSlot::add_height(::google::protobuf::int32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::height() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.height)
  return &height_;
}

// repeated int32 excluded_attribute = 4 [packed = true];
inline int BidRequest_AdSlot::excluded_attribute_size() const {
  return excluded_attribute_.size();
}
inline void BidRequest_AdSlot::clear_excluded_attribute() {
  excluded_attribute_.Clear();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::excluded_attribute(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.excluded_attribute)
  return excluded_attribute_.Get(index);
}
inline void BidRequest_AdSlot::set_excluded_attribute(int index, ::google::protobuf::int32 value) {
  excluded_attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.excluded_attribute)
}
inline void BidRequest_AdSlot::add_excluded_attribute(::google::protobuf::int32 value) {
  excluded_attribute_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.excluded_attribute)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::excluded_attribute() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.excluded_attribute)
  return excluded_attribute_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_excluded_attribute() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.excluded_attribute)
  return &excluded_attribute_;
}

// repeated int32 allowed_vendor_type = 6 [packed = true];
inline int BidRequest_AdSlot::allowed_vendor_type_size() const {
  return allowed_vendor_type_.size();
}
inline void BidRequest_AdSlot::clear_allowed_vendor_type() {
  allowed_vendor_type_.Clear();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::allowed_vendor_type(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.allowed_vendor_type)
  return allowed_vendor_type_.Get(index);
}
inline void BidRequest_AdSlot::set_allowed_vendor_type(int index, ::google::protobuf::int32 value) {
  allowed_vendor_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.allowed_vendor_type)
}
inline void BidRequest_AdSlot::add_allowed_vendor_type(::google::protobuf::int32 value) {
  allowed_vendor_type_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.allowed_vendor_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::allowed_vendor_type() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.allowed_vendor_type)
  return allowed_vendor_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_allowed_vendor_type() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.allowed_vendor_type)
  return &allowed_vendor_type_;
}

// repeated int32 excluded_sensitive_category = 7 [packed = true];
inline int BidRequest_AdSlot::excluded_sensitive_category_size() const {
  return excluded_sensitive_category_.size();
}
inline void BidRequest_AdSlot::clear_excluded_sensitive_category() {
  excluded_sensitive_category_.Clear();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::excluded_sensitive_category(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.excluded_sensitive_category)
  return excluded_sensitive_category_.Get(index);
}
inline void BidRequest_AdSlot::set_excluded_sensitive_category(int index, ::google::protobuf::int32 value) {
  excluded_sensitive_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.excluded_sensitive_category)
}
inline void BidRequest_AdSlot::add_excluded_sensitive_category(::google::protobuf::int32 value) {
  excluded_sensitive_category_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.excluded_sensitive_category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::excluded_sensitive_category() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.excluded_sensitive_category)
  return excluded_sensitive_category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_excluded_sensitive_category() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.excluded_sensitive_category)
  return &excluded_sensitive_category_;
}

// repeated int32 allowed_restricted_category = 16 [packed = true];
inline int BidRequest_AdSlot::allowed_restricted_category_size() const {
  return allowed_restricted_category_.size();
}
inline void BidRequest_AdSlot::clear_allowed_restricted_category() {
  allowed_restricted_category_.Clear();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::allowed_restricted_category(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.allowed_restricted_category)
  return allowed_restricted_category_.Get(index);
}
inline void BidRequest_AdSlot::set_allowed_restricted_category(int index, ::google::protobuf::int32 value) {
  allowed_restricted_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.allowed_restricted_category)
}
inline void BidRequest_AdSlot::add_allowed_restricted_category(::google::protobuf::int32 value) {
  allowed_restricted_category_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.allowed_restricted_category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::allowed_restricted_category() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.allowed_restricted_category)
  return allowed_restricted_category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_allowed_restricted_category() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.allowed_restricted_category)
  return &allowed_restricted_category_;
}

// repeated int32 allowed_restricted_category_for_deals = 22 [packed = true];
inline int BidRequest_AdSlot::allowed_restricted_category_for_deals_size() const {
  return allowed_restricted_category_for_deals_.size();
}
inline void BidRequest_AdSlot::clear_allowed_restricted_category_for_deals() {
  allowed_restricted_category_for_deals_.Clear();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::allowed_restricted_category_for_deals(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.allowed_restricted_category_for_deals)
  return allowed_restricted_category_for_deals_.Get(index);
}
inline void BidRequest_AdSlot::set_allowed_restricted_category_for_deals(int index, ::google::protobuf::int32 value) {
  allowed_restricted_category_for_deals_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.allowed_restricted_category_for_deals)
}
inline void BidRequest_AdSlot::add_allowed_restricted_category_for_deals(::google::protobuf::int32 value) {
  allowed_restricted_category_for_deals_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.allowed_restricted_category_for_deals)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::allowed_restricted_category_for_deals() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.allowed_restricted_category_for_deals)
  return allowed_restricted_category_for_deals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_allowed_restricted_category_for_deals() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.allowed_restricted_category_for_deals)
  return &allowed_restricted_category_for_deals_;
}

// repeated string allowed_languages = 27;
inline int BidRequest_AdSlot::allowed_languages_size() const {
  return allowed_languages_.size();
}
inline void BidRequest_AdSlot::clear_allowed_languages() {
  allowed_languages_.Clear();
}
inline const ::std::string& BidRequest_AdSlot::allowed_languages(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.allowed_languages)
  return allowed_languages_.Get(index);
}
inline ::std::string* BidRequest_AdSlot::mutable_allowed_languages(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.allowed_languages)
  return allowed_languages_.Mutable(index);
}
inline void BidRequest_AdSlot::set_allowed_languages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.allowed_languages)
  allowed_languages_.Mutable(index)->assign(value);
}
inline void BidRequest_AdSlot::set_allowed_languages(int index, const char* value) {
  allowed_languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.AdSlot.allowed_languages)
}
inline void BidRequest_AdSlot::set_allowed_languages(int index, const char* value, size_t size) {
  allowed_languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.AdSlot.allowed_languages)
}
inline ::std::string* BidRequest_AdSlot::add_allowed_languages() {
  return allowed_languages_.Add();
}
inline void BidRequest_AdSlot::add_allowed_languages(const ::std::string& value) {
  allowed_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.allowed_languages)
}
inline void BidRequest_AdSlot::add_allowed_languages(const char* value) {
  allowed_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.AdSlot.allowed_languages)
}
inline void BidRequest_AdSlot::add_allowed_languages(const char* value, size_t size) {
  allowed_languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.AdSlot.allowed_languages)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot::allowed_languages() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.allowed_languages)
  return allowed_languages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot::mutable_allowed_languages() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.allowed_languages)
  return &allowed_languages_;
}

// repeated int32 excluded_product_category = 13 [packed = true];
inline int BidRequest_AdSlot::excluded_product_category_size() const {
  return excluded_product_category_.size();
}
inline void BidRequest_AdSlot::clear_excluded_product_category() {
  excluded_product_category_.Clear();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::excluded_product_category(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.excluded_product_category)
  return excluded_product_category_.Get(index);
}
inline void BidRequest_AdSlot::set_excluded_product_category(int index, ::google::protobuf::int32 value) {
  excluded_product_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.excluded_product_category)
}
inline void BidRequest_AdSlot::add_excluded_product_category(::google::protobuf::int32 value) {
  excluded_product_category_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.excluded_product_category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::excluded_product_category() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.excluded_product_category)
  return excluded_product_category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_excluded_product_category() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.excluded_product_category)
  return &excluded_product_category_;
}

// repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
inline int BidRequest_AdSlot::matching_ad_data_size() const {
  return matching_ad_data_.size();
}
inline void BidRequest_AdSlot::clear_matching_ad_data() {
  matching_ad_data_.Clear();
}
inline const ::BidRequest_AdSlot_MatchingAdData& BidRequest_AdSlot::matching_ad_data(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.matching_ad_data)
  return matching_ad_data_.Get(index);
}
inline ::BidRequest_AdSlot_MatchingAdData* BidRequest_AdSlot::mutable_matching_ad_data(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.matching_ad_data)
  return matching_ad_data_.Mutable(index);
}
inline ::BidRequest_AdSlot_MatchingAdData* BidRequest_AdSlot::add_matching_ad_data() {
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.matching_ad_data)
  return matching_ad_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData >&
BidRequest_AdSlot::matching_ad_data() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.matching_ad_data)
  return matching_ad_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData >*
BidRequest_AdSlot::mutable_matching_ad_data() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.matching_ad_data)
  return &matching_ad_data_;
}

// repeated fixed64 publisher_settings_list_id = 15;
inline int BidRequest_AdSlot::publisher_settings_list_id_size() const {
  return publisher_settings_list_id_.size();
}
inline void BidRequest_AdSlot::clear_publisher_settings_list_id() {
  publisher_settings_list_id_.Clear();
}
inline ::google::protobuf::uint64 BidRequest_AdSlot::publisher_settings_list_id(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.publisher_settings_list_id)
  return publisher_settings_list_id_.Get(index);
}
inline void BidRequest_AdSlot::set_publisher_settings_list_id(int index, ::google::protobuf::uint64 value) {
  publisher_settings_list_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.publisher_settings_list_id)
}
inline void BidRequest_AdSlot::add_publisher_settings_list_id(::google::protobuf::uint64 value) {
  publisher_settings_list_id_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.publisher_settings_list_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BidRequest_AdSlot::publisher_settings_list_id() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.publisher_settings_list_id)
  return publisher_settings_list_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BidRequest_AdSlot::mutable_publisher_settings_list_id() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.publisher_settings_list_id)
  return &publisher_settings_list_id_;
}

// optional .BidRequest.AdSlot.ExchangeBidding exchange_bidding = 28;
inline bool BidRequest_AdSlot::has_exchange_bidding() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest_AdSlot::set_has_exchange_bidding() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest_AdSlot::clear_has_exchange_bidding() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest_AdSlot::clear_exchange_bidding() {
  if (exchange_bidding_ != NULL) exchange_bidding_->::BidRequest_AdSlot_ExchangeBidding::Clear();
  clear_has_exchange_bidding();
}
inline const ::BidRequest_AdSlot_ExchangeBidding& BidRequest_AdSlot::exchange_bidding() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.exchange_bidding)
  return exchange_bidding_ != NULL ? *exchange_bidding_ : *default_instance_->exchange_bidding_;
}
inline ::BidRequest_AdSlot_ExchangeBidding* BidRequest_AdSlot::mutable_exchange_bidding() {
  set_has_exchange_bidding();
  if (exchange_bidding_ == NULL) exchange_bidding_ = new ::BidRequest_AdSlot_ExchangeBidding;
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.exchange_bidding)
  return exchange_bidding_;
}
inline ::BidRequest_AdSlot_ExchangeBidding* BidRequest_AdSlot::release_exchange_bidding() {
  clear_has_exchange_bidding();
  ::BidRequest_AdSlot_ExchangeBidding* temp = exchange_bidding_;
  exchange_bidding_ = NULL;
  return temp;
}
inline void BidRequest_AdSlot::set_allocated_exchange_bidding(::BidRequest_AdSlot_ExchangeBidding* exchange_bidding) {
  delete exchange_bidding_;
  exchange_bidding_ = exchange_bidding;
  if (exchange_bidding) {
    set_has_exchange_bidding();
  } else {
    clear_has_exchange_bidding();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.AdSlot.exchange_bidding)
}

// optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
inline bool BidRequest_AdSlot::has_slot_visibility() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest_AdSlot::set_has_slot_visibility() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest_AdSlot::clear_has_slot_visibility() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest_AdSlot::clear_slot_visibility() {
  slot_visibility_ = 0;
  clear_has_slot_visibility();
}
inline ::BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::slot_visibility() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.slot_visibility)
  return static_cast< ::BidRequest_AdSlot_SlotVisibility >(slot_visibility_);
}
inline void BidRequest_AdSlot::set_slot_visibility(::BidRequest_AdSlot_SlotVisibility value) {
  assert(::BidRequest_AdSlot_SlotVisibility_IsValid(value));
  set_has_slot_visibility();
  slot_visibility_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.slot_visibility)
}

// optional int32 viewability = 21 [default = -1];
inline bool BidRequest_AdSlot::has_viewability() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidRequest_AdSlot::set_has_viewability() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidRequest_AdSlot::clear_has_viewability() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidRequest_AdSlot::clear_viewability() {
  viewability_ = -1;
  clear_has_viewability();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::viewability() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.viewability)
  return viewability_;
}
inline void BidRequest_AdSlot::set_viewability(::google::protobuf::int32 value) {
  set_has_viewability();
  viewability_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.viewability)
}

// optional float click_through_rate = 25 [default = -1];
inline bool BidRequest_AdSlot::has_click_through_rate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest_AdSlot::set_has_click_through_rate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest_AdSlot::clear_has_click_through_rate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest_AdSlot::clear_click_through_rate() {
  click_through_rate_ = -1;
  clear_has_click_through_rate();
}
inline float BidRequest_AdSlot::click_through_rate() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.click_through_rate)
  return click_through_rate_;
}
inline void BidRequest_AdSlot::set_click_through_rate(float value) {
  set_has_click_through_rate();
  click_through_rate_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.click_through_rate)
}

// optional .BidRequest.AdSlot.IFramingState iframing_state = 19 [default = UNKNOWN_IFRAME_STATE];
inline bool BidRequest_AdSlot::has_iframing_state() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BidRequest_AdSlot::set_has_iframing_state() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BidRequest_AdSlot::clear_has_iframing_state() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BidRequest_AdSlot::clear_iframing_state() {
  iframing_state_ = 0;
  clear_has_iframing_state();
}
inline ::BidRequest_AdSlot_IFramingState BidRequest_AdSlot::iframing_state() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.iframing_state)
  return static_cast< ::BidRequest_AdSlot_IFramingState >(iframing_state_);
}
inline void BidRequest_AdSlot::set_iframing_state(::BidRequest_AdSlot_IFramingState value) {
  assert(::BidRequest_AdSlot_IFramingState_IsValid(value));
  set_has_iframing_state();
  iframing_state_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.iframing_state)
}

// optional .BidRequest.AdSlot.IFramingDepth iframing_depth = 20 [default = UNKNOWN_IFRAME_DEPTH];
inline bool BidRequest_AdSlot::has_iframing_depth() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidRequest_AdSlot::set_has_iframing_depth() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidRequest_AdSlot::clear_has_iframing_depth() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidRequest_AdSlot::clear_iframing_depth() {
  iframing_depth_ = 0;
  clear_has_iframing_depth();
}
inline ::BidRequest_AdSlot_IFramingDepth BidRequest_AdSlot::iframing_depth() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.iframing_depth)
  return static_cast< ::BidRequest_AdSlot_IFramingDepth >(iframing_depth_);
}
inline void BidRequest_AdSlot::set_iframing_depth(::BidRequest_AdSlot_IFramingDepth value) {
  assert(::BidRequest_AdSlot_IFramingDepth_IsValid(value));
  set_has_iframing_depth();
  iframing_depth_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.iframing_depth)
}

// repeated .BidRequest.AdSlot.NativeAdTemplate native_ad_template = 51;
inline int BidRequest_AdSlot::native_ad_template_size() const {
  return native_ad_template_.size();
}
inline void BidRequest_AdSlot::clear_native_ad_template() {
  native_ad_template_.Clear();
}
inline const ::BidRequest_AdSlot_NativeAdTemplate& BidRequest_AdSlot::native_ad_template(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.native_ad_template)
  return native_ad_template_.Get(index);
}
inline ::BidRequest_AdSlot_NativeAdTemplate* BidRequest_AdSlot::mutable_native_ad_template(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.native_ad_template)
  return native_ad_template_.Mutable(index);
}
inline ::BidRequest_AdSlot_NativeAdTemplate* BidRequest_AdSlot::add_native_ad_template() {
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.native_ad_template)
  return native_ad_template_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_NativeAdTemplate >&
BidRequest_AdSlot::native_ad_template() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.native_ad_template)
  return native_ad_template_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_NativeAdTemplate >*
BidRequest_AdSlot::mutable_native_ad_template() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.native_ad_template)
  return &native_ad_template_;
}

// optional .BidRequest.AdSlot.MediationStatus mediation_status = 52 [default = UNKNOWN];
inline bool BidRequest_AdSlot::has_mediation_status() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BidRequest_AdSlot::set_has_mediation_status() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BidRequest_AdSlot::clear_has_mediation_status() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BidRequest_AdSlot::clear_mediation_status() {
  mediation_status_ = 0;
  clear_has_mediation_status();
}
inline ::BidRequest_AdSlot_MediationStatus BidRequest_AdSlot::mediation_status() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.mediation_status)
  return static_cast< ::BidRequest_AdSlot_MediationStatus >(mediation_status_);
}
inline void BidRequest_AdSlot::set_mediation_status(::BidRequest_AdSlot_MediationStatus value) {
  assert(::BidRequest_AdSlot_MediationStatus_IsValid(value));
  set_has_mediation_status();
  mediation_status_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.mediation_status)
}

// optional .BidRequest.AdSlot.AutoRefresh auto_refresh = 23;
inline bool BidRequest_AdSlot::has_auto_refresh() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BidRequest_AdSlot::set_has_auto_refresh() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BidRequest_AdSlot::clear_has_auto_refresh() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BidRequest_AdSlot::clear_auto_refresh() {
  if (auto_refresh_ != NULL) auto_refresh_->::BidRequest_AdSlot_AutoRefresh::Clear();
  clear_has_auto_refresh();
}
inline const ::BidRequest_AdSlot_AutoRefresh& BidRequest_AdSlot::auto_refresh() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.auto_refresh)
  return auto_refresh_ != NULL ? *auto_refresh_ : *default_instance_->auto_refresh_;
}
inline ::BidRequest_AdSlot_AutoRefresh* BidRequest_AdSlot::mutable_auto_refresh() {
  set_has_auto_refresh();
  if (auto_refresh_ == NULL) auto_refresh_ = new ::BidRequest_AdSlot_AutoRefresh;
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.auto_refresh)
  return auto_refresh_;
}
inline ::BidRequest_AdSlot_AutoRefresh* BidRequest_AdSlot::release_auto_refresh() {
  clear_has_auto_refresh();
  ::BidRequest_AdSlot_AutoRefresh* temp = auto_refresh_;
  auto_refresh_ = NULL;
  return temp;
}
inline void BidRequest_AdSlot::set_allocated_auto_refresh(::BidRequest_AdSlot_AutoRefresh* auto_refresh) {
  delete auto_refresh_;
  auto_refresh_ = auto_refresh;
  if (auto_refresh) {
    set_has_auto_refresh();
  } else {
    clear_has_auto_refresh();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.AdSlot.auto_refresh)
}

// optional .BidRequest.AdSlot.Stickiness stickiness = 24 [default = UNKNOWN_STICKINESS];
inline bool BidRequest_AdSlot::has_stickiness() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BidRequest_AdSlot::set_has_stickiness() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BidRequest_AdSlot::clear_has_stickiness() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BidRequest_AdSlot::clear_stickiness() {
  stickiness_ = 0;
  clear_has_stickiness();
}
inline ::BidRequest_AdSlot_Stickiness BidRequest_AdSlot::stickiness() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.stickiness)
  return static_cast< ::BidRequest_AdSlot_Stickiness >(stickiness_);
}
inline void BidRequest_AdSlot::set_stickiness(::BidRequest_AdSlot_Stickiness value) {
  assert(::BidRequest_AdSlot_Stickiness_IsValid(value));
  set_has_stickiness();
  stickiness_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.stickiness)
}

// optional .BidRequest.AdSlot.Renderer renderer = 26 [default = UNKNOWN_RENDERER];
inline bool BidRequest_AdSlot::has_renderer() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BidRequest_AdSlot::set_has_renderer() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BidRequest_AdSlot::clear_has_renderer() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BidRequest_AdSlot::clear_renderer() {
  renderer_ = 0;
  clear_has_renderer();
}
inline ::BidRequest_AdSlot_Renderer BidRequest_AdSlot::renderer() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.renderer)
  return static_cast< ::BidRequest_AdSlot_Renderer >(renderer_);
}
inline void BidRequest_AdSlot::set_renderer(::BidRequest_AdSlot_Renderer value) {
  assert(::BidRequest_AdSlot_Renderer_IsValid(value));
  set_has_renderer();
  renderer_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.renderer)
}

// optional .BidRequest.AdSlot.AmpAdRequestType amp_ad_request_type = 29 [default = NON_AMP_PAGE];
inline bool BidRequest_AdSlot::has_amp_ad_request_type() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BidRequest_AdSlot::set_has_amp_ad_request_type() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BidRequest_AdSlot::clear_has_amp_ad_request_type() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BidRequest_AdSlot::clear_amp_ad_request_type() {
  amp_ad_request_type_ = 1;
  clear_has_amp_ad_request_type();
}
inline ::BidRequest_AdSlot_AmpAdRequestType BidRequest_AdSlot::amp_ad_request_type() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.amp_ad_request_type)
  return static_cast< ::BidRequest_AdSlot_AmpAdRequestType >(amp_ad_request_type_);
}
inline void BidRequest_AdSlot::set_amp_ad_request_type(::BidRequest_AdSlot_AmpAdRequestType value) {
  assert(::BidRequest_AdSlot_AmpAdRequestType_IsValid(value));
  set_has_amp_ad_request_type();
  amp_ad_request_type_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.amp_ad_request_type)
}

// repeated int32 DEPRECATED_allowed_attribute = 5;
inline int BidRequest_AdSlot::deprecated_allowed_attribute_size() const {
  return deprecated_allowed_attribute_.size();
}
inline void BidRequest_AdSlot::clear_deprecated_allowed_attribute() {
  deprecated_allowed_attribute_.Clear();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::deprecated_allowed_attribute(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
  return deprecated_allowed_attribute_.Get(index);
}
inline void BidRequest_AdSlot::set_deprecated_allowed_attribute(int index, ::google::protobuf::int32 value) {
  deprecated_allowed_attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
}
inline void BidRequest_AdSlot::add_deprecated_allowed_attribute(::google::protobuf::int32 value) {
  deprecated_allowed_attribute_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::deprecated_allowed_attribute() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
  return deprecated_allowed_attribute_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_deprecated_allowed_attribute() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
  return &deprecated_allowed_attribute_;
}

// repeated bytes DEPRECATED_publisher_settings_list_id = 11;
inline int BidRequest_AdSlot::deprecated_publisher_settings_list_id_size() const {
  return deprecated_publisher_settings_list_id_.size();
}
inline void BidRequest_AdSlot::clear_deprecated_publisher_settings_list_id() {
  deprecated_publisher_settings_list_id_.Clear();
}
inline const ::std::string& BidRequest_AdSlot::deprecated_publisher_settings_list_id(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  return deprecated_publisher_settings_list_id_.Get(index);
}
inline ::std::string* BidRequest_AdSlot::mutable_deprecated_publisher_settings_list_id(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  return deprecated_publisher_settings_list_id_.Mutable(index);
}
inline void BidRequest_AdSlot::set_deprecated_publisher_settings_list_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  deprecated_publisher_settings_list_id_.Mutable(index)->assign(value);
}
inline void BidRequest_AdSlot::set_deprecated_publisher_settings_list_id(int index, const char* value) {
  deprecated_publisher_settings_list_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
inline void BidRequest_AdSlot::set_deprecated_publisher_settings_list_id(int index, const void* value, size_t size) {
  deprecated_publisher_settings_list_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
inline ::std::string* BidRequest_AdSlot::add_deprecated_publisher_settings_list_id() {
  return deprecated_publisher_settings_list_id_.Add();
}
inline void BidRequest_AdSlot::add_deprecated_publisher_settings_list_id(const ::std::string& value) {
  deprecated_publisher_settings_list_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
inline void BidRequest_AdSlot::add_deprecated_publisher_settings_list_id(const char* value) {
  deprecated_publisher_settings_list_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
inline void BidRequest_AdSlot::add_deprecated_publisher_settings_list_id(const void* value, size_t size) {
  deprecated_publisher_settings_list_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot::deprecated_publisher_settings_list_id() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  return deprecated_publisher_settings_list_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot::mutable_deprecated_publisher_settings_list_id() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  return &deprecated_publisher_settings_list_id_;
}

// repeated string DEPRECATED_excluded_click_through_url = 8;
inline int BidRequest_AdSlot::deprecated_excluded_click_through_url_size() const {
  return deprecated_excluded_click_through_url_.size();
}
inline void BidRequest_AdSlot::clear_deprecated_excluded_click_through_url() {
  deprecated_excluded_click_through_url_.Clear();
}
inline const ::std::string& BidRequest_AdSlot::deprecated_excluded_click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_.Get(index);
}
inline ::std::string* BidRequest_AdSlot::mutable_deprecated_excluded_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_.Mutable(index);
}
inline void BidRequest_AdSlot::set_deprecated_excluded_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  deprecated_excluded_click_through_url_.Mutable(index)->assign(value);
}
inline void BidRequest_AdSlot::set_deprecated_excluded_click_through_url(int index, const char* value) {
  deprecated_excluded_click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
inline void BidRequest_AdSlot::set_deprecated_excluded_click_through_url(int index, const char* value, size_t size) {
  deprecated_excluded_click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
inline ::std::string* BidRequest_AdSlot::add_deprecated_excluded_click_through_url() {
  return deprecated_excluded_click_through_url_.Add();
}
inline void BidRequest_AdSlot::add_deprecated_excluded_click_through_url(const ::std::string& value) {
  deprecated_excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
inline void BidRequest_AdSlot::add_deprecated_excluded_click_through_url(const char* value) {
  deprecated_excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
inline void BidRequest_AdSlot::add_deprecated_excluded_click_through_url(const char* value, size_t size) {
  deprecated_excluded_click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot::deprecated_excluded_click_through_url() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot::mutable_deprecated_excluded_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  return &deprecated_excluded_click_through_url_;
}

// -------------------------------------------------------------------

// BidRequest_BidResponseFeedback

// optional bytes request_id = 1;
inline bool BidRequest_BidResponseFeedback::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_BidResponseFeedback::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_BidResponseFeedback::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_BidResponseFeedback::clear_request_id() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_->clear();
  }
  clear_has_request_id();
}
inline const ::std::string& BidRequest_BidResponseFeedback::request_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.BidResponseFeedback.request_id)
  return *request_id_;
}
inline void BidRequest_BidResponseFeedback::set_request_id(const ::std::string& value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.BidResponseFeedback.request_id)
}
inline void BidRequest_BidResponseFeedback::set_request_id(const char* value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.BidResponseFeedback.request_id)
}
inline void BidRequest_BidResponseFeedback::set_request_id(const void* value, size_t size) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.BidResponseFeedback.request_id)
}
inline ::std::string* BidRequest_BidResponseFeedback::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.BidResponseFeedback.request_id)
  return request_id_;
}
inline ::std::string* BidRequest_BidResponseFeedback::release_request_id() {
  clear_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_id_;
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_BidResponseFeedback::set_allocated_request_id(::std::string* request_id) {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (request_id) {
    set_has_request_id();
    request_id_ = request_id;
  } else {
    clear_has_request_id();
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.BidResponseFeedback.request_id)
}

// optional int32 creative_index = 2;
inline bool BidRequest_BidResponseFeedback::has_creative_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_BidResponseFeedback::set_has_creative_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_BidResponseFeedback::clear_has_creative_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_BidResponseFeedback::clear_creative_index() {
  creative_index_ = 0;
  clear_has_creative_index();
}
inline ::google::protobuf::int32 BidRequest_BidResponseFeedback::creative_index() const {
  // @@protoc_insertion_point(field_get:BidRequest.BidResponseFeedback.creative_index)
  return creative_index_;
}
inline void BidRequest_BidResponseFeedback::set_creative_index(::google::protobuf::int32 value) {
  set_has_creative_index();
  creative_index_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.BidResponseFeedback.creative_index)
}

// optional int32 creative_status_code = 3;
inline bool BidRequest_BidResponseFeedback::has_creative_status_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_BidResponseFeedback::set_has_creative_status_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_BidResponseFeedback::clear_has_creative_status_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_BidResponseFeedback::clear_creative_status_code() {
  creative_status_code_ = 0;
  clear_has_creative_status_code();
}
inline ::google::protobuf::int32 BidRequest_BidResponseFeedback::creative_status_code() const {
  // @@protoc_insertion_point(field_get:BidRequest.BidResponseFeedback.creative_status_code)
  return creative_status_code_;
}
inline void BidRequest_BidResponseFeedback::set_creative_status_code(::google::protobuf::int32 value) {
  set_has_creative_status_code();
  creative_status_code_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.BidResponseFeedback.creative_status_code)
}

// optional int64 cpm_micros = 4;
inline bool BidRequest_BidResponseFeedback::has_cpm_micros() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_BidResponseFeedback::set_has_cpm_micros() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_BidResponseFeedback::clear_has_cpm_micros() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_BidResponseFeedback::clear_cpm_micros() {
  cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_cpm_micros();
}
inline ::google::protobuf::int64 BidRequest_BidResponseFeedback::cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidRequest.BidResponseFeedback.cpm_micros)
  return cpm_micros_;
}
inline void BidRequest_BidResponseFeedback::set_cpm_micros(::google::protobuf::int64 value) {
  set_has_cpm_micros();
  cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.BidResponseFeedback.cpm_micros)
}

// -------------------------------------------------------------------

// BidRequest_MatchingNetwork

// optional string DEPRECATED_network_id = 1;
inline bool BidRequest_MatchingNetwork::has_deprecated_network_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_MatchingNetwork::set_has_deprecated_network_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_MatchingNetwork::clear_has_deprecated_network_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_MatchingNetwork::clear_deprecated_network_id() {
  if (deprecated_network_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_network_id_->clear();
  }
  clear_has_deprecated_network_id();
}
inline const ::std::string& BidRequest_MatchingNetwork::deprecated_network_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.MatchingNetwork.DEPRECATED_network_id)
  return *deprecated_network_id_;
}
inline void BidRequest_MatchingNetwork::set_deprecated_network_id(const ::std::string& value) {
  set_has_deprecated_network_id();
  if (deprecated_network_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_network_id_ = new ::std::string;
  }
  deprecated_network_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.MatchingNetwork.DEPRECATED_network_id)
}
inline void BidRequest_MatchingNetwork::set_deprecated_network_id(const char* value) {
  set_has_deprecated_network_id();
  if (deprecated_network_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_network_id_ = new ::std::string;
  }
  deprecated_network_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.MatchingNetwork.DEPRECATED_network_id)
}
inline void BidRequest_MatchingNetwork::set_deprecated_network_id(const char* value, size_t size) {
  set_has_deprecated_network_id();
  if (deprecated_network_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_network_id_ = new ::std::string;
  }
  deprecated_network_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.MatchingNetwork.DEPRECATED_network_id)
}
inline ::std::string* BidRequest_MatchingNetwork::mutable_deprecated_network_id() {
  set_has_deprecated_network_id();
  if (deprecated_network_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_network_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.MatchingNetwork.DEPRECATED_network_id)
  return deprecated_network_id_;
}
inline ::std::string* BidRequest_MatchingNetwork::release_deprecated_network_id() {
  clear_has_deprecated_network_id();
  if (deprecated_network_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_network_id_;
    deprecated_network_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_MatchingNetwork::set_allocated_deprecated_network_id(::std::string* deprecated_network_id) {
  if (deprecated_network_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_network_id_;
  }
  if (deprecated_network_id) {
    set_has_deprecated_network_id();
    deprecated_network_id_ = deprecated_network_id;
  } else {
    clear_has_deprecated_network_id();
    deprecated_network_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.MatchingNetwork.DEPRECATED_network_id)
}

// optional string DEPRECATED_google_user_id = 2;
inline bool BidRequest_MatchingNetwork::has_deprecated_google_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_MatchingNetwork::set_has_deprecated_google_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_MatchingNetwork::clear_has_deprecated_google_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_MatchingNetwork::clear_deprecated_google_user_id() {
  if (deprecated_google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_google_user_id_->clear();
  }
  clear_has_deprecated_google_user_id();
}
inline const ::std::string& BidRequest_MatchingNetwork::deprecated_google_user_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
  return *deprecated_google_user_id_;
}
inline void BidRequest_MatchingNetwork::set_deprecated_google_user_id(const ::std::string& value) {
  set_has_deprecated_google_user_id();
  if (deprecated_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_google_user_id_ = new ::std::string;
  }
  deprecated_google_user_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
}
inline void BidRequest_MatchingNetwork::set_deprecated_google_user_id(const char* value) {
  set_has_deprecated_google_user_id();
  if (deprecated_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_google_user_id_ = new ::std::string;
  }
  deprecated_google_user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
}
inline void BidRequest_MatchingNetwork::set_deprecated_google_user_id(const char* value, size_t size) {
  set_has_deprecated_google_user_id();
  if (deprecated_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_google_user_id_ = new ::std::string;
  }
  deprecated_google_user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
}
inline ::std::string* BidRequest_MatchingNetwork::mutable_deprecated_google_user_id() {
  set_has_deprecated_google_user_id();
  if (deprecated_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_google_user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
  return deprecated_google_user_id_;
}
inline ::std::string* BidRequest_MatchingNetwork::release_deprecated_google_user_id() {
  clear_has_deprecated_google_user_id();
  if (deprecated_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_google_user_id_;
    deprecated_google_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest_MatchingNetwork::set_allocated_deprecated_google_user_id(::std::string* deprecated_google_user_id) {
  if (deprecated_google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_google_user_id_;
  }
  if (deprecated_google_user_id) {
    set_has_deprecated_google_user_id();
    deprecated_google_user_id_ = deprecated_google_user_id;
  } else {
    clear_has_deprecated_google_user_id();
    deprecated_google_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
}

// -------------------------------------------------------------------

// BidRequest

// required bytes id = 2;
inline bool BidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest::id() const {
  // @@protoc_insertion_point(field_get:BidRequest.id)
  return *id_;
}
inline void BidRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.id)
}
inline void BidRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.id)
}
inline void BidRequest::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.id)
}
inline ::std::string* BidRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.id)
  return id_;
}
inline ::std::string* BidRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.id)
}

// optional bytes ip = 4;
inline bool BidRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BidRequest::ip() const {
  // @@protoc_insertion_point(field_get:BidRequest.ip)
  return *ip_;
}
inline void BidRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.ip)
}
inline void BidRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.ip)
}
inline void BidRequest::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.ip)
}
inline ::std::string* BidRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.ip)
  return ip_;
}
inline ::std::string* BidRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.ip)
}

// repeated .BidRequest.UserDataTreatment user_data_treatment = 49;
inline int BidRequest::user_data_treatment_size() const {
  return user_data_treatment_.size();
}
inline void BidRequest::clear_user_data_treatment() {
  user_data_treatment_.Clear();
}
inline ::BidRequest_UserDataTreatment BidRequest::user_data_treatment(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.user_data_treatment)
  return static_cast< ::BidRequest_UserDataTreatment >(user_data_treatment_.Get(index));
}
inline void BidRequest::set_user_data_treatment(int index, ::BidRequest_UserDataTreatment value) {
  assert(::BidRequest_UserDataTreatment_IsValid(value));
  user_data_treatment_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.user_data_treatment)
}
inline void BidRequest::add_user_data_treatment(::BidRequest_UserDataTreatment value) {
  assert(::BidRequest_UserDataTreatment_IsValid(value));
  user_data_treatment_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.user_data_treatment)
}
inline const ::google::protobuf::RepeatedField<int>&
BidRequest::user_data_treatment() const {
  // @@protoc_insertion_point(field_list:BidRequest.user_data_treatment)
  return user_data_treatment_;
}
inline ::google::protobuf::RepeatedField<int>*
BidRequest::mutable_user_data_treatment() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.user_data_treatment)
  return &user_data_treatment_;
}

// optional string google_user_id = 21;
inline bool BidRequest::has_google_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest::set_has_google_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest::clear_has_google_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest::clear_google_user_id() {
  if (google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    google_user_id_->clear();
  }
  clear_has_google_user_id();
}
inline const ::std::string& BidRequest::google_user_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.google_user_id)
  return *google_user_id_;
}
inline void BidRequest::set_google_user_id(const ::std::string& value) {
  set_has_google_user_id();
  if (google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    google_user_id_ = new ::std::string;
  }
  google_user_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.google_user_id)
}
inline void BidRequest::set_google_user_id(const char* value) {
  set_has_google_user_id();
  if (google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    google_user_id_ = new ::std::string;
  }
  google_user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.google_user_id)
}
inline void BidRequest::set_google_user_id(const char* value, size_t size) {
  set_has_google_user_id();
  if (google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    google_user_id_ = new ::std::string;
  }
  google_user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.google_user_id)
}
inline ::std::string* BidRequest::mutable_google_user_id() {
  set_has_google_user_id();
  if (google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    google_user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.google_user_id)
  return google_user_id_;
}
inline ::std::string* BidRequest::release_google_user_id() {
  clear_has_google_user_id();
  if (google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = google_user_id_;
    google_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_google_user_id(::std::string* google_user_id) {
  if (google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete google_user_id_;
  }
  if (google_user_id) {
    set_has_google_user_id();
    google_user_id_ = google_user_id;
  } else {
    clear_has_google_user_id();
    google_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.google_user_id)
}

// optional string constrained_usage_google_user_id = 47;
inline bool BidRequest::has_constrained_usage_google_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest::set_has_constrained_usage_google_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest::clear_has_constrained_usage_google_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest::clear_constrained_usage_google_user_id() {
  if (constrained_usage_google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_google_user_id_->clear();
  }
  clear_has_constrained_usage_google_user_id();
}
inline const ::std::string& BidRequest::constrained_usage_google_user_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.constrained_usage_google_user_id)
  return *constrained_usage_google_user_id_;
}
inline void BidRequest::set_constrained_usage_google_user_id(const ::std::string& value) {
  set_has_constrained_usage_google_user_id();
  if (constrained_usage_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_google_user_id_ = new ::std::string;
  }
  constrained_usage_google_user_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.constrained_usage_google_user_id)
}
inline void BidRequest::set_constrained_usage_google_user_id(const char* value) {
  set_has_constrained_usage_google_user_id();
  if (constrained_usage_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_google_user_id_ = new ::std::string;
  }
  constrained_usage_google_user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.constrained_usage_google_user_id)
}
inline void BidRequest::set_constrained_usage_google_user_id(const char* value, size_t size) {
  set_has_constrained_usage_google_user_id();
  if (constrained_usage_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_google_user_id_ = new ::std::string;
  }
  constrained_usage_google_user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.constrained_usage_google_user_id)
}
inline ::std::string* BidRequest::mutable_constrained_usage_google_user_id() {
  set_has_constrained_usage_google_user_id();
  if (constrained_usage_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_google_user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.constrained_usage_google_user_id)
  return constrained_usage_google_user_id_;
}
inline ::std::string* BidRequest::release_constrained_usage_google_user_id() {
  clear_has_constrained_usage_google_user_id();
  if (constrained_usage_google_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = constrained_usage_google_user_id_;
    constrained_usage_google_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_constrained_usage_google_user_id(::std::string* constrained_usage_google_user_id) {
  if (constrained_usage_google_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_google_user_id_;
  }
  if (constrained_usage_google_user_id) {
    set_has_constrained_usage_google_user_id();
    constrained_usage_google_user_id_ = constrained_usage_google_user_id;
  } else {
    clear_has_constrained_usage_google_user_id();
    constrained_usage_google_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.constrained_usage_google_user_id)
}

// optional uint32 cookie_version = 20;
inline bool BidRequest::has_cookie_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_cookie_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest::clear_has_cookie_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest::clear_cookie_version() {
  cookie_version_ = 0u;
  clear_has_cookie_version();
}
inline ::google::protobuf::uint32 BidRequest::cookie_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.cookie_version)
  return cookie_version_;
}
inline void BidRequest::set_cookie_version(::google::protobuf::uint32 value) {
  set_has_cookie_version();
  cookie_version_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.cookie_version)
}

// optional int32 cookie_age_seconds = 31;
inline bool BidRequest::has_cookie_age_seconds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest::set_has_cookie_age_seconds() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest::clear_has_cookie_age_seconds() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest::clear_cookie_age_seconds() {
  cookie_age_seconds_ = 0;
  clear_has_cookie_age_seconds();
}
inline ::google::protobuf::int32 BidRequest::cookie_age_seconds() const {
  // @@protoc_insertion_point(field_get:BidRequest.cookie_age_seconds)
  return cookie_age_seconds_;
}
inline void BidRequest::set_cookie_age_seconds(::google::protobuf::int32 value) {
  set_has_cookie_age_seconds();
  cookie_age_seconds_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.cookie_age_seconds)
}

// optional bytes hosted_match_data = 37;
inline bool BidRequest::has_hosted_match_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest::set_has_hosted_match_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest::clear_has_hosted_match_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest::clear_hosted_match_data() {
  if (hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_->clear();
  }
  clear_has_hosted_match_data();
}
inline const ::std::string& BidRequest::hosted_match_data() const {
  // @@protoc_insertion_point(field_get:BidRequest.hosted_match_data)
  return *hosted_match_data_;
}
inline void BidRequest::set_hosted_match_data(const ::std::string& value) {
  set_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_ = new ::std::string;
  }
  hosted_match_data_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.hosted_match_data)
}
inline void BidRequest::set_hosted_match_data(const char* value) {
  set_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_ = new ::std::string;
  }
  hosted_match_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.hosted_match_data)
}
inline void BidRequest::set_hosted_match_data(const void* value, size_t size) {
  set_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_ = new ::std::string;
  }
  hosted_match_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.hosted_match_data)
}
inline ::std::string* BidRequest::mutable_hosted_match_data() {
  set_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hosted_match_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.hosted_match_data)
  return hosted_match_data_;
}
inline ::std::string* BidRequest::release_hosted_match_data() {
  clear_has_hosted_match_data();
  if (hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hosted_match_data_;
    hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_hosted_match_data(::std::string* hosted_match_data) {
  if (hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hosted_match_data_;
  }
  if (hosted_match_data) {
    set_has_hosted_match_data();
    hosted_match_data_ = hosted_match_data;
  } else {
    clear_has_hosted_match_data();
    hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.hosted_match_data)
}

// optional bytes constrained_usage_hosted_match_data = 48;
inline bool BidRequest::has_constrained_usage_hosted_match_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest::set_has_constrained_usage_hosted_match_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest::clear_has_constrained_usage_hosted_match_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest::clear_constrained_usage_hosted_match_data() {
  if (constrained_usage_hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hosted_match_data_->clear();
  }
  clear_has_constrained_usage_hosted_match_data();
}
inline const ::std::string& BidRequest::constrained_usage_hosted_match_data() const {
  // @@protoc_insertion_point(field_get:BidRequest.constrained_usage_hosted_match_data)
  return *constrained_usage_hosted_match_data_;
}
inline void BidRequest::set_constrained_usage_hosted_match_data(const ::std::string& value) {
  set_has_constrained_usage_hosted_match_data();
  if (constrained_usage_hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hosted_match_data_ = new ::std::string;
  }
  constrained_usage_hosted_match_data_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.constrained_usage_hosted_match_data)
}
inline void BidRequest::set_constrained_usage_hosted_match_data(const char* value) {
  set_has_constrained_usage_hosted_match_data();
  if (constrained_usage_hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hosted_match_data_ = new ::std::string;
  }
  constrained_usage_hosted_match_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.constrained_usage_hosted_match_data)
}
inline void BidRequest::set_constrained_usage_hosted_match_data(const void* value, size_t size) {
  set_has_constrained_usage_hosted_match_data();
  if (constrained_usage_hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hosted_match_data_ = new ::std::string;
  }
  constrained_usage_hosted_match_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.constrained_usage_hosted_match_data)
}
inline ::std::string* BidRequest::mutable_constrained_usage_hosted_match_data() {
  set_has_constrained_usage_hosted_match_data();
  if (constrained_usage_hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    constrained_usage_hosted_match_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.constrained_usage_hosted_match_data)
  return constrained_usage_hosted_match_data_;
}
inline ::std::string* BidRequest::release_constrained_usage_hosted_match_data() {
  clear_has_constrained_usage_hosted_match_data();
  if (constrained_usage_hosted_match_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = constrained_usage_hosted_match_data_;
    constrained_usage_hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_constrained_usage_hosted_match_data(::std::string* constrained_usage_hosted_match_data) {
  if (constrained_usage_hosted_match_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete constrained_usage_hosted_match_data_;
  }
  if (constrained_usage_hosted_match_data) {
    set_has_constrained_usage_hosted_match_data();
    constrained_usage_hosted_match_data_ = constrained_usage_hosted_match_data;
  } else {
    clear_has_constrained_usage_hosted_match_data();
    constrained_usage_hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.constrained_usage_hosted_match_data)
}

// optional string user_agent = 6;
inline bool BidRequest::has_user_agent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest::set_has_user_agent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest::clear_user_agent() {
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_->clear();
  }
  clear_has_user_agent();
}
inline const ::std::string& BidRequest::user_agent() const {
  // @@protoc_insertion_point(field_get:BidRequest.user_agent)
  return *user_agent_;
}
inline void BidRequest::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.user_agent)
}
inline void BidRequest::set_user_agent(const char* value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.user_agent)
}
inline void BidRequest::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.user_agent)
}
inline ::std::string* BidRequest::mutable_user_agent() {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.user_agent)
  return user_agent_;
}
inline ::std::string* BidRequest::release_user_agent() {
  clear_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_agent_;
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_agent_;
  }
  if (user_agent) {
    set_has_user_agent();
    user_agent_ = user_agent;
  } else {
    clear_has_user_agent();
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.user_agent)
}

// optional int32 geo_criteria_id = 39;
inline bool BidRequest::has_geo_criteria_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest::set_has_geo_criteria_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest::clear_has_geo_criteria_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest::clear_geo_criteria_id() {
  geo_criteria_id_ = 0;
  clear_has_geo_criteria_id();
}
inline ::google::protobuf::int32 BidRequest::geo_criteria_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.geo_criteria_id)
  return geo_criteria_id_;
}
inline void BidRequest::set_geo_criteria_id(::google::protobuf::int32 value) {
  set_has_geo_criteria_id();
  geo_criteria_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.geo_criteria_id)
}

// optional string postal_code = 33;
inline bool BidRequest::has_postal_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest::set_has_postal_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest::clear_has_postal_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest::clear_postal_code() {
  if (postal_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_->clear();
  }
  clear_has_postal_code();
}
inline const ::std::string& BidRequest::postal_code() const {
  // @@protoc_insertion_point(field_get:BidRequest.postal_code)
  return *postal_code_;
}
inline void BidRequest::set_postal_code(const ::std::string& value) {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_ = new ::std::string;
  }
  postal_code_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.postal_code)
}
inline void BidRequest::set_postal_code(const char* value) {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_ = new ::std::string;
  }
  postal_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.postal_code)
}
inline void BidRequest::set_postal_code(const char* value, size_t size) {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_ = new ::std::string;
  }
  postal_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.postal_code)
}
inline ::std::string* BidRequest::mutable_postal_code() {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.postal_code)
  return postal_code_;
}
inline ::std::string* BidRequest::release_postal_code() {
  clear_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = postal_code_;
    postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_postal_code(::std::string* postal_code) {
  if (postal_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete postal_code_;
  }
  if (postal_code) {
    set_has_postal_code();
    postal_code_ = postal_code;
  } else {
    clear_has_postal_code();
    postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.postal_code)
}

// optional string postal_code_prefix = 34;
inline bool BidRequest::has_postal_code_prefix() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest::set_has_postal_code_prefix() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest::clear_has_postal_code_prefix() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest::clear_postal_code_prefix() {
  if (postal_code_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_prefix_->clear();
  }
  clear_has_postal_code_prefix();
}
inline const ::std::string& BidRequest::postal_code_prefix() const {
  // @@protoc_insertion_point(field_get:BidRequest.postal_code_prefix)
  return *postal_code_prefix_;
}
inline void BidRequest::set_postal_code_prefix(const ::std::string& value) {
  set_has_postal_code_prefix();
  if (postal_code_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_prefix_ = new ::std::string;
  }
  postal_code_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.postal_code_prefix)
}
inline void BidRequest::set_postal_code_prefix(const char* value) {
  set_has_postal_code_prefix();
  if (postal_code_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_prefix_ = new ::std::string;
  }
  postal_code_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.postal_code_prefix)
}
inline void BidRequest::set_postal_code_prefix(const char* value, size_t size) {
  set_has_postal_code_prefix();
  if (postal_code_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_prefix_ = new ::std::string;
  }
  postal_code_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.postal_code_prefix)
}
inline ::std::string* BidRequest::mutable_postal_code_prefix() {
  set_has_postal_code_prefix();
  if (postal_code_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    postal_code_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.postal_code_prefix)
  return postal_code_prefix_;
}
inline ::std::string* BidRequest::release_postal_code_prefix() {
  clear_has_postal_code_prefix();
  if (postal_code_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = postal_code_prefix_;
    postal_code_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_postal_code_prefix(::std::string* postal_code_prefix) {
  if (postal_code_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete postal_code_prefix_;
  }
  if (postal_code_prefix) {
    set_has_postal_code_prefix();
    postal_code_prefix_ = postal_code_prefix;
  } else {
    clear_has_postal_code_prefix();
    postal_code_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.postal_code_prefix)
}

// optional bytes encrypted_hyperlocal_set = 40;
inline bool BidRequest::has_encrypted_hyperlocal_set() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest::set_has_encrypted_hyperlocal_set() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest::clear_has_encrypted_hyperlocal_set() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest::clear_encrypted_hyperlocal_set() {
  if (encrypted_hyperlocal_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hyperlocal_set_->clear();
  }
  clear_has_encrypted_hyperlocal_set();
}
inline const ::std::string& BidRequest::encrypted_hyperlocal_set() const {
  // @@protoc_insertion_point(field_get:BidRequest.encrypted_hyperlocal_set)
  return *encrypted_hyperlocal_set_;
}
inline void BidRequest::set_encrypted_hyperlocal_set(const ::std::string& value) {
  set_has_encrypted_hyperlocal_set();
  if (encrypted_hyperlocal_set_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hyperlocal_set_ = new ::std::string;
  }
  encrypted_hyperlocal_set_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.encrypted_hyperlocal_set)
}
inline void BidRequest::set_encrypted_hyperlocal_set(const char* value) {
  set_has_encrypted_hyperlocal_set();
  if (encrypted_hyperlocal_set_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hyperlocal_set_ = new ::std::string;
  }
  encrypted_hyperlocal_set_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.encrypted_hyperlocal_set)
}
inline void BidRequest::set_encrypted_hyperlocal_set(const void* value, size_t size) {
  set_has_encrypted_hyperlocal_set();
  if (encrypted_hyperlocal_set_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hyperlocal_set_ = new ::std::string;
  }
  encrypted_hyperlocal_set_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.encrypted_hyperlocal_set)
}
inline ::std::string* BidRequest::mutable_encrypted_hyperlocal_set() {
  set_has_encrypted_hyperlocal_set();
  if (encrypted_hyperlocal_set_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_hyperlocal_set_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.encrypted_hyperlocal_set)
  return encrypted_hyperlocal_set_;
}
inline ::std::string* BidRequest::release_encrypted_hyperlocal_set() {
  clear_has_encrypted_hyperlocal_set();
  if (encrypted_hyperlocal_set_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encrypted_hyperlocal_set_;
    encrypted_hyperlocal_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_encrypted_hyperlocal_set(::std::string* encrypted_hyperlocal_set) {
  if (encrypted_hyperlocal_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypted_hyperlocal_set_;
  }
  if (encrypted_hyperlocal_set) {
    set_has_encrypted_hyperlocal_set();
    encrypted_hyperlocal_set_ = encrypted_hyperlocal_set;
  } else {
    clear_has_encrypted_hyperlocal_set();
    encrypted_hyperlocal_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.encrypted_hyperlocal_set)
}

// optional .BidRequest.HyperlocalSet hyperlocal_set = 53;
inline bool BidRequest::has_hyperlocal_set() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest::set_has_hyperlocal_set() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest::clear_has_hyperlocal_set() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest::clear_hyperlocal_set() {
  if (hyperlocal_set_ != NULL) hyperlocal_set_->::BidRequest_HyperlocalSet::Clear();
  clear_has_hyperlocal_set();
}
inline const ::BidRequest_HyperlocalSet& BidRequest::hyperlocal_set() const {
  // @@protoc_insertion_point(field_get:BidRequest.hyperlocal_set)
  return hyperlocal_set_ != NULL ? *hyperlocal_set_ : *default_instance_->hyperlocal_set_;
}
inline ::BidRequest_HyperlocalSet* BidRequest::mutable_hyperlocal_set() {
  set_has_hyperlocal_set();
  if (hyperlocal_set_ == NULL) hyperlocal_set_ = new ::BidRequest_HyperlocalSet;
  // @@protoc_insertion_point(field_mutable:BidRequest.hyperlocal_set)
  return hyperlocal_set_;
}
inline ::BidRequest_HyperlocalSet* BidRequest::release_hyperlocal_set() {
  clear_has_hyperlocal_set();
  ::BidRequest_HyperlocalSet* temp = hyperlocal_set_;
  hyperlocal_set_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_hyperlocal_set(::BidRequest_HyperlocalSet* hyperlocal_set) {
  delete hyperlocal_set_;
  hyperlocal_set_ = hyperlocal_set;
  if (hyperlocal_set) {
    set_has_hyperlocal_set();
  } else {
    clear_has_hyperlocal_set();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.hyperlocal_set)
}

// optional int32 timezone_offset = 25;
inline bool BidRequest::has_timezone_offset() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest::set_has_timezone_offset() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest::clear_has_timezone_offset() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest::clear_timezone_offset() {
  timezone_offset_ = 0;
  clear_has_timezone_offset();
}
inline ::google::protobuf::int32 BidRequest::timezone_offset() const {
  // @@protoc_insertion_point(field_get:BidRequest.timezone_offset)
  return timezone_offset_;
}
inline void BidRequest::set_timezone_offset(::google::protobuf::int32 value) {
  set_has_timezone_offset();
  timezone_offset_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.timezone_offset)
}

// repeated int32 user_vertical = 30 [packed = true];
inline int BidRequest::user_vertical_size() const {
  return user_vertical_.size();
}
inline void BidRequest::clear_user_vertical() {
  user_vertical_.Clear();
}
inline ::google::protobuf::int32 BidRequest::user_vertical(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.user_vertical)
  return user_vertical_.Get(index);
}
inline void BidRequest::set_user_vertical(int index, ::google::protobuf::int32 value) {
  user_vertical_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.user_vertical)
}
inline void BidRequest::add_user_vertical(::google::protobuf::int32 value) {
  user_vertical_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.user_vertical)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::user_vertical() const {
  // @@protoc_insertion_point(field_list:BidRequest.user_vertical)
  return user_vertical_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_user_vertical() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.user_vertical)
  return &user_vertical_;
}

// optional .BidRequest.UserDemographic user_demographic = 50;
inline bool BidRequest::has_user_demographic() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest::set_has_user_demographic() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest::clear_has_user_demographic() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest::clear_user_demographic() {
  if (user_demographic_ != NULL) user_demographic_->::BidRequest_UserDemographic::Clear();
  clear_has_user_demographic();
}
inline const ::BidRequest_UserDemographic& BidRequest::user_demographic() const {
  // @@protoc_insertion_point(field_get:BidRequest.user_demographic)
  return user_demographic_ != NULL ? *user_demographic_ : *default_instance_->user_demographic_;
}
inline ::BidRequest_UserDemographic* BidRequest::mutable_user_demographic() {
  set_has_user_demographic();
  if (user_demographic_ == NULL) user_demographic_ = new ::BidRequest_UserDemographic;
  // @@protoc_insertion_point(field_mutable:BidRequest.user_demographic)
  return user_demographic_;
}
inline ::BidRequest_UserDemographic* BidRequest::release_user_demographic() {
  clear_has_user_demographic();
  ::BidRequest_UserDemographic* temp = user_demographic_;
  user_demographic_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_user_demographic(::BidRequest_UserDemographic* user_demographic) {
  delete user_demographic_;
  user_demographic_ = user_demographic;
  if (user_demographic) {
    set_has_user_demographic();
  } else {
    clear_has_user_demographic();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.user_demographic)
}

// repeated .BidRequest.UserList user_list = 32;
inline int BidRequest::user_list_size() const {
  return user_list_.size();
}
inline void BidRequest::clear_user_list() {
  user_list_.Clear();
}
inline const ::BidRequest_UserList& BidRequest::user_list(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.user_list)
  return user_list_.Get(index);
}
inline ::BidRequest_UserList* BidRequest::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.user_list)
  return user_list_.Mutable(index);
}
inline ::BidRequest_UserList* BidRequest::add_user_list() {
  // @@protoc_insertion_point(field_add:BidRequest.user_list)
  return user_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_UserList >&
BidRequest::user_list() const {
  // @@protoc_insertion_point(field_list:BidRequest.user_list)
  return user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_UserList >*
BidRequest::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.user_list)
  return &user_list_;
}

// optional int32 seller_network_id = 41;
inline bool BidRequest::has_seller_network_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidRequest::set_has_seller_network_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidRequest::clear_has_seller_network_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidRequest::clear_seller_network_id() {
  seller_network_id_ = 0;
  clear_has_seller_network_id();
}
inline ::google::protobuf::int32 BidRequest::seller_network_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.seller_network_id)
  return seller_network_id_;
}
inline void BidRequest::set_seller_network_id(::google::protobuf::int32 value) {
  set_has_seller_network_id();
  seller_network_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.seller_network_id)
}

// optional fixed64 partner_id = 52;
inline bool BidRequest::has_partner_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BidRequest::set_has_partner_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BidRequest::clear_has_partner_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BidRequest::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
  clear_has_partner_id();
}
inline ::google::protobuf::uint64 BidRequest::partner_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.partner_id)
  return partner_id_;
}
inline void BidRequest::set_partner_id(::google::protobuf::uint64 value) {
  set_has_partner_id();
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.partner_id)
}

// optional string url = 11;
inline bool BidRequest::has_url() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BidRequest::set_has_url() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BidRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BidRequest::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidRequest::url() const {
  // @@protoc_insertion_point(field_get:BidRequest.url)
  return *url_;
}
inline void BidRequest::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.url)
}
inline void BidRequest::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.url)
}
inline void BidRequest::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.url)
}
inline ::std::string* BidRequest::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.url)
  return url_;
}
inline ::std::string* BidRequest::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.url)
}

// optional string anonymous_id = 19;
inline bool BidRequest::has_anonymous_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BidRequest::set_has_anonymous_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BidRequest::clear_has_anonymous_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BidRequest::clear_anonymous_id() {
  if (anonymous_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_->clear();
  }
  clear_has_anonymous_id();
}
inline const ::std::string& BidRequest::anonymous_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.anonymous_id)
  return *anonymous_id_;
}
inline void BidRequest::set_anonymous_id(const ::std::string& value) {
  set_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_ = new ::std::string;
  }
  anonymous_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.anonymous_id)
}
inline void BidRequest::set_anonymous_id(const char* value) {
  set_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_ = new ::std::string;
  }
  anonymous_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.anonymous_id)
}
inline void BidRequest::set_anonymous_id(const char* value, size_t size) {
  set_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_ = new ::std::string;
  }
  anonymous_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.anonymous_id)
}
inline ::std::string* BidRequest::mutable_anonymous_id() {
  set_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anonymous_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.anonymous_id)
  return anonymous_id_;
}
inline ::std::string* BidRequest::release_anonymous_id() {
  clear_has_anonymous_id();
  if (anonymous_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = anonymous_id_;
    anonymous_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_anonymous_id(::std::string* anonymous_id) {
  if (anonymous_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete anonymous_id_;
  }
  if (anonymous_id) {
    set_has_anonymous_id();
    anonymous_id_ = anonymous_id;
  } else {
    clear_has_anonymous_id();
    anonymous_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.anonymous_id)
}

// repeated string detected_language = 12;
inline int BidRequest::detected_language_size() const {
  return detected_language_.size();
}
inline void BidRequest::clear_detected_language() {
  detected_language_.Clear();
}
inline const ::std::string& BidRequest::detected_language(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.detected_language)
  return detected_language_.Get(index);
}
inline ::std::string* BidRequest::mutable_detected_language(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.detected_language)
  return detected_language_.Mutable(index);
}
inline void BidRequest::set_detected_language(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.detected_language)
  detected_language_.Mutable(index)->assign(value);
}
inline void BidRequest::set_detected_language(int index, const char* value) {
  detected_language_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.detected_language)
}
inline void BidRequest::set_detected_language(int index, const char* value, size_t size) {
  detected_language_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.detected_language)
}
inline ::std::string* BidRequest::add_detected_language() {
  return detected_language_.Add();
}
inline void BidRequest::add_detected_language(const ::std::string& value) {
  detected_language_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.detected_language)
}
inline void BidRequest::add_detected_language(const char* value) {
  detected_language_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.detected_language)
}
inline void BidRequest::add_detected_language(const char* value, size_t size) {
  detected_language_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.detected_language)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::detected_language() const {
  // @@protoc_insertion_point(field_list:BidRequest.detected_language)
  return detected_language_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_detected_language() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.detected_language)
  return &detected_language_;
}

// repeated .BidRequest.Vertical detected_vertical = 13;
inline int BidRequest::detected_vertical_size() const {
  return detected_vertical_.size();
}
inline void BidRequest::clear_detected_vertical() {
  detected_vertical_.Clear();
}
inline const ::BidRequest_Vertical& BidRequest::detected_vertical(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.detected_vertical)
  return detected_vertical_.Get(index);
}
inline ::BidRequest_Vertical* BidRequest::mutable_detected_vertical(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.detected_vertical)
  return detected_vertical_.Mutable(index);
}
inline ::BidRequest_Vertical* BidRequest::add_detected_vertical() {
  // @@protoc_insertion_point(field_add:BidRequest.detected_vertical)
  return detected_vertical_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_Vertical >&
BidRequest::detected_vertical() const {
  // @@protoc_insertion_point(field_list:BidRequest.detected_vertical)
  return detected_vertical_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_Vertical >*
BidRequest::mutable_detected_vertical() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.detected_vertical)
  return &detected_vertical_;
}

// repeated int32 detected_content_label = 26 [packed = true];
inline int BidRequest::detected_content_label_size() const {
  return detected_content_label_.size();
}
inline void BidRequest::clear_detected_content_label() {
  detected_content_label_.Clear();
}
inline ::google::protobuf::int32 BidRequest::detected_content_label(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.detected_content_label)
  return detected_content_label_.Get(index);
}
inline void BidRequest::set_detected_content_label(int index, ::google::protobuf::int32 value) {
  detected_content_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.detected_content_label)
}
inline void BidRequest::add_detected_content_label(::google::protobuf::int32 value) {
  detected_content_label_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.detected_content_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::detected_content_label() const {
  // @@protoc_insertion_point(field_list:BidRequest.detected_content_label)
  return detected_content_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_detected_content_label() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.detected_content_label)
  return &detected_content_label_;
}

// optional .BidRequest.Device device = 54;
inline bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BidRequest::clear_device() {
  if (device_ != NULL) device_->::BidRequest_Device::Clear();
  clear_has_device();
}
inline const ::BidRequest_Device& BidRequest::device() const {
  // @@protoc_insertion_point(field_get:BidRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::BidRequest_Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::BidRequest_Device;
  // @@protoc_insertion_point(field_mutable:BidRequest.device)
  return device_;
}
inline ::BidRequest_Device* BidRequest::release_device() {
  clear_has_device();
  ::BidRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_device(::BidRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.device)
}

// repeated .BidRequest.KeyValue key_value = 38;
inline int BidRequest::key_value_size() const {
  return key_value_.size();
}
inline void BidRequest::clear_key_value() {
  key_value_.Clear();
}
inline const ::BidRequest_KeyValue& BidRequest::key_value(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.key_value)
  return key_value_.Get(index);
}
inline ::BidRequest_KeyValue* BidRequest::mutable_key_value(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.key_value)
  return key_value_.Mutable(index);
}
inline ::BidRequest_KeyValue* BidRequest::add_key_value() {
  // @@protoc_insertion_point(field_add:BidRequest.key_value)
  return key_value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_KeyValue >&
BidRequest::key_value() const {
  // @@protoc_insertion_point(field_list:BidRequest.key_value)
  return key_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_KeyValue >*
BidRequest::mutable_key_value() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.key_value)
  return &key_value_;
}

// optional .BidRequest.Mobile mobile = 28;
inline bool BidRequest::has_mobile() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BidRequest::set_has_mobile() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BidRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BidRequest::clear_mobile() {
  if (mobile_ != NULL) mobile_->::BidRequest_Mobile::Clear();
  clear_has_mobile();
}
inline const ::BidRequest_Mobile& BidRequest::mobile() const {
  // @@protoc_insertion_point(field_get:BidRequest.mobile)
  return mobile_ != NULL ? *mobile_ : *default_instance_->mobile_;
}
inline ::BidRequest_Mobile* BidRequest::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == NULL) mobile_ = new ::BidRequest_Mobile;
  // @@protoc_insertion_point(field_mutable:BidRequest.mobile)
  return mobile_;
}
inline ::BidRequest_Mobile* BidRequest::release_mobile() {
  clear_has_mobile();
  ::BidRequest_Mobile* temp = mobile_;
  mobile_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_mobile(::BidRequest_Mobile* mobile) {
  delete mobile_;
  mobile_ = mobile;
  if (mobile) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.mobile)
}

// optional .BidRequest.Video video = 29;
inline bool BidRequest::has_video() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BidRequest::set_has_video() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BidRequest::clear_has_video() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BidRequest::clear_video() {
  if (video_ != NULL) video_->::BidRequest_Video::Clear();
  clear_has_video();
}
inline const ::BidRequest_Video& BidRequest::video() const {
  // @@protoc_insertion_point(field_get:BidRequest.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::BidRequest_Video* BidRequest::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::BidRequest_Video;
  // @@protoc_insertion_point(field_mutable:BidRequest.video)
  return video_;
}
inline ::BidRequest_Video* BidRequest::release_video() {
  clear_has_video();
  ::BidRequest_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_video(::BidRequest_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.video)
}

// optional fixed64 publisher_settings_list_id = 42;
inline bool BidRequest::has_publisher_settings_list_id() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BidRequest::set_has_publisher_settings_list_id() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BidRequest::clear_has_publisher_settings_list_id() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BidRequest::clear_publisher_settings_list_id() {
  publisher_settings_list_id_ = GOOGLE_ULONGLONG(0);
  clear_has_publisher_settings_list_id();
}
inline ::google::protobuf::uint64 BidRequest::publisher_settings_list_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.publisher_settings_list_id)
  return publisher_settings_list_id_;
}
inline void BidRequest::set_publisher_settings_list_id(::google::protobuf::uint64 value) {
  set_has_publisher_settings_list_id();
  publisher_settings_list_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.publisher_settings_list_id)
}

// optional .BidRequest.PublisherType publisher_type = 51 [default = UNKNOWN_PUBLISHER_TYPE];
inline bool BidRequest::has_publisher_type() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BidRequest::set_has_publisher_type() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BidRequest::clear_has_publisher_type() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BidRequest::clear_publisher_type() {
  publisher_type_ = 0;
  clear_has_publisher_type();
}
inline ::BidRequest_PublisherType BidRequest::publisher_type() const {
  // @@protoc_insertion_point(field_get:BidRequest.publisher_type)
  return static_cast< ::BidRequest_PublisherType >(publisher_type_);
}
inline void BidRequest::set_publisher_type(::BidRequest_PublisherType value) {
  assert(::BidRequest_PublisherType_IsValid(value));
  set_has_publisher_type();
  publisher_type_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.publisher_type)
}

// repeated .BidRequest.AdSlot adslot = 14;
inline int BidRequest::adslot_size() const {
  return adslot_.size();
}
inline void BidRequest::clear_adslot() {
  adslot_.Clear();
}
inline const ::BidRequest_AdSlot& BidRequest::adslot(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.adslot)
  return adslot_.Get(index);
}
inline ::BidRequest_AdSlot* BidRequest::mutable_adslot(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.adslot)
  return adslot_.Mutable(index);
}
inline ::BidRequest_AdSlot* BidRequest::add_adslot() {
  // @@protoc_insertion_point(field_add:BidRequest.adslot)
  return adslot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot >&
BidRequest::adslot() const {
  // @@protoc_insertion_point(field_list:BidRequest.adslot)
  return adslot_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot >*
BidRequest::mutable_adslot() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.adslot)
  return &adslot_;
}

// repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
inline int BidRequest::bid_response_feedback_size() const {
  return bid_response_feedback_.size();
}
inline void BidRequest::clear_bid_response_feedback() {
  bid_response_feedback_.Clear();
}
inline const ::BidRequest_BidResponseFeedback& BidRequest::bid_response_feedback(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.bid_response_feedback)
  return bid_response_feedback_.Get(index);
}
inline ::BidRequest_BidResponseFeedback* BidRequest::mutable_bid_response_feedback(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.bid_response_feedback)
  return bid_response_feedback_.Mutable(index);
}
inline ::BidRequest_BidResponseFeedback* BidRequest::add_bid_response_feedback() {
  // @@protoc_insertion_point(field_add:BidRequest.bid_response_feedback)
  return bid_response_feedback_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_BidResponseFeedback >&
BidRequest::bid_response_feedback() const {
  // @@protoc_insertion_point(field_list:BidRequest.bid_response_feedback)
  return bid_response_feedback_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_BidResponseFeedback >*
BidRequest::mutable_bid_response_feedback() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.bid_response_feedback)
  return &bid_response_feedback_;
}

// optional bool is_test = 15 [default = false];
inline bool BidRequest::has_is_test() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BidRequest::set_has_is_test() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BidRequest::clear_has_is_test() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BidRequest::clear_is_test() {
  is_test_ = false;
  clear_has_is_test();
}
inline bool BidRequest::is_test() const {
  // @@protoc_insertion_point(field_get:BidRequest.is_test)
  return is_test_;
}
inline void BidRequest::set_is_test(bool value) {
  set_has_is_test();
  is_test_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.is_test)
}

// optional bool is_ping = 17 [default = false];
inline bool BidRequest::has_is_ping() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BidRequest::set_has_is_ping() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BidRequest::clear_has_is_ping() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BidRequest::clear_is_ping() {
  is_ping_ = false;
  clear_has_is_ping();
}
inline bool BidRequest::is_ping() const {
  // @@protoc_insertion_point(field_get:BidRequest.is_ping)
  return is_ping_;
}
inline void BidRequest::set_is_ping(bool value) {
  set_has_is_ping();
  is_ping_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.is_ping)
}

// optional bool is_predicted_to_be_ignored = 45 [default = false];
inline bool BidRequest::has_is_predicted_to_be_ignored() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BidRequest::set_has_is_predicted_to_be_ignored() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BidRequest::clear_has_is_predicted_to_be_ignored() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BidRequest::clear_is_predicted_to_be_ignored() {
  is_predicted_to_be_ignored_ = false;
  clear_has_is_predicted_to_be_ignored();
}
inline bool BidRequest::is_predicted_to_be_ignored() const {
  // @@protoc_insertion_point(field_get:BidRequest.is_predicted_to_be_ignored)
  return is_predicted_to_be_ignored_;
}
inline void BidRequest::set_is_predicted_to_be_ignored(bool value) {
  set_has_is_predicted_to_be_ignored();
  is_predicted_to_be_ignored_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.is_predicted_to_be_ignored)
}

// optional int32 DEPRECATED_protocol_version = 1;
inline bool BidRequest::has_deprecated_protocol_version() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_deprecated_protocol_version() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BidRequest::clear_has_deprecated_protocol_version() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BidRequest::clear_deprecated_protocol_version() {
  deprecated_protocol_version_ = 0;
  clear_has_deprecated_protocol_version();
}
inline ::google::protobuf::int32 BidRequest::deprecated_protocol_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_protocol_version)
  return deprecated_protocol_version_;
}
inline void BidRequest::set_deprecated_protocol_version(::google::protobuf::int32 value) {
  set_has_deprecated_protocol_version();
  deprecated_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_protocol_version)
}

// optional string DEPRECATED_click_tracking_url = 3;
inline bool BidRequest::has_deprecated_click_tracking_url() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void BidRequest::set_has_deprecated_click_tracking_url() {
  _has_bits_[1] |= 0x00000040u;
}
inline void BidRequest::clear_has_deprecated_click_tracking_url() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void BidRequest::clear_deprecated_click_tracking_url() {
  if (deprecated_click_tracking_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_tracking_url_->clear();
  }
  clear_has_deprecated_click_tracking_url();
}
inline const ::std::string& BidRequest::deprecated_click_tracking_url() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_click_tracking_url)
  return *deprecated_click_tracking_url_;
}
inline void BidRequest::set_deprecated_click_tracking_url(const ::std::string& value) {
  set_has_deprecated_click_tracking_url();
  if (deprecated_click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_tracking_url_ = new ::std::string;
  }
  deprecated_click_tracking_url_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_click_tracking_url)
}
inline void BidRequest::set_deprecated_click_tracking_url(const char* value) {
  set_has_deprecated_click_tracking_url();
  if (deprecated_click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_tracking_url_ = new ::std::string;
  }
  deprecated_click_tracking_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_click_tracking_url)
}
inline void BidRequest::set_deprecated_click_tracking_url(const char* value, size_t size) {
  set_has_deprecated_click_tracking_url();
  if (deprecated_click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_tracking_url_ = new ::std::string;
  }
  deprecated_click_tracking_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_click_tracking_url)
}
inline ::std::string* BidRequest::mutable_deprecated_click_tracking_url() {
  set_has_deprecated_click_tracking_url();
  if (deprecated_click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_tracking_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_click_tracking_url)
  return deprecated_click_tracking_url_;
}
inline ::std::string* BidRequest::release_deprecated_click_tracking_url() {
  clear_has_deprecated_click_tracking_url();
  if (deprecated_click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_click_tracking_url_;
    deprecated_click_tracking_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_deprecated_click_tracking_url(::std::string* deprecated_click_tracking_url) {
  if (deprecated_click_tracking_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_click_tracking_url_;
  }
  if (deprecated_click_tracking_url) {
    set_has_deprecated_click_tracking_url();
    deprecated_click_tracking_url_ = deprecated_click_tracking_url;
  } else {
    clear_has_deprecated_click_tracking_url();
    deprecated_click_tracking_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_click_tracking_url)
}

// optional uint64 DEPRECATED_cookie = 5;
inline bool BidRequest::has_deprecated_cookie() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void BidRequest::set_has_deprecated_cookie() {
  _has_bits_[1] |= 0x00000080u;
}
inline void BidRequest::clear_has_deprecated_cookie() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void BidRequest::clear_deprecated_cookie() {
  deprecated_cookie_ = GOOGLE_ULONGLONG(0);
  clear_has_deprecated_cookie();
}
inline ::google::protobuf::uint64 BidRequest::deprecated_cookie() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_cookie)
  return deprecated_cookie_;
}
inline void BidRequest::set_deprecated_cookie(::google::protobuf::uint64 value) {
  set_has_deprecated_cookie();
  deprecated_cookie_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_cookie)
}

// optional string DEPRECATED_country = 7;
inline bool BidRequest::has_deprecated_country() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void BidRequest::set_has_deprecated_country() {
  _has_bits_[1] |= 0x00000100u;
}
inline void BidRequest::clear_has_deprecated_country() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void BidRequest::clear_deprecated_country() {
  if (deprecated_country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_country_->clear();
  }
  clear_has_deprecated_country();
}
inline const ::std::string& BidRequest::deprecated_country() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_country)
  return *deprecated_country_;
}
inline void BidRequest::set_deprecated_country(const ::std::string& value) {
  set_has_deprecated_country();
  if (deprecated_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_country_ = new ::std::string;
  }
  deprecated_country_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_country)
}
inline void BidRequest::set_deprecated_country(const char* value) {
  set_has_deprecated_country();
  if (deprecated_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_country_ = new ::std::string;
  }
  deprecated_country_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_country)
}
inline void BidRequest::set_deprecated_country(const char* value, size_t size) {
  set_has_deprecated_country();
  if (deprecated_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_country_ = new ::std::string;
  }
  deprecated_country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_country)
}
inline ::std::string* BidRequest::mutable_deprecated_country() {
  set_has_deprecated_country();
  if (deprecated_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_country)
  return deprecated_country_;
}
inline ::std::string* BidRequest::release_deprecated_country() {
  clear_has_deprecated_country();
  if (deprecated_country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_country_;
    deprecated_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_deprecated_country(::std::string* deprecated_country) {
  if (deprecated_country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_country_;
  }
  if (deprecated_country) {
    set_has_deprecated_country();
    deprecated_country_ = deprecated_country;
  } else {
    clear_has_deprecated_country();
    deprecated_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_country)
}

// optional string DEPRECATED_region = 8;
inline bool BidRequest::has_deprecated_region() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void BidRequest::set_has_deprecated_region() {
  _has_bits_[1] |= 0x00000200u;
}
inline void BidRequest::clear_has_deprecated_region() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void BidRequest::clear_deprecated_region() {
  if (deprecated_region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_region_->clear();
  }
  clear_has_deprecated_region();
}
inline const ::std::string& BidRequest::deprecated_region() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_region)
  return *deprecated_region_;
}
inline void BidRequest::set_deprecated_region(const ::std::string& value) {
  set_has_deprecated_region();
  if (deprecated_region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_region_ = new ::std::string;
  }
  deprecated_region_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_region)
}
inline void BidRequest::set_deprecated_region(const char* value) {
  set_has_deprecated_region();
  if (deprecated_region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_region_ = new ::std::string;
  }
  deprecated_region_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_region)
}
inline void BidRequest::set_deprecated_region(const char* value, size_t size) {
  set_has_deprecated_region();
  if (deprecated_region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_region_ = new ::std::string;
  }
  deprecated_region_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_region)
}
inline ::std::string* BidRequest::mutable_deprecated_region() {
  set_has_deprecated_region();
  if (deprecated_region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_region_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_region)
  return deprecated_region_;
}
inline ::std::string* BidRequest::release_deprecated_region() {
  clear_has_deprecated_region();
  if (deprecated_region_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_region_;
    deprecated_region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_deprecated_region(::std::string* deprecated_region) {
  if (deprecated_region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_region_;
  }
  if (deprecated_region) {
    set_has_deprecated_region();
    deprecated_region_ = deprecated_region;
  } else {
    clear_has_deprecated_region();
    deprecated_region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_region)
}

// optional string DEPRECATED_city = 9;
inline bool BidRequest::has_deprecated_city() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void BidRequest::set_has_deprecated_city() {
  _has_bits_[1] |= 0x00000400u;
}
inline void BidRequest::clear_has_deprecated_city() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void BidRequest::clear_deprecated_city() {
  if (deprecated_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_city_->clear();
  }
  clear_has_deprecated_city();
}
inline const ::std::string& BidRequest::deprecated_city() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_city)
  return *deprecated_city_;
}
inline void BidRequest::set_deprecated_city(const ::std::string& value) {
  set_has_deprecated_city();
  if (deprecated_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_city_ = new ::std::string;
  }
  deprecated_city_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_city)
}
inline void BidRequest::set_deprecated_city(const char* value) {
  set_has_deprecated_city();
  if (deprecated_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_city_ = new ::std::string;
  }
  deprecated_city_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_city)
}
inline void BidRequest::set_deprecated_city(const char* value, size_t size) {
  set_has_deprecated_city();
  if (deprecated_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_city_ = new ::std::string;
  }
  deprecated_city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_city)
}
inline ::std::string* BidRequest::mutable_deprecated_city() {
  set_has_deprecated_city();
  if (deprecated_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_city)
  return deprecated_city_;
}
inline ::std::string* BidRequest::release_deprecated_city() {
  clear_has_deprecated_city();
  if (deprecated_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_city_;
    deprecated_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_deprecated_city(::std::string* deprecated_city) {
  if (deprecated_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_city_;
  }
  if (deprecated_city) {
    set_has_deprecated_city();
    deprecated_city_ = deprecated_city;
  } else {
    clear_has_deprecated_city();
    deprecated_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_city)
}

// optional int32 DEPRECATED_metro = 10;
inline bool BidRequest::has_deprecated_metro() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void BidRequest::set_has_deprecated_metro() {
  _has_bits_[1] |= 0x00000800u;
}
inline void BidRequest::clear_has_deprecated_metro() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void BidRequest::clear_deprecated_metro() {
  deprecated_metro_ = 0;
  clear_has_deprecated_metro();
}
inline ::google::protobuf::int32 BidRequest::deprecated_metro() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_metro)
  return deprecated_metro_;
}
inline void BidRequest::set_deprecated_metro(::google::protobuf::int32 value) {
  set_has_deprecated_metro();
  deprecated_metro_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_metro)
}

// optional bytes DEPRECATED_hashed_cookie = 16;
inline bool BidRequest::has_deprecated_hashed_cookie() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void BidRequest::set_has_deprecated_hashed_cookie() {
  _has_bits_[1] |= 0x00001000u;
}
inline void BidRequest::clear_has_deprecated_hashed_cookie() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void BidRequest::clear_deprecated_hashed_cookie() {
  if (deprecated_hashed_cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_hashed_cookie_->clear();
  }
  clear_has_deprecated_hashed_cookie();
}
inline const ::std::string& BidRequest::deprecated_hashed_cookie() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_hashed_cookie)
  return *deprecated_hashed_cookie_;
}
inline void BidRequest::set_deprecated_hashed_cookie(const ::std::string& value) {
  set_has_deprecated_hashed_cookie();
  if (deprecated_hashed_cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_hashed_cookie_ = new ::std::string;
  }
  deprecated_hashed_cookie_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_hashed_cookie)
}
inline void BidRequest::set_deprecated_hashed_cookie(const char* value) {
  set_has_deprecated_hashed_cookie();
  if (deprecated_hashed_cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_hashed_cookie_ = new ::std::string;
  }
  deprecated_hashed_cookie_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_hashed_cookie)
}
inline void BidRequest::set_deprecated_hashed_cookie(const void* value, size_t size) {
  set_has_deprecated_hashed_cookie();
  if (deprecated_hashed_cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_hashed_cookie_ = new ::std::string;
  }
  deprecated_hashed_cookie_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_hashed_cookie)
}
inline ::std::string* BidRequest::mutable_deprecated_hashed_cookie() {
  set_has_deprecated_hashed_cookie();
  if (deprecated_hashed_cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_hashed_cookie_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_hashed_cookie)
  return deprecated_hashed_cookie_;
}
inline ::std::string* BidRequest::release_deprecated_hashed_cookie() {
  clear_has_deprecated_hashed_cookie();
  if (deprecated_hashed_cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_hashed_cookie_;
    deprecated_hashed_cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_deprecated_hashed_cookie(::std::string* deprecated_hashed_cookie) {
  if (deprecated_hashed_cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_hashed_cookie_;
  }
  if (deprecated_hashed_cookie) {
    set_has_deprecated_hashed_cookie();
    deprecated_hashed_cookie_ = deprecated_hashed_cookie;
  } else {
    clear_has_deprecated_hashed_cookie();
    deprecated_hashed_cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_hashed_cookie)
}

// repeated string DEPRECATED_excluded_click_through_url = 18;
inline int BidRequest::deprecated_excluded_click_through_url_size() const {
  return deprecated_excluded_click_through_url_.size();
}
inline void BidRequest::clear_deprecated_excluded_click_through_url() {
  deprecated_excluded_click_through_url_.Clear();
}
inline const ::std::string& BidRequest::deprecated_excluded_click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_.Get(index);
}
inline ::std::string* BidRequest::mutable_deprecated_excluded_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_.Mutable(index);
}
inline void BidRequest::set_deprecated_excluded_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_excluded_click_through_url)
  deprecated_excluded_click_through_url_.Mutable(index)->assign(value);
}
inline void BidRequest::set_deprecated_excluded_click_through_url(int index, const char* value) {
  deprecated_excluded_click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_excluded_click_through_url)
}
inline void BidRequest::set_deprecated_excluded_click_through_url(int index, const char* value, size_t size) {
  deprecated_excluded_click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_excluded_click_through_url)
}
inline ::std::string* BidRequest::add_deprecated_excluded_click_through_url() {
  return deprecated_excluded_click_through_url_.Add();
}
inline void BidRequest::add_deprecated_excluded_click_through_url(const ::std::string& value) {
  deprecated_excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.DEPRECATED_excluded_click_through_url)
}
inline void BidRequest::add_deprecated_excluded_click_through_url(const char* value) {
  deprecated_excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.DEPRECATED_excluded_click_through_url)
}
inline void BidRequest::add_deprecated_excluded_click_through_url(const char* value, size_t size) {
  deprecated_excluded_click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.DEPRECATED_excluded_click_through_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::deprecated_excluded_click_through_url() const {
  // @@protoc_insertion_point(field_list:BidRequest.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_deprecated_excluded_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.DEPRECATED_excluded_click_through_url)
  return &deprecated_excluded_click_through_url_;
}

// optional string DEPRECATED_seller_network = 22;
inline bool BidRequest::has_deprecated_seller_network() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void BidRequest::set_has_deprecated_seller_network() {
  _has_bits_[1] |= 0x00004000u;
}
inline void BidRequest::clear_has_deprecated_seller_network() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void BidRequest::clear_deprecated_seller_network() {
  if (deprecated_seller_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_seller_network_->clear();
  }
  clear_has_deprecated_seller_network();
}
inline const ::std::string& BidRequest::deprecated_seller_network() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_seller_network)
  return *deprecated_seller_network_;
}
inline void BidRequest::set_deprecated_seller_network(const ::std::string& value) {
  set_has_deprecated_seller_network();
  if (deprecated_seller_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_seller_network_ = new ::std::string;
  }
  deprecated_seller_network_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_seller_network)
}
inline void BidRequest::set_deprecated_seller_network(const char* value) {
  set_has_deprecated_seller_network();
  if (deprecated_seller_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_seller_network_ = new ::std::string;
  }
  deprecated_seller_network_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_seller_network)
}
inline void BidRequest::set_deprecated_seller_network(const char* value, size_t size) {
  set_has_deprecated_seller_network();
  if (deprecated_seller_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_seller_network_ = new ::std::string;
  }
  deprecated_seller_network_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_seller_network)
}
inline ::std::string* BidRequest::mutable_deprecated_seller_network() {
  set_has_deprecated_seller_network();
  if (deprecated_seller_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_seller_network_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_seller_network)
  return deprecated_seller_network_;
}
inline ::std::string* BidRequest::release_deprecated_seller_network() {
  clear_has_deprecated_seller_network();
  if (deprecated_seller_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_seller_network_;
    deprecated_seller_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_deprecated_seller_network(::std::string* deprecated_seller_network) {
  if (deprecated_seller_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_seller_network_;
  }
  if (deprecated_seller_network) {
    set_has_deprecated_seller_network();
    deprecated_seller_network_ = deprecated_seller_network;
  } else {
    clear_has_deprecated_seller_network();
    deprecated_seller_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_seller_network)
}

// optional bytes DEPRECATED_publisher_settings_list_id = 23;
inline bool BidRequest::has_deprecated_publisher_settings_list_id() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void BidRequest::set_has_deprecated_publisher_settings_list_id() {
  _has_bits_[1] |= 0x00008000u;
}
inline void BidRequest::clear_has_deprecated_publisher_settings_list_id() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void BidRequest::clear_deprecated_publisher_settings_list_id() {
  if (deprecated_publisher_settings_list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_publisher_settings_list_id_->clear();
  }
  clear_has_deprecated_publisher_settings_list_id();
}
inline const ::std::string& BidRequest::deprecated_publisher_settings_list_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_publisher_settings_list_id)
  return *deprecated_publisher_settings_list_id_;
}
inline void BidRequest::set_deprecated_publisher_settings_list_id(const ::std::string& value) {
  set_has_deprecated_publisher_settings_list_id();
  if (deprecated_publisher_settings_list_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_publisher_settings_list_id_ = new ::std::string;
  }
  deprecated_publisher_settings_list_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_publisher_settings_list_id)
}
inline void BidRequest::set_deprecated_publisher_settings_list_id(const char* value) {
  set_has_deprecated_publisher_settings_list_id();
  if (deprecated_publisher_settings_list_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_publisher_settings_list_id_ = new ::std::string;
  }
  deprecated_publisher_settings_list_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_publisher_settings_list_id)
}
inline void BidRequest::set_deprecated_publisher_settings_list_id(const void* value, size_t size) {
  set_has_deprecated_publisher_settings_list_id();
  if (deprecated_publisher_settings_list_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_publisher_settings_list_id_ = new ::std::string;
  }
  deprecated_publisher_settings_list_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_publisher_settings_list_id)
}
inline ::std::string* BidRequest::mutable_deprecated_publisher_settings_list_id() {
  set_has_deprecated_publisher_settings_list_id();
  if (deprecated_publisher_settings_list_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_publisher_settings_list_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_publisher_settings_list_id)
  return deprecated_publisher_settings_list_id_;
}
inline ::std::string* BidRequest::release_deprecated_publisher_settings_list_id() {
  clear_has_deprecated_publisher_settings_list_id();
  if (deprecated_publisher_settings_list_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_publisher_settings_list_id_;
    deprecated_publisher_settings_list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidRequest::set_allocated_deprecated_publisher_settings_list_id(::std::string* deprecated_publisher_settings_list_id) {
  if (deprecated_publisher_settings_list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_publisher_settings_list_id_;
  }
  if (deprecated_publisher_settings_list_id) {
    set_has_deprecated_publisher_settings_list_id();
    deprecated_publisher_settings_list_id_ = deprecated_publisher_settings_list_id;
  } else {
    clear_has_deprecated_publisher_settings_list_id();
    deprecated_publisher_settings_list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_publisher_settings_list_id)
}

// repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
inline int BidRequest::deprecated_matching_network_size() const {
  return deprecated_matching_network_.size();
}
inline void BidRequest::clear_deprecated_matching_network() {
  deprecated_matching_network_.Clear();
}
inline const ::BidRequest_MatchingNetwork& BidRequest::deprecated_matching_network(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_matching_network)
  return deprecated_matching_network_.Get(index);
}
inline ::BidRequest_MatchingNetwork* BidRequest::mutable_deprecated_matching_network(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_matching_network)
  return deprecated_matching_network_.Mutable(index);
}
inline ::BidRequest_MatchingNetwork* BidRequest::add_deprecated_matching_network() {
  // @@protoc_insertion_point(field_add:BidRequest.DEPRECATED_matching_network)
  return deprecated_matching_network_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidRequest_MatchingNetwork >&
BidRequest::deprecated_matching_network() const {
  // @@protoc_insertion_point(field_list:BidRequest.DEPRECATED_matching_network)
  return deprecated_matching_network_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidRequest_MatchingNetwork >*
BidRequest::mutable_deprecated_matching_network() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.DEPRECATED_matching_network)
  return &deprecated_matching_network_;
}

// optional bool DEPRECATED_experimental_deadline = 35 [default = false];
inline bool BidRequest::has_deprecated_experimental_deadline() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void BidRequest::set_has_deprecated_experimental_deadline() {
  _has_bits_[1] |= 0x00020000u;
}
inline void BidRequest::clear_has_deprecated_experimental_deadline() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void BidRequest::clear_deprecated_experimental_deadline() {
  deprecated_experimental_deadline_ = false;
  clear_has_deprecated_experimental_deadline();
}
inline bool BidRequest::deprecated_experimental_deadline() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_experimental_deadline)
  return deprecated_experimental_deadline_;
}
inline void BidRequest::set_deprecated_experimental_deadline(bool value) {
  set_has_deprecated_experimental_deadline();
  deprecated_experimental_deadline_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_experimental_deadline)
}

// repeated int32 DEPRECATED_site_list_id = 36;
inline int BidRequest::deprecated_site_list_id_size() const {
  return deprecated_site_list_id_.size();
}
inline void BidRequest::clear_deprecated_site_list_id() {
  deprecated_site_list_id_.Clear();
}
inline ::google::protobuf::int32 BidRequest::deprecated_site_list_id(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_site_list_id)
  return deprecated_site_list_id_.Get(index);
}
inline void BidRequest::set_deprecated_site_list_id(int index, ::google::protobuf::int32 value) {
  deprecated_site_list_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_site_list_id)
}
inline void BidRequest::add_deprecated_site_list_id(::google::protobuf::int32 value) {
  deprecated_site_list_id_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.DEPRECATED_site_list_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::deprecated_site_list_id() const {
  // @@protoc_insertion_point(field_list:BidRequest.DEPRECATED_site_list_id)
  return deprecated_site_list_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_deprecated_site_list_id() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.DEPRECATED_site_list_id)
  return &deprecated_site_list_id_;
}

// optional int32 DEPRECATED_vertical_dictionary_version = 24;
inline bool BidRequest::has_deprecated_vertical_dictionary_version() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void BidRequest::set_has_deprecated_vertical_dictionary_version() {
  _has_bits_[1] |= 0x00080000u;
}
inline void BidRequest::clear_has_deprecated_vertical_dictionary_version() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void BidRequest::clear_deprecated_vertical_dictionary_version() {
  deprecated_vertical_dictionary_version_ = 0;
  clear_has_deprecated_vertical_dictionary_version();
}
inline ::google::protobuf::int32 BidRequest::deprecated_vertical_dictionary_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_vertical_dictionary_version)
  return deprecated_vertical_dictionary_version_;
}
inline void BidRequest::set_deprecated_vertical_dictionary_version(::google::protobuf::int32 value) {
  set_has_deprecated_vertical_dictionary_version();
  deprecated_vertical_dictionary_version_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_vertical_dictionary_version)
}

// -------------------------------------------------------------------

// BidResponse_Ad_NativeAd_Image

// optional string url = 1;
inline bool BidResponse_Ad_NativeAd_Image::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_Ad_NativeAd_Image::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_Ad_NativeAd_Image::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_Ad_NativeAd_Image::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidResponse_Ad_NativeAd_Image::url() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.Image.url)
  return *url_;
}
inline void BidResponse_Ad_NativeAd_Image::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.Image.url)
}
inline void BidResponse_Ad_NativeAd_Image::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.NativeAd.Image.url)
}
inline void BidResponse_Ad_NativeAd_Image::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.NativeAd.Image.url)
}
inline ::std::string* BidResponse_Ad_NativeAd_Image::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.Image.url)
  return url_;
}
inline ::std::string* BidResponse_Ad_NativeAd_Image::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_NativeAd_Image::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.Image.url)
}

// optional int32 width = 2;
inline bool BidResponse_Ad_NativeAd_Image::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_Ad_NativeAd_Image::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_Ad_NativeAd_Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_Ad_NativeAd_Image::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BidResponse_Ad_NativeAd_Image::width() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.Image.width)
  return width_;
}
inline void BidResponse_Ad_NativeAd_Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.Image.width)
}

// optional int32 height = 3;
inline bool BidResponse_Ad_NativeAd_Image::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_Ad_NativeAd_Image::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_Ad_NativeAd_Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_Ad_NativeAd_Image::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BidResponse_Ad_NativeAd_Image::height() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.Image.height)
  return height_;
}
inline void BidResponse_Ad_NativeAd_Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.Image.height)
}

// -------------------------------------------------------------------

// BidResponse_Ad_NativeAd

// optional string headline = 1;
inline bool BidResponse_Ad_NativeAd::has_headline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_headline() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_Ad_NativeAd::clear_has_headline() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_Ad_NativeAd::clear_headline() {
  if (headline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headline_->clear();
  }
  clear_has_headline();
}
inline const ::std::string& BidResponse_Ad_NativeAd::headline() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.headline)
  return *headline_;
}
inline void BidResponse_Ad_NativeAd::set_headline(const ::std::string& value) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headline_ = new ::std::string;
  }
  headline_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.headline)
}
inline void BidResponse_Ad_NativeAd::set_headline(const char* value) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headline_ = new ::std::string;
  }
  headline_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.NativeAd.headline)
}
inline void BidResponse_Ad_NativeAd::set_headline(const char* value, size_t size) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headline_ = new ::std::string;
  }
  headline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.NativeAd.headline)
}
inline ::std::string* BidResponse_Ad_NativeAd::mutable_headline() {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.headline)
  return headline_;
}
inline ::std::string* BidResponse_Ad_NativeAd::release_headline() {
  clear_has_headline();
  if (headline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = headline_;
    headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_NativeAd::set_allocated_headline(::std::string* headline) {
  if (headline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headline_;
  }
  if (headline) {
    set_has_headline();
    headline_ = headline;
  } else {
    clear_has_headline();
    headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.headline)
}

// optional string body = 2;
inline bool BidResponse_Ad_NativeAd::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_Ad_NativeAd::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_Ad_NativeAd::clear_body() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& BidResponse_Ad_NativeAd::body() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.body)
  return *body_;
}
inline void BidResponse_Ad_NativeAd::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.body)
}
inline void BidResponse_Ad_NativeAd::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.NativeAd.body)
}
inline void BidResponse_Ad_NativeAd::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.NativeAd.body)
}
inline ::std::string* BidResponse_Ad_NativeAd::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.body)
  return body_;
}
inline ::std::string* BidResponse_Ad_NativeAd::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_NativeAd::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.body)
}

// optional string call_to_action = 3;
inline bool BidResponse_Ad_NativeAd::has_call_to_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_call_to_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_Ad_NativeAd::clear_has_call_to_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_Ad_NativeAd::clear_call_to_action() {
  if (call_to_action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    call_to_action_->clear();
  }
  clear_has_call_to_action();
}
inline const ::std::string& BidResponse_Ad_NativeAd::call_to_action() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.call_to_action)
  return *call_to_action_;
}
inline void BidResponse_Ad_NativeAd::set_call_to_action(const ::std::string& value) {
  set_has_call_to_action();
  if (call_to_action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    call_to_action_ = new ::std::string;
  }
  call_to_action_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.call_to_action)
}
inline void BidResponse_Ad_NativeAd::set_call_to_action(const char* value) {
  set_has_call_to_action();
  if (call_to_action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    call_to_action_ = new ::std::string;
  }
  call_to_action_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.NativeAd.call_to_action)
}
inline void BidResponse_Ad_NativeAd::set_call_to_action(const char* value, size_t size) {
  set_has_call_to_action();
  if (call_to_action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    call_to_action_ = new ::std::string;
  }
  call_to_action_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.NativeAd.call_to_action)
}
inline ::std::string* BidResponse_Ad_NativeAd::mutable_call_to_action() {
  set_has_call_to_action();
  if (call_to_action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    call_to_action_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.call_to_action)
  return call_to_action_;
}
inline ::std::string* BidResponse_Ad_NativeAd::release_call_to_action() {
  clear_has_call_to_action();
  if (call_to_action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = call_to_action_;
    call_to_action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_NativeAd::set_allocated_call_to_action(::std::string* call_to_action) {
  if (call_to_action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete call_to_action_;
  }
  if (call_to_action) {
    set_has_call_to_action();
    call_to_action_ = call_to_action;
  } else {
    clear_has_call_to_action();
    call_to_action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.call_to_action)
}

// optional string advertiser = 4;
inline bool BidResponse_Ad_NativeAd::has_advertiser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_advertiser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_Ad_NativeAd::clear_has_advertiser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_Ad_NativeAd::clear_advertiser() {
  if (advertiser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertiser_->clear();
  }
  clear_has_advertiser();
}
inline const ::std::string& BidResponse_Ad_NativeAd::advertiser() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.advertiser)
  return *advertiser_;
}
inline void BidResponse_Ad_NativeAd::set_advertiser(const ::std::string& value) {
  set_has_advertiser();
  if (advertiser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertiser_ = new ::std::string;
  }
  advertiser_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.advertiser)
}
inline void BidResponse_Ad_NativeAd::set_advertiser(const char* value) {
  set_has_advertiser();
  if (advertiser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertiser_ = new ::std::string;
  }
  advertiser_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.NativeAd.advertiser)
}
inline void BidResponse_Ad_NativeAd::set_advertiser(const char* value, size_t size) {
  set_has_advertiser();
  if (advertiser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertiser_ = new ::std::string;
  }
  advertiser_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.NativeAd.advertiser)
}
inline ::std::string* BidResponse_Ad_NativeAd::mutable_advertiser() {
  set_has_advertiser();
  if (advertiser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    advertiser_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.advertiser)
  return advertiser_;
}
inline ::std::string* BidResponse_Ad_NativeAd::release_advertiser() {
  clear_has_advertiser();
  if (advertiser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = advertiser_;
    advertiser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_NativeAd::set_allocated_advertiser(::std::string* advertiser) {
  if (advertiser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete advertiser_;
  }
  if (advertiser) {
    set_has_advertiser();
    advertiser_ = advertiser;
  } else {
    clear_has_advertiser();
    advertiser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.advertiser)
}

// optional .BidResponse.Ad.NativeAd.Image image = 5;
inline bool BidResponse_Ad_NativeAd::has_image() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_image() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResponse_Ad_NativeAd::clear_has_image() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResponse_Ad_NativeAd::clear_image() {
  if (image_ != NULL) image_->::BidResponse_Ad_NativeAd_Image::Clear();
  clear_has_image();
}
inline const ::BidResponse_Ad_NativeAd_Image& BidResponse_Ad_NativeAd::image() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::BidResponse_Ad_NativeAd_Image;
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.image)
  return image_;
}
inline ::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::release_image() {
  clear_has_image();
  ::BidResponse_Ad_NativeAd_Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline void BidResponse_Ad_NativeAd::set_allocated_image(::BidResponse_Ad_NativeAd_Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.image)
}

// optional .BidResponse.Ad.NativeAd.Image logo = 6;
inline bool BidResponse_Ad_NativeAd::has_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidResponse_Ad_NativeAd::clear_has_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidResponse_Ad_NativeAd::clear_logo() {
  if (logo_ != NULL) logo_->::BidResponse_Ad_NativeAd_Image::Clear();
  clear_has_logo();
}
inline const ::BidResponse_Ad_NativeAd_Image& BidResponse_Ad_NativeAd::logo() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.logo)
  return logo_ != NULL ? *logo_ : *default_instance_->logo_;
}
inline ::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::mutable_logo() {
  set_has_logo();
  if (logo_ == NULL) logo_ = new ::BidResponse_Ad_NativeAd_Image;
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.logo)
  return logo_;
}
inline ::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::release_logo() {
  clear_has_logo();
  ::BidResponse_Ad_NativeAd_Image* temp = logo_;
  logo_ = NULL;
  return temp;
}
inline void BidResponse_Ad_NativeAd::set_allocated_logo(::BidResponse_Ad_NativeAd_Image* logo) {
  delete logo_;
  logo_ = logo;
  if (logo) {
    set_has_logo();
  } else {
    clear_has_logo();
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.logo)
}

// optional .BidResponse.Ad.NativeAd.Image app_icon = 7;
inline bool BidResponse_Ad_NativeAd::has_app_icon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_app_icon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidResponse_Ad_NativeAd::clear_has_app_icon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidResponse_Ad_NativeAd::clear_app_icon() {
  if (app_icon_ != NULL) app_icon_->::BidResponse_Ad_NativeAd_Image::Clear();
  clear_has_app_icon();
}
inline const ::BidResponse_Ad_NativeAd_Image& BidResponse_Ad_NativeAd::app_icon() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.app_icon)
  return app_icon_ != NULL ? *app_icon_ : *default_instance_->app_icon_;
}
inline ::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::mutable_app_icon() {
  set_has_app_icon();
  if (app_icon_ == NULL) app_icon_ = new ::BidResponse_Ad_NativeAd_Image;
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.app_icon)
  return app_icon_;
}
inline ::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::release_app_icon() {
  clear_has_app_icon();
  ::BidResponse_Ad_NativeAd_Image* temp = app_icon_;
  app_icon_ = NULL;
  return temp;
}
inline void BidResponse_Ad_NativeAd::set_allocated_app_icon(::BidResponse_Ad_NativeAd_Image* app_icon) {
  delete app_icon_;
  app_icon_ = app_icon;
  if (app_icon) {
    set_has_app_icon();
  } else {
    clear_has_app_icon();
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.app_icon)
}

// optional double star_rating = 8;
inline bool BidResponse_Ad_NativeAd::has_star_rating() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_star_rating() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidResponse_Ad_NativeAd::clear_has_star_rating() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidResponse_Ad_NativeAd::clear_star_rating() {
  star_rating_ = 0;
  clear_has_star_rating();
}
inline double BidResponse_Ad_NativeAd::star_rating() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.star_rating)
  return star_rating_;
}
inline void BidResponse_Ad_NativeAd::set_star_rating(double value) {
  set_has_star_rating();
  star_rating_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.star_rating)
}

// optional string click_tracking_url = 11;
inline bool BidResponse_Ad_NativeAd::has_click_tracking_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_click_tracking_url() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidResponse_Ad_NativeAd::clear_has_click_tracking_url() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidResponse_Ad_NativeAd::clear_click_tracking_url() {
  if (click_tracking_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_tracking_url_->clear();
  }
  clear_has_click_tracking_url();
}
inline const ::std::string& BidResponse_Ad_NativeAd::click_tracking_url() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.click_tracking_url)
  return *click_tracking_url_;
}
inline void BidResponse_Ad_NativeAd::set_click_tracking_url(const ::std::string& value) {
  set_has_click_tracking_url();
  if (click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_tracking_url_ = new ::std::string;
  }
  click_tracking_url_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.click_tracking_url)
}
inline void BidResponse_Ad_NativeAd::set_click_tracking_url(const char* value) {
  set_has_click_tracking_url();
  if (click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_tracking_url_ = new ::std::string;
  }
  click_tracking_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.NativeAd.click_tracking_url)
}
inline void BidResponse_Ad_NativeAd::set_click_tracking_url(const char* value, size_t size) {
  set_has_click_tracking_url();
  if (click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_tracking_url_ = new ::std::string;
  }
  click_tracking_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.NativeAd.click_tracking_url)
}
inline ::std::string* BidResponse_Ad_NativeAd::mutable_click_tracking_url() {
  set_has_click_tracking_url();
  if (click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_tracking_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.click_tracking_url)
  return click_tracking_url_;
}
inline ::std::string* BidResponse_Ad_NativeAd::release_click_tracking_url() {
  clear_has_click_tracking_url();
  if (click_tracking_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = click_tracking_url_;
    click_tracking_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_NativeAd::set_allocated_click_tracking_url(::std::string* click_tracking_url) {
  if (click_tracking_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete click_tracking_url_;
  }
  if (click_tracking_url) {
    set_has_click_tracking_url();
    click_tracking_url_ = click_tracking_url;
  } else {
    clear_has_click_tracking_url();
    click_tracking_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.click_tracking_url)
}

// optional string price = 10;
inline bool BidResponse_Ad_NativeAd::has_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidResponse_Ad_NativeAd::clear_has_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidResponse_Ad_NativeAd::clear_price() {
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_->clear();
  }
  clear_has_price();
}
inline const ::std::string& BidResponse_Ad_NativeAd::price() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.price)
  return *price_;
}
inline void BidResponse_Ad_NativeAd::set_price(const ::std::string& value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.price)
}
inline void BidResponse_Ad_NativeAd::set_price(const char* value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.NativeAd.price)
}
inline void BidResponse_Ad_NativeAd::set_price(const char* value, size_t size) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.NativeAd.price)
}
inline ::std::string* BidResponse_Ad_NativeAd::mutable_price() {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.price)
  return price_;
}
inline ::std::string* BidResponse_Ad_NativeAd::release_price() {
  clear_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = price_;
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_NativeAd::set_allocated_price(::std::string* price) {
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (price) {
    set_has_price();
    price_ = price;
  } else {
    clear_has_price();
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.price)
}

// optional string store = 12;
inline bool BidResponse_Ad_NativeAd::has_store() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidResponse_Ad_NativeAd::set_has_store() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidResponse_Ad_NativeAd::clear_has_store() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidResponse_Ad_NativeAd::clear_store() {
  if (store_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    store_->clear();
  }
  clear_has_store();
}
inline const ::std::string& BidResponse_Ad_NativeAd::store() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.store)
  return *store_;
}
inline void BidResponse_Ad_NativeAd::set_store(const ::std::string& value) {
  set_has_store();
  if (store_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    store_ = new ::std::string;
  }
  store_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.store)
}
inline void BidResponse_Ad_NativeAd::set_store(const char* value) {
  set_has_store();
  if (store_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    store_ = new ::std::string;
  }
  store_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.NativeAd.store)
}
inline void BidResponse_Ad_NativeAd::set_store(const char* value, size_t size) {
  set_has_store();
  if (store_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    store_ = new ::std::string;
  }
  store_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.NativeAd.store)
}
inline ::std::string* BidResponse_Ad_NativeAd::mutable_store() {
  set_has_store();
  if (store_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    store_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.store)
  return store_;
}
inline ::std::string* BidResponse_Ad_NativeAd::release_store() {
  clear_has_store();
  if (store_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = store_;
    store_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_NativeAd::set_allocated_store(::std::string* store) {
  if (store_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete store_;
  }
  if (store) {
    set_has_store();
    store_ = store;
  } else {
    clear_has_store();
    store_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.NativeAd.store)
}

// repeated string DEPRECATED_impression_tracking_url = 9;
inline int BidResponse_Ad_NativeAd::deprecated_impression_tracking_url_size() const {
  return deprecated_impression_tracking_url_.size();
}
inline void BidResponse_Ad_NativeAd::clear_deprecated_impression_tracking_url() {
  deprecated_impression_tracking_url_.Clear();
}
inline const ::std::string& BidResponse_Ad_NativeAd::deprecated_impression_tracking_url(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
  return deprecated_impression_tracking_url_.Get(index);
}
inline ::std::string* BidResponse_Ad_NativeAd::mutable_deprecated_impression_tracking_url(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
  return deprecated_impression_tracking_url_.Mutable(index);
}
inline void BidResponse_Ad_NativeAd::set_deprecated_impression_tracking_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
  deprecated_impression_tracking_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ad_NativeAd::set_deprecated_impression_tracking_url(int index, const char* value) {
  deprecated_impression_tracking_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
}
inline void BidResponse_Ad_NativeAd::set_deprecated_impression_tracking_url(int index, const char* value, size_t size) {
  deprecated_impression_tracking_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
}
inline ::std::string* BidResponse_Ad_NativeAd::add_deprecated_impression_tracking_url() {
  return deprecated_impression_tracking_url_.Add();
}
inline void BidResponse_Ad_NativeAd::add_deprecated_impression_tracking_url(const ::std::string& value) {
  deprecated_impression_tracking_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
}
inline void BidResponse_Ad_NativeAd::add_deprecated_impression_tracking_url(const char* value) {
  deprecated_impression_tracking_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
}
inline void BidResponse_Ad_NativeAd::add_deprecated_impression_tracking_url(const char* value, size_t size) {
  deprecated_impression_tracking_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ad_NativeAd::deprecated_impression_tracking_url() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
  return deprecated_impression_tracking_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ad_NativeAd::mutable_deprecated_impression_tracking_url() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.NativeAd.DEPRECATED_impression_tracking_url)
  return &deprecated_impression_tracking_url_;
}

// -------------------------------------------------------------------

// BidResponse_Ad_AdSlot

// required int32 id = 1;
inline bool BidResponse_Ad_AdSlot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_Ad_AdSlot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_Ad_AdSlot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_Ad_AdSlot::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BidResponse_Ad_AdSlot::id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.id)
  return id_;
}
inline void BidResponse_Ad_AdSlot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.id)
}

// required int64 max_cpm_micros = 2;
inline bool BidResponse_Ad_AdSlot::has_max_cpm_micros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_Ad_AdSlot::set_has_max_cpm_micros() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_Ad_AdSlot::clear_has_max_cpm_micros() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_Ad_AdSlot::clear_max_cpm_micros() {
  max_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_max_cpm_micros();
}
inline ::google::protobuf::int64 BidResponse_Ad_AdSlot::max_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.max_cpm_micros)
  return max_cpm_micros_;
}
inline void BidResponse_Ad_AdSlot::set_max_cpm_micros(::google::protobuf::int64 value) {
  set_has_max_cpm_micros();
  max_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.max_cpm_micros)
}

// optional int64 min_cpm_micros = 3;
inline bool BidResponse_Ad_AdSlot::has_min_cpm_micros() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_Ad_AdSlot::set_has_min_cpm_micros() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_Ad_AdSlot::clear_has_min_cpm_micros() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_Ad_AdSlot::clear_min_cpm_micros() {
  min_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_min_cpm_micros();
}
inline ::google::protobuf::int64 BidResponse_Ad_AdSlot::min_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.min_cpm_micros)
  return min_cpm_micros_;
}
inline void BidResponse_Ad_AdSlot::set_min_cpm_micros(::google::protobuf::int64 value) {
  set_has_min_cpm_micros();
  min_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.min_cpm_micros)
}

// optional int64 billing_id = 4;
inline bool BidResponse_Ad_AdSlot::has_billing_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_Ad_AdSlot::set_has_billing_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_Ad_AdSlot::clear_has_billing_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_Ad_AdSlot::clear_billing_id() {
  billing_id_ = GOOGLE_LONGLONG(0);
  clear_has_billing_id();
}
inline ::google::protobuf::int64 BidResponse_Ad_AdSlot::billing_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.billing_id)
  return billing_id_;
}
inline void BidResponse_Ad_AdSlot::set_billing_id(::google::protobuf::int64 value) {
  set_has_billing_id();
  billing_id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.billing_id)
}

// optional int64 deal_id = 5 [default = 0];
inline bool BidResponse_Ad_AdSlot::has_deal_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResponse_Ad_AdSlot::set_has_deal_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResponse_Ad_AdSlot::clear_has_deal_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResponse_Ad_AdSlot::clear_deal_id() {
  deal_id_ = GOOGLE_LONGLONG(0);
  clear_has_deal_id();
}
inline ::google::protobuf::int64 BidResponse_Ad_AdSlot::deal_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.deal_id)
  return deal_id_;
}
inline void BidResponse_Ad_AdSlot::set_deal_id(::google::protobuf::int64 value) {
  set_has_deal_id();
  deal_id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.deal_id)
}

// -------------------------------------------------------------------

// BidResponse_Ad_TemplateParameter

// optional string parameter_value = 1;
inline bool BidResponse_Ad_TemplateParameter::has_parameter_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_Ad_TemplateParameter::set_has_parameter_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_Ad_TemplateParameter::clear_has_parameter_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_Ad_TemplateParameter::clear_parameter_value() {
  if (parameter_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parameter_value_->clear();
  }
  clear_has_parameter_value();
}
inline const ::std::string& BidResponse_Ad_TemplateParameter::parameter_value() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.parameter_value)
  return *parameter_value_;
}
inline void BidResponse_Ad_TemplateParameter::set_parameter_value(const ::std::string& value) {
  set_has_parameter_value();
  if (parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parameter_value_ = new ::std::string;
  }
  parameter_value_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.parameter_value)
}
inline void BidResponse_Ad_TemplateParameter::set_parameter_value(const char* value) {
  set_has_parameter_value();
  if (parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parameter_value_ = new ::std::string;
  }
  parameter_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.TemplateParameter.parameter_value)
}
inline void BidResponse_Ad_TemplateParameter::set_parameter_value(const char* value, size_t size) {
  set_has_parameter_value();
  if (parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parameter_value_ = new ::std::string;
  }
  parameter_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.TemplateParameter.parameter_value)
}
inline ::std::string* BidResponse_Ad_TemplateParameter::mutable_parameter_value() {
  set_has_parameter_value();
  if (parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parameter_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.TemplateParameter.parameter_value)
  return parameter_value_;
}
inline ::std::string* BidResponse_Ad_TemplateParameter::release_parameter_value() {
  clear_has_parameter_value();
  if (parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parameter_value_;
    parameter_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_TemplateParameter::set_allocated_parameter_value(::std::string* parameter_value) {
  if (parameter_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parameter_value_;
  }
  if (parameter_value) {
    set_has_parameter_value();
    parameter_value_ = parameter_value;
  } else {
    clear_has_parameter_value();
    parameter_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.TemplateParameter.parameter_value)
}

// optional string blank_ad_parameter_value = 8;
inline bool BidResponse_Ad_TemplateParameter::has_blank_ad_parameter_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_Ad_TemplateParameter::set_has_blank_ad_parameter_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_Ad_TemplateParameter::clear_has_blank_ad_parameter_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_Ad_TemplateParameter::clear_blank_ad_parameter_value() {
  if (blank_ad_parameter_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blank_ad_parameter_value_->clear();
  }
  clear_has_blank_ad_parameter_value();
}
inline const ::std::string& BidResponse_Ad_TemplateParameter::blank_ad_parameter_value() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
  return *blank_ad_parameter_value_;
}
inline void BidResponse_Ad_TemplateParameter::set_blank_ad_parameter_value(const ::std::string& value) {
  set_has_blank_ad_parameter_value();
  if (blank_ad_parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blank_ad_parameter_value_ = new ::std::string;
  }
  blank_ad_parameter_value_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
}
inline void BidResponse_Ad_TemplateParameter::set_blank_ad_parameter_value(const char* value) {
  set_has_blank_ad_parameter_value();
  if (blank_ad_parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blank_ad_parameter_value_ = new ::std::string;
  }
  blank_ad_parameter_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
}
inline void BidResponse_Ad_TemplateParameter::set_blank_ad_parameter_value(const char* value, size_t size) {
  set_has_blank_ad_parameter_value();
  if (blank_ad_parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blank_ad_parameter_value_ = new ::std::string;
  }
  blank_ad_parameter_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
}
inline ::std::string* BidResponse_Ad_TemplateParameter::mutable_blank_ad_parameter_value() {
  set_has_blank_ad_parameter_value();
  if (blank_ad_parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blank_ad_parameter_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
  return blank_ad_parameter_value_;
}
inline ::std::string* BidResponse_Ad_TemplateParameter::release_blank_ad_parameter_value() {
  clear_has_blank_ad_parameter_value();
  if (blank_ad_parameter_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blank_ad_parameter_value_;
    blank_ad_parameter_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_TemplateParameter::set_allocated_blank_ad_parameter_value(::std::string* blank_ad_parameter_value) {
  if (blank_ad_parameter_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blank_ad_parameter_value_;
  }
  if (blank_ad_parameter_value) {
    set_has_blank_ad_parameter_value();
    blank_ad_parameter_value_ = blank_ad_parameter_value;
  } else {
    clear_has_blank_ad_parameter_value();
    blank_ad_parameter_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
}

// optional string buyer_creative_id = 2;
inline bool BidResponse_Ad_TemplateParameter::has_buyer_creative_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_Ad_TemplateParameter::set_has_buyer_creative_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_Ad_TemplateParameter::clear_has_buyer_creative_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_Ad_TemplateParameter::clear_buyer_creative_id() {
  if (buyer_creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_->clear();
  }
  clear_has_buyer_creative_id();
}
inline const ::std::string& BidResponse_Ad_TemplateParameter::buyer_creative_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.buyer_creative_id)
  return *buyer_creative_id_;
}
inline void BidResponse_Ad_TemplateParameter::set_buyer_creative_id(const ::std::string& value) {
  set_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_ = new ::std::string;
  }
  buyer_creative_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.buyer_creative_id)
}
inline void BidResponse_Ad_TemplateParameter::set_buyer_creative_id(const char* value) {
  set_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_ = new ::std::string;
  }
  buyer_creative_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.TemplateParameter.buyer_creative_id)
}
inline void BidResponse_Ad_TemplateParameter::set_buyer_creative_id(const char* value, size_t size) {
  set_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_ = new ::std::string;
  }
  buyer_creative_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.TemplateParameter.buyer_creative_id)
}
inline ::std::string* BidResponse_Ad_TemplateParameter::mutable_buyer_creative_id() {
  set_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.TemplateParameter.buyer_creative_id)
  return buyer_creative_id_;
}
inline ::std::string* BidResponse_Ad_TemplateParameter::release_buyer_creative_id() {
  clear_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buyer_creative_id_;
    buyer_creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_TemplateParameter::set_allocated_buyer_creative_id(::std::string* buyer_creative_id) {
  if (buyer_creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyer_creative_id_;
  }
  if (buyer_creative_id) {
    set_has_buyer_creative_id();
    buyer_creative_id_ = buyer_creative_id;
  } else {
    clear_has_buyer_creative_id();
    buyer_creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.TemplateParameter.buyer_creative_id)
}

// optional string click_through_url = 3;
inline bool BidResponse_Ad_TemplateParameter::has_click_through_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_Ad_TemplateParameter::set_has_click_through_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_Ad_TemplateParameter::clear_has_click_through_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_Ad_TemplateParameter::clear_click_through_url() {
  if (click_through_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_through_url_->clear();
  }
  clear_has_click_through_url();
}
inline const ::std::string& BidResponse_Ad_TemplateParameter::click_through_url() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.click_through_url)
  return *click_through_url_;
}
inline void BidResponse_Ad_TemplateParameter::set_click_through_url(const ::std::string& value) {
  set_has_click_through_url();
  if (click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_through_url_ = new ::std::string;
  }
  click_through_url_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.click_through_url)
}
inline void BidResponse_Ad_TemplateParameter::set_click_through_url(const char* value) {
  set_has_click_through_url();
  if (click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_through_url_ = new ::std::string;
  }
  click_through_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.TemplateParameter.click_through_url)
}
inline void BidResponse_Ad_TemplateParameter::set_click_through_url(const char* value, size_t size) {
  set_has_click_through_url();
  if (click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_through_url_ = new ::std::string;
  }
  click_through_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.TemplateParameter.click_through_url)
}
inline ::std::string* BidResponse_Ad_TemplateParameter::mutable_click_through_url() {
  set_has_click_through_url();
  if (click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    click_through_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.TemplateParameter.click_through_url)
  return click_through_url_;
}
inline ::std::string* BidResponse_Ad_TemplateParameter::release_click_through_url() {
  clear_has_click_through_url();
  if (click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = click_through_url_;
    click_through_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad_TemplateParameter::set_allocated_click_through_url(::std::string* click_through_url) {
  if (click_through_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete click_through_url_;
  }
  if (click_through_url) {
    set_has_click_through_url();
    click_through_url_ = click_through_url;
  } else {
    clear_has_click_through_url();
    click_through_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.TemplateParameter.click_through_url)
}

// optional int32 left = 4;
inline bool BidResponse_Ad_TemplateParameter::has_left() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResponse_Ad_TemplateParameter::set_has_left() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResponse_Ad_TemplateParameter::clear_has_left() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResponse_Ad_TemplateParameter::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::left() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.left)
  return left_;
}
inline void BidResponse_Ad_TemplateParameter::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.left)
}

// optional int32 right = 5;
inline bool BidResponse_Ad_TemplateParameter::has_right() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidResponse_Ad_TemplateParameter::set_has_right() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidResponse_Ad_TemplateParameter::clear_has_right() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidResponse_Ad_TemplateParameter::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::right() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.right)
  return right_;
}
inline void BidResponse_Ad_TemplateParameter::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.right)
}

// optional int32 top = 6;
inline bool BidResponse_Ad_TemplateParameter::has_top() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidResponse_Ad_TemplateParameter::set_has_top() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidResponse_Ad_TemplateParameter::clear_has_top() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidResponse_Ad_TemplateParameter::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::top() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.top)
  return top_;
}
inline void BidResponse_Ad_TemplateParameter::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.top)
}

// optional int32 bottom = 7;
inline bool BidResponse_Ad_TemplateParameter::has_bottom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidResponse_Ad_TemplateParameter::set_has_bottom() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidResponse_Ad_TemplateParameter::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidResponse_Ad_TemplateParameter::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::bottom() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.bottom)
  return bottom_;
}
inline void BidResponse_Ad_TemplateParameter::set_bottom(::google::protobuf::int32 value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.bottom)
}

// optional int32 backup_index = 9;
inline bool BidResponse_Ad_TemplateParameter::has_backup_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidResponse_Ad_TemplateParameter::set_has_backup_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidResponse_Ad_TemplateParameter::clear_has_backup_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidResponse_Ad_TemplateParameter::clear_backup_index() {
  backup_index_ = 0;
  clear_has_backup_index();
}
inline ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::backup_index() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.backup_index)
  return backup_index_;
}
inline void BidResponse_Ad_TemplateParameter::set_backup_index(::google::protobuf::int32 value) {
  set_has_backup_index();
  backup_index_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.backup_index)
}

// -------------------------------------------------------------------

// BidResponse_Ad

// optional string buyer_creative_id = 10;
inline bool BidResponse_Ad::has_buyer_creative_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_Ad::set_has_buyer_creative_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_Ad::clear_has_buyer_creative_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_Ad::clear_buyer_creative_id() {
  if (buyer_creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_->clear();
  }
  clear_has_buyer_creative_id();
}
inline const ::std::string& BidResponse_Ad::buyer_creative_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.buyer_creative_id)
  return *buyer_creative_id_;
}
inline void BidResponse_Ad::set_buyer_creative_id(const ::std::string& value) {
  set_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_ = new ::std::string;
  }
  buyer_creative_id_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.buyer_creative_id)
}
inline void BidResponse_Ad::set_buyer_creative_id(const char* value) {
  set_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_ = new ::std::string;
  }
  buyer_creative_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.buyer_creative_id)
}
inline void BidResponse_Ad::set_buyer_creative_id(const char* value, size_t size) {
  set_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_ = new ::std::string;
  }
  buyer_creative_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.buyer_creative_id)
}
inline ::std::string* BidResponse_Ad::mutable_buyer_creative_id() {
  set_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyer_creative_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.buyer_creative_id)
  return buyer_creative_id_;
}
inline ::std::string* BidResponse_Ad::release_buyer_creative_id() {
  clear_has_buyer_creative_id();
  if (buyer_creative_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buyer_creative_id_;
    buyer_creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad::set_allocated_buyer_creative_id(::std::string* buyer_creative_id) {
  if (buyer_creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyer_creative_id_;
  }
  if (buyer_creative_id) {
    set_has_buyer_creative_id();
    buyer_creative_id_ = buyer_creative_id;
  } else {
    clear_has_buyer_creative_id();
    buyer_creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.buyer_creative_id)
}

// optional string html_snippet = 1;
inline bool BidResponse_Ad::has_html_snippet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_Ad::set_has_html_snippet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_Ad::clear_has_html_snippet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_Ad::clear_html_snippet() {
  if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_->clear();
  }
  clear_has_html_snippet();
}
inline const ::std::string& BidResponse_Ad::html_snippet() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.html_snippet)
  return *html_snippet_;
}
inline void BidResponse_Ad::set_html_snippet(const ::std::string& value) {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_ = new ::std::string;
  }
  html_snippet_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.html_snippet)
}
inline void BidResponse_Ad::set_html_snippet(const char* value) {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_ = new ::std::string;
  }
  html_snippet_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.html_snippet)
}
inline void BidResponse_Ad::set_html_snippet(const char* value, size_t size) {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_ = new ::std::string;
  }
  html_snippet_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.html_snippet)
}
inline ::std::string* BidResponse_Ad::mutable_html_snippet() {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    html_snippet_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.html_snippet)
  return html_snippet_;
}
inline ::std::string* BidResponse_Ad::release_html_snippet() {
  clear_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = html_snippet_;
    html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad::set_allocated_html_snippet(::std::string* html_snippet) {
  if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete html_snippet_;
  }
  if (html_snippet) {
    set_has_html_snippet();
    html_snippet_ = html_snippet;
  } else {
    clear_has_html_snippet();
    html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.html_snippet)
}

// optional string video_url = 9;
inline bool BidResponse_Ad::has_video_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_Ad::set_has_video_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_Ad::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_Ad::clear_video_url() {
  if (video_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_->clear();
  }
  clear_has_video_url();
}
inline const ::std::string& BidResponse_Ad::video_url() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.video_url)
  return *video_url_;
}
inline void BidResponse_Ad::set_video_url(const ::std::string& value) {
  set_has_video_url();
  if (video_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_ = new ::std::string;
  }
  video_url_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.video_url)
}
inline void BidResponse_Ad::set_video_url(const char* value) {
  set_has_video_url();
  if (video_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_ = new ::std::string;
  }
  video_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.video_url)
}
inline void BidResponse_Ad::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  if (video_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_ = new ::std::string;
  }
  video_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.video_url)
}
inline ::std::string* BidResponse_Ad::mutable_video_url() {
  set_has_video_url();
  if (video_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.video_url)
  return video_url_;
}
inline ::std::string* BidResponse_Ad::release_video_url() {
  clear_has_video_url();
  if (video_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = video_url_;
    video_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad::set_allocated_video_url(::std::string* video_url) {
  if (video_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_url_;
  }
  if (video_url) {
    set_has_video_url();
    video_url_ = video_url;
  } else {
    clear_has_video_url();
    video_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.video_url)
}

// optional .BidResponse.Ad.NativeAd native_ad = 18;
inline bool BidResponse_Ad::has_native_ad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_Ad::set_has_native_ad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_Ad::clear_has_native_ad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_Ad::clear_native_ad() {
  if (native_ad_ != NULL) native_ad_->::BidResponse_Ad_NativeAd::Clear();
  clear_has_native_ad();
}
inline const ::BidResponse_Ad_NativeAd& BidResponse_Ad::native_ad() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.native_ad)
  return native_ad_ != NULL ? *native_ad_ : *default_instance_->native_ad_;
}
inline ::BidResponse_Ad_NativeAd* BidResponse_Ad::mutable_native_ad() {
  set_has_native_ad();
  if (native_ad_ == NULL) native_ad_ = new ::BidResponse_Ad_NativeAd;
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.native_ad)
  return native_ad_;
}
inline ::BidResponse_Ad_NativeAd* BidResponse_Ad::release_native_ad() {
  clear_has_native_ad();
  ::BidResponse_Ad_NativeAd* temp = native_ad_;
  native_ad_ = NULL;
  return temp;
}
inline void BidResponse_Ad::set_allocated_native_ad(::BidResponse_Ad_NativeAd* native_ad) {
  delete native_ad_;
  native_ad_ = native_ad;
  if (native_ad) {
    set_has_native_ad();
  } else {
    clear_has_native_ad();
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.native_ad)
}

// repeated string click_through_url = 4;
inline int BidResponse_Ad::click_through_url_size() const {
  return click_through_url_.size();
}
inline void BidResponse_Ad::clear_click_through_url() {
  click_through_url_.Clear();
}
inline const ::std::string& BidResponse_Ad::click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.click_through_url)
  return click_through_url_.Get(index);
}
inline ::std::string* BidResponse_Ad::mutable_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.click_through_url)
  return click_through_url_.Mutable(index);
}
inline void BidResponse_Ad::set_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidResponse.Ad.click_through_url)
  click_through_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ad::set_click_through_url(int index, const char* value) {
  click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.click_through_url)
}
inline void BidResponse_Ad::set_click_through_url(int index, const char* value, size_t size) {
  click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.click_through_url)
}
inline ::std::string* BidResponse_Ad::add_click_through_url() {
  return click_through_url_.Add();
}
inline void BidResponse_Ad::add_click_through_url(const ::std::string& value) {
  click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.click_through_url)
}
inline void BidResponse_Ad::add_click_through_url(const char* value) {
  click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidResponse.Ad.click_through_url)
}
inline void BidResponse_Ad::add_click_through_url(const char* value, size_t size) {
  click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidResponse.Ad.click_through_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ad::click_through_url() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.click_through_url)
  return click_through_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ad::mutable_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.click_through_url)
  return &click_through_url_;
}

// repeated int32 vendor_type = 5;
inline int BidResponse_Ad::vendor_type_size() const {
  return vendor_type_.size();
}
inline void BidResponse_Ad::clear_vendor_type() {
  vendor_type_.Clear();
}
inline ::google::protobuf::int32 BidResponse_Ad::vendor_type(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.vendor_type)
  return vendor_type_.Get(index);
}
inline void BidResponse_Ad::set_vendor_type(int index, ::google::protobuf::int32 value) {
  vendor_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.vendor_type)
}
inline void BidResponse_Ad::add_vendor_type(::google::protobuf::int32 value) {
  vendor_type_.Add(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.vendor_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ad::vendor_type() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.vendor_type)
  return vendor_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ad::mutable_vendor_type() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.vendor_type)
  return &vendor_type_;
}

// repeated int32 attribute = 6;
inline int BidResponse_Ad::attribute_size() const {
  return attribute_.size();
}
inline void BidResponse_Ad::clear_attribute() {
  attribute_.Clear();
}
inline ::google::protobuf::int32 BidResponse_Ad::attribute(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.attribute)
  return attribute_.Get(index);
}
inline void BidResponse_Ad::set_attribute(int index, ::google::protobuf::int32 value) {
  attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.attribute)
}
inline void BidResponse_Ad::add_attribute(::google::protobuf::int32 value) {
  attribute_.Add(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.attribute)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ad::attribute() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ad::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.attribute)
  return &attribute_;
}

// repeated int32 category = 7;
inline int BidResponse_Ad::category_size() const {
  return category_.size();
}
inline void BidResponse_Ad::clear_category() {
  category_.Clear();
}
inline ::google::protobuf::int32 BidResponse_Ad::category(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.category)
  return category_.Get(index);
}
inline void BidResponse_Ad::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.category)
}
inline void BidResponse_Ad::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ad::category() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.category)
  return category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ad::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.category)
  return &category_;
}

// repeated int32 restricted_category = 17;
inline int BidResponse_Ad::restricted_category_size() const {
  return restricted_category_.size();
}
inline void BidResponse_Ad::clear_restricted_category() {
  restricted_category_.Clear();
}
inline ::google::protobuf::int32 BidResponse_Ad::restricted_category(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.restricted_category)
  return restricted_category_.Get(index);
}
inline void BidResponse_Ad::set_restricted_category(int index, ::google::protobuf::int32 value) {
  restricted_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.restricted_category)
}
inline void BidResponse_Ad::add_restricted_category(::google::protobuf::int32 value) {
  restricted_category_.Add(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.restricted_category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ad::restricted_category() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.restricted_category)
  return restricted_category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ad::mutable_restricted_category() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.restricted_category)
  return &restricted_category_;
}

// repeated string advertiser_name = 11;
inline int BidResponse_Ad::advertiser_name_size() const {
  return advertiser_name_.size();
}
inline void BidResponse_Ad::clear_advertiser_name() {
  advertiser_name_.Clear();
}
inline const ::std::string& BidResponse_Ad::advertiser_name(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.advertiser_name)
  return advertiser_name_.Get(index);
}
inline ::std::string* BidResponse_Ad::mutable_advertiser_name(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.advertiser_name)
  return advertiser_name_.Mutable(index);
}
inline void BidResponse_Ad::set_advertiser_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidResponse.Ad.advertiser_name)
  advertiser_name_.Mutable(index)->assign(value);
}
inline void BidResponse_Ad::set_advertiser_name(int index, const char* value) {
  advertiser_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.advertiser_name)
}
inline void BidResponse_Ad::set_advertiser_name(int index, const char* value, size_t size) {
  advertiser_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.advertiser_name)
}
inline ::std::string* BidResponse_Ad::add_advertiser_name() {
  return advertiser_name_.Add();
}
inline void BidResponse_Ad::add_advertiser_name(const ::std::string& value) {
  advertiser_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.advertiser_name)
}
inline void BidResponse_Ad::add_advertiser_name(const char* value) {
  advertiser_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidResponse.Ad.advertiser_name)
}
inline void BidResponse_Ad::add_advertiser_name(const char* value, size_t size) {
  advertiser_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidResponse.Ad.advertiser_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ad::advertiser_name() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.advertiser_name)
  return advertiser_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ad::mutable_advertiser_name() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.advertiser_name)
  return &advertiser_name_;
}

// optional string bidder_name = 22;
inline bool BidResponse_Ad::has_bidder_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidResponse_Ad::set_has_bidder_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidResponse_Ad::clear_has_bidder_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidResponse_Ad::clear_bidder_name() {
  if (bidder_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidder_name_->clear();
  }
  clear_has_bidder_name();
}
inline const ::std::string& BidResponse_Ad::bidder_name() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.bidder_name)
  return *bidder_name_;
}
inline void BidResponse_Ad::set_bidder_name(const ::std::string& value) {
  set_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidder_name_ = new ::std::string;
  }
  bidder_name_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.bidder_name)
}
inline void BidResponse_Ad::set_bidder_name(const char* value) {
  set_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidder_name_ = new ::std::string;
  }
  bidder_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.bidder_name)
}
inline void BidResponse_Ad::set_bidder_name(const char* value, size_t size) {
  set_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidder_name_ = new ::std::string;
  }
  bidder_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.bidder_name)
}
inline ::std::string* BidResponse_Ad::mutable_bidder_name() {
  set_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bidder_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.bidder_name)
  return bidder_name_;
}
inline ::std::string* BidResponse_Ad::release_bidder_name() {
  clear_has_bidder_name();
  if (bidder_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bidder_name_;
    bidder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad::set_allocated_bidder_name(::std::string* bidder_name) {
  if (bidder_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidder_name_;
  }
  if (bidder_name) {
    set_has_bidder_name();
    bidder_name_ = bidder_name;
  } else {
    clear_has_bidder_name();
    bidder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.bidder_name)
}

// optional int32 width = 14;
inline bool BidResponse_Ad::has_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidResponse_Ad::set_has_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidResponse_Ad::clear_has_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidResponse_Ad::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BidResponse_Ad::width() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.width)
  return width_;
}
inline void BidResponse_Ad::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.width)
}

// optional int32 height = 15;
inline bool BidResponse_Ad::has_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidResponse_Ad::set_has_height() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidResponse_Ad::clear_has_height() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidResponse_Ad::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BidResponse_Ad::height() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.height)
  return height_;
}
inline void BidResponse_Ad::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.height)
}

// optional int64 agency_id = 16;
inline bool BidResponse_Ad::has_agency_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidResponse_Ad::set_has_agency_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidResponse_Ad::clear_has_agency_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidResponse_Ad::clear_agency_id() {
  agency_id_ = GOOGLE_LONGLONG(0);
  clear_has_agency_id();
}
inline ::google::protobuf::int64 BidResponse_Ad::agency_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.agency_id)
  return agency_id_;
}
inline void BidResponse_Ad::set_agency_id(::google::protobuf::int64 value) {
  set_has_agency_id();
  agency_id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.agency_id)
}

// repeated .BidResponse.Ad.AdSlot adslot = 3;
inline int BidResponse_Ad::adslot_size() const {
  return adslot_.size();
}
inline void BidResponse_Ad::clear_adslot() {
  adslot_.Clear();
}
inline const ::BidResponse_Ad_AdSlot& BidResponse_Ad::adslot(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.adslot)
  return adslot_.Get(index);
}
inline ::BidResponse_Ad_AdSlot* BidResponse_Ad::mutable_adslot(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.adslot)
  return adslot_.Mutable(index);
}
inline ::BidResponse_Ad_AdSlot* BidResponse_Ad::add_adslot() {
  // @@protoc_insertion_point(field_add:BidResponse.Ad.adslot)
  return adslot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_AdSlot >&
BidResponse_Ad::adslot() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.adslot)
  return adslot_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_AdSlot >*
BidResponse_Ad::mutable_adslot() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.adslot)
  return &adslot_;
}

// repeated string impression_tracking_url = 19;
inline int BidResponse_Ad::impression_tracking_url_size() const {
  return impression_tracking_url_.size();
}
inline void BidResponse_Ad::clear_impression_tracking_url() {
  impression_tracking_url_.Clear();
}
inline const ::std::string& BidResponse_Ad::impression_tracking_url(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.impression_tracking_url)
  return impression_tracking_url_.Get(index);
}
inline ::std::string* BidResponse_Ad::mutable_impression_tracking_url(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.impression_tracking_url)
  return impression_tracking_url_.Mutable(index);
}
inline void BidResponse_Ad::set_impression_tracking_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidResponse.Ad.impression_tracking_url)
  impression_tracking_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ad::set_impression_tracking_url(int index, const char* value) {
  impression_tracking_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.impression_tracking_url)
}
inline void BidResponse_Ad::set_impression_tracking_url(int index, const char* value, size_t size) {
  impression_tracking_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.impression_tracking_url)
}
inline ::std::string* BidResponse_Ad::add_impression_tracking_url() {
  return impression_tracking_url_.Add();
}
inline void BidResponse_Ad::add_impression_tracking_url(const ::std::string& value) {
  impression_tracking_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.impression_tracking_url)
}
inline void BidResponse_Ad::add_impression_tracking_url(const char* value) {
  impression_tracking_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidResponse.Ad.impression_tracking_url)
}
inline void BidResponse_Ad::add_impression_tracking_url(const char* value, size_t size) {
  impression_tracking_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidResponse.Ad.impression_tracking_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ad::impression_tracking_url() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.impression_tracking_url)
  return impression_tracking_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ad::mutable_impression_tracking_url() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.impression_tracking_url)
  return &impression_tracking_url_;
}

// optional string ad_choices_destination_url = 21;
inline bool BidResponse_Ad::has_ad_choices_destination_url() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidResponse_Ad::set_has_ad_choices_destination_url() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidResponse_Ad::clear_has_ad_choices_destination_url() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidResponse_Ad::clear_ad_choices_destination_url() {
  if (ad_choices_destination_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ad_choices_destination_url_->clear();
  }
  clear_has_ad_choices_destination_url();
}
inline const ::std::string& BidResponse_Ad::ad_choices_destination_url() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.ad_choices_destination_url)
  return *ad_choices_destination_url_;
}
inline void BidResponse_Ad::set_ad_choices_destination_url(const ::std::string& value) {
  set_has_ad_choices_destination_url();
  if (ad_choices_destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ad_choices_destination_url_ = new ::std::string;
  }
  ad_choices_destination_url_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.ad_choices_destination_url)
}
inline void BidResponse_Ad::set_ad_choices_destination_url(const char* value) {
  set_has_ad_choices_destination_url();
  if (ad_choices_destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ad_choices_destination_url_ = new ::std::string;
  }
  ad_choices_destination_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.ad_choices_destination_url)
}
inline void BidResponse_Ad::set_ad_choices_destination_url(const char* value, size_t size) {
  set_has_ad_choices_destination_url();
  if (ad_choices_destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ad_choices_destination_url_ = new ::std::string;
  }
  ad_choices_destination_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.ad_choices_destination_url)
}
inline ::std::string* BidResponse_Ad::mutable_ad_choices_destination_url() {
  set_has_ad_choices_destination_url();
  if (ad_choices_destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ad_choices_destination_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.ad_choices_destination_url)
  return ad_choices_destination_url_;
}
inline ::std::string* BidResponse_Ad::release_ad_choices_destination_url() {
  clear_has_ad_choices_destination_url();
  if (ad_choices_destination_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ad_choices_destination_url_;
    ad_choices_destination_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad::set_allocated_ad_choices_destination_url(::std::string* ad_choices_destination_url) {
  if (ad_choices_destination_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ad_choices_destination_url_;
  }
  if (ad_choices_destination_url) {
    set_has_ad_choices_destination_url();
    ad_choices_destination_url_ = ad_choices_destination_url;
  } else {
    clear_has_ad_choices_destination_url();
    ad_choices_destination_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.ad_choices_destination_url)
}

// optional int64 DEPRECATED_creative_id = 8;
inline bool BidResponse_Ad::has_deprecated_creative_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidResponse_Ad::set_has_deprecated_creative_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidResponse_Ad::clear_has_deprecated_creative_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidResponse_Ad::clear_deprecated_creative_id() {
  deprecated_creative_id_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_creative_id();
}
inline ::google::protobuf::int64 BidResponse_Ad::deprecated_creative_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.DEPRECATED_creative_id)
  return deprecated_creative_id_;
}
inline void BidResponse_Ad::set_deprecated_creative_id(::google::protobuf::int64 value) {
  set_has_deprecated_creative_id();
  deprecated_creative_id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.DEPRECATED_creative_id)
}

// optional string DEPRECATED_click_through_url = 2;
inline bool BidResponse_Ad::has_deprecated_click_through_url() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BidResponse_Ad::set_has_deprecated_click_through_url() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BidResponse_Ad::clear_has_deprecated_click_through_url() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BidResponse_Ad::clear_deprecated_click_through_url() {
  if (deprecated_click_through_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_through_url_->clear();
  }
  clear_has_deprecated_click_through_url();
}
inline const ::std::string& BidResponse_Ad::deprecated_click_through_url() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.DEPRECATED_click_through_url)
  return *deprecated_click_through_url_;
}
inline void BidResponse_Ad::set_deprecated_click_through_url(const ::std::string& value) {
  set_has_deprecated_click_through_url();
  if (deprecated_click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_through_url_ = new ::std::string;
  }
  deprecated_click_through_url_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.DEPRECATED_click_through_url)
}
inline void BidResponse_Ad::set_deprecated_click_through_url(const char* value) {
  set_has_deprecated_click_through_url();
  if (deprecated_click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_through_url_ = new ::std::string;
  }
  deprecated_click_through_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.DEPRECATED_click_through_url)
}
inline void BidResponse_Ad::set_deprecated_click_through_url(const char* value, size_t size) {
  set_has_deprecated_click_through_url();
  if (deprecated_click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_through_url_ = new ::std::string;
  }
  deprecated_click_through_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.DEPRECATED_click_through_url)
}
inline ::std::string* BidResponse_Ad::mutable_deprecated_click_through_url() {
  set_has_deprecated_click_through_url();
  if (deprecated_click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_click_through_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.DEPRECATED_click_through_url)
  return deprecated_click_through_url_;
}
inline ::std::string* BidResponse_Ad::release_deprecated_click_through_url() {
  clear_has_deprecated_click_through_url();
  if (deprecated_click_through_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_click_through_url_;
    deprecated_click_through_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad::set_allocated_deprecated_click_through_url(::std::string* deprecated_click_through_url) {
  if (deprecated_click_through_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_click_through_url_;
  }
  if (deprecated_click_through_url) {
    set_has_deprecated_click_through_url();
    deprecated_click_through_url_ = deprecated_click_through_url;
  } else {
    clear_has_deprecated_click_through_url();
    deprecated_click_through_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.DEPRECATED_click_through_url)
}

// optional string DEPRECATED_snippet_template = 12;
inline bool BidResponse_Ad::has_deprecated_snippet_template() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidResponse_Ad::set_has_deprecated_snippet_template() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidResponse_Ad::clear_has_deprecated_snippet_template() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidResponse_Ad::clear_deprecated_snippet_template() {
  if (deprecated_snippet_template_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_snippet_template_->clear();
  }
  clear_has_deprecated_snippet_template();
}
inline const ::std::string& BidResponse_Ad::deprecated_snippet_template() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.DEPRECATED_snippet_template)
  return *deprecated_snippet_template_;
}
inline void BidResponse_Ad::set_deprecated_snippet_template(const ::std::string& value) {
  set_has_deprecated_snippet_template();
  if (deprecated_snippet_template_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_snippet_template_ = new ::std::string;
  }
  deprecated_snippet_template_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.DEPRECATED_snippet_template)
}
inline void BidResponse_Ad::set_deprecated_snippet_template(const char* value) {
  set_has_deprecated_snippet_template();
  if (deprecated_snippet_template_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_snippet_template_ = new ::std::string;
  }
  deprecated_snippet_template_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.DEPRECATED_snippet_template)
}
inline void BidResponse_Ad::set_deprecated_snippet_template(const char* value, size_t size) {
  set_has_deprecated_snippet_template();
  if (deprecated_snippet_template_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_snippet_template_ = new ::std::string;
  }
  deprecated_snippet_template_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.DEPRECATED_snippet_template)
}
inline ::std::string* BidResponse_Ad::mutable_deprecated_snippet_template() {
  set_has_deprecated_snippet_template();
  if (deprecated_snippet_template_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deprecated_snippet_template_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.DEPRECATED_snippet_template)
  return deprecated_snippet_template_;
}
inline ::std::string* BidResponse_Ad::release_deprecated_snippet_template() {
  clear_has_deprecated_snippet_template();
  if (deprecated_snippet_template_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_snippet_template_;
    deprecated_snippet_template_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse_Ad::set_allocated_deprecated_snippet_template(::std::string* deprecated_snippet_template) {
  if (deprecated_snippet_template_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deprecated_snippet_template_;
  }
  if (deprecated_snippet_template) {
    set_has_deprecated_snippet_template();
    deprecated_snippet_template_ = deprecated_snippet_template;
  } else {
    clear_has_deprecated_snippet_template();
    deprecated_snippet_template_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.DEPRECATED_snippet_template)
}

// repeated .BidResponse.Ad.TemplateParameter DEPRECATED_template_parameter = 13;
inline int BidResponse_Ad::deprecated_template_parameter_size() const {
  return deprecated_template_parameter_.size();
}
inline void BidResponse_Ad::clear_deprecated_template_parameter() {
  deprecated_template_parameter_.Clear();
}
inline const ::BidResponse_Ad_TemplateParameter& BidResponse_Ad::deprecated_template_parameter(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.DEPRECATED_template_parameter)
  return deprecated_template_parameter_.Get(index);
}
inline ::BidResponse_Ad_TemplateParameter* BidResponse_Ad::mutable_deprecated_template_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.DEPRECATED_template_parameter)
  return deprecated_template_parameter_.Mutable(index);
}
inline ::BidResponse_Ad_TemplateParameter* BidResponse_Ad::add_deprecated_template_parameter() {
  // @@protoc_insertion_point(field_add:BidResponse.Ad.DEPRECATED_template_parameter)
  return deprecated_template_parameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_TemplateParameter >&
BidResponse_Ad::deprecated_template_parameter() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.DEPRECATED_template_parameter)
  return deprecated_template_parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_TemplateParameter >*
BidResponse_Ad::mutable_deprecated_template_parameter() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.DEPRECATED_template_parameter)
  return &deprecated_template_parameter_;
}

// -------------------------------------------------------------------

// BidResponse

// repeated .BidResponse.Ad ad = 2;
inline int BidResponse::ad_size() const {
  return ad_.size();
}
inline void BidResponse::clear_ad() {
  ad_.Clear();
}
inline const ::BidResponse_Ad& BidResponse::ad(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.ad)
  return ad_.Get(index);
}
inline ::BidResponse_Ad* BidResponse::mutable_ad(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.ad)
  return ad_.Mutable(index);
}
inline ::BidResponse_Ad* BidResponse::add_ad() {
  // @@protoc_insertion_point(field_add:BidResponse.ad)
  return ad_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad >&
BidResponse::ad() const {
  // @@protoc_insertion_point(field_list:BidResponse.ad)
  return ad_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad >*
BidResponse::mutable_ad() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.ad)
  return &ad_;
}

// optional string debug_string = 5;
inline bool BidResponse::has_debug_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse::set_has_debug_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse::clear_has_debug_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse::clear_debug_string() {
  if (debug_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_string_->clear();
  }
  clear_has_debug_string();
}
inline const ::std::string& BidResponse::debug_string() const {
  // @@protoc_insertion_point(field_get:BidResponse.debug_string)
  return *debug_string_;
}
inline void BidResponse::set_debug_string(const ::std::string& value) {
  set_has_debug_string();
  if (debug_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_string_ = new ::std::string;
  }
  debug_string_->assign(value);
  // @@protoc_insertion_point(field_set:BidResponse.debug_string)
}
inline void BidResponse::set_debug_string(const char* value) {
  set_has_debug_string();
  if (debug_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_string_ = new ::std::string;
  }
  debug_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.debug_string)
}
inline void BidResponse::set_debug_string(const char* value, size_t size) {
  set_has_debug_string();
  if (debug_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_string_ = new ::std::string;
  }
  debug_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.debug_string)
}
inline ::std::string* BidResponse::mutable_debug_string() {
  set_has_debug_string();
  if (debug_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BidResponse.debug_string)
  return debug_string_;
}
inline ::std::string* BidResponse::release_debug_string() {
  clear_has_debug_string();
  if (debug_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = debug_string_;
    debug_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_debug_string(::std::string* debug_string) {
  if (debug_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete debug_string_;
  }
  if (debug_string) {
    set_has_debug_string();
    debug_string_ = debug_string;
  } else {
    clear_has_debug_string();
    debug_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BidResponse.debug_string)
}

// optional int32 processing_time_ms = 4;
inline bool BidResponse::has_processing_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse::set_has_processing_time_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse::clear_has_processing_time_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse::clear_processing_time_ms() {
  processing_time_ms_ = 0;
  clear_has_processing_time_ms();
}
inline ::google::protobuf::int32 BidResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:BidResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void BidResponse::set_processing_time_ms(::google::protobuf::int32 value) {
  set_has_processing_time_ms();
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.processing_time_ms)
}

// optional int32 DEPRECATED_protocol_version = 1;
inline bool BidResponse::has_deprecated_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse::set_has_deprecated_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse::clear_has_deprecated_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse::clear_deprecated_protocol_version() {
  deprecated_protocol_version_ = 0;
  clear_has_deprecated_protocol_version();
}
inline ::google::protobuf::int32 BidResponse::deprecated_protocol_version() const {
  // @@protoc_insertion_point(field_get:BidResponse.DEPRECATED_protocol_version)
  return deprecated_protocol_version_;
}
inline void BidResponse::set_deprecated_protocol_version(::google::protobuf::int32 value) {
  set_has_deprecated_protocol_version();
  deprecated_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.DEPRECATED_protocol_version)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BidRequest_UserDemographic_Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_UserDemographic_Gender>() {
  return ::BidRequest_UserDemographic_Gender_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Device_DeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Device_DeviceType>() {
  return ::BidRequest_Device_DeviceType_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Device_ScreenOrientation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Device_ScreenOrientation>() {
  return ::BidRequest_Device_ScreenOrientation_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Mobile_MobileDeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Mobile_MobileDeviceType>() {
  return ::BidRequest_Mobile_MobileDeviceType_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Mobile_ScreenOrientation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Mobile_ScreenOrientation>() {
  return ::BidRequest_Mobile_ScreenOrientation_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Video_CompanionSlot_CreativeFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Video_CompanionSlot_CreativeFormat>() {
  return ::BidRequest_Video_CompanionSlot_CreativeFormat_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Video_Placement> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Video_Placement>() {
  return ::BidRequest_Video_Placement_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Video_VideoPlaybackMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Video_VideoPlaybackMethod>() {
  return ::BidRequest_Video_VideoPlaybackMethod_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Video_SkippableBidRequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Video_SkippableBidRequestType>() {
  return ::BidRequest_Video_SkippableBidRequestType_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Video_VideoFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Video_VideoFormat>() {
  return ::BidRequest_Video_VideoFormat_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Video_EndCapSupport> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Video_EndCapSupport>() {
  return ::BidRequest_Video_EndCapSupport_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_Video_InventoryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_Video_InventoryType>() {
  return ::BidRequest_Video_InventoryType_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType>() {
  return ::BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_NativeAdTemplate_Fields> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_NativeAdTemplate_Fields>() {
  return ::BidRequest_AdSlot_NativeAdTemplate_Fields_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType>() {
  return ::BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_SlotVisibility> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_SlotVisibility>() {
  return ::BidRequest_AdSlot_SlotVisibility_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_IFramingState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_IFramingState>() {
  return ::BidRequest_AdSlot_IFramingState_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_IFramingDepth> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_IFramingDepth>() {
  return ::BidRequest_AdSlot_IFramingDepth_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_MediationStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_MediationStatus>() {
  return ::BidRequest_AdSlot_MediationStatus_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_Stickiness> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_Stickiness>() {
  return ::BidRequest_AdSlot_Stickiness_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_Renderer> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_Renderer>() {
  return ::BidRequest_AdSlot_Renderer_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_AdSlot_AmpAdRequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_AdSlot_AmpAdRequestType>() {
  return ::BidRequest_AdSlot_AmpAdRequestType_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_UserDataTreatment> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_UserDataTreatment>() {
  return ::BidRequest_UserDataTreatment_descriptor();
}
template <> struct is_proto_enum< ::BidRequest_PublisherType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BidRequest_PublisherType>() {
  return ::BidRequest_PublisherType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_realtime_2dbidding_2eproto__INCLUDED

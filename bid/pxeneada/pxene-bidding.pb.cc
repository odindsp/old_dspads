// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pxene-bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pxene-bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBBanner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBanner_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBApp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGeo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGeo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBImpressionExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBImpressionExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSeatBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBImpression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBImpression_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBidResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pxene_2dbidding_2eproto() {
  protobuf_AddDesc_pxene_2dbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pxene-bidding.proto");
  GOOGLE_CHECK(file != NULL);
  PBBanner_descriptor_ = file->message_type(0);
  static const int PBBanner_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBanner, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBanner, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBanner, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBanner, battr_),
  };
  PBBanner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBanner_descriptor_,
      PBBanner::default_instance_,
      PBBanner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBanner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBanner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBanner));
  PBApp_descriptor_ = file->message_type(1);
  static const int PBApp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApp, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApp, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApp, storeurl_),
  };
  PBApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBApp_descriptor_,
      PBApp::default_instance_,
      PBApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBApp));
  PBGeo_descriptor_ = file->message_type(2);
  static const int PBGeo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGeo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGeo, lon_),
  };
  PBGeo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGeo_descriptor_,
      PBGeo::default_instance_,
      PBGeo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGeo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGeo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGeo));
  PBDevice_descriptor_ = file->message_type(3);
  static const int PBDevice_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, dpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, osv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, ua_),
  };
  PBDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDevice_descriptor_,
      PBDevice::default_instance_,
      PBDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDevice));
  PBUser_descriptor_ = file->message_type(4);
  static const int PBUser_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, yob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, searchkey_),
  };
  PBUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUser_descriptor_,
      PBUser::default_instance_,
      PBUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUser));
  PBImpressionExt_descriptor_ = file->message_type(5);
  static const int PBImpressionExt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpressionExt, splash_),
  };
  PBImpressionExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBImpressionExt_descriptor_,
      PBImpressionExt::default_instance_,
      PBImpressionExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpressionExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpressionExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBImpressionExt));
  PBBid_descriptor_ = file->message_type(6);
  static const int PBBid_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBid, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBid, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBid, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBid, extdata_),
  };
  PBBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBid_descriptor_,
      PBBid::default_instance_,
      PBBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBid));
  PBSeatBid_descriptor_ = file->message_type(7);
  static const int PBSeatBid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSeatBid, bid_),
  };
  PBSeatBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSeatBid_descriptor_,
      PBSeatBid::default_instance_,
      PBSeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSeatBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSeatBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSeatBid));
  PBImpression_descriptor_ = file->message_type(8);
  static const int PBImpression_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, bidfloorcur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, instl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, adpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, secure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, is_clickable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, ctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, ext_),
  };
  PBImpression_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBImpression_descriptor_,
      PBImpression::default_instance_,
      PBImpression_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBImpression, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBImpression));
  PBBidRequest_descriptor_ = file->message_type(9);
  static const int PBBidRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRequest, imp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRequest, bcat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRequest, badv_),
  };
  PBBidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBidRequest_descriptor_,
      PBBidRequest::default_instance_,
      PBBidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBidRequest));
  PBBidResponse_descriptor_ = file->message_type(10);
  static const int PBBidResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidResponse, seatbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidResponse, bidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidResponse, cur_),
  };
  PBBidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBidResponse_descriptor_,
      PBBidResponse::default_instance_,
      PBBidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBidResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pxene_2dbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBanner_descriptor_, &PBBanner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBApp_descriptor_, &PBApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGeo_descriptor_, &PBGeo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDevice_descriptor_, &PBDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUser_descriptor_, &PBUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBImpressionExt_descriptor_, &PBImpressionExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBid_descriptor_, &PBBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSeatBid_descriptor_, &PBSeatBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBImpression_descriptor_, &PBImpression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBidRequest_descriptor_, &PBBidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBidResponse_descriptor_, &PBBidResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pxene_2dbidding_2eproto() {
  delete PBBanner::default_instance_;
  delete PBBanner_reflection_;
  delete PBApp::default_instance_;
  delete PBApp_reflection_;
  delete PBGeo::default_instance_;
  delete PBGeo_reflection_;
  delete PBDevice::default_instance_;
  delete PBDevice_reflection_;
  delete PBUser::default_instance_;
  delete PBUser_reflection_;
  delete PBImpressionExt::default_instance_;
  delete PBImpressionExt_reflection_;
  delete PBBid::default_instance_;
  delete PBBid_reflection_;
  delete PBSeatBid::default_instance_;
  delete PBSeatBid_reflection_;
  delete PBImpression::default_instance_;
  delete PBImpression_reflection_;
  delete PBBidRequest::default_instance_;
  delete PBBidRequest_reflection_;
  delete PBBidResponse::default_instance_;
  delete PBBidResponse_reflection_;
}

void protobuf_AddDesc_pxene_2dbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023pxene-bidding.proto\">\n\010PBBanner\022\t\n\001w\030\001"
    " \001(\005\022\t\n\001h\030\002 \001(\005\022\r\n\005mimes\030\003 \003(\005\022\r\n\005battr\030"
    "\004 \003(\005\"P\n\005PBApp\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \001(\t"
    "\022\013\n\003cat\030\003 \003(\005\022\016\n\006bundle\030\004 \001(\t\022\020\n\010storeur"
    "l\030\005 \001(\t\"!\n\005PBGeo\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001"
    "(\001\"\303\001\n\010PBDevice\022\013\n\003did\030\001 \001(\t\022\013\n\003mac\030\002 \001("
    "\t\022\014\n\004dpid\030\003 \001(\t\022\r\n\005brand\030\004 \001(\t\022\r\n\005model\030"
    "\005 \001(\t\022\n\n\002os\030\006 \001(\005\022\013\n\003osv\030\007 \001(\t\022\026\n\016connec"
    "tiontype\030\010 \001(\005\022\022\n\ndevicetype\030\t \001(\005\022\t\n\001w\030"
    "\n \001(\005\022\t\n\001h\030\013 \001(\005\022\n\n\002ip\030\014 \001(\t\022\n\n\002ua\030\r \001(\t"
    "\"k\n\006PBUser\022\n\n\002id\030\001 \001(\t\022\016\n\006gender\030\002 \001(\005\022\013"
    "\n\003yob\030\003 \001(\005\022\020\n\010keywords\030\004 \001(\t\022\023\n\003geo\030\005 \001"
    "(\0132\006.PBGeo\022\021\n\tsearchkey\030\006 \001(\t\"!\n\017PBImpre"
    "ssionExt\022\016\n\006splash\030\001 \001(\005\"H\n\005PBBid\022\r\n\005imp"
    "id\030\001 \002(\t\022\021\n\tbid_price\030\002 \001(\001\022\014\n\004adid\030\003 \001("
    "\t\022\017\n\007extdata\030\004 \001(\t\" \n\tPBSeatBid\022\023\n\003bid\030\001"
    " \003(\0132\006.PBBid\"\316\001\n\014PBImpression\022\n\n\002id\030\001 \002("
    "\t\022\031\n\006banner\030\002 \001(\0132\t.PBBanner\022\023\n\013bidfloor"
    "cur\030\003 \001(\t\022\020\n\010bidfloor\030\004 \001(\001\022\r\n\005instl\030\005 \001"
    "(\005\022\r\n\005adpos\030\006 \001(\005\022\016\n\006secure\030\007 \001(\005\022\024\n\014is_"
    "clickable\030\010 \001(\005\022\r\n\005ctype\030\t \003(\005\022\035\n\003ext\030\n "
    "\001(\0132\020.PBImpressionExt\"\231\001\n\014PBBidRequest\022\n"
    "\n\002id\030\001 \002(\t\022\032\n\003imp\030\002 \003(\0132\r.PBImpression\022\023"
    "\n\003app\030\003 \001(\0132\006.PBApp\022\031\n\006device\030\004 \001(\0132\t.PB"
    "Device\022\025\n\004user\030\005 \001(\0132\007.PBUser\022\014\n\004bcat\030\006 "
    "\003(\005\022\014\n\004badv\030\007 \003(\t\"T\n\rPBBidResponse\022\n\n\002id"
    "\030\001 \002(\t\022\033\n\007seatbid\030\002 \003(\0132\n.PBSeatBid\022\r\n\005b"
    "idid\030\003 \001(\t\022\013\n\003cur\030\004 \001(\t", 1103);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pxene-bidding.proto", &protobuf_RegisterTypes);
  PBBanner::default_instance_ = new PBBanner();
  PBApp::default_instance_ = new PBApp();
  PBGeo::default_instance_ = new PBGeo();
  PBDevice::default_instance_ = new PBDevice();
  PBUser::default_instance_ = new PBUser();
  PBImpressionExt::default_instance_ = new PBImpressionExt();
  PBBid::default_instance_ = new PBBid();
  PBSeatBid::default_instance_ = new PBSeatBid();
  PBImpression::default_instance_ = new PBImpression();
  PBBidRequest::default_instance_ = new PBBidRequest();
  PBBidResponse::default_instance_ = new PBBidResponse();
  PBBanner::default_instance_->InitAsDefaultInstance();
  PBApp::default_instance_->InitAsDefaultInstance();
  PBGeo::default_instance_->InitAsDefaultInstance();
  PBDevice::default_instance_->InitAsDefaultInstance();
  PBUser::default_instance_->InitAsDefaultInstance();
  PBImpressionExt::default_instance_->InitAsDefaultInstance();
  PBBid::default_instance_->InitAsDefaultInstance();
  PBSeatBid::default_instance_->InitAsDefaultInstance();
  PBImpression::default_instance_->InitAsDefaultInstance();
  PBBidRequest::default_instance_->InitAsDefaultInstance();
  PBBidResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pxene_2dbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pxene_2dbidding_2eproto {
  StaticDescriptorInitializer_pxene_2dbidding_2eproto() {
    protobuf_AddDesc_pxene_2dbidding_2eproto();
  }
} static_descriptor_initializer_pxene_2dbidding_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBBanner::kWFieldNumber;
const int PBBanner::kHFieldNumber;
const int PBBanner::kMimesFieldNumber;
const int PBBanner::kBattrFieldNumber;
#endif  // !_MSC_VER

PBBanner::PBBanner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBanner)
}

void PBBanner::InitAsDefaultInstance() {
}

PBBanner::PBBanner(const PBBanner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBanner)
}

void PBBanner::SharedCtor() {
  _cached_size_ = 0;
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBanner::~PBBanner() {
  // @@protoc_insertion_point(destructor:PBBanner)
  SharedDtor();
}

void PBBanner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBanner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBanner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBanner_descriptor_;
}

const PBBanner& PBBanner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBBanner* PBBanner::default_instance_ = NULL;

PBBanner* PBBanner::New() const {
  return new PBBanner;
}

void PBBanner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBBanner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(w_, h_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mimes_.Clear();
  battr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBanner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBBanner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 w = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_h;
        break;
      }

      // optional int32 h = 2;
      case 2: {
        if (tag == 16) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mimes;
        break;
      }

      // repeated int32 mimes = 3;
      case 3: {
        if (tag == 24) {
         parse_mimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mimes())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mimes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mimes;
        if (input->ExpectTag(32)) goto parse_battr;
        break;
      }

      // repeated int32 battr = 4;
      case 4: {
        if (tag == 32) {
         parse_battr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_battr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_battr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_battr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBanner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBanner)
  return false;
#undef DO_
}

void PBBanner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBanner)
  // optional int32 w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->w(), output);
  }

  // optional int32 h = 2;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->h(), output);
  }

  // repeated int32 mimes = 3;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mimes(i), output);
  }

  // repeated int32 battr = 4;
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->battr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBBanner)
}

::google::protobuf::uint8* PBBanner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBBanner)
  // optional int32 w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->w(), target);
  }

  // optional int32 h = 2;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->h(), target);
  }

  // repeated int32 mimes = 3;
  for (int i = 0; i < this->mimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mimes(i), target);
  }

  // repeated int32 battr = 4;
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->battr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBBanner)
  return target;
}

int PBBanner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 w = 1;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 2;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  // repeated int32 mimes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mimes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mimes(i));
    }
    total_size += 1 * this->mimes_size() + data_size;
  }

  // repeated int32 battr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->battr(i));
    }
    total_size += 1 * this->battr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBanner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBanner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBanner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBanner::MergeFrom(const PBBanner& from) {
  GOOGLE_CHECK_NE(&from, this);
  mimes_.MergeFrom(from.mimes_);
  battr_.MergeFrom(from.battr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBanner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBanner::CopyFrom(const PBBanner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBanner::IsInitialized() const {

  return true;
}

void PBBanner::Swap(PBBanner* other) {
  if (other != this) {
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    mimes_.Swap(&other->mimes_);
    battr_.Swap(&other->battr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBanner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBanner_descriptor_;
  metadata.reflection = PBBanner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBApp::kIdFieldNumber;
const int PBApp::kNameFieldNumber;
const int PBApp::kCatFieldNumber;
const int PBApp::kBundleFieldNumber;
const int PBApp::kStoreurlFieldNumber;
#endif  // !_MSC_VER

PBApp::PBApp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBApp)
}

void PBApp::InitAsDefaultInstance() {
}

PBApp::PBApp(const PBApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBApp)
}

void PBApp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBApp::~PBApp() {
  // @@protoc_insertion_point(destructor:PBApp)
  SharedDtor();
}

void PBApp::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storeurl_;
  }
  if (this != default_instance_) {
  }
}

void PBApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBApp_descriptor_;
}

const PBApp& PBApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBApp* PBApp::default_instance_ = NULL;

PBApp* PBApp::New() const {
  return new PBApp;
}

void PBApp::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_bundle()) {
      if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bundle_->clear();
      }
    }
    if (has_storeurl()) {
      if (storeurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        storeurl_->clear();
      }
    }
  }
  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cat;
        break;
      }

      // repeated int32 cat = 3;
      case 3: {
        if (tag == 24) {
         parse_cat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cat())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cat;
        if (input->ExpectTag(34)) goto parse_bundle;
        break;
      }

      // optional string bundle = 4;
      case 4: {
        if (tag == 34) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_storeurl;
        break;
      }

      // optional string storeurl = 5;
      case 5: {
        if (tag == 42) {
         parse_storeurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storeurl().data(), this->storeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storeurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBApp)
  return false;
#undef DO_
}

void PBApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBApp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated int32 cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cat(i), output);
  }

  // optional string bundle = 4;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bundle(), output);
  }

  // optional string storeurl = 5;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storeurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->storeurl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBApp)
}

::google::protobuf::uint8* PBApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBApp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated int32 cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cat(i), target);
  }

  // optional string bundle = 4;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bundle(), target);
  }

  // optional string storeurl = 5;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storeurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->storeurl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBApp)
  return target;
}

int PBApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string bundle = 4;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

    // optional string storeurl = 5;
    if (has_storeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storeurl());
    }

  }
  // repeated int32 cat = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cat(i));
    }
    total_size += 1 * this->cat_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBApp::MergeFrom(const PBApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bundle()) {
      set_bundle(from.bundle());
    }
    if (from.has_storeurl()) {
      set_storeurl(from.storeurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApp::CopyFrom(const PBApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBApp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBApp::Swap(PBApp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    cat_.Swap(&other->cat_);
    std::swap(bundle_, other->bundle_);
    std::swap(storeurl_, other->storeurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBApp_descriptor_;
  metadata.reflection = PBApp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGeo::kLatFieldNumber;
const int PBGeo::kLonFieldNumber;
#endif  // !_MSC_VER

PBGeo::PBGeo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGeo)
}

void PBGeo::InitAsDefaultInstance() {
}

PBGeo::PBGeo(const PBGeo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGeo)
}

void PBGeo::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGeo::~PBGeo() {
  // @@protoc_insertion_point(destructor:PBGeo)
  SharedDtor();
}

void PBGeo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGeo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGeo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGeo_descriptor_;
}

const PBGeo& PBGeo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBGeo* PBGeo::default_instance_ = NULL;

PBGeo* PBGeo::New() const {
  return new PBGeo;
}

void PBGeo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBGeo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lat_, lon_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGeo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGeo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // optional double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGeo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGeo)
  return false;
#undef DO_
}

void PBGeo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGeo)
  // optional double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // optional double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGeo)
}

::google::protobuf::uint8* PBGeo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGeo)
  // optional double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // optional double lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGeo)
  return target;
}

int PBGeo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGeo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGeo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGeo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGeo::MergeFrom(const PBGeo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGeo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGeo::CopyFrom(const PBGeo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGeo::IsInitialized() const {

  return true;
}

void PBGeo::Swap(PBGeo* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGeo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGeo_descriptor_;
  metadata.reflection = PBGeo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDevice::kDidFieldNumber;
const int PBDevice::kMacFieldNumber;
const int PBDevice::kDpidFieldNumber;
const int PBDevice::kBrandFieldNumber;
const int PBDevice::kModelFieldNumber;
const int PBDevice::kOsFieldNumber;
const int PBDevice::kOsvFieldNumber;
const int PBDevice::kConnectiontypeFieldNumber;
const int PBDevice::kDevicetypeFieldNumber;
const int PBDevice::kWFieldNumber;
const int PBDevice::kHFieldNumber;
const int PBDevice::kIpFieldNumber;
const int PBDevice::kUaFieldNumber;
#endif  // !_MSC_VER

PBDevice::PBDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBDevice)
}

void PBDevice::InitAsDefaultInstance() {
}

PBDevice::PBDevice(const PBDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBDevice)
}

void PBDevice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  did_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = 0;
  osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connectiontype_ = 0;
  devicetype_ = 0;
  w_ = 0;
  h_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDevice::~PBDevice() {
  // @@protoc_insertion_point(destructor:PBDevice)
  SharedDtor();
}

void PBDevice::SharedDtor() {
  if (did_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete did_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (dpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dpid_;
  }
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (this != default_instance_) {
  }
}

void PBDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDevice_descriptor_;
}

const PBDevice& PBDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBDevice* PBDevice::default_instance_ = NULL;

PBDevice* PBDevice::New() const {
  return new PBDevice;
}

void PBDevice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBDevice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(os_, connectiontype_);
    if (has_did()) {
      if (did_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        did_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_dpid()) {
      if (dpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dpid_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_osv()) {
      if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        osv_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(devicetype_, w_);
    h_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_ua()) {
      if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ua_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string did = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->did().data(), this->did().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "did");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mac;
        break;
      }

      // optional string mac = 2;
      case 2: {
        if (tag == 18) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dpid;
        break;
      }

      // optional string dpid = 3;
      case 3: {
        if (tag == 26) {
         parse_dpid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dpid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dpid().data(), this->dpid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dpid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_brand;
        break;
      }

      // optional string brand = 4;
      case 4: {
        if (tag == 34) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_model;
        break;
      }

      // optional string model = 5;
      case 5: {
        if (tag == 42) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_os;
        break;
      }

      // optional int32 os = 6;
      case 6: {
        if (tag == 48) {
         parse_os:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_)));
          set_has_os();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_osv;
        break;
      }

      // optional string osv = 7;
      case 7: {
        if (tag == 58) {
         parse_osv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->osv().data(), this->osv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "osv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_connectiontype;
        break;
      }

      // optional int32 connectiontype = 8;
      case 8: {
        if (tag == 64) {
         parse_connectiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connectiontype_)));
          set_has_connectiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_devicetype;
        break;
      }

      // optional int32 devicetype = 9;
      case 9: {
        if (tag == 72) {
         parse_devicetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_w;
        break;
      }

      // optional int32 w = 10;
      case 10: {
        if (tag == 80) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_h;
        break;
      }

      // optional int32 h = 11;
      case 11: {
        if (tag == 88) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ip;
        break;
      }

      // optional string ip = 12;
      case 12: {
        if (tag == 98) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ua;
        break;
      }

      // optional string ua = 13;
      case 13: {
        if (tag == 106) {
         parse_ua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBDevice)
  return false;
#undef DO_
}

void PBDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBDevice)
  // optional string did = 1;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "did");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->did(), output);
  }

  // optional string mac = 2;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac(), output);
  }

  // optional string dpid = 3;
  if (has_dpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpid().data(), this->dpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dpid(), output);
  }

  // optional string brand = 4;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->brand(), output);
  }

  // optional string model = 5;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->model(), output);
  }

  // optional int32 os = 6;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->os(), output);
  }

  // optional string osv = 7;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->osv(), output);
  }

  // optional int32 connectiontype = 8;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->connectiontype(), output);
  }

  // optional int32 devicetype = 9;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->devicetype(), output);
  }

  // optional int32 w = 10;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->w(), output);
  }

  // optional int32 h = 11;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->h(), output);
  }

  // optional string ip = 12;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ip(), output);
  }

  // optional string ua = 13;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ua(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBDevice)
}

::google::protobuf::uint8* PBDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDevice)
  // optional string did = 1;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "did");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->did(), target);
  }

  // optional string mac = 2;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mac(), target);
  }

  // optional string dpid = 3;
  if (has_dpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpid().data(), this->dpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dpid(), target);
  }

  // optional string brand = 4;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->brand(), target);
  }

  // optional string model = 5;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->model(), target);
  }

  // optional int32 os = 6;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->os(), target);
  }

  // optional string osv = 7;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->osv(), target);
  }

  // optional int32 connectiontype = 8;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->connectiontype(), target);
  }

  // optional int32 devicetype = 9;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->devicetype(), target);
  }

  // optional int32 w = 10;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->w(), target);
  }

  // optional int32 h = 11;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->h(), target);
  }

  // optional string ip = 12;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ip(), target);
  }

  // optional string ua = 13;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ua(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBDevice)
  return target;
}

int PBDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string did = 1;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->did());
    }

    // optional string mac = 2;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string dpid = 3;
    if (has_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dpid());
    }

    // optional string brand = 4;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 5;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional int32 os = 6;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os());
    }

    // optional string osv = 7;
    if (has_osv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osv());
    }

    // optional int32 connectiontype = 8;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connectiontype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 devicetype = 9;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicetype());
    }

    // optional int32 w = 10;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 11;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional string ip = 12;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string ua = 13;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDevice::MergeFrom(const PBDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_did()) {
      set_did(from.did());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_dpid()) {
      set_dpid(from.dpid());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_osv()) {
      set_osv(from.osv());
    }
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_ua()) {
      set_ua(from.ua());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDevice::CopyFrom(const PBDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDevice::IsInitialized() const {

  return true;
}

void PBDevice::Swap(PBDevice* other) {
  if (other != this) {
    std::swap(did_, other->did_);
    std::swap(mac_, other->mac_);
    std::swap(dpid_, other->dpid_);
    std::swap(brand_, other->brand_);
    std::swap(model_, other->model_);
    std::swap(os_, other->os_);
    std::swap(osv_, other->osv_);
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(ip_, other->ip_);
    std::swap(ua_, other->ua_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDevice_descriptor_;
  metadata.reflection = PBDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBUser::kIdFieldNumber;
const int PBUser::kGenderFieldNumber;
const int PBUser::kYobFieldNumber;
const int PBUser::kKeywordsFieldNumber;
const int PBUser::kGeoFieldNumber;
const int PBUser::kSearchkeyFieldNumber;
#endif  // !_MSC_VER

PBUser::PBUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBUser)
}

void PBUser::InitAsDefaultInstance() {
  geo_ = const_cast< ::PBGeo*>(&::PBGeo::default_instance());
}

PBUser::PBUser(const PBUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBUser)
}

void PBUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  yob_ = 0;
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  searchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUser::~PBUser() {
  // @@protoc_insertion_point(destructor:PBUser)
  SharedDtor();
}

void PBUser::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchkey_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void PBUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUser_descriptor_;
}

const PBUser& PBUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBUser* PBUser::default_instance_ = NULL;

PBUser* PBUser::New() const {
  return new PBUser;
}

void PBUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(gender_, yob_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::PBGeo::Clear();
    }
    if (has_searchkey()) {
      if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        searchkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gender;
        break;
      }

      // optional int32 gender = 2;
      case 2: {
        if (tag == 16) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_yob;
        break;
      }

      // optional int32 yob = 3;
      case 3: {
        if (tag == 24) {
         parse_yob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yob_)));
          set_has_yob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_keywords;
        break;
      }

      // optional string keywords = 4;
      case 4: {
        if (tag == 34) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_geo;
        break;
      }

      // optional .PBGeo geo = 5;
      case 5: {
        if (tag == 42) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_searchkey;
        break;
      }

      // optional string searchkey = 6;
      case 6: {
        if (tag == 50) {
         parse_searchkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchkey().data(), this->searchkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "searchkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBUser)
  return false;
#undef DO_
}

void PBUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBUser)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 gender = 2;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gender(), output);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yob(), output);
  }

  // optional string keywords = 4;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->keywords(), output);
  }

  // optional .PBGeo geo = 5;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->geo(), output);
  }

  // optional string searchkey = 6;
  if (has_searchkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchkey().data(), this->searchkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->searchkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBUser)
}

::google::protobuf::uint8* PBUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBUser)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 gender = 2;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gender(), target);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yob(), target);
  }

  // optional string keywords = 4;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->keywords(), target);
  }

  // optional .PBGeo geo = 5;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->geo(), target);
  }

  // optional string searchkey = 6;
  if (has_searchkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchkey().data(), this->searchkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->searchkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBUser)
  return target;
}

int PBUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 gender = 2;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 yob = 3;
    if (has_yob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yob());
    }

    // optional string keywords = 4;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional .PBGeo geo = 5;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // optional string searchkey = 6;
    if (has_searchkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUser::MergeFrom(const PBUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_yob()) {
      set_yob(from.yob());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_geo()) {
      mutable_geo()->::PBGeo::MergeFrom(from.geo());
    }
    if (from.has_searchkey()) {
      set_searchkey(from.searchkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUser::CopyFrom(const PBUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUser::IsInitialized() const {

  return true;
}

void PBUser::Swap(PBUser* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gender_, other->gender_);
    std::swap(yob_, other->yob_);
    std::swap(keywords_, other->keywords_);
    std::swap(geo_, other->geo_);
    std::swap(searchkey_, other->searchkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUser_descriptor_;
  metadata.reflection = PBUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBImpressionExt::kSplashFieldNumber;
#endif  // !_MSC_VER

PBImpressionExt::PBImpressionExt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBImpressionExt)
}

void PBImpressionExt::InitAsDefaultInstance() {
}

PBImpressionExt::PBImpressionExt(const PBImpressionExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBImpressionExt)
}

void PBImpressionExt::SharedCtor() {
  _cached_size_ = 0;
  splash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBImpressionExt::~PBImpressionExt() {
  // @@protoc_insertion_point(destructor:PBImpressionExt)
  SharedDtor();
}

void PBImpressionExt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBImpressionExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBImpressionExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBImpressionExt_descriptor_;
}

const PBImpressionExt& PBImpressionExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBImpressionExt* PBImpressionExt::default_instance_ = NULL;

PBImpressionExt* PBImpressionExt::New() const {
  return new PBImpressionExt;
}

void PBImpressionExt::Clear() {
  splash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBImpressionExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBImpressionExt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 splash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splash_)));
          set_has_splash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBImpressionExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBImpressionExt)
  return false;
#undef DO_
}

void PBImpressionExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBImpressionExt)
  // optional int32 splash = 1;
  if (has_splash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->splash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBImpressionExt)
}

::google::protobuf::uint8* PBImpressionExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBImpressionExt)
  // optional int32 splash = 1;
  if (has_splash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->splash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBImpressionExt)
  return target;
}

int PBImpressionExt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 splash = 1;
    if (has_splash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->splash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBImpressionExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBImpressionExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBImpressionExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBImpressionExt::MergeFrom(const PBImpressionExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_splash()) {
      set_splash(from.splash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBImpressionExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBImpressionExt::CopyFrom(const PBImpressionExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBImpressionExt::IsInitialized() const {

  return true;
}

void PBImpressionExt::Swap(PBImpressionExt* other) {
  if (other != this) {
    std::swap(splash_, other->splash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBImpressionExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBImpressionExt_descriptor_;
  metadata.reflection = PBImpressionExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBid::kImpidFieldNumber;
const int PBBid::kBidPriceFieldNumber;
const int PBBid::kAdidFieldNumber;
const int PBBid::kExtdataFieldNumber;
#endif  // !_MSC_VER

PBBid::PBBid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBid)
}

void PBBid::InitAsDefaultInstance() {
}

PBBid::PBBid(const PBBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBid)
}

void PBBid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_price_ = 0;
  adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBid::~PBBid() {
  // @@protoc_insertion_point(destructor:PBBid)
  SharedDtor();
}

void PBBid::SharedDtor() {
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impid_;
  }
  if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adid_;
  }
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (this != default_instance_) {
  }
}

void PBBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBid_descriptor_;
}

const PBBid& PBBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBBid* PBBid::default_instance_ = NULL;

PBBid* PBBid::New() const {
  return new PBBid;
}

void PBBid::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_impid()) {
      if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        impid_->clear();
      }
    }
    bid_price_ = 0;
    if (has_adid()) {
      if (adid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adid_->clear();
      }
    }
    if (has_extdata()) {
      if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string impid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_bid_price;
        break;
      }

      // optional double bid_price = 2;
      case 2: {
        if (tag == 17) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_)));
          set_has_bid_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_adid;
        break;
      }

      // optional string adid = 3;
      case 3: {
        if (tag == 26) {
         parse_adid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adid().data(), this->adid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_extdata;
        break;
      }

      // optional string extdata = 4;
      case 4: {
        if (tag == 34) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBid)
  return false;
#undef DO_
}

void PBBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBid)
  // required string impid = 1;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->impid(), output);
  }

  // optional double bid_price = 2;
  if (has_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bid_price(), output);
  }

  // optional string adid = 3;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->adid(), output);
  }

  // optional string extdata = 4;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->extdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBBid)
}

::google::protobuf::uint8* PBBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBBid)
  // required string impid = 1;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->impid(), target);
  }

  // optional double bid_price = 2;
  if (has_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bid_price(), target);
  }

  // optional string adid = 3;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->adid(), target);
  }

  // optional string extdata = 4;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBBid)
  return target;
}

int PBBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string impid = 1;
    if (has_impid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impid());
    }

    // optional double bid_price = 2;
    if (has_bid_price()) {
      total_size += 1 + 8;
    }

    // optional string adid = 3;
    if (has_adid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adid());
    }

    // optional string extdata = 4;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBid::MergeFrom(const PBBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impid()) {
      set_impid(from.impid());
    }
    if (from.has_bid_price()) {
      set_bid_price(from.bid_price());
    }
    if (from.has_adid()) {
      set_adid(from.adid());
    }
    if (from.has_extdata()) {
      set_extdata(from.extdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBid::CopyFrom(const PBBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBBid::Swap(PBBid* other) {
  if (other != this) {
    std::swap(impid_, other->impid_);
    std::swap(bid_price_, other->bid_price_);
    std::swap(adid_, other->adid_);
    std::swap(extdata_, other->extdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBid_descriptor_;
  metadata.reflection = PBBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSeatBid::kBidFieldNumber;
#endif  // !_MSC_VER

PBSeatBid::PBSeatBid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBSeatBid)
}

void PBSeatBid::InitAsDefaultInstance() {
}

PBSeatBid::PBSeatBid(const PBSeatBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBSeatBid)
}

void PBSeatBid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSeatBid::~PBSeatBid() {
  // @@protoc_insertion_point(destructor:PBSeatBid)
  SharedDtor();
}

void PBSeatBid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSeatBid_descriptor_;
}

const PBSeatBid& PBSeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBSeatBid* PBSeatBid::default_instance_ = NULL;

PBSeatBid* PBSeatBid::New() const {
  return new PBSeatBid;
}

void PBSeatBid::Clear() {
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBSeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBBid bid = 1;
      case 1: {
        if (tag == 10) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBSeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBSeatBid)
  return false;
#undef DO_
}

void PBSeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBSeatBid)
  // repeated .PBBid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBSeatBid)
}

::google::protobuf::uint8* PBSeatBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBSeatBid)
  // repeated .PBBid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBSeatBid)
  return target;
}

int PBSeatBid::ByteSize() const {
  int total_size = 0;

  // repeated .PBBid bid = 1;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSeatBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSeatBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSeatBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSeatBid::MergeFrom(const PBSeatBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bid_.MergeFrom(from.bid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSeatBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSeatBid::CopyFrom(const PBSeatBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSeatBid::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;
  return true;
}

void PBSeatBid::Swap(PBSeatBid* other) {
  if (other != this) {
    bid_.Swap(&other->bid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSeatBid_descriptor_;
  metadata.reflection = PBSeatBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBImpression::kIdFieldNumber;
const int PBImpression::kBannerFieldNumber;
const int PBImpression::kBidfloorcurFieldNumber;
const int PBImpression::kBidfloorFieldNumber;
const int PBImpression::kInstlFieldNumber;
const int PBImpression::kAdposFieldNumber;
const int PBImpression::kSecureFieldNumber;
const int PBImpression::kIsClickableFieldNumber;
const int PBImpression::kCtypeFieldNumber;
const int PBImpression::kExtFieldNumber;
#endif  // !_MSC_VER

PBImpression::PBImpression()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBImpression)
}

void PBImpression::InitAsDefaultInstance() {
  banner_ = const_cast< ::PBBanner*>(&::PBBanner::default_instance());
  ext_ = const_cast< ::PBImpressionExt*>(&::PBImpressionExt::default_instance());
}

PBImpression::PBImpression(const PBImpression& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBImpression)
}

void PBImpression::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banner_ = NULL;
  bidfloorcur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloor_ = 0;
  instl_ = 0;
  adpos_ = 0;
  secure_ = 0;
  is_clickable_ = 0;
  ext_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBImpression::~PBImpression() {
  // @@protoc_insertion_point(destructor:PBImpression)
  SharedDtor();
}

void PBImpression::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (bidfloorcur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidfloorcur_;
  }
  if (this != default_instance_) {
    delete banner_;
    delete ext_;
  }
}

void PBImpression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBImpression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBImpression_descriptor_;
}

const PBImpression& PBImpression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBImpression* PBImpression::default_instance_ = NULL;

PBImpression* PBImpression::New() const {
  return new PBImpression;
}

void PBImpression::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBImpression*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bidfloor_, is_clickable_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::PBBanner::Clear();
    }
    if (has_bidfloorcur()) {
      if (bidfloorcur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bidfloorcur_->clear();
      }
    }
  }
  if (has_ext()) {
    if (ext_ != NULL) ext_->::PBImpressionExt::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ctype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBImpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBImpression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banner;
        break;
      }

      // optional .PBBanner banner = 2;
      case 2: {
        if (tag == 18) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bidfloorcur;
        break;
      }

      // optional string bidfloorcur = 3;
      case 3: {
        if (tag == 26) {
         parse_bidfloorcur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidfloorcur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidfloorcur().data(), this->bidfloorcur().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidfloorcur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bidfloor;
        break;
      }

      // optional double bidfloor = 4;
      case 4: {
        if (tag == 33) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_instl;
        break;
      }

      // optional int32 instl = 5;
      case 5: {
        if (tag == 40) {
         parse_instl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instl_)));
          set_has_instl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_adpos;
        break;
      }

      // optional int32 adpos = 6;
      case 6: {
        if (tag == 48) {
         parse_adpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adpos_)));
          set_has_adpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_secure;
        break;
      }

      // optional int32 secure = 7;
      case 7: {
        if (tag == 56) {
         parse_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_clickable;
        break;
      }

      // optional int32 is_clickable = 8;
      case 8: {
        if (tag == 64) {
         parse_is_clickable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_clickable_)));
          set_has_is_clickable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ctype;
        break;
      }

      // repeated int32 ctype = 9;
      case 9: {
        if (tag == 72) {
         parse_ctype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ctype())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ctype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ctype;
        if (input->ExpectTag(82)) goto parse_ext;
        break;
      }

      // optional .PBImpressionExt ext = 10;
      case 10: {
        if (tag == 82) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBImpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBImpression)
  return false;
#undef DO_
}

void PBImpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBImpression)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .PBBanner banner = 2;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->banner(), output);
  }

  // optional string bidfloorcur = 3;
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidfloorcur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bidfloorcur(), output);
  }

  // optional double bidfloor = 4;
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bidfloor(), output);
  }

  // optional int32 instl = 5;
  if (has_instl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->instl(), output);
  }

  // optional int32 adpos = 6;
  if (has_adpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adpos(), output);
  }

  // optional int32 secure = 7;
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->secure(), output);
  }

  // optional int32 is_clickable = 8;
  if (has_is_clickable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->is_clickable(), output);
  }

  // repeated int32 ctype = 9;
  for (int i = 0; i < this->ctype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ctype(i), output);
  }

  // optional .PBImpressionExt ext = 10;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBImpression)
}

::google::protobuf::uint8* PBImpression::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBImpression)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .PBBanner banner = 2;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->banner(), target);
  }

  // optional string bidfloorcur = 3;
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidfloorcur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bidfloorcur(), target);
  }

  // optional double bidfloor = 4;
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bidfloor(), target);
  }

  // optional int32 instl = 5;
  if (has_instl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->instl(), target);
  }

  // optional int32 adpos = 6;
  if (has_adpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adpos(), target);
  }

  // optional int32 secure = 7;
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->secure(), target);
  }

  // optional int32 is_clickable = 8;
  if (has_is_clickable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->is_clickable(), target);
  }

  // repeated int32 ctype = 9;
  for (int i = 0; i < this->ctype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ctype(i), target);
  }

  // optional .PBImpressionExt ext = 10;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBImpression)
  return target;
}

int PBImpression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .PBBanner banner = 2;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }

    // optional string bidfloorcur = 3;
    if (has_bidfloorcur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidfloorcur());
    }

    // optional double bidfloor = 4;
    if (has_bidfloor()) {
      total_size += 1 + 8;
    }

    // optional int32 instl = 5;
    if (has_instl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instl());
    }

    // optional int32 adpos = 6;
    if (has_adpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adpos());
    }

    // optional int32 secure = 7;
    if (has_secure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secure());
    }

    // optional int32 is_clickable = 8;
    if (has_is_clickable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_clickable());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .PBImpressionExt ext = 10;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext());
    }

  }
  // repeated int32 ctype = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ctype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ctype(i));
    }
    total_size += 1 * this->ctype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBImpression::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBImpression* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBImpression*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBImpression::MergeFrom(const PBImpression& from) {
  GOOGLE_CHECK_NE(&from, this);
  ctype_.MergeFrom(from.ctype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_banner()) {
      mutable_banner()->::PBBanner::MergeFrom(from.banner());
    }
    if (from.has_bidfloorcur()) {
      set_bidfloorcur(from.bidfloorcur());
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
    if (from.has_instl()) {
      set_instl(from.instl());
    }
    if (from.has_adpos()) {
      set_adpos(from.adpos());
    }
    if (from.has_secure()) {
      set_secure(from.secure());
    }
    if (from.has_is_clickable()) {
      set_is_clickable(from.is_clickable());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_ext()) {
      mutable_ext()->::PBImpressionExt::MergeFrom(from.ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBImpression::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBImpression::CopyFrom(const PBImpression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBImpression::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBImpression::Swap(PBImpression* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(banner_, other->banner_);
    std::swap(bidfloorcur_, other->bidfloorcur_);
    std::swap(bidfloor_, other->bidfloor_);
    std::swap(instl_, other->instl_);
    std::swap(adpos_, other->adpos_);
    std::swap(secure_, other->secure_);
    std::swap(is_clickable_, other->is_clickable_);
    ctype_.Swap(&other->ctype_);
    std::swap(ext_, other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBImpression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBImpression_descriptor_;
  metadata.reflection = PBImpression_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBidRequest::kIdFieldNumber;
const int PBBidRequest::kImpFieldNumber;
const int PBBidRequest::kAppFieldNumber;
const int PBBidRequest::kDeviceFieldNumber;
const int PBBidRequest::kUserFieldNumber;
const int PBBidRequest::kBcatFieldNumber;
const int PBBidRequest::kBadvFieldNumber;
#endif  // !_MSC_VER

PBBidRequest::PBBidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBidRequest)
}

void PBBidRequest::InitAsDefaultInstance() {
  app_ = const_cast< ::PBApp*>(&::PBApp::default_instance());
  device_ = const_cast< ::PBDevice*>(&::PBDevice::default_instance());
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
}

PBBidRequest::PBBidRequest(const PBBidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBidRequest)
}

void PBBidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_ = NULL;
  device_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBidRequest::~PBBidRequest() {
  // @@protoc_insertion_point(destructor:PBBidRequest)
  SharedDtor();
}

void PBBidRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete app_;
    delete device_;
    delete user_;
  }
}

void PBBidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBidRequest_descriptor_;
}

const PBBidRequest& PBBidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBBidRequest* PBBidRequest::default_instance_ = NULL;

PBBidRequest* PBBidRequest::New() const {
  return new PBBidRequest;
}

void PBBidRequest::Clear() {
  if (_has_bits_[0 / 32] & 29) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_app()) {
      if (app_ != NULL) app_->::PBApp::Clear();
    }
    if (has_device()) {
      if (device_ != NULL) device_->::PBDevice::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
  }
  imp_.Clear();
  bcat_.Clear();
  badv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBBidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imp;
        break;
      }

      // repeated .PBImpression imp = 2;
      case 2: {
        if (tag == 18) {
         parse_imp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imp;
        if (input->ExpectTag(26)) goto parse_app;
        break;
      }

      // optional .PBApp app = 3;
      case 3: {
        if (tag == 26) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional .PBDevice device = 4;
      case 4: {
        if (tag == 34) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional .PBUser user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bcat;
        break;
      }

      // repeated int32 bcat = 6;
      case 6: {
        if (tag == 48) {
         parse_bcat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_bcat())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bcat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bcat;
        if (input->ExpectTag(58)) goto parse_badv;
        break;
      }

      // repeated string badv = 7;
      case 7: {
        if (tag == 58) {
         parse_badv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_badv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->badv(this->badv_size() - 1).data(),
            this->badv(this->badv_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "badv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_badv;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBidRequest)
  return false;
#undef DO_
}

void PBBidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .PBImpression imp = 2;
  for (int i = 0; i < this->imp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->imp(i), output);
  }

  // optional .PBApp app = 3;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->app(), output);
  }

  // optional .PBDevice device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->device(), output);
  }

  // optional .PBUser user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user(), output);
  }

  // repeated int32 bcat = 6;
  for (int i = 0; i < this->bcat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->bcat(i), output);
  }

  // repeated string badv = 7;
  for (int i = 0; i < this->badv_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->badv(i).data(), this->badv(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "badv");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->badv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBBidRequest)
}

::google::protobuf::uint8* PBBidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBBidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .PBImpression imp = 2;
  for (int i = 0; i < this->imp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->imp(i), target);
  }

  // optional .PBApp app = 3;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->app(), target);
  }

  // optional .PBDevice device = 4;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->device(), target);
  }

  // optional .PBUser user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user(), target);
  }

  // repeated int32 bcat = 6;
  for (int i = 0; i < this->bcat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->bcat(i), target);
  }

  // repeated string badv = 7;
  for (int i = 0; i < this->badv_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->badv(i).data(), this->badv(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "badv");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->badv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBBidRequest)
  return target;
}

int PBBidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .PBApp app = 3;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

    // optional .PBDevice device = 4;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional .PBUser user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  // repeated .PBImpression imp = 2;
  total_size += 1 * this->imp_size();
  for (int i = 0; i < this->imp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imp(i));
  }

  // repeated int32 bcat = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->bcat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bcat(i));
    }
    total_size += 1 * this->bcat_size() + data_size;
  }

  // repeated string badv = 7;
  total_size += 1 * this->badv_size();
  for (int i = 0; i < this->badv_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->badv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBidRequest::MergeFrom(const PBBidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  imp_.MergeFrom(from.imp_);
  bcat_.MergeFrom(from.bcat_);
  badv_.MergeFrom(from.badv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_app()) {
      mutable_app()->::PBApp::MergeFrom(from.app());
    }
    if (from.has_device()) {
      mutable_device()->::PBDevice::MergeFrom(from.device());
    }
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBidRequest::CopyFrom(const PBBidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->imp())) return false;
  if (has_app()) {
    if (!this->app().IsInitialized()) return false;
  }
  return true;
}

void PBBidRequest::Swap(PBBidRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    imp_.Swap(&other->imp_);
    std::swap(app_, other->app_);
    std::swap(device_, other->device_);
    std::swap(user_, other->user_);
    bcat_.Swap(&other->bcat_);
    badv_.Swap(&other->badv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBidRequest_descriptor_;
  metadata.reflection = PBBidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBidResponse::kIdFieldNumber;
const int PBBidResponse::kSeatbidFieldNumber;
const int PBBidResponse::kBididFieldNumber;
const int PBBidResponse::kCurFieldNumber;
#endif  // !_MSC_VER

PBBidResponse::PBBidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBidResponse)
}

void PBBidResponse::InitAsDefaultInstance() {
}

PBBidResponse::PBBidResponse(const PBBidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBidResponse)
}

void PBBidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBidResponse::~PBBidResponse() {
  // @@protoc_insertion_point(destructor:PBBidResponse)
  SharedDtor();
}

void PBBidResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bidid_;
  }
  if (cur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cur_;
  }
  if (this != default_instance_) {
  }
}

void PBBidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBidResponse_descriptor_;
}

const PBBidResponse& PBBidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pxene_2dbidding_2eproto();
  return *default_instance_;
}

PBBidResponse* PBBidResponse::default_instance_ = NULL;

PBBidResponse* PBBidResponse::New() const {
  return new PBBidResponse;
}

void PBBidResponse::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_bidid()) {
      if (bidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bidid_->clear();
      }
    }
    if (has_cur()) {
      if (cur_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cur_->clear();
      }
    }
  }
  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBBidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        break;
      }

      // repeated .PBSeatBid seatbid = 2;
      case 2: {
        if (tag == 18) {
         parse_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seatbid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        if (input->ExpectTag(26)) goto parse_bidid;
        break;
      }

      // optional string bidid = 3;
      case 3: {
        if (tag == 26) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cur;
        break;
      }

      // optional string cur = 4;
      case 4: {
        if (tag == 34) {
         parse_cur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur().data(), this->cur().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBidResponse)
  return false;
#undef DO_
}

void PBBidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .PBSeatBid seatbid = 2;
  for (int i = 0; i < this->seatbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seatbid(i), output);
  }

  // optional string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bidid(), output);
  }

  // optional string cur = 4;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur().data(), this->cur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBBidResponse)
}

::google::protobuf::uint8* PBBidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBBidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .PBSeatBid seatbid = 2;
  for (int i = 0; i < this->seatbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seatbid(i), target);
  }

  // optional string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bidid(), target);
  }

  // optional string cur = 4;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur().data(), this->cur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBBidResponse)
  return target;
}

int PBBidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string bidid = 3;
    if (has_bidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidid());
    }

    // optional string cur = 4;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur());
    }

  }
  // repeated .PBSeatBid seatbid = 2;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBidResponse::MergeFrom(const PBBidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bidid()) {
      set_bidid(from.bidid());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBidResponse::CopyFrom(const PBBidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbid())) return false;
  return true;
}

void PBBidResponse::Swap(PBBidResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    seatbid_.Swap(&other->seatbid_);
    std::swap(bidid_, other->bidid_);
    std::swap(cur_, other->cur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBidResponse_descriptor_;
  metadata.reflection = PBBidResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

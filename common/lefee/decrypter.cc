// Copyright 2009 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Decrypter is sample code showing the steps to decrypt and verify 64-bit
// values. It uses the Base 64 decoder in the OpenSSL library.

#include <endian.h>
#include <netinet/in.h>
#include <openssl/bio.h>
#include <openssl/evp.h>
#include <openssl/hmac.h>
#include <string>
#include <string.h>
#include <sys/time.h>
#include <iostream>

#include "../lefee/decode.h"
using namespace std;

extern "C"

// Definition of ntohll
inline uint64 ntohll(uint64 host_int) {
#if defined(__LITTLE_ENDIAN)
  return static_cast<uint64>(ntohl(static_cast<uint32>(host_int >> 32))) |
      (static_cast<uint64>(ntohl(static_cast<uint32>(host_int))) << 32);
#elif defined(__BIG_ENDIAN)
  return host_int;
#else
#error Could not determine endianness.
#endif
}

namespace {
using std::string;

// The following sizes are all in bytes.
const int32 kInitializationVectorSize = 16;
const int32 kCiphertextSize = 8;
const int32 kSignatureSize = 4;
const int32 kEncryptedValueSize =
    kInitializationVectorSize + kCiphertextSize + kSignatureSize;
const int32 kKeySize = 32;  // size of SHA-1 HMAC keys.
const int32 kHashOutputSize = 20;  // size of SHA-1 hash output.
const int kBlockSize = 20;  // This is a block cipher with fixed block size.

// Retrieves the timestamp embedded in the initialization vector.
void GetTime(const char* initialization_vector, struct timeval* tv) {
  uint32 val;
  memcpy(&val, initialization_vector, sizeof(val));
  tv->tv_sec = htonl(val);
  memcpy(&val, initialization_vector + sizeof(val), sizeof(val));
  tv->tv_usec = htonl(val);
}

// Takes an unpadded base64 string and adds padding.
string AddPadding(const string& b64_string) {
  if (b64_string.size() % 4 == 3) {
    return b64_string + "=";
  } else if (b64_string.size() % 4 == 2) {
    return b64_string + "==";
  }
  return b64_string;
}

// Adapted from http://www.openssl.org/docs/crypto/BIO_f_base64.html
// Takes a web safe base64 encoded string (RFC 3548) and decodes it.
// Normally, web safe base64 strings have padding '=' replaced with '.',
// but we will not pad the ciphertext. We add padding here because
// openssl has trouble with unpadded strings.
string B64Decode(const string& encoded) {
  string padded = AddPadding(encoded);
  // convert from web safe -> normal base64.
  int32 index = -1;
  while ((index = padded.find_first_of('-', index + 1)) != string::npos) {
    padded[index] = '+';
  }
  index = -1;
  while ((index = padded.find_first_of('_', index + 1)) != string::npos) {
    padded[index] = '/';
  }

  // base64 decode using openssl library.
  const int32 kOutputBufferSize = 256;
  char output[kOutputBufferSize];

  BIO* b64 = BIO_new(BIO_f_base64());
  BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
  BIO* bio = BIO_new_mem_buf(const_cast<char*>(padded.data()),
                             padded.length());
  bio = BIO_push(b64, bio);
  int32 out_length = BIO_read(bio, output, kOutputBufferSize);
  BIO_free_all(bio);
  return string(output, out_length);
}

inline char* string_as_array(string* str) {
  return str->empty() ? NULL : &*str->begin();
}

inline const char* string_as_array(const string& str) {
  return string_as_array(const_cast<string*>(&str));
}

// This method decrypts the ciphertext using the encryption key and verifies
// the integrity bits with the integrity key. The encrypted format is:
//   {initialization_vector (16 bytes)}{ciphertext}{integrity (4 bytes)}
// https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-hyperlocal,
// https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price
// and https://support.google.com/adxbuyer/answer/3221407?hl=en have more
// details about the encrypted format of hyperlocal, winning price,
// IDFA, hashed IDFA and Android Advertiser ID.
//
// If DecryptByteArray returns true, cleartext contains the value encrypted in
// ciphertext.
// If DecryptByteArray returns false, the ciphertext could not be decrypted
// (e.g. the signature did not match).
bool DecryptByteArray(
    const string& ciphertext, const string& encryption_key,
    const string& integrity_key, string* cleartext) {
  // Step 1. find the length of initialization vector and clear text.
  const int cleartext_length =
     ciphertext.size() - kInitializationVectorSize - kSignatureSize;
  if (cleartext_length < 0) {
    // The length can't be correct.
    return false;
  }

  string iv(ciphertext, 0, kInitializationVectorSize);

  // Step 2. recover clear text
  cleartext->resize(cleartext_length, '\0');
  const char* ciphertext_begin = string_as_array(ciphertext) + iv.size();
  const char* const ciphertext_end = ciphertext_begin + cleartext->size();
  string::iterator cleartext_begin = cleartext->begin();

  bool add_iv_counter_byte = true;
  while (ciphertext_begin < ciphertext_end) {
    uint32 pad_size = kHashOutputSize;
    uchar encryption_pad[kHashOutputSize];

    if (!HMAC(EVP_sha1(), string_as_array(encryption_key),
              encryption_key.length(), (uchar*)string_as_array(iv),
              iv.size(), encryption_pad, &pad_size)) {
      cout << "Error: encryption HMAC failed." << endl;
      return false;
    }

    for (int i = 0;
         i < kBlockSize && ciphertext_begin < ciphertext_end;
         ++i, ++cleartext_begin, ++ciphertext_begin) {
      *cleartext_begin = *ciphertext_begin ^ encryption_pad[i];
    }

    if (!add_iv_counter_byte) {
      char& last_byte = *iv.rbegin();
      ++last_byte;
      if (last_byte == '\0') {
        add_iv_counter_byte = true;
      }
    }

    if (add_iv_counter_byte) {
      add_iv_counter_byte = false;
      iv.push_back('\0');
    }
  }

  // Step 3. Compute integrity hash. The input to the HMAC is cleartext
  // followed by initialization vector, which is stored in the 1st section of
  // ciphertext.
  string input_message(kInitializationVectorSize + cleartext->size(), '\0');
  memcpy(string_as_array(&input_message),
         string_as_array(cleartext), cleartext->size());
  memcpy(string_as_array(&input_message) + cleartext->size(),
         string_as_array(ciphertext), kInitializationVectorSize);

  uint32 integrity_hash_size = kHashOutputSize;
  unsigned char integrity_hash[kHashOutputSize];
  if (!HMAC(EVP_sha1(), string_as_array(integrity_key),
            integrity_key.length(), (uchar*)string_as_array(input_message),
            input_message.size(), integrity_hash, &integrity_hash_size)) {
    cout << "Error: integrity HMAC failed." << endl;
    return false;
  }

  return memcmp(ciphertext_end, integrity_hash, kSignatureSize) == 0;
}

// This function is to decrypt winning price.
// Note that decrypting IDFA (or Android Advertiser Id, or hashed IDFA) is
// very similar to decrypting winning price, except that
//  1. IDFA has 16 bytes instead of 8 bytes;
//  2. IDFA is a byte array, therefore doesn't need to switch byte order to
//     handle big endian vs. little endian issue.
bool DecryptWinningPrice(
    const string& encrypted_value, const string& encryption_key,
    const string& integrity_key, int64* value) {
  string cleartext;
  if (!DecryptByteArray(encrypted_value, encryption_key, integrity_key,
                        &cleartext)) {
    // fail to decrypt
    return false;
  }

  if (cleartext.size() != sizeof(value)) {
    // cleartext has wrong size
    return false;
  }
  // Switch to host byte order.
  *value = ntohll(*reinterpret_cast<const int64*>(string_as_array(cleartext)));
  return true;
}

}  // namespace

//--eKey:AC-8E-46-91-40-99-A9-14-13-B7-22-82-FE-2E-55-42-7C-80-F7-CF-A2-DD-47-C2-50-19-7B-C0-6E-2D-85-36
//--iKey:0B-B7-46-48-47-F6-85-FA-DC-9E-E9-54-AA-21-D5-46-CD-54-98-A9-19-2B-91-CA-39-25-8E-CE-63-FB-FC-7A

// An example program that decodes the hardcoded ciphertext using hardcoded
// keys. First it base64 decodes the encrypted value, then it calls Decrypt to
// decrypt the ciphertext and verify its integrity.
int DecodeWinningPrice(char *encodedprice, double *value)
{
  const char kEncryptionKey[] = {
//      0x71, 0xa6, 0x4b, 0x88, 0xbd, 0xcb, 0xd7, 0xf5, 0xb6, 0xae, 0xdb, 0xc3,
//      0x2c, 0x80, 0xda, 0x2a, 0xe4, 0xa4, 0x08, 0xea, 0x59, 0x32, 0xde, 0x11,
//      0xa7, 0x0d, 0xb6, 0x00, 0x88, 0xa4, 0xac, 0x15
	//0x06, 0xa6, 0xd1, 0x2b, 0x6c, 0xef, 0xa8, 0xe9, 0xc2, 0xc5, 0xb0, 0xab,
	//0x14, 0x07, 0x3f, 0x7f, 0xea, 0xac, 0x6c, 0xad, 0xdf, 0xce, 0xdd, 0xd1,
	//0xbb, 0xc1, 0x84, 0x22, 0x18, 0x8a, 0x6d, 0xc8
	0x14, 0xdc, 0x81, 0x98, 0xdf, 0xff, 0x1b, 0xd6, 0xde, 0x19, 0xe8, 0x18,
	0x5d, 0x5b, 0x54, 0x7e, 0x23, 0x84, 0x01, 0xfe, 0x67, 0x83, 0x53, 0x4f,
	0xb0, 0x5f, 0x61, 0x36, 0x74, 0x9d, 0xfa, 0x9d
  };
  const char kIntegrityKey[] = {
//      0xcd, 0xeb, 0x68, 0xa2, 0xaf, 0xf3, 0x92, 0xf6, 0x74, 0x24, 0xcd, 0x7b,
//      0x70, 0xe8, 0xec, 0xad, 0xe6, 0x8c, 0x01, 0x31, 0xbf, 0xd6, 0x95, 0x70,
//      0x98, 0x21, 0xc3, 0x69, 0xed, 0x54, 0x1f, 0x25
	//0xa6, 0x97, 0x4e, 0x1b, 0x71, 0xfe, 0xdd, 0x26, 0x33, 0xf8, 0x09, 0xc7,
	//0x0e, 0x37, 0x84, 0x65, 0x8f, 0x13, 0x1a, 0x17, 0xda, 0xa3, 0x4f, 0x7a,
	//0xea, 0xd4, 0x62, 0xa3, 0xe7, 0x3e, 0x4b, 0x54
	0xe5, 0xbe, 0x8c, 0xe4, 0xb7, 0x1f, 0xe5, 0x7a, 0xcc, 0xe8, 0x74, 0x51,
	0x1a, 0xcf, 0x51, 0x69, 0x89, 0xf1, 0x95, 0xe9, 0x83, 0x33, 0x97, 0xc4,
	0x2b, 0x3a, 0xf3, 0xd6, 0x64, 0xd2, 0xa1, 0xfc
  };

  string encryption_key(kEncryptionKey, kKeySize);
  string integrity_key(kIntegrityKey, kKeySize);
  int64 va;
  // This is an example of the encrypted data. It has a fixed length of 38
  // characters. The two padding characters are removed. It decodes to a string
  // of 28 bytes. The decrypted value should be 709959680.
  const string kB64EncodedValue(encodedprice);
  string encrypted_value = B64Decode(kB64EncodedValue);
  if (encrypted_value.size() != kEncryptedValueSize) {
    char sz[16];
    sprintf(sz, "%lu", encrypted_value.size());
    cout << "Error: unexpected ciphertext length: " << sz << endl;
    return 1;
  }

  bool success = DecryptWinningPrice(
      encrypted_value, encryption_key, integrity_key, &va);
      *value = (double)va;
  if (success) {
//    printf("The value is:   %lld\n", value);
    struct timeval tv;
    GetTime(encrypted_value.data(), &tv);
    struct tm tm;
    localtime_r(&tv.tv_sec, &tm);
//    printf("Sent on %04d-%02d-%02d|%02d:%02d:%02d.%06ld\n",
//           tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
//           tm.tm_hour, tm.tm_min, tm.tm_sec, tv.tv_usec);
  } else {
	cout<<"failed!!!"<<endl;
	*value = 0;
//    printf("Failed to decrypt value.\n");
  }
  return 0;
}

// Test data for TestByteArray(). Note that this test data is not the
// deserialization result of an actual hyperlocal protocol buffer.
extern const char ciphertext[];
extern const int ciphertext_size;

// Decrypt byte array of 6,399 bytes. Hyperlocal targeting signal can be
// of variable length. After decrypting the encrypted byte array, you can
// deserialize the cleartext into protocol buffer.
int TestByteArray() {
  const char kEncKey[] = {
      0x02, 0xEE, 0xa8, 0x3c, 0x6c, 0x12, 0x11, 0xe1, 0x0b, 0x9f, 0x88, 0x96,
      0x6c, 0xee, 0xc3, 0x49, 0x08, 0xeb, 0x94, 0x6f, 0x7e, 0xd6, 0xe4, 0x41,
      0xaf, 0x42, 0xb3, 0xc0, 0xf3, 0x21, 0x81, 0x40
  };
  const char kIntKey[] = {
      0xbf, 0xFF, 0xec, 0x55, 0xc3, 0x01, 0x30, 0xc1, 0xd8, 0xcd, 0x18, 0x62,
      0xed, 0x2a, 0x4c, 0xd2, 0xc7, 0x6a, 0xc3, 0x3b, 0xc0, 0xc4, 0xce, 0x8a,
      0x3d, 0x3b, 0xbd, 0x3a, 0xd5, 0x68, 0x77, 0x92
  };
  const string encryption_key(kEncKey, kKeySize);
  const string integrity_key(kIntKey, kKeySize);
  const string encrypted_value(ciphertext, ciphertext_size);

  string cleartext;
  bool success = DecryptByteArray(
    encrypted_value, encryption_key, integrity_key, &cleartext);

  if (!success) {
//    printf("Failed to decrypt byte array.\n");
    return 1;
  }

  const unsigned int expected_length = 6398;
  if (cleartext.size() != expected_length) {
//    printf("Cleartext length %lu is wrong. Expected length: %d.\n",
//           cleartext.size(), expected_length);
    return 1;
  }

  // The cleartext is a byte array with the same byte repeated multiple times.
  const string expected_cleartext(expected_length, '\xfe');
  if (cleartext != expected_cleartext) {
//    printf("Clear text decryption error.\n");
    return 1;
  }

//  printf("Decryption succeeded.\n");
  return 0;
}
/*
int main(int argc, char** argv) {
  int status = TestWinningPrice();
  if (status != 0) {
    return status;
  }

  status = TestByteArray();
  if (status != 0) {
    return status;
  }

  return 0;
}
*/
const char ciphertext[] = {
    0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x20, 0x73, 0x6f,
    0x75, 0x72, 0x63, 0x65, 0x02, 0x41, 0x42, 0x43,
    0xa5, 0xb2, 0xe2, 0x4e, 0x09, 0x22, 0x04, 0x8e,
    0xfd, 0x35, 0xc4, 0x72, 0x57, 0xc7, 0xdb, 0xd4,
    0x52, 0x05, 0x81, 0x28, 0x1e, 0x48, 0x9e, 0xfc,
    0x3e, 0xeb, 0x75, 0xa5, 0x33, 0x6d, 0x39, 0xa5,
    0x8d, 0xfa, 0x93, 0x4d, 0xd4, 0x05, 0x4a, 0x63,
    0xfa, 0xce, 0xbf, 0xdc, 0xd6, 0x79, 0xcb, 0x5e,
    0xf7, 0xbe, 0x2b, 0x85, 0x4e, 0x6f, 0xfa, 0xbc,
    0x48, 0x11, 0x17, 0x3a, 0x46, 0xf5, 0x8d, 0xb9,
    0x7f, 0x9b, 0xfe, 0x96, 0x36, 0xe6, 0xc3, 0xc7,
    0xfc, 0xce, 0x5d, 0xd1, 0x2d, 0xba, 0x72, 0x8f,
    0xb1, 0xe9, 0x6e, 0x54, 0xdf, 0xde, 0x1c, 0x4b,
    0x4f, 0xe7, 0x12, 0xe5, 0xdd, 0x8b, 0x41, 0xff,
    0xa3, 0x23, 0x75, 0xfc, 0xde, 0xea, 0x15, 0xb4,
    0x55, 0xf4, 0xc4, 0x6b, 0x07, 0x77, 0xb9, 0x5b,
    0x7a, 0x41, 0x8f, 0x25, 0x3a, 0x60, 0x8d, 0x8c,
    0x82, 0xf1, 0xef, 0xf1, 0xd7, 0x8e, 0x9c, 0x77,
    0x8a, 0x6f, 0x18, 0x41, 0x59, 0x38, 0xa4, 0x70,
    0xa5, 0xbd, 0xec, 0xe5, 0xab, 0x3f, 0xae, 0x29,
    0x26, 0x2c, 0xe9, 0x77, 0x2b, 0xbb, 0x94, 0xae,
    0x37, 0x5e, 0x65, 0xba, 0x5e, 0x58, 0xfd, 0x8f,
    0x75, 0x49, 0x3e, 0x8b, 0xf9, 0x1b, 0x81, 0x51,
    0x7e, 0x49, 0xd0, 0xda, 0x33, 0xf2, 0x6a, 0x30,
    0xed, 0x05, 0xea, 0x94, 0x75, 0xe7, 0xec, 0x3c,
    0x48, 0x3f, 0x96, 0xbe, 0xec, 0xac, 0xb4, 0x6d,
    0xf1, 0xe7, 0xca, 0x9c, 0xfd, 0x5a, 0xf6, 0x2c,
    0x51, 0xb1, 0xb5, 0x3b, 0xda, 0xa7, 0x0e, 0xf1,
    0x75, 0x4f, 0x8c, 0x72, 0xb1, 0x2f, 0xfe, 0x09,
    0xa2, 0xd4, 0x63, 0x7e, 0xa2, 0xe2, 0x7f, 0x7f,
    0x3d, 0x12, 0xbd, 0x46, 0xf5, 0xe8, 0xbc, 0x20,
    0x10, 0xb5, 0x2a, 0x21, 0xee, 0x08, 0x85, 0x64,
    0x60, 0x2f, 0xbf, 0x71, 0x48, 0x90, 0x5e, 0x41,
    0xac, 0xe4, 0x7b, 0xc7, 0x95, 0x70, 0x05, 0x38,
    0x92, 0xbf, 0xe8, 0x51, 0x54, 0x17, 0x45, 0xd2,
    0x04, 0x45, 0xcf, 0xdf, 0x4d, 0xee, 0x3f, 0x3e,
    0xa4, 0xe5, 0x62, 0x19, 0x68, 0x31, 0x41, 0x36,
    0xf3, 0xac, 0x46, 0x4b, 0xdf, 0xe1, 0xb4, 0xe3,
    0x78, 0xc7, 0x2c, 0xfd, 0x1e, 0x63, 0xd6, 0x44,
    0x64, 0xd0, 0x42, 0x8e, 0x14, 0xd4, 0xf4, 0x0b,
    0xce, 0x39, 0xe8, 0xfd, 0xfd, 0x9a, 0x2e, 0x21,
    0x9c, 0xd9, 0x49, 0x0f, 0xbb, 0x6d, 0xbc, 0xc4,
    0x49, 0xbd, 0xc7, 0x6d, 0xf4, 0x6d, 0x41, 0x49,
    0x60, 0xa5, 0x46, 0x2f, 0x12, 0x80, 0xd4, 0x66,
    0x32, 0x86, 0x83, 0xba, 0x6e, 0x5d, 0x7a, 0x3f,
    0x44, 0x99, 0x3e, 0x7d, 0x4f, 0x87, 0x21, 0xc6,
    0x83, 0xe3, 0x6c, 0xcb, 0xc9, 0x07, 0xbf, 0x2b,
    0x0a, 0xf9, 0x4e, 0xc8, 0xe3, 0xda, 0xe5, 0x86,
    0x85, 0x04, 0x22, 0x33, 0xc0, 0xb8, 0xca, 0x1c,
    0xc4, 0xb6, 0xbe, 0x81, 0x31, 0x42, 0x41, 0x4c,
    0x6e, 0x0a, 0x93, 0xc4, 0xdb, 0x14, 0x1c, 0xf3,
    0x81, 0x33, 0x6f, 0xd8, 0xae, 0xa9, 0xbf, 0x3d,
    0xcc, 0xf6, 0xf6, 0xc5, 0x13, 0x7d, 0xde, 0x78,
    0x1b, 0xe5, 0x9d, 0xc5, 0x08, 0x5f, 0x56, 0x03,
    0xa0, 0x1d, 0x54, 0xc8, 0x39, 0x8c, 0x38, 0x3a,
    0xcb, 0xdb, 0x35, 0xfc, 0x01, 0xa1, 0x0a, 0x85,
    0xdd, 0x6d, 0xf9, 0xf9, 0x1c, 0x8f, 0x18, 0x1f,
    0xcc, 0x75, 0x2f, 0x5f, 0x31, 0x58, 0x26, 0xe6,
    0x46, 0xa7, 0x33, 0x47, 0x74, 0x76, 0x9f, 0x6b,
    0xd6, 0x9c, 0x88, 0xd3, 0x42, 0x9c, 0x82, 0xd0,
    0x8c, 0x9a, 0xf6, 0xef, 0x38, 0xed, 0x65, 0x95,
    0x30, 0x49, 0x15, 0x11, 0xd0, 0x8a, 0xca, 0x57,
    0x4a, 0xa3, 0x70, 0x43, 0x58, 0x97, 0x7b, 0x77,
    0xc5, 0xd4, 0x68, 0x12, 0x40, 0x3a, 0x5c, 0x38,
    0xb9, 0x52, 0x5b, 0xb1, 0x9d, 0xee, 0x12, 0x82,
    0x4f, 0x82, 0x94, 0x1c, 0x65, 0x43, 0xaf, 0xe7,
    0x26, 0xca, 0x38, 0xcb, 0x03, 0x13, 0xfc, 0xa7,
    0x04, 0xab, 0xa9, 0xe8, 0x10, 0xd3, 0x06, 0x31,
    0x5b, 0x76, 0xcc, 0x7a, 0x12, 0xcc, 0x73, 0x8e,
    0xea, 0x26, 0xef, 0x46, 0xc3, 0x38, 0x52, 0x7a,
    0xf9, 0x07, 0xc5, 0x91, 0xef, 0x14, 0x6e, 0xda,
    0x00, 0xcc, 0x00, 0x62, 0xf4, 0xcf, 0x76, 0x4c,
    0xba, 0x2d, 0x87, 0xd1, 0x42, 0x40, 0x5b, 0x74,
    0x47, 0x1f, 0x7b, 0x24, 0x10, 0xf3, 0x5f, 0xee,
    0x4d, 0xaa, 0x84, 0x0f, 0xbd, 0xdb, 0xce, 0x3e,
    0xa5, 0xff, 0x4c, 0x1f, 0xec, 0x64, 0xff, 0xbf,
    0x85, 0xbe, 0xbb, 0x2d, 0x60, 0x81, 0x22, 0x27,
    0x10, 0x80, 0x72, 0xbf, 0xfe, 0x94, 0xa5, 0x53,
    0x48, 0x89, 0xdb, 0x1d, 0xdf, 0x05, 0xc7, 0x8d,
    0xa6, 0x07, 0x53, 0x51, 0xb8, 0xca, 0xa7, 0xaf,
    0x54, 0xcf, 0xc5, 0x97, 0x7f, 0x76, 0x38, 0xb6,
    0xb7, 0x37, 0xaa, 0x83, 0x47, 0xb9, 0x3f, 0xc8,
    0xdc, 0xff, 0xe8, 0x96, 0xb4, 0xae, 0xf0, 0xfa,
    0x8f, 0x7f, 0x1d, 0x95, 0xe1, 0xe2, 0x02, 0x36,
    0x1d, 0xdc, 0x3e, 0x77, 0xc1, 0x7e, 0x10, 0x10,
    0x1a, 0x9e, 0xdc, 0xf0, 0x9a, 0x69, 0x6a, 0x78,
    0x86, 0x96, 0x44, 0x96, 0x67, 0xfc, 0xf6, 0xe2,
    0x1d, 0xcf, 0x1d, 0x1d, 0x54, 0xe9, 0xd2, 0xfd,
    0x45, 0xc2, 0x27, 0x95, 0x38, 0x1e, 0xc2, 0x79,
    0x0b, 0x8d, 0x78, 0x91, 0x50, 0xd5, 0x01, 0xd4,
    0x56, 0x2c, 0xf6, 0x1f, 0x00, 0xc7, 0x45, 0x6d,
    0xb7, 0xcc, 0x46, 0x86, 0xaf, 0x42, 0x3c, 0xcc,
    0x56, 0xed, 0xc8, 0xd4, 0x31, 0x84, 0xb1, 0xcc,
    0xf5, 0xf1, 0x04, 0xe7, 0xc8, 0x60, 0xe7, 0xba,
    0xa6, 0x53, 0x57, 0x5b, 0x5c, 0x5b, 0xed, 0xe8,
    0x84, 0x51, 0x54, 0xcf, 0xfe, 0x44, 0x6a, 0xc7,
    0x0d, 0xe5, 0x6b, 0x9f, 0x63, 0x39, 0xe8, 0x1c,
    0x58, 0x56, 0x2a, 0xee, 0x81, 0xa0, 0xa5, 0x9a,
    0x24, 0x33, 0xae, 0x4c, 0x1a, 0x75, 0xe4, 0x41,
    0x9f, 0x96, 0x59, 0x38, 0x06, 0x7e, 0x00, 0x42,
    0xbf, 0x88, 0x04, 0x1d, 0x92, 0x6b, 0x33, 0x1c,
    0x0b, 0x00, 0x31, 0x57, 0xa4, 0xc1, 0x6e, 0x67,
    0xd6, 0xcf, 0xa8, 0x56, 0x36, 0x27, 0x8a, 0xbb,
    0xac, 0x5d, 0x2f, 0xe9, 0x05, 0xcc, 0xe2, 0x33,
    0x4d, 0xd7, 0xde, 0x60, 0xb0, 0x25, 0xee, 0x92,
    0x7b, 0xa3, 0xec, 0xcc, 0x1b, 0x3a, 0xfc, 0x3a,
    0x58, 0x1f, 0xaf, 0xaa, 0xf9, 0x86, 0x4d, 0x24,
    0xca, 0x2a, 0x10, 0x58, 0x28, 0x19, 0x26, 0x5f,
    0x60, 0xec, 0x38, 0xa7, 0xae, 0x12, 0xd6, 0xbe,
    0x56, 0xe8, 0x4a, 0x6f, 0xf3, 0xee, 0x96, 0x9c,
    0x39, 0x89, 0xb3, 0xbb, 0x88, 0x3d, 0xb0, 0x31,
    0x15, 0xcc, 0x00, 0x12, 0x2e, 0x8e, 0xa3, 0x2f,
    0xa4, 0x90, 0x7c, 0xb3, 0x8e, 0x7d, 0xe9, 0xf3,
    0xe2, 0x56, 0x97, 0x5a, 0xcb, 0xa4, 0xc6, 0xf3,
    0xc3, 0x35, 0xfb, 0x02, 0xc4, 0xe2, 0xe9, 0x75,
    0x0c, 0x5b, 0xc3, 0x79, 0xbc, 0xbd, 0x65, 0x82,
    0xc9, 0xdd, 0x6a, 0x37, 0x77, 0xef, 0x99, 0x3a,
    0x71, 0xb6, 0xea, 0x93, 0x0b, 0xd7, 0x4a, 0x1f,
    0x56, 0xf0, 0x88, 0x28, 0x1d, 0xb7, 0x7a, 0x22,
    0xf4, 0xf1, 0x10, 0xd0, 0x68, 0x52, 0x51, 0xc7,
    0x26, 0xd0, 0x8c, 0xc2, 0x99, 0x80, 0xa9, 0x64,
    0x96, 0xb4, 0x25, 0x1e, 0x8b, 0x0a, 0x70, 0x0f,
    0xda, 0x73, 0x90, 0xd3, 0x25, 0x4d, 0xc8, 0x3d,
    0x97, 0xb2, 0x17, 0x61, 0xd9, 0x74, 0x75, 0x0c,
    0x63, 0x72, 0x37, 0xa1, 0xbd, 0xe0, 0xe5, 0x0f,
    0xb0, 0x46, 0xff, 0x26, 0x53, 0xe3, 0x87, 0x16,
    0xdf, 0x4a, 0xa6, 0x86, 0xa9, 0xc4, 0xa2, 0x3f,
    0x42, 0xa8, 0x06, 0xee, 0xe5, 0x37, 0x27, 0x27,
    0x01, 0xd2, 0x36, 0x73, 0xfb, 0x51, 0x2f, 0x93,
    0x8c, 0x44, 0x0b, 0x3f, 0x75, 0xf8, 0xbd, 0x65,
    0xef, 0xcd, 0x91, 0x87, 0xf9, 0x2d, 0x4c, 0x54,
    0x94, 0xf2, 0xfa, 0xfc, 0x4f, 0x98, 0xe0, 0x53,
    0x5b, 0x33, 0x41, 0x14, 0x5a, 0x23, 0x7f, 0x0e,
    0x7d, 0xff, 0xfd, 0x11, 0x78, 0xe2, 0x57, 0x22,
    0xf9, 0xbe, 0xde, 0x2e, 0xa0, 0x10, 0x7c, 0x1b,
    0x55, 0xf6, 0x19, 0xa0, 0x15, 0xd8, 0x9a, 0x29,
    0xa2, 0x5f, 0x6e, 0xb3, 0x1e, 0x46, 0x28, 0x2a,
    0x11, 0xe3, 0xe9, 0x3e, 0x12, 0x21, 0x77, 0x3c,
    0x33, 0xcc, 0x0e, 0xa4, 0xe4, 0xbb, 0x89, 0xa5,
    0x85, 0xaa, 0x3e, 0xc4, 0xcc, 0x14, 0x64, 0xb4,
    0xe7, 0xa1, 0x9e, 0xfb, 0x03, 0xe1, 0xfa, 0xff,
    0x77, 0x1a, 0x14, 0xbb, 0x62, 0x95, 0x14, 0xc6,
    0xab, 0x13, 0x95, 0xf4, 0xc8, 0x29, 0xa7, 0xf3,
    0x10, 0x21, 0x28, 0x24, 0x9d, 0x5e, 0x7b, 0xdf,
    0xe6, 0x47, 0x1e, 0x56, 0xff, 0x24, 0x99, 0x33,
    0x2e, 0x63, 0x72, 0x69, 0xc2, 0x1f, 0x48, 0x83,
    0xa5, 0xef, 0xc5, 0xa9, 0xa1, 0x8a, 0x6b, 0x7e,
    0x13, 0x6b, 0x12, 0x0a, 0x96, 0x5b, 0xf1, 0x66,
    0x97, 0x2c, 0xa5, 0x25, 0xc5, 0xe2, 0xfd, 0x16,
    0xab, 0x82, 0x9c, 0xb4, 0xbe, 0xf4, 0xdf, 0x6e,
    0x6c, 0x9b, 0xad, 0xc2, 0xba, 0x70, 0xa8, 0x3b,
    0xb8, 0x63, 0xb8, 0x99, 0x82, 0xcc, 0x6b, 0x03,
    0x7a, 0x0e, 0xd7, 0x02, 0x9b, 0x47, 0x8a, 0x0d,
    0x57, 0x9b, 0x08, 0x5d, 0x69, 0x1d, 0x5b, 0x54,
    0xd8, 0x96, 0xb7, 0x82, 0x7c, 0x7f, 0x92, 0x9b,
    0x53, 0xf3, 0xd7, 0x7f, 0x3f, 0x0e, 0xfd, 0x33,
    0xc8, 0x94, 0xd3, 0x2a, 0x55, 0xfd, 0xba, 0x6b,
    0x92, 0x8e, 0xcd, 0x70, 0x17, 0x41, 0xad, 0x40,
    0x49, 0x24, 0x02, 0xb7, 0x4a, 0xb4, 0xbd, 0xf6,
    0x57, 0x1f, 0x23, 0xe9, 0xc3, 0x62, 0x7d, 0x6b,
    0xf2, 0x57, 0x0f, 0x92, 0x44, 0xf2, 0x18, 0x2c,
    0xee, 0xf0, 0xfa, 0xa8, 0x0d, 0x30, 0x49, 0xe5,
    0x1f, 0x5d, 0x23, 0xcd, 0x4f, 0x52, 0xd6, 0xad,
    0xcf, 0x92, 0x03, 0x89, 0xe7, 0x2c, 0xf0, 0xea,
    0x21, 0x48, 0x9f, 0x8f, 0x6c, 0xf7, 0x2b, 0x9a,
    0x73, 0x7c, 0x38, 0x08, 0xf1, 0x77, 0xbb, 0x80,
    0x6a, 0x51, 0x6e, 0xe6, 0x04, 0xf2, 0x20, 0xa8,
    0xdf, 0x64, 0x1d, 0x26, 0xa5, 0xa6, 0x44, 0x6d,
    0x08, 0xa8, 0x18, 0xb0, 0x5b, 0xa4, 0xa5, 0x78,
    0xac, 0x5e, 0xbf, 0xa7, 0x9b, 0x9d, 0x0f, 0xd1,
    0xd9, 0x5d, 0x9a, 0x05, 0x60, 0xa5, 0x1b, 0xa5,
    0xf7, 0x70, 0xa2, 0x2f, 0xe5, 0xef, 0xeb, 0x5d,
    0x3a, 0x1a, 0x9a, 0x85, 0xe9, 0x2c, 0x8c, 0x55,
    0xf1, 0xc7, 0xd4, 0xbd, 0x99, 0xd3, 0xa8, 0x65,
    0x0b, 0xd5, 0x89, 0xf2, 0x9c, 0x31, 0x28, 0xb3,
    0xfe, 0x0e, 0x69, 0x66, 0x3d, 0x9e, 0x21, 0x02,
    0x85, 0x49, 0x94, 0xe5, 0x99, 0xfa, 0xe6, 0x18,
    0xce, 0x7a, 0x5f, 0xdc, 0x86, 0xb9, 0x3f, 0x3b,
    0xbc, 0xd6, 0x33, 0x59, 0x15, 0x67, 0x5c, 0x93,
    0x68, 0x49, 0x3e, 0x84, 0x36, 0x02, 0x48, 0x3c,
    0xad, 0xdf, 0xd2, 0x18, 0x38, 0x99, 0x0c, 0x85,
    0x72, 0x93, 0xdd, 0xe9, 0xdb, 0x68, 0x13, 0x6b,
    0x6f, 0x2e, 0x22, 0xbb, 0xbe, 0x64, 0x5f, 0xb5,
    0x34, 0x6c, 0xe5, 0x91, 0xa3, 0x44, 0x3f, 0xb9,
    0x43, 0xed, 0x89, 0xcb, 0xb2, 0x7e, 0x05, 0x7d,
    0x98, 0x34, 0x11, 0x17, 0xa4, 0x28, 0x4b, 0x21,
    0xd0, 0xd9, 0x74, 0xb3, 0x07, 0x33, 0x56, 0xdb,
    0x54, 0x1a, 0x94, 0x64, 0x89, 0xa0, 0xb6, 0xf3,
    0xd7, 0xd1, 0x22, 0xb2, 0x94, 0x49, 0x2f, 0xd0,
    0x78, 0x62, 0x81, 0x24, 0x1e, 0x43, 0xc4, 0x3d,
    0xff, 0x87, 0x44, 0xfd, 0x37, 0x01, 0xa9, 0x3c,
    0x65, 0xe2, 0x16, 0xc3, 0x20, 0x53, 0x16, 0x9f,
    0x36, 0x69, 0xa9, 0x14, 0x0b, 0xaa, 0x86, 0xcc,
    0x86, 0x3a, 0x05, 0xda, 0x9a, 0x28, 0x74, 0x5c,
    0xa4, 0x8e, 0x61, 0x51, 0xde, 0x9e, 0x17, 0x4a,
    0x6c, 0x5e, 0xf0, 0x7e, 0x1f, 0x56, 0xd2, 0xdb,
    0x2f, 0xa0, 0xa8, 0xf4, 0xd4, 0x7c, 0x10, 0xb8,
    0x05, 0x0b, 0xd3, 0x85, 0x3b, 0x90, 0xf0, 0xf4,
    0x81, 0x1e, 0x7e, 0xf5, 0x19, 0xeb, 0xc7, 0xb2,
    0xac, 0x1f, 0x00, 0x4e, 0x32, 0x00, 0x04, 0x78,
    0x69, 0xef, 0x44, 0xe9, 0x74, 0xed, 0x7d, 0x50,
    0x6f, 0x31, 0x0b, 0xbf, 0x50, 0x5b, 0x12, 0x39,
    0x62, 0x05, 0xe2, 0xe5, 0xb4, 0xb3, 0x80, 0x36,
    0x6d, 0x40, 0xbf, 0x0e, 0x4f, 0xfb, 0x34, 0xaa,
    0x65, 0x45, 0x23, 0x3c, 0x77, 0xa7, 0xd5, 0x87,
    0xb2, 0x60, 0x8d, 0x7f, 0x5b, 0xe9, 0xb4, 0xd4,
    0xb3, 0x53, 0x6d, 0xc3, 0x78, 0x64, 0xf1, 0x1b,
    0x03, 0xfd, 0x59, 0x13, 0x68, 0xc6, 0x60, 0xa6,
    0x6b, 0xa1, 0xbf, 0xd7, 0xeb, 0x45, 0x13, 0xc2,
    0x81, 0x53, 0x15, 0x50, 0xff, 0x17, 0x60, 0x19,
    0xe6, 0xe8, 0x9b, 0x48, 0x2f, 0x43, 0x39, 0xbe,
    0xc4, 0x3e, 0xf0, 0xc6, 0xe4, 0x37, 0xa6, 0x5c,
    0xe7, 0xa0, 0xb4, 0xe6, 0x0a, 0xc8, 0x0a, 0xf1,
    0x32, 0xa0, 0x38, 0x2f, 0x57, 0x12, 0x77, 0x8f,
    0x18, 0x00, 0xa1, 0x4f, 0xce, 0xc2, 0xff, 0xf9,
    0xe5, 0xf0, 0x0a, 0x0b, 0xa1, 0xaf, 0x40, 0x74,
    0xbd, 0x20, 0xa2, 0xb3, 0x0d, 0x16, 0x52, 0xe8,
    0x2d, 0x56, 0x9b, 0x2f, 0x96, 0xad, 0x12, 0x49,
    0x60, 0x6b, 0x27, 0xdb, 0xfa, 0xa9, 0x5e, 0x43,
    0x6a, 0xa6, 0x8d, 0x91, 0x74, 0x3c, 0x94, 0x45,
    0x31, 0x2a, 0xf3, 0x4e, 0xd9, 0x95, 0x85, 0x7d,
    0x8c, 0xd9, 0x77, 0xd2, 0x2c, 0x7f, 0x48, 0xb8,
    0xd7, 0xb6, 0x94, 0xc8, 0x93, 0x6b, 0x5b, 0x89,
    0xe1, 0x29, 0x9d, 0xca, 0x4a, 0x46, 0x76, 0x16,
    0x4a, 0x3e, 0x7b, 0x24, 0x15, 0x47, 0x3f, 0x41,
    0xbc, 0x0c, 0xf5, 0xfc, 0xc5, 0xb0, 0x47, 0x51,
    0x42, 0x25, 0xcf, 0x2d, 0x3c, 0x9f, 0x67, 0x45,
    0xcd, 0x59, 0x9c, 0xa1, 0x20, 0x2b, 0x77, 0x65,
    0x71, 0xab, 0x72, 0x7b, 0x64, 0xc6, 0x3f, 0x64,
    0xb4, 0x2c, 0x06, 0x84, 0xd6, 0xa8, 0x3f, 0xc1,
    0xc1, 0x55, 0xe7, 0x9f, 0xfc, 0x7f, 0xda, 0x23,
    0x84, 0x5f, 0x64, 0x36, 0x84, 0x09, 0x04, 0xd2,
    0x19, 0x7a, 0x91, 0x3a, 0xbe, 0xc9, 0xf2, 0x84,
    0x38, 0x3f, 0xdd, 0xe4, 0x7f, 0x19, 0x33, 0x1c,
    0x2f, 0xce, 0xff, 0x00, 0x77, 0x01, 0xe8, 0x61,
    0x43, 0xe8, 0xee, 0x98, 0xdd, 0x46, 0x80, 0xce,
    0xc7, 0x11, 0x9f, 0x5a, 0x7b, 0x4d, 0x24, 0xb8,
    0xa2, 0x65, 0x15, 0x48, 0x57, 0x03, 0x35, 0xc9,
    0x93, 0x9d, 0x15, 0x66, 0x88, 0x63, 0xed, 0xc4,
    0x34, 0x92, 0x12, 0xd1, 0xd3, 0x05, 0x68, 0xb3,
    0x89, 0x8d, 0xbc, 0x60, 0x92, 0x07, 0xc7, 0xa7,
    0x04, 0x1c, 0x76, 0x18, 0xb8, 0x91, 0x0e, 0x1c,
    0x3a, 0xf5, 0x86, 0xf6, 0xc4, 0x20, 0x82, 0xc2,
    0xdd, 0x27, 0x34, 0x25, 0x11, 0x93, 0x10, 0x91,
    0x1e, 0x68, 0xc5, 0x27, 0x29, 0x15, 0xa4, 0x02,
    0x98, 0x00, 0x09, 0xdc, 0x2a, 0x65, 0x95, 0xdb,
    0xa7, 0x07, 0xf6, 0x46, 0x7e, 0x71, 0xe8, 0xc3,
    0x90, 0xe2, 0x0c, 0xd1, 0x84, 0x0e, 0x6f, 0x21,
    0xc6, 0xb7, 0xb6, 0xc9, 0xd3, 0xbc, 0x8a, 0x9d,
    0xc3, 0x87, 0xfe, 0xd0, 0x56, 0xec, 0x5f, 0x49,
    0x11, 0x56, 0xca, 0xb4, 0x91, 0x6f, 0x8a, 0x04,
    0x5e, 0x41, 0x13, 0x05, 0xde, 0x46, 0xe5, 0x4f,
    0xa1, 0x96, 0x95, 0xa5, 0x31, 0xe9, 0x63, 0x2a,
    0x15, 0xd7, 0x9d, 0x47, 0xa0, 0xa8, 0x9b, 0x7e,
    0x59, 0x21, 0x9e, 0x41, 0x41, 0x6a, 0xe7, 0xfb,
    0x9f, 0x13, 0xa5, 0x71, 0x58, 0xe6, 0x8b, 0x93,
    0x60, 0x06, 0x7a, 0x0b, 0xa5, 0x42, 0xe6, 0x2c,
    0x4b, 0x93, 0xfa, 0x69, 0x61, 0x6f, 0x2e, 0x75,
    0x4c, 0x1c, 0x21, 0x7a, 0x73, 0x25, 0x1e, 0xb3,
    0xac, 0xdb, 0xb8, 0x9b, 0xb0, 0x00, 0x19, 0xea,
    0xa1, 0x55, 0x7e, 0x45, 0x6f, 0x60, 0xcf, 0x4a,
    0x58, 0x53, 0xcc, 0x74, 0x05, 0x7c, 0x27, 0x71,
    0xa2, 0x44, 0xb6, 0x4e, 0x76, 0x82, 0x3c, 0x05,
    0xd4, 0x7c, 0x8b, 0x09, 0xce, 0x28, 0x19, 0xae,
    0x3e, 0x4a, 0x5d, 0xaf, 0x1b, 0xa1, 0xce, 0x8f,
    0x9b, 0xca, 0xce, 0xe4, 0xc0, 0x3a, 0xb8, 0xc8,
    0x08, 0x36, 0x96, 0x91, 0x32, 0xae, 0x6a, 0xb3,
    0x32, 0x59, 0x31, 0x48, 0xcc, 0xfd, 0x8d, 0x45,
    0x59, 0x82, 0xda, 0x5b, 0xab, 0x1b, 0x14, 0x7c,
    0x88, 0x40, 0xc9, 0x05, 0x2a, 0xe4, 0x7a, 0x6d,
    0x46, 0xaf, 0x61, 0x1f, 0x48, 0x09, 0xf3, 0x4e,
    0x8a, 0xcb, 0x67, 0x1a, 0xac, 0x86, 0x38, 0xe6,
    0xdf, 0x39, 0x05, 0xe2, 0x2f, 0x71, 0x2b, 0xfe,
    0x9e, 0x51, 0xa8, 0xeb, 0x6b, 0xe9, 0x19, 0x93,
    0x5c, 0x94, 0x2e, 0xb8, 0xcf, 0x16, 0x21, 0x58,
    0x9a, 0xe9, 0xf7, 0x63, 0x02, 0xff, 0x69, 0xcd,
    0x06, 0xb2, 0x48, 0x10, 0xb6, 0xd0, 0xa3, 0xfb,
    0x53, 0x7d, 0x83, 0x51, 0x6d, 0x7c, 0xe7, 0x5a,
    0x8b, 0x76, 0xcf, 0xb4, 0x7b, 0xb5, 0x8c, 0x40,
    0xf7, 0xb8, 0x27, 0x1f, 0xd8, 0xf9, 0xff, 0xb9,
    0x18, 0x45, 0x83, 0x6a, 0xfc, 0xd4, 0x25, 0xf3,
    0xf7, 0xce, 0xa5, 0x9a, 0x62, 0x71, 0x21, 0x25,
    0xd9, 0x69, 0x24, 0xb1, 0xf1, 0x6e, 0x4c, 0xcf,
    0xcb, 0x33, 0x30, 0x2c, 0xab, 0x5e, 0x05, 0x16,
    0x77, 0x4b, 0x84, 0x70, 0x74, 0x9b, 0x4d, 0x70,
    0xb2, 0x52, 0xda, 0xa2, 0xee, 0x19, 0x01, 0x4f,
    0x30, 0xf1, 0xc1, 0xb3, 0x2f, 0xaa, 0x15, 0x80,
    0x56, 0x35, 0xc9, 0x15, 0x53, 0x6e, 0xda, 0x07,
    0x86, 0x0a, 0xd2, 0x3d, 0xba, 0xf7, 0xd7, 0x79,
    0x17, 0x4c, 0x28, 0xbd, 0x1c, 0x00, 0xdd, 0x12,
    0x01, 0xac, 0x06, 0x4b, 0x1c, 0xb5, 0x4b, 0x75,
    0xeb, 0x3e, 0x38, 0x52, 0x33, 0x19, 0x67, 0xfb,
    0x18, 0xac, 0x74, 0x9d, 0xd9, 0x7d, 0x0e, 0x6b,
    0xef, 0xbb, 0x07, 0xa8, 0xcc, 0xcb, 0x64, 0x77,
    0x58, 0xec, 0xef, 0xa6, 0x14, 0x5e, 0x2b, 0x2f,
    0x0f, 0xfd, 0x84, 0x76, 0x1c, 0x78, 0x10, 0xcf,
    0xac, 0x23, 0x63, 0x28, 0x11, 0xbf, 0xcc, 0x63,
    0x52, 0x97, 0x82, 0x2d, 0xe8, 0xdd, 0xac, 0x75,
    0x88, 0x6c, 0x63, 0x4a, 0xc8, 0xd3, 0xd6, 0x85,
    0xb6, 0x86, 0xee, 0xaa, 0xcf, 0x6c, 0x93, 0x37,
    0xbe, 0x9b, 0x20, 0x33, 0xa0, 0x1e, 0x6d, 0xeb,
    0x89, 0xf3, 0x87, 0x54, 0xe8, 0x75, 0x4c, 0xef,
    0xfc, 0x68, 0xfa, 0x9d, 0x26, 0x99, 0xd1, 0x7f,
    0x70, 0xf9, 0x76, 0x2c, 0x0a, 0x94, 0xa3, 0x9e,
    0x41, 0xdf, 0x7e, 0x68, 0x21, 0x10, 0x4c, 0x6c,
    0xe0, 0x87, 0xf8, 0x79, 0x29, 0x13, 0xda, 0x92,
    0x78, 0xf5, 0xb6, 0x73, 0x0b, 0x77, 0xcd, 0x4f,
    0x09, 0x7d, 0x0d, 0x34, 0x04, 0x3d, 0xd6, 0xac,
    0x76, 0xeb, 0x91, 0xcb, 0x45, 0x7b, 0x58, 0x84,
    0xa1, 0xad, 0x51, 0x62, 0xed, 0xaf, 0xc1, 0x72,
    0xbf, 0x92, 0xea, 0xcb, 0x72, 0x96, 0x70, 0xff,
    0xa9, 0x98, 0xac, 0x8f, 0x94, 0xeb, 0x2a, 0x1a,
    0xc5, 0x47, 0x90, 0xbd, 0xeb, 0xbc, 0x42, 0xb9,
    0x50, 0x66, 0xbc, 0xf1, 0xb3, 0x62, 0x77, 0xd0,
    0x51, 0xc9, 0x12, 0x81, 0x63, 0xfd, 0x28, 0x82,
    0xc0, 0x0b, 0x93, 0x27, 0x08, 0xfc, 0x32, 0xb0,
    0x97, 0xde, 0x5f, 0xed, 0x65, 0x51, 0x9a, 0xc0,
    0xe9, 0x84, 0xee, 0x50, 0xab, 0xbd, 0x7a, 0x6d,
    0x21, 0x7a, 0xdd, 0xf2, 0xc0, 0xa6, 0xdb, 0xe9,
    0xb7, 0xc2, 0x85, 0x11, 0x54, 0xd7, 0x75, 0x93,
    0xa1, 0xb0, 0xc5, 0x32, 0x0c, 0x0f, 0xfd, 0x45,
    0x09, 0x00, 0xa0, 0x24, 0x49, 0x3d, 0x11, 0x9f,
    0xfc, 0x2d, 0x0b, 0x5c, 0x26, 0xbb, 0xd0, 0xa5,
    0x5f, 0xc0, 0x8b, 0x8c, 0xd2, 0xf8, 0xa0, 0x42,
    0x37, 0x20, 0x1e, 0x8c, 0xdb, 0x1b, 0x8c, 0xe7,
    0xaf, 0xe3, 0xa8, 0x85, 0xea, 0xf6, 0x58, 0x90,
    0xa1, 0x9c, 0xf1, 0xfb, 0xad, 0x5b, 0x1d, 0x2f,
    0x44, 0xe9, 0xa7, 0xb5, 0x0b, 0x9f, 0xd6, 0xfe,
    0x9d, 0x07, 0x12, 0x5e, 0x92, 0x2a, 0x73, 0x9a,
    0xfa, 0x02, 0x69, 0x8e, 0xeb, 0xa5, 0x15, 0xdf,
    0xce, 0xbb, 0xa8, 0x0a, 0x04, 0xac, 0xe8, 0x50,
    0x63, 0xc1, 0x1d, 0x19, 0x65, 0x5d, 0x89, 0x4f,
    0x21, 0x46, 0xc2, 0x5b, 0x7d, 0xe1, 0x51, 0x7f,
    0xc5, 0xd0, 0xb5, 0x0b, 0x01, 0x02, 0x37, 0x18,
    0x4a, 0x24, 0x29, 0x97, 0xbe, 0x72, 0xad, 0x5a,
    0xd0, 0xf2, 0xf9, 0xad, 0xeb, 0x06, 0x89, 0x0a,
    0x29, 0xd5, 0x58, 0x06, 0xcd, 0x12, 0xc6, 0x55,
    0xfe, 0x11, 0x99, 0x12, 0xe6, 0x3b, 0x6b, 0x4c,
    0x2a, 0x1b, 0xe6, 0x95, 0xfc, 0x3f, 0x3f, 0x07,
    0x0b, 0xb4, 0x0d, 0x37, 0xb7, 0xa9, 0xc9, 0xcd,
    0xb4, 0xc3, 0x0a, 0x3e, 0xe3, 0x9d, 0x89, 0x44,
    0x5b, 0x13, 0x94, 0xd2, 0xb4, 0x67, 0xc2, 0xcd,
    0x5a, 0xd9, 0x03, 0x6f, 0x81, 0x24, 0x37, 0xff,
    0x02, 0xf4, 0x59, 0x74, 0x7e, 0x04, 0x97, 0x4e,
    0xe9, 0x77, 0xa4, 0x28, 0x1d, 0x7a, 0x91, 0xca,
    0xd0, 0x79, 0x76, 0x92, 0xd2, 0x7a, 0xb7, 0x6e,
    0x53, 0x4a, 0xd0, 0x6f, 0x66, 0x0b, 0xca, 0x31,
    0x03, 0x31, 0xff, 0x18, 0xf3, 0xcc, 0x8a, 0x6f,
    0x37, 0x1e, 0x8f, 0x83, 0x59, 0x66, 0xc7, 0x65,
    0x11, 0xe0, 0xe8, 0xf8, 0xd4, 0xd5, 0xdb, 0x1c,
    0x8e, 0x48, 0x3d, 0xd1, 0x4f, 0x2e, 0xaa, 0x83,
    0x3e, 0xd4, 0x43, 0xed, 0x82, 0xab, 0xef, 0x60,
    0xdb, 0x60, 0x2f, 0x66, 0xca, 0xa5, 0x58, 0xbb,
    0xe0, 0x90, 0xd4, 0x26, 0x8e, 0x00, 0x46, 0x79,
    0x27, 0x2d, 0x22, 0x09, 0xd5, 0xa9, 0xaa, 0x8d,
    0x93, 0x2b, 0x12, 0x81, 0xa6, 0x59, 0x8c, 0x72,
    0x8f, 0xf1, 0x47, 0xf5, 0x5b, 0x9d, 0x36, 0xf1,
    0x6d, 0x8c, 0xc5, 0x58, 0xe6, 0xa9, 0xb2, 0xad,
    0xa7, 0x88, 0x27, 0xff, 0x8b, 0x9c, 0x24, 0x4b,
    0x31, 0x0d, 0x6b, 0xfa, 0x8b, 0x43, 0x28, 0x29,
    0x19, 0x29, 0xa7, 0x4c, 0x47, 0x2c, 0x3e, 0x0d,
    0xab, 0x92, 0xe9, 0xce, 0xe3, 0xe7, 0xc7, 0x73,
    0xa2, 0xc6, 0x80, 0x82, 0x29, 0x5a, 0x20, 0x54,
    0xb9, 0x3f, 0x1e, 0x95, 0xc7, 0xde, 0xc4, 0xea,
    0x1a, 0x96, 0xd7, 0xb8, 0xf4, 0x60, 0xb8, 0x47,
    0xba, 0x8c, 0xf0, 0x56, 0xc0, 0x80, 0xb5, 0xf5,
    0x04, 0x97, 0x3f, 0x6b, 0xca, 0xcb, 0x60, 0xef,
    0xf0, 0xa6, 0xa6, 0x5a, 0x8b, 0x95, 0xed, 0xfd,
    0xf8, 0x53, 0x86, 0xbf, 0x14, 0x75, 0x4b, 0xf6,
    0xc5, 0xda, 0x33, 0x26, 0x87, 0x0c, 0x64, 0xfa,
    0xaf, 0xfc, 0xdb, 0xa1, 0x70, 0x6f, 0x44, 0x1b,
    0xe5, 0xc2, 0x86, 0x39, 0x7d, 0x5f, 0x90, 0xbe,
    0x8a, 0xc2, 0xfa, 0x72, 0x49, 0x75, 0xd8, 0xb5,
    0xf6, 0xcd, 0x97, 0x14, 0x1d, 0x88, 0xd3, 0x3f,
    0x79, 0x15, 0x44, 0xf9, 0x17, 0x9e, 0xaa, 0x8b,
    0x8c, 0xb0, 0x9c, 0x40, 0x2a, 0xa5, 0x84, 0xa9,
    0x52, 0x8f, 0x8b, 0x89, 0x34, 0xd4, 0x95, 0x70,
    0xca, 0x60, 0xdd, 0x20, 0xc8, 0x57, 0xf7, 0x8f,
    0x60, 0x1b, 0x9a, 0x55, 0x8b, 0x90, 0xa1, 0x43,
    0x11, 0xcc, 0x42, 0x4a, 0xde, 0x18, 0xa4, 0xf9,
    0x5e, 0xd8, 0x4c, 0x28, 0x63, 0x23, 0x32, 0xaa,
    0x05, 0x9f, 0x99, 0x00, 0x30, 0x4a, 0x35, 0x28,
    0xd8, 0x80, 0x17, 0x65, 0xc6, 0xc5, 0x47, 0x50,
    0x17, 0x4e, 0xb9, 0x2b, 0xfd, 0xa5, 0xd8, 0x4d,
    0xf4, 0x5a, 0xae, 0x47, 0x88, 0xc2, 0xa5, 0x59,
    0x71, 0x5f, 0x2a, 0xe6, 0xfe, 0x28, 0xd6, 0x89,
    0x18, 0x84, 0x05, 0xdb, 0xd9, 0x12, 0x50, 0xc7,
    0xb7, 0x9c, 0x7c, 0x8b, 0x72, 0x72, 0x85, 0x93,
    0xb3, 0xf7, 0xc4, 0x0c, 0x29, 0x2e, 0x25, 0xd3,
    0x26, 0x89, 0xbd, 0x9d, 0x30, 0xbd, 0x34, 0xec,
    0x84, 0xc6, 0xb8, 0x8b, 0x31, 0x4a, 0x86, 0x45,
    0x4f, 0xea, 0x02, 0x7e, 0x4a, 0xbf, 0x58, 0x8a,
    0xb4, 0x85, 0xf0, 0xe7, 0x22, 0x01, 0xb5, 0x69,
    0xbb, 0x21, 0x27, 0xf9, 0x1e, 0xc1, 0xdd, 0x37,
    0x94, 0xcc, 0x55, 0x35, 0x5b, 0x4b, 0xf6, 0x59,
    0xd6, 0x80, 0x1c, 0x94, 0x57, 0x25, 0x5a, 0x2d,
    0xbd, 0x83, 0x1c, 0x5c, 0x8d, 0x9a, 0x7a, 0xe6,
    0x43, 0xa6, 0xc0, 0xa0, 0x93, 0x7d, 0xe5, 0x84,
    0xe2, 0x0c, 0xfb, 0x74, 0xca, 0x65, 0xec, 0x3a,
    0xbd, 0xcc, 0xfa, 0x6e, 0xa6, 0x1d, 0x19, 0xbe,
    0x33, 0x74, 0xbc, 0xf3, 0x25, 0x5f, 0x94, 0xb5,
    0xcf, 0x64, 0xe6, 0x0f, 0xed, 0xff, 0xfc, 0xd4,
    0x4a, 0xb5, 0xa2, 0x3b, 0x55, 0x54, 0x59, 0xc4,
    0x67, 0xc9, 0x18, 0xef, 0x9c, 0x9f, 0x48, 0x67,
    0x8b, 0x80, 0x8f, 0xa8, 0x95, 0x42, 0x23, 0x6c,
    0x8e, 0xb5, 0x31, 0xf9, 0xda, 0x81, 0xd7, 0xc3,
    0xe3, 0x53, 0x9f, 0xe3, 0x30, 0xc8, 0x13, 0xc0,
    0xd3, 0x75, 0xc9, 0x10, 0x92, 0xa4, 0x91, 0x3a,
    0x1f, 0xc9, 0xf7, 0xc9, 0x61, 0x0e, 0xd2, 0x87,
    0x0b, 0xb4, 0xb8, 0x58, 0x1f, 0x69, 0x86, 0xe7,
    0x82, 0x14, 0xfe, 0x8b, 0xfa, 0x4e, 0xe1, 0x00,
    0xda, 0x83, 0x43, 0x4a, 0x6d, 0xcd, 0xfa, 0x4a,
    0xfb, 0x4f, 0x10, 0x96, 0xe7, 0x07, 0xd5, 0x1b,
    0x4e, 0x33, 0xf6, 0xfb, 0xfc, 0x90, 0xeb, 0x54,
    0x93, 0x9e, 0xed, 0x4f, 0x48, 0x52, 0xd7, 0xc8,
    0x3c, 0x28, 0x3c, 0xdc, 0x52, 0x71, 0x19, 0xf9,
    0x7b, 0x89, 0x4f, 0x0a, 0xd4, 0x70, 0xc6, 0x5d,
    0x46, 0x27, 0xfd, 0xdc, 0x34, 0x8b, 0x51, 0xc5,
    0x99, 0xb6, 0x31, 0x90, 0x72, 0x63, 0x71, 0xb4,
    0x13, 0xd6, 0x9e, 0x3d, 0xf0, 0x3e, 0x09, 0xd8,
    0xe3, 0x6e, 0xfd, 0xa2, 0x00, 0xf1, 0x43, 0x7d,
    0xae, 0x3c, 0x79, 0x2a, 0x46, 0x03, 0xdb, 0xc5,
    0x46, 0xb6, 0xb3, 0x3c, 0x24, 0x31, 0xd4, 0x96,
    0x3a, 0x03, 0xac, 0x09, 0x3c, 0x93, 0xb7, 0x97,
    0xb4, 0x3e, 0x68, 0xa3, 0x83, 0x33, 0xd1, 0x5b,
    0xfc, 0x7d, 0x97, 0x8c, 0x68, 0xf4, 0x2e, 0xfe,
    0x1f, 0x2d, 0xaa, 0x7f, 0x2a, 0x24, 0x7b, 0x0f,
    0xaf, 0x6c, 0x82, 0xe2, 0x33, 0x6f, 0xe2, 0x0c,
    0x76, 0x30, 0xcd, 0x23, 0x15, 0x25, 0xd6, 0xab,
    0x59, 0xd0, 0xa8, 0xe1, 0xeb, 0x74, 0xec, 0x2f,
    0x62, 0x90, 0x9c, 0x68, 0x00, 0xf4, 0xbf, 0xed,
    0x72, 0xc4, 0x59, 0xfb, 0x97, 0x9c, 0xe5, 0x91,
    0x81, 0xce, 0x90, 0xf8, 0x31, 0xf1, 0xa0, 0x31,
    0x90, 0xf3, 0xec, 0x80, 0x94, 0xb3, 0xb8, 0x37,
    0xd7, 0x86, 0x0f, 0xf8, 0x5a, 0xfb, 0xad, 0x44,
    0xe0, 0x58, 0x19, 0x9f, 0x59, 0xa4, 0x90, 0xab,
    0xd5, 0xd7, 0xfc, 0x78, 0x4a, 0xc4, 0x49, 0xb1,
    0x8f, 0xd0, 0x16, 0xad, 0x86, 0xb1, 0x0d, 0xc6,
    0x30, 0xc9, 0xba, 0xd2, 0xeb, 0xa4, 0x18, 0xbf,
    0x5b, 0x62, 0x80, 0x74, 0xdc, 0xb5, 0xe0, 0xc1,
    0x71, 0xfb, 0xe8, 0x9f, 0xf3, 0xa9, 0xe8, 0xc8,
    0xba, 0x45, 0x33, 0x6e, 0x70, 0x5e, 0xb2, 0xc6,
    0xb7, 0xf6, 0x4e, 0xde, 0xd5, 0xa6, 0xda, 0xcb,
    0x9c, 0x2e, 0x73, 0xcb, 0x28, 0x72, 0xa0, 0xb0,
    0x8f, 0x6a, 0x62, 0x4f, 0x10, 0x76, 0xdc, 0x9d,
    0xd5, 0x35, 0xeb, 0x29, 0x09, 0x0c, 0x7d, 0x8f,
    0x9a, 0x2f, 0xa8, 0x53, 0xe5, 0xdb, 0x9a, 0xf6,
    0xed, 0x03, 0x03, 0x74, 0x24, 0x76, 0xa9, 0xca,
    0x5f, 0xf2, 0x0c, 0x6f, 0x30, 0x62, 0xa0, 0xe1,
    0x7a, 0x45, 0x97, 0x3a, 0x66, 0x02, 0x2e, 0x1f,
    0xa9, 0xa3, 0xcf, 0x2c, 0x18, 0x09, 0x8c, 0x45,
    0xae, 0x06, 0xc0, 0x92, 0xec, 0xdf, 0x30, 0x93,
    0x86, 0x68, 0x9a, 0x4b, 0x2c, 0xc9, 0xce, 0xf2,
    0xea, 0xc6, 0x65, 0x1f, 0xab, 0xf7, 0x35, 0x2e,
    0x2a, 0x89, 0xa3, 0x1b, 0x59, 0x97, 0x79, 0x90,
    0xba, 0x2d, 0xad, 0xda, 0xb4, 0xc7, 0xe8, 0x46,
    0x82, 0x60, 0xf4, 0x3a, 0x98, 0xce, 0x66, 0x0e,
    0xaa, 0xc6, 0x75, 0x8e, 0xa8, 0x54, 0x43, 0x94,
    0x8e, 0xbf, 0x5c, 0xdf, 0x62, 0xfa, 0x82, 0x27,
    0x42, 0xa4, 0x21, 0xec, 0xf0, 0x1a, 0x7f, 0x13,
    0xad, 0x6c, 0xd4, 0xc6, 0xaf, 0x07, 0xb6, 0xc0,
    0x58, 0x60, 0xa6, 0x1c, 0xe0, 0xab, 0xf8, 0xe7,
    0xdb, 0x4e, 0x29, 0x83, 0x0c, 0x8b, 0x8d, 0x80,
    0x4f, 0x65, 0xac, 0xce, 0x22, 0xa1, 0x6d, 0xe5,
    0x7e, 0x7b, 0x74, 0x5b, 0x4d, 0x8d, 0xa4, 0xeb,
    0xfa, 0x9e, 0xc2, 0xe7, 0x9d, 0x5f, 0x5e, 0x8a,
    0x62, 0x76, 0x41, 0x37, 0x25, 0x61, 0xb8, 0x7a,
    0x17, 0x71, 0x36, 0x64, 0x1d, 0x51, 0x79, 0x3f,
    0x97, 0x68, 0x3c, 0x7a, 0xdd, 0xa2, 0x1f, 0x68,
    0x76, 0xd8, 0xb9, 0x95, 0x9d, 0xe3, 0xa6, 0xb4,
    0xcb, 0x91, 0x75, 0x73, 0x97, 0x25, 0xb8, 0x1e,
    0x58, 0x82, 0x44, 0xe8, 0x9e, 0x57, 0x70, 0xc3,
    0xb8, 0x93, 0xda, 0xbc, 0xc2, 0xb4, 0x7e, 0x9b,
    0x89, 0xd7, 0x64, 0x6f, 0x64, 0xba, 0x79, 0x27,
    0x94, 0x51, 0x91, 0x68, 0x84, 0x28, 0xa3, 0x8a,
    0xa4, 0x4f, 0x7b, 0xd6, 0x5a, 0xe1, 0x74, 0x6a,
    0x30, 0x91, 0x47, 0xc7, 0x22, 0xbe, 0xe9, 0x71,
    0xb6, 0x33, 0x9d, 0x86, 0x02, 0x8c, 0xf1, 0xe3,
    0x69, 0xac, 0xbf, 0x7d, 0xe1, 0x6a, 0x18, 0xb2,
    0x66, 0xb0, 0x05, 0xb2, 0x17, 0xc8, 0x2c, 0x4d,
    0x37, 0x87, 0xbd, 0x3d, 0x1d, 0x07, 0x28, 0xfa,
    0x10, 0xce, 0x45, 0x91, 0x03, 0xf4, 0xbe, 0x7f,
    0x37, 0x85, 0xa0, 0x8c, 0x3a, 0x50, 0x88, 0x20,
    0xfd, 0xa3, 0x35, 0x9a, 0x5c, 0x25, 0xad, 0x0f,
    0xd6, 0x77, 0xae, 0x2e, 0x3e, 0x61, 0xac, 0xd4,
    0x5d, 0x90, 0xba, 0x05, 0xe1, 0x3b, 0xda, 0xad,
    0xda, 0xfa, 0x27, 0x38, 0x21, 0xdd, 0x3c, 0x0b,
    0x74, 0x8d, 0x98, 0x77, 0xce, 0xcf, 0x63, 0x62,
    0x4e, 0xea, 0xb8, 0xc0, 0x8c, 0xf7, 0xc7, 0xde,
    0x03, 0xff, 0x29, 0xba, 0xcf, 0x6c, 0x5b, 0xc2,
    0x3b, 0x22, 0x3b, 0x26, 0x71, 0x52, 0x9a, 0xdc,
    0x46, 0x0e, 0x5e, 0xa6, 0x6b, 0xd8, 0x69, 0x74,
    0x07, 0x4b, 0xa9, 0xa5, 0xf1, 0xd8, 0xb1, 0x69,
    0x2c, 0x9d, 0x76, 0x0b, 0x37, 0x82, 0x8e, 0x07,
    0x01, 0x45, 0x30, 0x93, 0xee, 0xeb, 0x02, 0xd0,
    0x09, 0xe7, 0xa6, 0x00, 0x1b, 0x16, 0xb6, 0x4d,
    0x8b, 0x84, 0x8a, 0x79, 0x9f, 0x3e, 0xde, 0x14,
    0xf7, 0xf2, 0x97, 0xc8, 0xaf, 0x53, 0x36, 0xa6,
    0xad, 0x2d, 0xd3, 0xcb, 0xe0, 0x70, 0xd9, 0xe3,
    0x2e, 0x3d, 0xb2, 0x1b, 0x3c, 0xa7, 0x2f, 0x08,
    0x20, 0x3e, 0x16, 0x50, 0x0b, 0x8b, 0xef, 0x87,
    0x02, 0x7e, 0xa2, 0x3c, 0xb8, 0x34, 0xe9, 0x5c,
    0x91, 0xb7, 0x51, 0xdc, 0x46, 0xe4, 0xd6, 0x0a,
    0xd1, 0xb2, 0x64, 0x28, 0xc3, 0x0e, 0x95, 0x20,
    0x6c, 0x61, 0x23, 0xdb, 0x86, 0x6e, 0x7c, 0x18,
    0x68, 0x17, 0x7a, 0xff, 0xf4, 0x9c, 0x11, 0x65,
    0x6b, 0x37, 0x41, 0x73, 0xd9, 0x7f, 0xc3, 0x72,
    0x9f, 0x4b, 0xfe, 0xb5, 0x64, 0x6d, 0x2e, 0x91,
    0x64, 0x86, 0xba, 0x74, 0x67, 0x4c, 0x84, 0xe3,
    0x53, 0x3a, 0x77, 0x3a, 0x86, 0x5e, 0xee, 0x02,
    0x39, 0x8f, 0xe4, 0x14, 0xda, 0x5d, 0x64, 0xdc,
    0x41, 0x79, 0x93, 0x82, 0x1f, 0xcf, 0x9b, 0xa1,
    0x77, 0x8e, 0xe0, 0x6b, 0x49, 0xbc, 0x55, 0x56,
    0xc2, 0x04, 0x05, 0x42, 0x0f, 0xc9, 0xa9, 0xe7,
    0xd9, 0x57, 0x52, 0x8d, 0xdb, 0x9f, 0xc2, 0x19,
    0x00, 0x2c, 0x81, 0x65, 0x30, 0x57, 0x33, 0x00,
    0xa2, 0xd7, 0x18, 0xd9, 0xfb, 0x51, 0xd3, 0xc9,
    0x67, 0xb9, 0xf5, 0xd7, 0x9c, 0xb1, 0xa4, 0x99,
    0x50, 0xda, 0xca, 0x57, 0x3a, 0x23, 0x7d, 0xd0,
    0xda, 0x3e, 0x97, 0x15, 0xd8, 0xc0, 0x95, 0x9c,
    0xe6, 0x45, 0x41, 0x1e, 0x47, 0x25, 0x85, 0x39,
    0x5f, 0x28, 0xca, 0x0c, 0x1b, 0x5a, 0x4b, 0x3c,
    0xc8, 0x0e, 0xb8, 0x01, 0xda, 0xf4, 0x82, 0xce,
    0xbf, 0x20, 0x62, 0x3a, 0x99, 0x86, 0x2b, 0xf0,
    0x68, 0x68, 0x6d, 0xaa, 0x3d, 0xc7, 0x2b, 0xda,
    0x49, 0x6a, 0xe4, 0xe5, 0x4c, 0x74, 0x2b, 0x9c,
    0x73, 0x00, 0x02, 0xf7, 0xfb, 0xa6, 0x1d, 0x39,
    0x00, 0x82, 0x94, 0xca, 0xb5, 0xf9, 0xca, 0xd7,
    0x33, 0xe6, 0x5f, 0x61, 0x11, 0x00, 0x66, 0x6c,
    0x52, 0x66, 0xf4, 0x18, 0xdd, 0x87, 0x73, 0xfc,
    0x6d, 0x4a, 0x35, 0xa8, 0x07, 0x4f, 0x6e, 0xe4,
    0x88, 0xfc, 0x11, 0x49, 0x2b, 0x66, 0x4c, 0xf5,
    0xa8, 0x1c, 0x40, 0x81, 0x81, 0xa7, 0x23, 0x19,
    0xf6, 0xf1, 0x2b, 0x1c, 0x2f, 0x4a, 0x25, 0x32,
    0x4f, 0xb2, 0x26, 0x93, 0xcd, 0xc8, 0x56, 0xb3,
    0x0a, 0x7e, 0x1c, 0x59, 0x52, 0xc0, 0x14, 0x62,
    0x27, 0x5b, 0x5a, 0xab, 0x45, 0xdf, 0x11, 0x88,
    0x94, 0x94, 0x6c, 0xcc, 0x69, 0x65, 0xb1, 0xb0,
    0xcb, 0x2a, 0xbd, 0xb8, 0xba, 0x10, 0x31, 0xb1,
    0x70, 0xd8, 0x50, 0x2e, 0xd3, 0x5a, 0xd5, 0xaf,
    0xb3, 0x60, 0x9c, 0xa0, 0x36, 0x43, 0xdc, 0x3e,
    0x59, 0x70, 0xd8, 0x2b, 0x45, 0x7f, 0xab, 0x5f,
    0x85, 0x9a, 0xf8, 0xf3, 0xfa, 0x8b, 0x4d, 0xe7,
    0xdb, 0x04, 0x48, 0x8f, 0xf5, 0xf0, 0x3d, 0x57,
    0x83, 0x46, 0x2e, 0xb3, 0x90, 0x82, 0x1a, 0x5e,
    0xc1, 0xcf, 0xac, 0x60, 0x9f, 0x2f, 0x84, 0x75,
    0xe3, 0xd0, 0x16, 0x8a, 0x5c, 0xee, 0x63, 0xab,
    0x2a, 0x19, 0xea, 0x53, 0xe5, 0xfd, 0xa8, 0xfb,
    0x20, 0x58, 0xb1, 0xc5, 0xb6, 0x8c, 0xa5, 0xdb,
    0x92, 0xc3, 0x26, 0x88, 0xe2, 0x7e, 0xca, 0xfd,
    0x9a, 0x2c, 0xf9, 0x09, 0x7b, 0xf3, 0xc6, 0x3a,
    0xe8, 0x56, 0x9b, 0x8d, 0x3f, 0xa1, 0xb8, 0x7a,
    0xc5, 0x72, 0xb7, 0xb5, 0x2b, 0x5f, 0x9b, 0x09,
    0x8f, 0x93, 0xb0, 0xf8, 0x4c, 0x22, 0xd4, 0x09,
    0xab, 0xa7, 0xd7, 0xa5, 0x71, 0xad, 0xc3, 0xb3,
    0xf7, 0xf8, 0xb9, 0x7b, 0xca, 0xd4, 0xc7, 0x49,
    0x27, 0xd9, 0x20, 0x34, 0x8a, 0x08, 0x6d, 0x34,
    0xab, 0xbe, 0x53, 0x72, 0x28, 0x98, 0x3e, 0xd7,
    0xc8, 0x43, 0x24, 0x0b, 0x23, 0x20, 0x9a, 0x93,
    0x44, 0x64, 0x31, 0x39, 0x9a, 0xce, 0xc8, 0xf7,
    0x9c, 0x7e, 0xf4, 0xcc, 0x23, 0x9f, 0xd1, 0x90,
    0xa3, 0x69, 0x8a, 0x01, 0xc0, 0xc4, 0xed, 0xae,
    0xdc, 0x7e, 0x7c, 0xc6, 0x4b, 0x62, 0xd7, 0x0c,
    0xa5, 0xa0, 0xa2, 0xda, 0xc6, 0xe4, 0xc3, 0x4f,
    0xf2, 0xc4, 0xca, 0x27, 0xdc, 0xef, 0x5c, 0xe4,
    0x5d, 0x4d, 0x84, 0x30, 0x6f, 0xbe, 0x02, 0x4b,
    0xdf, 0x39, 0x13, 0xc6, 0xd8, 0xe0, 0xcd, 0x0b,
    0xe4, 0x3d, 0x38, 0xd4, 0xb9, 0x65, 0x3c, 0xa4,
    0x5c, 0x9f, 0x32, 0x43, 0x40, 0xc9, 0xf9, 0x67,
    0xb7, 0x37, 0x6e, 0xdf, 0x14, 0xd3, 0xe7, 0xef,
    0xa6, 0x48, 0xb6, 0xad, 0x25, 0x68, 0xa8, 0x15,
    0x5e, 0x87, 0xbb, 0x72, 0x0c, 0xad, 0x79, 0x3e,
    0x2d, 0x57, 0x43, 0x1b, 0xae, 0x59, 0x7c, 0x35,
    0x7c, 0x07, 0x76, 0xae, 0x7e, 0xc0, 0xab, 0x3e,
    0xc0, 0xbe, 0x9a, 0xa9, 0x52, 0x8d, 0xe9, 0x53,
    0x68, 0x60, 0xc0, 0x3a, 0xa2, 0x56, 0x8b, 0xc9,
    0x41, 0x7c, 0xfb, 0x5e, 0x67, 0x5e, 0x34, 0x90,
    0x99, 0xe5, 0x28, 0x95, 0xd3, 0xc7, 0x21, 0xf3,
    0x3c, 0x43, 0x3e, 0x70, 0xf8, 0x3c, 0xca, 0xa1,
    0x5c, 0xea, 0xe4, 0x2d, 0xfa, 0xc9, 0xfd, 0x44,
    0xdf, 0xfa, 0xee, 0x1a, 0xa8, 0x20, 0x20, 0xda,
    0xdb, 0xf1, 0xda, 0x81, 0xa1, 0x30, 0x76, 0xaf,
    0x11, 0xe7, 0xc1, 0xb5, 0x27, 0xc3, 0xb4, 0x3b,
    0x2e, 0x3b, 0x03, 0x44, 0xbd, 0xbb, 0xe6, 0xee,
    0xf8, 0x59, 0x62, 0x4f, 0x7b, 0xc6, 0xe5, 0xc8,
    0xe1, 0x94, 0xbd, 0x14, 0xe7, 0xee, 0x2f, 0x47,
    0x13, 0x0b, 0x51, 0xeb, 0x58, 0x19, 0x3c, 0xbf,
    0xe0, 0x0d, 0x3d, 0x89, 0x7a, 0xe7, 0x44, 0x1a,
    0x0a, 0xaa, 0xcd, 0x18, 0x90, 0x76, 0xa2, 0x17,
    0xdd, 0xa9, 0x82, 0x8c, 0x25, 0x98, 0x5e, 0xb8,
    0x5f, 0x3d, 0x05, 0x07, 0x26, 0xb0, 0x2f, 0xf3,
    0x9a, 0x98, 0xb8, 0xe1, 0xb0, 0x08, 0x6f, 0x43,
    0xcd, 0x45, 0xa1, 0x71, 0x39, 0x21, 0x86, 0x90,
    0x29, 0xd1, 0x44, 0x21, 0x84, 0x21, 0xaf, 0xe0,
    0xda, 0x53, 0xff, 0x38, 0x16, 0xee, 0x91, 0x09,
    0x15, 0x80, 0xc1, 0x00, 0x47, 0x7e, 0xf2, 0x17,
    0x20, 0x03, 0xb3, 0xca, 0xff, 0x08, 0xee, 0x18,
    0xc8, 0x16, 0x75, 0x47, 0x3c, 0x42, 0x6b, 0xf8,
    0x5c, 0xd1, 0xf8, 0xfa, 0x6b, 0xcd, 0x8e, 0xce,
    0xb3, 0xe4, 0x2c, 0xa0, 0xba, 0xad, 0x08, 0x75,
    0xe1, 0xb7, 0x16, 0xa8, 0xf6, 0xd4, 0xe4, 0x61,
    0x7b, 0xfb, 0xe6, 0xe7, 0xb9, 0x3b, 0x1f, 0x95,
    0x97, 0x0a, 0x66, 0x50, 0x02, 0xd8, 0xd9, 0xf9,
    0xaa, 0x1d, 0xef, 0x29, 0x52, 0x20, 0x27, 0xfe,
    0x82, 0x9f, 0x05, 0x45, 0xc6, 0x32, 0x42, 0xd7,
    0xf7, 0x8f, 0x87, 0x72, 0xc5, 0xed, 0x08, 0x4c,
    0x50, 0x45, 0xb2, 0x15, 0x72, 0x15, 0x15, 0x93,
    0xdd, 0x6c, 0xd5, 0x8d, 0xc6, 0x44, 0x64, 0x8b,
    0xfd, 0xc6, 0xc1, 0xd9, 0x47, 0x58, 0xfc, 0xf1,
    0xab, 0x2a, 0xb4, 0xc9, 0x68, 0x48, 0xbe, 0xd1,
    0x47, 0x03, 0xc7, 0x6d, 0x7c, 0x83, 0x4e, 0x7a,
    0xc5, 0xce, 0x32, 0x44, 0xf6, 0xcd, 0x4f, 0xeb,
    0x46, 0xdc, 0x2e, 0xc6, 0x01, 0x4d, 0x15, 0x5e,
    0x4c, 0x2a, 0x0a, 0x53, 0xd1, 0x04, 0xd5, 0xdd,
    0x91, 0x89, 0x10, 0x77, 0xf8, 0x7b, 0x30, 0xa8,
    0xa0, 0x86, 0x64, 0x9a, 0x69, 0xec, 0x23, 0x66,
    0x95, 0x9b, 0xc0, 0xa1, 0x7c, 0x28, 0x19, 0x5f,
    0xd6, 0xea, 0x95, 0xcb, 0xab, 0x7b, 0x13, 0x48,
    0x0a, 0x01, 0x55, 0x3e, 0x11, 0x6c, 0xd8, 0x3c,
    0xe6, 0xb9, 0x8d, 0x96, 0x54, 0xc6, 0x85, 0xf0,
    0x1e, 0x1f, 0x92, 0xe5, 0x7d, 0x94, 0xd0, 0xeb,
    0x4b, 0x8a, 0x4d, 0x53, 0xf0, 0xf9, 0x67, 0xf3,
    0xd7, 0x22, 0xe0, 0x83, 0xae, 0x7f, 0x72, 0xae,
    0xe5, 0x0a, 0x07, 0xa3, 0x06, 0x0e, 0x47, 0xb9,
    0x3b, 0xe9, 0xa9, 0x79, 0xc2, 0xb2, 0xd6, 0xb5,
    0x7b, 0xbd, 0x7e, 0xe8, 0xcf, 0x72, 0x64, 0xc6,
    0xd4, 0xba, 0x7b, 0x70, 0x2f, 0xb8, 0x92, 0x4b,
    0x31, 0x58, 0x22, 0x35, 0xa9, 0xc4, 0x97, 0xfb,
    0x95, 0x06, 0xe1, 0xb2, 0x13, 0x36, 0x30, 0xba,
    0xa5, 0xe7, 0xba, 0x93, 0xa3, 0x9e, 0x01, 0x6d,
    0x0e, 0x1b, 0x9c, 0x07, 0x68, 0x9e, 0x6f, 0x16,
    0xa6, 0x23, 0xb3, 0xba, 0x27, 0x11, 0x35, 0xcf,
    0x17, 0x7b, 0x2c, 0x57, 0xff, 0x79, 0x0d, 0x0a,
    0xa7, 0xce, 0xf3, 0xb5, 0x49, 0xdf, 0xdf, 0x56,
    0xeb, 0x6f, 0xeb, 0xdc, 0xee, 0xc5, 0x8a, 0x6f,
    0xce, 0x08, 0x2c, 0x58, 0x7d, 0x9e, 0x84, 0x0b,
    0xe2, 0x4c, 0xdf, 0x4c, 0x99, 0x9f, 0xdd, 0xcb,
    0x5f, 0x89, 0xd0, 0x81, 0x31, 0x14, 0xe2, 0x5a,
    0xf6, 0x19, 0xe4, 0x6e, 0x89, 0x0b, 0xf0, 0xc5,
    0xa6, 0xb6, 0xb2, 0xb9, 0x08, 0xce, 0xc0, 0x9b,
    0x9d, 0x80, 0xde, 0x80, 0x64, 0xb2, 0x98, 0x4b,
    0x4c, 0x28, 0x6f, 0xdf, 0xa4, 0x1b, 0xf4, 0x0e,
    0x66, 0xf3, 0x2c, 0x44, 0xf6, 0xc4, 0xa5, 0x9c,
    0x54, 0xfd, 0xe2, 0x66, 0x35, 0x1d, 0x3c, 0x10,
    0xd4, 0xf2, 0xba, 0xeb, 0x88, 0x19, 0xd0, 0xdd,
    0x89, 0x6e, 0x2d, 0x2c, 0xa2, 0xd3, 0x5e, 0x8d,
    0x3b, 0xee, 0xe9, 0xb0, 0xb9, 0xd9, 0xba, 0xe1,
    0xb9, 0xe1, 0x44, 0xd9, 0x12, 0x33, 0xe0, 0xa2,
    0x88, 0xb4, 0x81, 0x19, 0x31, 0x2f, 0xfe, 0x41,
    0x5f, 0x9b, 0x7d, 0x5e, 0x38, 0x9b, 0x15, 0xcd,
    0xf0, 0xeb, 0xbe, 0xa3, 0x9e, 0xe1, 0x3e, 0xda,
    0xdf, 0x9d, 0x22, 0x45, 0x7a, 0xf4, 0x8c, 0x07,
    0xc4, 0x20, 0xa3, 0x38, 0xdb, 0x61, 0x37, 0x6b,
    0xf6, 0xa1, 0x3a, 0x5b, 0x0a, 0x73, 0x1f, 0x10,
    0xda, 0xef, 0xe4, 0xe9, 0x21, 0xc5, 0x4d, 0x9a,
    0xc6, 0x6f, 0x59, 0x12, 0xac, 0x1e, 0x20, 0x6e,
    0xee, 0x4c, 0x84, 0xf2, 0x52, 0x3e, 0x98, 0x29,
    0x1b, 0xae, 0x31, 0x60, 0xba, 0xc5, 0x44, 0xd7,
    0x40, 0xcb, 0x4d, 0x14, 0x90, 0xb1, 0xaa, 0x23,
    0xbb, 0xd0, 0x9f, 0xf4, 0x35, 0xb4, 0xdf, 0x98,
    0xf9, 0x41, 0x07, 0xea, 0xd4, 0xff, 0xcf, 0x3c,
    0x23, 0xec, 0xe7, 0xe4, 0xfb, 0x2f, 0x9e, 0xc8,
    0x41, 0xdf, 0xb6, 0x6b, 0xa4, 0x40, 0x21, 0xb6,
    0x7c, 0x42, 0xbe, 0x5c, 0x5d, 0xb1, 0xb3, 0xf6,
    0x49, 0x8a, 0x18, 0xcd, 0x74, 0x20, 0xa2, 0x51,
    0x20, 0x08, 0x36, 0xe8, 0x22, 0x85, 0x2c, 0x91,
    0x16, 0x5e, 0x62, 0x88, 0xa3, 0xc2, 0x66, 0x94,
    0x95, 0x41, 0x34, 0x03, 0xaf, 0x14, 0x5d, 0x47,
    0x02, 0x9d, 0xd2, 0x16, 0x6b, 0xc7, 0xea, 0x50,
    0xc3, 0x40, 0x43, 0x53, 0xef, 0x1e, 0x62, 0x0e,
    0x45, 0x60, 0xb7, 0x27, 0xa6, 0x9d, 0x29, 0x57,
    0xe2, 0xb7, 0x48, 0xb5, 0xd0, 0x7f, 0x5b, 0x88,
    0x2f, 0x33, 0x2e, 0x94, 0x39, 0x0f, 0x61, 0x6a,
    0x13, 0x0b, 0x83, 0xd5, 0x46, 0x9d, 0xf1, 0x90,
    0x9f, 0x98, 0xa1, 0x6a, 0x4b, 0xae, 0x41, 0xb3,
    0x3e, 0x75, 0x99, 0xac, 0x5f, 0x9f, 0x1b, 0xe7,
    0xe2, 0x11, 0x46, 0x6e, 0xe7, 0xa5, 0x76, 0x59,
    0x63, 0xc3, 0x8b, 0x4f, 0xcc, 0x32, 0x23, 0x04,
    0x51, 0x4c, 0x21, 0x91, 0x11, 0x13, 0x5e, 0x42,
    0xcb, 0x8d, 0xb6, 0x18, 0x09, 0xe9, 0xa3, 0xb5,
    0xa0, 0xb9, 0x69, 0x26, 0x25, 0xca, 0x04, 0xed,
    0xae, 0xa8, 0x6e, 0x86, 0x08, 0x83, 0xa0, 0x4e,
    0xe3, 0x0f, 0xde, 0x48, 0xd4, 0xb5, 0xc6, 0x5c,
    0x1a, 0x6b, 0x28, 0xbf, 0x10, 0x13, 0x13, 0x5b,
    0xed, 0x0f, 0x74, 0xdc, 0xff, 0xaa, 0x0b, 0xae,
    0x41, 0x56, 0x8f, 0x1c, 0xca, 0xab, 0x92, 0x3f,
    0x69, 0x91, 0x8e, 0x9f, 0xae, 0x1b, 0x72, 0x00,
    0x39, 0x71, 0x7a, 0xa6, 0xf8, 0xe0, 0x32, 0xda,
    0x28, 0x9f, 0xd1, 0xab, 0xfb, 0x9f, 0x15, 0x40,
    0x68, 0xcf, 0x05, 0xd8, 0x03, 0xb4, 0xa1, 0xea,
    0xd4, 0x72, 0xb6, 0xfd, 0x73, 0xda, 0x0a, 0x13,
    0x9d, 0xf8, 0x79, 0x24, 0xc9, 0x3d, 0x97, 0xca,
    0x98, 0xdd, 0x4f, 0x9e, 0xe7, 0xe0, 0xca, 0x56,
    0x4f, 0xeb, 0xea, 0x33, 0xfe, 0x7b, 0x21, 0xbf,
    0x3c, 0x19, 0xb3, 0x68, 0x36, 0x93, 0xe0, 0xf5,
    0xb7, 0x8e, 0x56, 0x37, 0x35, 0xa4, 0x64, 0x5a,
    0xf2, 0x60, 0xd6, 0x7d, 0x6e, 0xb3, 0x38, 0xc3,
    0xce, 0xf5, 0x55, 0x74, 0x1a, 0xf8, 0x05, 0x4e,
    0xcd, 0x7d, 0x3b, 0x06, 0x73, 0x99, 0x02, 0x1b,
    0x9d, 0x08, 0x21, 0x08, 0x5b, 0x67, 0x64, 0x6a,
    0xa1, 0x87, 0x0f, 0xea, 0x49, 0xeb, 0x37, 0x59,
    0xcd, 0x05, 0x3b, 0x57, 0x9b, 0xad, 0x8c, 0x6f,
    0x71, 0x4f, 0xdc, 0x5c, 0x1f, 0x48, 0x5c, 0x69,
    0xb3, 0xae, 0x2d, 0x33, 0x7f, 0xf9, 0x25, 0x7a,
    0x0b, 0xb6, 0xe0, 0xbc, 0x19, 0x1b, 0x49, 0x5b,
    0xf6, 0x63, 0xc3, 0x1d, 0x32, 0x1e, 0x11, 0xa9,
    0x6b, 0x7a, 0x55, 0x41, 0xb9, 0x9c, 0x79, 0xbd,
    0xee, 0xf5, 0xe5, 0xd5, 0xbf, 0x22, 0x74, 0x47,
    0x7e, 0xe0, 0xc3, 0xa9, 0x78, 0x1e, 0x71, 0x5e,
    0xa6, 0x02, 0xcd, 0xa8, 0xc6, 0x19, 0xde, 0xab,
    0xf8, 0xbd, 0xe7, 0xe1, 0x9e, 0xe2, 0x28, 0xfb,
    0x6d, 0xcf, 0x23, 0x9c, 0xcf, 0xa0, 0x27, 0x67,
    0x50, 0x81, 0x05, 0xfb, 0x1b, 0x97, 0x04, 0x67,
    0x46, 0x1e, 0x8d, 0xf5, 0x42, 0xb8, 0xd1, 0xfc,
    0x12, 0x23, 0x37, 0x9d, 0x12, 0x44, 0x7b, 0x75,
    0x12, 0x38, 0x2c, 0x22, 0x51, 0x69, 0xf6, 0x4c,
    0x0f, 0xb5, 0xd5, 0xb1, 0x9d, 0x39, 0xa3, 0x84,
    0x01, 0x21, 0xa1, 0xd2, 0x49, 0x3d, 0x5f, 0xb1,
    0x2b, 0xb9, 0x86, 0x12, 0x09, 0xed, 0x71, 0x22,
    0xa6, 0x36, 0x44, 0xef, 0x7a, 0xe3, 0x0a, 0xd1,
    0xd8, 0x3c, 0xec, 0x90, 0x01, 0xa0, 0xf2, 0xb6,
    0x0d, 0x99, 0x74, 0x68, 0xed, 0x2e, 0xd3, 0x12,
    0x7c, 0x43, 0x67, 0xa8, 0x27, 0x28, 0x60, 0xd4,
    0xd4, 0x64, 0x66, 0xdf, 0xc0, 0x35, 0x95, 0xd0,
    0x12, 0x09, 0x26, 0x1f, 0xe3, 0xc2, 0x8d, 0x07,
    0xc7, 0xd9, 0xc2, 0x4d, 0xae, 0x64, 0x82, 0x98,
    0x8f, 0xc2, 0x06, 0x78, 0xbb, 0x2c, 0xdb, 0x79,
    0x60, 0x6c, 0xd6, 0x0c, 0x91, 0x9d, 0x23, 0xc0,
    0xed, 0xe6, 0x55, 0x3a, 0xd2, 0xe5, 0x83, 0x80,
    0xb9, 0x0f, 0x9a, 0xfa, 0xb7, 0x34, 0x34, 0x3f,
    0xf6, 0x4c, 0x8c, 0x6d, 0xce, 0xa8, 0xc0, 0x7b,
    0x16, 0x59, 0xd3, 0x88, 0xb6, 0xf9, 0xff, 0xc9,
    0x37, 0xad, 0xf9, 0xc0, 0x6d, 0xb3, 0xa1, 0x29,
    0xed, 0xe2, 0x6e, 0x08, 0x51, 0xec, 0x64, 0x08,
    0x3c, 0x81, 0x76, 0x26, 0x6c, 0x98, 0xc4, 0x38,
    0x03, 0xe8, 0x63, 0x18, 0x1d, 0x49, 0xa8, 0xdd,
    0x37, 0xf6, 0xfc, 0x97, 0x57, 0xf9, 0x3b, 0x27,
    0xce, 0x88, 0xb5, 0x21, 0xb2, 0xea, 0x92, 0x90,
    0xb1, 0xa3, 0x7a, 0xfe, 0x5e, 0x92, 0x3e, 0x19,
    0xad, 0xc0, 0xe2, 0x03, 0x2b, 0x5f, 0xf1, 0xfe,
    0x49, 0xca, 0x8f, 0x37, 0x9b, 0xb4, 0x77, 0xbd,
    0x08, 0x95, 0x6d, 0x9d, 0x34, 0xc1, 0x23, 0x55,
    0x89, 0x5b, 0xea, 0x7b, 0xc9, 0xc0, 0xaa, 0x21,
    0xea, 0x9c, 0x9c, 0xde, 0x23, 0x7c, 0x63, 0x72,
    0xec, 0xf8, 0xa3, 0x27, 0xbe, 0xf4, 0x52, 0xc5,
    0x12, 0xdc, 0xf6, 0xaa, 0xed, 0x4c, 0xf0, 0x43,
    0x20, 0x89, 0x8c, 0x81, 0xe6, 0xbd, 0x5b, 0xc7,
    0x47, 0x89, 0x38, 0x4b, 0x00, 0xcc, 0x81, 0xd9,
    0x02, 0xa8, 0x38, 0x78, 0xdf, 0x95, 0x51, 0x5c,
    0xc4, 0xd7, 0xb0, 0x60, 0xe9, 0xdb, 0x15, 0xdc,
    0x9c, 0xee, 0x31, 0x13, 0x08, 0xdc, 0x81, 0x1e,
    0xf7, 0x55, 0x0c, 0xf3, 0x20, 0xb7, 0xa2, 0x84,
    0x3b, 0x5a, 0x57, 0x01, 0xd9, 0xaa, 0x3c, 0x75,
    0x93, 0xf3, 0x3f, 0x70, 0x67, 0x46, 0x96, 0xbf,
    0x64, 0xc1, 0x2c, 0x8e, 0x6a, 0xe8, 0x6a, 0xcd,
    0x23, 0x40, 0x80, 0xf0, 0x77, 0x39, 0x91, 0x83,
    0x0f, 0x2f, 0x81, 0x6a, 0x80, 0x73, 0x24, 0x39,
    0xc0, 0xde, 0xc7, 0xa8, 0x5c, 0x88, 0x6c, 0x9a,
    0x98, 0x6a, 0x66, 0x37, 0xb6, 0x0e, 0x8f, 0x3c,
    0x40, 0x39, 0x8d, 0x1c, 0x7f, 0xe9, 0x6c, 0x05,
    0xb8, 0xb0, 0xcf, 0xb4, 0x54, 0xaf, 0xe0, 0x33,
    0x68, 0x02, 0xd2, 0xd1, 0x62, 0x23, 0xb9, 0x5f,
    0x29, 0x3e, 0xb8, 0xc9, 0xbb, 0x3e, 0x1e, 0xb8,
    0x4d, 0xbc, 0x71, 0x46, 0x58, 0x16, 0x6d, 0x85,
    0x9f, 0xdc, 0xed, 0x4a, 0xfe, 0x9c, 0x52, 0x6b,
    0xcb, 0x99, 0x49, 0xc0, 0xe0, 0xc5, 0x01, 0x36,
    0x95, 0xe6, 0x59, 0x3e, 0x2f, 0x0e, 0x3a, 0x57,
    0x69, 0xa7, 0x76, 0xde, 0xf3, 0xc4, 0x06, 0xd6,
    0x19, 0x11, 0x01, 0x2e, 0x46, 0x9f, 0x80, 0x25,
    0x01, 0xa2, 0x64, 0xb3, 0x9c, 0xdf, 0x72, 0x9f,
    0xfa, 0x6d, 0x43, 0x93, 0x6e, 0x22, 0x69, 0x12,
    0x9b, 0x91, 0x51, 0xc4, 0x30, 0x29, 0x5f, 0xe1,
    0x42, 0x0e, 0x43, 0xe0, 0x64, 0x74, 0x6c, 0xed,
    0x8f, 0x10, 0x6d, 0x5c, 0xbe, 0x2c, 0xbb, 0xa6,
    0xcd, 0x3f, 0x07, 0xad, 0xa2, 0x0a, 0x08, 0x5d,
    0xc2, 0xab, 0x8f, 0x2b, 0x10, 0xa3, 0xca, 0xd3,
    0x19, 0xb9, 0xcf, 0x3a, 0x4d, 0x23, 0xe6, 0x77,
    0x55, 0x91, 0xb3, 0xb1, 0x42, 0xac, 0x91, 0xe4,
    0x57, 0xd8, 0x7c, 0xfc, 0x3c, 0x80, 0x84, 0xae,
    0x48, 0xf0, 0xef, 0x73, 0x3b, 0x9a, 0x83, 0xb6,
    0x41, 0xa2, 0xfa, 0x56, 0x82, 0xed, 0xee, 0xad,
    0x3a, 0x49, 0x04, 0xa4, 0x1c, 0xa4, 0xe3, 0x2d,
    0xd7, 0xe1, 0x82, 0x77, 0x7c, 0x4c, 0xa4, 0xcf,
    0x7e, 0x63, 0x88, 0xe5, 0x01, 0x0c, 0x63, 0x7b,
    0x68, 0xf7, 0xa3, 0xdc, 0x6d, 0x75, 0x61, 0x5d,
    0xa9, 0x88, 0xbb, 0xe6, 0xe3, 0x42, 0x84, 0x5a,
    0xcd, 0x49, 0x0d, 0xa8, 0x82, 0xc3, 0x88, 0xad,
    0xd8, 0x87, 0x92, 0xb0, 0xac, 0xb9, 0x24, 0x69,
    0x08, 0x58, 0xbc, 0xd0, 0x7d, 0x1d, 0xc7, 0xa9,
    0xba, 0x39, 0x2f, 0x2d, 0xfc, 0x44, 0x4e, 0xec,
    0x75, 0xec, 0x89, 0x88, 0x31, 0xdc, 0xd2, 0xec,
    0x97, 0x13, 0x09, 0x7e, 0x6d, 0x6f, 0x44, 0xfc,
    0x42, 0x54, 0xb1, 0x06, 0xa7, 0x12, 0xd1, 0x91,
    0xef, 0x6b, 0xbb, 0xb8, 0xfb, 0x1a, 0x02, 0x18,
    0x7d, 0xdd, 0x2f, 0x75, 0x5d, 0x09, 0x8c, 0x76,
    0x21, 0xe3, 0xbc, 0xaa, 0x62, 0xaf, 0x66, 0x25,
    0x04, 0x4d, 0xc5, 0x4b, 0x7c, 0x5b, 0xad, 0xfc,
    0xfb, 0xeb, 0x8d, 0x42, 0x41, 0x5a, 0x30, 0xb6,
    0x8b, 0xbb, 0xc9, 0x5f, 0xdc, 0x1f, 0xfc, 0xf6,
    0x68, 0x07, 0x63, 0xad, 0xb2, 0x19, 0x49, 0x09,
    0x7f, 0xf3, 0x17, 0x00, 0x80, 0x29, 0xa7, 0x32,
    0xee, 0xf1, 0x68, 0x1e, 0x4d, 0x78, 0x02, 0x19,
    0xab, 0x71,
};

const int ciphertext_size = sizeof(ciphertext) / sizeof(ciphertext[0]);

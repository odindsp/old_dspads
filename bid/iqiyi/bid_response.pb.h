// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bid_response.proto

#ifndef PROTOBUF_bid_5fresponse_2eproto__INCLUDED
#define PROTOBUF_bid_5fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ads_serving {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bid_5fresponse_2eproto();
void protobuf_AssignDesc_bid_5fresponse_2eproto();
void protobuf_ShutdownFile_bid_5fresponse_2eproto();

class Settlement;
class Bid;
class Seatbid;
class BidResponse;

// ===================================================================

class Settlement : public ::google::protobuf::Message {
 public:
  Settlement();
  virtual ~Settlement();

  Settlement(const Settlement& from);

  inline Settlement& operator=(const Settlement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Settlement& default_instance();

  void Swap(Settlement* other);

  // implements Message ----------------------------------------------

  Settlement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Settlement& from);
  void MergeFrom(const Settlement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required bytes price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline const ::std::string& price() const;
  inline void set_price(const ::std::string& value);
  inline void set_price(const char* value);
  inline void set_price(const void* value, size_t size);
  inline ::std::string* mutable_price();
  inline ::std::string* release_price();
  inline void set_allocated_price(::std::string* price);

  // optional bytes auth = 3;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 3;
  inline const ::std::string& auth() const;
  inline void set_auth(const ::std::string& value);
  inline void set_auth(const char* value);
  inline void set_auth(const void* value, size_t size);
  inline ::std::string* mutable_auth();
  inline ::std::string* release_auth();
  inline void set_allocated_auth(::std::string* auth);

  // @@protoc_insertion_point(class_scope:ads_serving.proto.Settlement)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_auth();
  inline void clear_has_auth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* price_;
  ::std::string* auth_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_bid_5fresponse_2eproto();
  friend void protobuf_AssignDesc_bid_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_bid_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static Settlement* default_instance_;
};
// -------------------------------------------------------------------

class Bid : public ::google::protobuf::Message {
 public:
  Bid();
  virtual ~Bid();

  Bid(const Bid& from);

  inline Bid& operator=(const Bid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bid& default_instance();

  void Swap(Bid* other);

  // implements Message ----------------------------------------------

  Bid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bid& from);
  void MergeFrom(const Bid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string impid = 2;
  inline bool has_impid() const;
  inline void clear_impid();
  static const int kImpidFieldNumber = 2;
  inline const ::std::string& impid() const;
  inline void set_impid(const ::std::string& value);
  inline void set_impid(const char* value);
  inline void set_impid(const char* value, size_t size);
  inline ::std::string* mutable_impid();
  inline ::std::string* release_impid();
  inline void set_allocated_impid(::std::string* impid);

  // required int32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // required string adm = 6;
  inline bool has_adm() const;
  inline void clear_adm();
  static const int kAdmFieldNumber = 6;
  inline const ::std::string& adm() const;
  inline void set_adm(const ::std::string& value);
  inline void set_adm(const char* value);
  inline void set_adm(const char* value, size_t size);
  inline ::std::string* mutable_adm();
  inline ::std::string* release_adm();
  inline void set_allocated_adm(::std::string* adm);

  // required string crid = 10;
  inline bool has_crid() const;
  inline void clear_crid();
  static const int kCridFieldNumber = 10;
  inline const ::std::string& crid() const;
  inline void set_crid(const ::std::string& value);
  inline void set_crid(const char* value);
  inline void set_crid(const char* value, size_t size);
  inline ::std::string* mutable_crid();
  inline ::std::string* release_crid();
  inline void set_allocated_crid(::std::string* crid);

  // optional int32 startdelay = 16;
  inline bool has_startdelay() const;
  inline void clear_startdelay();
  static const int kStartdelayFieldNumber = 16;
  inline ::google::protobuf::int32 startdelay() const;
  inline void set_startdelay(::google::protobuf::int32 value);

  // optional bool is_precision_advertising = 17 [default = false];
  inline bool has_is_precision_advertising() const;
  inline void clear_is_precision_advertising();
  static const int kIsPrecisionAdvertisingFieldNumber = 17;
  inline bool is_precision_advertising() const;
  inline void set_is_precision_advertising(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Bid)
  // @@protoc_insertion_point(class_scope:ads_serving.proto.Bid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_impid();
  inline void clear_has_impid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_adm();
  inline void clear_has_adm();
  inline void set_has_crid();
  inline void clear_has_crid();
  inline void set_has_startdelay();
  inline void clear_has_startdelay();
  inline void set_has_is_precision_advertising();
  inline void clear_has_is_precision_advertising();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* impid_;
  ::std::string* adm_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 startdelay_;
  ::std::string* crid_;
  bool is_precision_advertising_;
  friend void  protobuf_AddDesc_bid_5fresponse_2eproto();
  friend void protobuf_AssignDesc_bid_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_bid_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static Bid* default_instance_;
};
// -------------------------------------------------------------------

class Seatbid : public ::google::protobuf::Message {
 public:
  Seatbid();
  virtual ~Seatbid();

  Seatbid(const Seatbid& from);

  inline Seatbid& operator=(const Seatbid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Seatbid& default_instance();

  void Swap(Seatbid* other);

  // implements Message ----------------------------------------------

  Seatbid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Seatbid& from);
  void MergeFrom(const Seatbid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ads_serving.proto.Bid bid = 1;
  inline int bid_size() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::ads_serving::proto::Bid& bid(int index) const;
  inline ::ads_serving::proto::Bid* mutable_bid(int index);
  inline ::ads_serving::proto::Bid* add_bid();
  inline const ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Bid >&
      bid() const;
  inline ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Bid >*
      mutable_bid();

  // @@protoc_insertion_point(class_scope:ads_serving.proto.Seatbid)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Bid > bid_;
  friend void  protobuf_AddDesc_bid_5fresponse_2eproto();
  friend void protobuf_AssignDesc_bid_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_bid_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static Seatbid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse : public ::google::protobuf::Message {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();

  void Swap(BidResponse* other);

  // implements Message ----------------------------------------------

  BidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .ads_serving.proto.Seatbid seatbid = 2;
  inline int seatbid_size() const;
  inline void clear_seatbid();
  static const int kSeatbidFieldNumber = 2;
  inline const ::ads_serving::proto::Seatbid& seatbid(int index) const;
  inline ::ads_serving::proto::Seatbid* mutable_seatbid(int index);
  inline ::ads_serving::proto::Seatbid* add_seatbid();
  inline const ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Seatbid >&
      seatbid() const;
  inline ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Seatbid >*
      mutable_seatbid();

  // optional int32 processing_time_ms = 4;
  inline bool has_processing_time_ms() const;
  inline void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 4;
  inline ::google::protobuf::int32 processing_time_ms() const;
  inline void set_processing_time_ms(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidResponse)
  // @@protoc_insertion_point(class_scope:ads_serving.proto.BidResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_processing_time_ms();
  inline void clear_has_processing_time_ms();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Seatbid > seatbid_;
  ::google::protobuf::int32 processing_time_ms_;
  friend void  protobuf_AddDesc_bid_5fresponse_2eproto();
  friend void protobuf_AssignDesc_bid_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_bid_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Settlement

// optional uint32 version = 1;
inline bool Settlement::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Settlement::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Settlement::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Settlement::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Settlement::version() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Settlement.version)
  return version_;
}
inline void Settlement::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:ads_serving.proto.Settlement.version)
}

// required bytes price = 2;
inline bool Settlement::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Settlement::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Settlement::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Settlement::clear_price() {
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_->clear();
  }
  clear_has_price();
}
inline const ::std::string& Settlement::price() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Settlement.price)
  return *price_;
}
inline void Settlement::set_price(const ::std::string& value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(value);
  // @@protoc_insertion_point(field_set:ads_serving.proto.Settlement.price)
}
inline void Settlement::set_price(const char* value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(value);
  // @@protoc_insertion_point(field_set_char:ads_serving.proto.Settlement.price)
}
inline void Settlement::set_price(const void* value, size_t size) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ads_serving.proto.Settlement.price)
}
inline ::std::string* Settlement::mutable_price() {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ads_serving.proto.Settlement.price)
  return price_;
}
inline ::std::string* Settlement::release_price() {
  clear_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = price_;
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Settlement::set_allocated_price(::std::string* price) {
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (price) {
    set_has_price();
    price_ = price;
  } else {
    clear_has_price();
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ads_serving.proto.Settlement.price)
}

// optional bytes auth = 3;
inline bool Settlement::has_auth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Settlement::set_has_auth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Settlement::clear_has_auth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Settlement::clear_auth() {
  if (auth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_->clear();
  }
  clear_has_auth();
}
inline const ::std::string& Settlement::auth() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Settlement.auth)
  return *auth_;
}
inline void Settlement::set_auth(const ::std::string& value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
  // @@protoc_insertion_point(field_set:ads_serving.proto.Settlement.auth)
}
inline void Settlement::set_auth(const char* value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
  // @@protoc_insertion_point(field_set_char:ads_serving.proto.Settlement.auth)
}
inline void Settlement::set_auth(const void* value, size_t size) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_ = new ::std::string;
  }
  auth_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ads_serving.proto.Settlement.auth)
}
inline ::std::string* Settlement::mutable_auth() {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ads_serving.proto.Settlement.auth)
  return auth_;
}
inline ::std::string* Settlement::release_auth() {
  clear_has_auth();
  if (auth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = auth_;
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Settlement::set_allocated_auth(::std::string* auth) {
  if (auth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_;
  }
  if (auth) {
    set_has_auth();
    auth_ = auth;
  } else {
    clear_has_auth();
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ads_serving.proto.Settlement.auth)
}

// -------------------------------------------------------------------

// Bid

// required string id = 1;
inline bool Bid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bid::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Bid::id() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Bid.id)
  return *id_;
}
inline void Bid::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:ads_serving.proto.Bid.id)
}
inline void Bid::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ads_serving.proto.Bid.id)
}
inline void Bid::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ads_serving.proto.Bid.id)
}
inline ::std::string* Bid::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ads_serving.proto.Bid.id)
  return id_;
}
inline ::std::string* Bid::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Bid::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ads_serving.proto.Bid.id)
}

// required string impid = 2;
inline bool Bid::has_impid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bid::set_has_impid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bid::clear_has_impid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bid::clear_impid() {
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_->clear();
  }
  clear_has_impid();
}
inline const ::std::string& Bid::impid() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Bid.impid)
  return *impid_;
}
inline void Bid::set_impid(const ::std::string& value) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
  // @@protoc_insertion_point(field_set:ads_serving.proto.Bid.impid)
}
inline void Bid::set_impid(const char* value) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ads_serving.proto.Bid.impid)
}
inline void Bid::set_impid(const char* value, size_t size) {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  impid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ads_serving.proto.Bid.impid)
}
inline ::std::string* Bid::mutable_impid() {
  set_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    impid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ads_serving.proto.Bid.impid)
  return impid_;
}
inline ::std::string* Bid::release_impid() {
  clear_has_impid();
  if (impid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = impid_;
    impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Bid::set_allocated_impid(::std::string* impid) {
  if (impid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impid_;
  }
  if (impid) {
    set_has_impid();
    impid_ = impid;
  } else {
    clear_has_impid();
    impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ads_serving.proto.Bid.impid)
}

// required int32 price = 3;
inline bool Bid::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bid::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bid::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bid::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 Bid::price() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Bid.price)
  return price_;
}
inline void Bid::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ads_serving.proto.Bid.price)
}

// required string adm = 6;
inline bool Bid::has_adm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bid::set_has_adm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bid::clear_has_adm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bid::clear_adm() {
  if (adm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adm_->clear();
  }
  clear_has_adm();
}
inline const ::std::string& Bid::adm() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Bid.adm)
  return *adm_;
}
inline void Bid::set_adm(const ::std::string& value) {
  set_has_adm();
  if (adm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adm_ = new ::std::string;
  }
  adm_->assign(value);
  // @@protoc_insertion_point(field_set:ads_serving.proto.Bid.adm)
}
inline void Bid::set_adm(const char* value) {
  set_has_adm();
  if (adm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adm_ = new ::std::string;
  }
  adm_->assign(value);
  // @@protoc_insertion_point(field_set_char:ads_serving.proto.Bid.adm)
}
inline void Bid::set_adm(const char* value, size_t size) {
  set_has_adm();
  if (adm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adm_ = new ::std::string;
  }
  adm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ads_serving.proto.Bid.adm)
}
inline ::std::string* Bid::mutable_adm() {
  set_has_adm();
  if (adm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ads_serving.proto.Bid.adm)
  return adm_;
}
inline ::std::string* Bid::release_adm() {
  clear_has_adm();
  if (adm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adm_;
    adm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Bid::set_allocated_adm(::std::string* adm) {
  if (adm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adm_;
  }
  if (adm) {
    set_has_adm();
    adm_ = adm;
  } else {
    clear_has_adm();
    adm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ads_serving.proto.Bid.adm)
}

// required string crid = 10;
inline bool Bid::has_crid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bid::set_has_crid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bid::clear_has_crid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bid::clear_crid() {
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_->clear();
  }
  clear_has_crid();
}
inline const ::std::string& Bid::crid() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Bid.crid)
  return *crid_;
}
inline void Bid::set_crid(const ::std::string& value) {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  crid_->assign(value);
  // @@protoc_insertion_point(field_set:ads_serving.proto.Bid.crid)
}
inline void Bid::set_crid(const char* value) {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  crid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ads_serving.proto.Bid.crid)
}
inline void Bid::set_crid(const char* value, size_t size) {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  crid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ads_serving.proto.Bid.crid)
}
inline ::std::string* Bid::mutable_crid() {
  set_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ads_serving.proto.Bid.crid)
  return crid_;
}
inline ::std::string* Bid::release_crid() {
  clear_has_crid();
  if (crid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = crid_;
    crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Bid::set_allocated_crid(::std::string* crid) {
  if (crid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crid_;
  }
  if (crid) {
    set_has_crid();
    crid_ = crid;
  } else {
    clear_has_crid();
    crid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ads_serving.proto.Bid.crid)
}

// optional int32 startdelay = 16;
inline bool Bid::has_startdelay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Bid::set_has_startdelay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Bid::clear_has_startdelay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Bid::clear_startdelay() {
  startdelay_ = 0;
  clear_has_startdelay();
}
inline ::google::protobuf::int32 Bid::startdelay() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Bid.startdelay)
  return startdelay_;
}
inline void Bid::set_startdelay(::google::protobuf::int32 value) {
  set_has_startdelay();
  startdelay_ = value;
  // @@protoc_insertion_point(field_set:ads_serving.proto.Bid.startdelay)
}

// optional bool is_precision_advertising = 17 [default = false];
inline bool Bid::has_is_precision_advertising() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Bid::set_has_is_precision_advertising() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Bid::clear_has_is_precision_advertising() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Bid::clear_is_precision_advertising() {
  is_precision_advertising_ = false;
  clear_has_is_precision_advertising();
}
inline bool Bid::is_precision_advertising() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Bid.is_precision_advertising)
  return is_precision_advertising_;
}
inline void Bid::set_is_precision_advertising(bool value) {
  set_has_is_precision_advertising();
  is_precision_advertising_ = value;
  // @@protoc_insertion_point(field_set:ads_serving.proto.Bid.is_precision_advertising)
}

// -------------------------------------------------------------------

// Seatbid

// repeated .ads_serving.proto.Bid bid = 1;
inline int Seatbid::bid_size() const {
  return bid_.size();
}
inline void Seatbid::clear_bid() {
  bid_.Clear();
}
inline const ::ads_serving::proto::Bid& Seatbid::bid(int index) const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.Seatbid.bid)
  return bid_.Get(index);
}
inline ::ads_serving::proto::Bid* Seatbid::mutable_bid(int index) {
  // @@protoc_insertion_point(field_mutable:ads_serving.proto.Seatbid.bid)
  return bid_.Mutable(index);
}
inline ::ads_serving::proto::Bid* Seatbid::add_bid() {
  // @@protoc_insertion_point(field_add:ads_serving.proto.Seatbid.bid)
  return bid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Bid >&
Seatbid::bid() const {
  // @@protoc_insertion_point(field_list:ads_serving.proto.Seatbid.bid)
  return bid_;
}
inline ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Bid >*
Seatbid::mutable_bid() {
  // @@protoc_insertion_point(field_mutable_list:ads_serving.proto.Seatbid.bid)
  return &bid_;
}

// -------------------------------------------------------------------

// BidResponse

// required string id = 1;
inline bool BidResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidResponse::id() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.BidResponse.id)
  return *id_;
}
inline void BidResponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:ads_serving.proto.BidResponse.id)
}
inline void BidResponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ads_serving.proto.BidResponse.id)
}
inline void BidResponse::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ads_serving.proto.BidResponse.id)
}
inline ::std::string* BidResponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ads_serving.proto.BidResponse.id)
  return id_;
}
inline ::std::string* BidResponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BidResponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ads_serving.proto.BidResponse.id)
}

// repeated .ads_serving.proto.Seatbid seatbid = 2;
inline int BidResponse::seatbid_size() const {
  return seatbid_.size();
}
inline void BidResponse::clear_seatbid() {
  seatbid_.Clear();
}
inline const ::ads_serving::proto::Seatbid& BidResponse::seatbid(int index) const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.BidResponse.seatbid)
  return seatbid_.Get(index);
}
inline ::ads_serving::proto::Seatbid* BidResponse::mutable_seatbid(int index) {
  // @@protoc_insertion_point(field_mutable:ads_serving.proto.BidResponse.seatbid)
  return seatbid_.Mutable(index);
}
inline ::ads_serving::proto::Seatbid* BidResponse::add_seatbid() {
  // @@protoc_insertion_point(field_add:ads_serving.proto.BidResponse.seatbid)
  return seatbid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Seatbid >&
BidResponse::seatbid() const {
  // @@protoc_insertion_point(field_list:ads_serving.proto.BidResponse.seatbid)
  return seatbid_;
}
inline ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Seatbid >*
BidResponse::mutable_seatbid() {
  // @@protoc_insertion_point(field_mutable_list:ads_serving.proto.BidResponse.seatbid)
  return &seatbid_;
}

// optional int32 processing_time_ms = 4;
inline bool BidResponse::has_processing_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse::set_has_processing_time_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse::clear_has_processing_time_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse::clear_processing_time_ms() {
  processing_time_ms_ = 0;
  clear_has_processing_time_ms();
}
inline ::google::protobuf::int32 BidResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:ads_serving.proto.BidResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void BidResponse::set_processing_time_ms(::google::protobuf::int32 value) {
  set_has_processing_time_ms();
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:ads_serving.proto.BidResponse.processing_time_ms)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ads_serving

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bid_5fresponse_2eproto__INCLUDED

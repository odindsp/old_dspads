// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: toutiao_ssp_api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "toutiao_ssp_api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace toutiao_ssp {
namespace api {

namespace {

const ::google::protobuf::Descriptor* AdSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdSlot_Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdSlot_Banner_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AdSlot_Position_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Publisher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Publisher_reflection_ = NULL;
const ::google::protobuf::Descriptor* Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Content_reflection_ = NULL;
const ::google::protobuf::Descriptor* Content_Producer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Content_Producer_reflection_ = NULL;
const ::google::protobuf::Descriptor* App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  App_reflection_ = NULL;
const ::google::protobuf::Descriptor* Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Geo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_ConnectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_DeviceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_Segment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_Segment_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* User_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialMeta_ImageMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialMeta_ImageMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialMeta_ExternalMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialMeta_ExternalMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialMeta_AndroidApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialMeta_AndroidApp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialMeta_IosApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialMeta_IosApp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto() {
  protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "toutiao_ssp_api.proto");
  GOOGLE_CHECK(file != NULL);
  AdSlot_descriptor_ = file->message_type(0);
  static const int AdSlot_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot, ad_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot, bid_floor_),
  };
  AdSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdSlot_descriptor_,
      AdSlot::default_instance_,
      AdSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdSlot));
  AdSlot_Banner_descriptor_ = AdSlot_descriptor_->nested_type(0);
  static const int AdSlot_Banner_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot_Banner, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot_Banner, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot_Banner, pos_),
  };
  AdSlot_Banner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdSlot_Banner_descriptor_,
      AdSlot_Banner::default_instance_,
      AdSlot_Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot_Banner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSlot_Banner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdSlot_Banner));
  AdSlot_Position_descriptor_ = AdSlot_descriptor_->enum_type(0);
  Publisher_descriptor_ = file->message_type(1);
  static const int Publisher_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, domain_),
  };
  Publisher_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Publisher_descriptor_,
      Publisher::default_instance_,
      Publisher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Publisher));
  Content_descriptor_ = file->message_type(2);
  static const int Content_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, contentrating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, userrating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, producer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, language_),
  };
  Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Content_descriptor_,
      Content::default_instance_,
      Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Content));
  Content_Producer_descriptor_ = Content_descriptor_->nested_type(0);
  static const int Content_Producer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_Producer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_Producer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_Producer, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_Producer, domain_),
  };
  Content_Producer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Content_Producer_descriptor_,
      Content_Producer::default_instance_,
      Content_Producer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_Producer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_Producer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Content_Producer));
  App_descriptor_ = file->message_type(3);
  static const int App_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, privacypolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, paid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, keywords_),
  };
  App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      App_descriptor_,
      App::default_instance_,
      App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(App));
  Geo_descriptor_ = file->message_type(4);
  static const int Geo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, type_),
  };
  Geo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Geo_descriptor_,
      Geo::default_instance_,
      Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Geo));
  Device_descriptor_ = file->message_type(5);
  static const int Device_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, dnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, device_id_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, make_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, osv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, js_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, connection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, device_type_),
  };
  Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Device));
  Device_ConnectionType_descriptor_ = Device_descriptor_->enum_type(0);
  Device_DeviceType_descriptor_ = Device_descriptor_->enum_type(1);
  Data_descriptor_ = file->message_type(6);
  static const int Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, segment_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
  Data_Segment_descriptor_ = Data_descriptor_->nested_type(0);
  static const int Data_Segment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Segment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Segment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Segment, value_),
  };
  Data_Segment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_Segment_descriptor_,
      Data_Segment::default_instance_,
      Data_Segment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Segment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Segment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data_Segment));
  User_descriptor_ = file->message_type(7);
  static const int User_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, buyer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, yob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, data_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  User_Gender_descriptor_ = User_descriptor_->enum_type(0);
  BidRequest_descriptor_ = file->message_type(8);
  static const int BidRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, api_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adslots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  MaterialMeta_descriptor_ = file->message_type(9);
  static const int MaterialMeta_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, ad_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, nurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, image_banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, external_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, android_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, ios_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, show_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, click_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, is_inapp_),
  };
  MaterialMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialMeta_descriptor_,
      MaterialMeta::default_instance_,
      MaterialMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialMeta));
  MaterialMeta_ImageMeta_descriptor_ = MaterialMeta_descriptor_->nested_type(0);
  static const int MaterialMeta_ImageMeta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_ImageMeta, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_ImageMeta, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_ImageMeta, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_ImageMeta, url_),
  };
  MaterialMeta_ImageMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialMeta_ImageMeta_descriptor_,
      MaterialMeta_ImageMeta::default_instance_,
      MaterialMeta_ImageMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_ImageMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_ImageMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialMeta_ImageMeta));
  MaterialMeta_ExternalMeta_descriptor_ = MaterialMeta_descriptor_->nested_type(1);
  static const int MaterialMeta_ExternalMeta_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_ExternalMeta, url_),
  };
  MaterialMeta_ExternalMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialMeta_ExternalMeta_descriptor_,
      MaterialMeta_ExternalMeta::default_instance_,
      MaterialMeta_ExternalMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_ExternalMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_ExternalMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialMeta_ExternalMeta));
  MaterialMeta_AndroidApp_descriptor_ = MaterialMeta_descriptor_->nested_type(2);
  static const int MaterialMeta_AndroidApp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_AndroidApp, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_AndroidApp, download_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_AndroidApp, open_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_AndroidApp, package_),
  };
  MaterialMeta_AndroidApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialMeta_AndroidApp_descriptor_,
      MaterialMeta_AndroidApp::default_instance_,
      MaterialMeta_AndroidApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_AndroidApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_AndroidApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialMeta_AndroidApp));
  MaterialMeta_IosApp_descriptor_ = MaterialMeta_descriptor_->nested_type(3);
  static const int MaterialMeta_IosApp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_IosApp, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_IosApp, download_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_IosApp, open_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_IosApp, appleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_IosApp, ipa_url_),
  };
  MaterialMeta_IosApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialMeta_IosApp_descriptor_,
      MaterialMeta_IosApp::default_instance_,
      MaterialMeta_IosApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_IosApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialMeta_IosApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialMeta_IosApp));
  Bid_descriptor_ = file->message_type(10);
  static const int Bid_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, adslot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, creative_),
  };
  Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bid_descriptor_,
      Bid::default_instance_,
      Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bid));
  SeatBid_descriptor_ = file->message_type(11);
  static const int SeatBid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, ads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, seat_),
  };
  SeatBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeatBid_descriptor_,
      SeatBid::default_instance_,
      SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeatBid));
  BidResponse_descriptor_ = file->message_type(12);
  static const int BidResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seatbids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, error_code_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  AdType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_toutiao_5fssp_5fapi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdSlot_descriptor_, &AdSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdSlot_Banner_descriptor_, &AdSlot_Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Publisher_descriptor_, &Publisher::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Content_descriptor_, &Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Content_Producer_descriptor_, &Content_Producer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    App_descriptor_, &App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Geo_descriptor_, &Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_Segment_descriptor_, &Data_Segment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialMeta_descriptor_, &MaterialMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialMeta_ImageMeta_descriptor_, &MaterialMeta_ImageMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialMeta_ExternalMeta_descriptor_, &MaterialMeta_ExternalMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialMeta_AndroidApp_descriptor_, &MaterialMeta_AndroidApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialMeta_IosApp_descriptor_, &MaterialMeta_IosApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bid_descriptor_, &Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeatBid_descriptor_, &SeatBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto() {
  delete AdSlot::default_instance_;
  delete AdSlot_reflection_;
  delete AdSlot_Banner::default_instance_;
  delete AdSlot_Banner_reflection_;
  delete Publisher::default_instance_;
  delete Publisher_reflection_;
  delete Content::default_instance_;
  delete Content_reflection_;
  delete Content_Producer::default_instance_;
  delete Content_Producer_reflection_;
  delete App::default_instance_;
  delete App_reflection_;
  delete App::_default_id_;
  delete Geo::default_instance_;
  delete Geo_reflection_;
  delete Device::default_instance_;
  delete Device_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete Data_Segment::default_instance_;
  delete Data_Segment_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete MaterialMeta::default_instance_;
  delete MaterialMeta_reflection_;
  delete MaterialMeta_ImageMeta::default_instance_;
  delete MaterialMeta_ImageMeta_reflection_;
  delete MaterialMeta_ExternalMeta::default_instance_;
  delete MaterialMeta_ExternalMeta_reflection_;
  delete MaterialMeta_AndroidApp::default_instance_;
  delete MaterialMeta_AndroidApp_reflection_;
  delete MaterialMeta_IosApp::default_instance_;
  delete MaterialMeta_IosApp_reflection_;
  delete Bid::default_instance_;
  delete Bid_reflection_;
  delete SeatBid::default_instance_;
  delete SeatBid_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
}

void protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025toutiao_ssp_api.proto\022\017toutiao_ssp.api"
    "\"\207\002\n\006AdSlot\022\n\n\002id\030\001 \002(\t\022.\n\006banner\030\002 \003(\0132"
    "\036.toutiao_ssp.api.AdSlot.Banner\022(\n\007ad_ty"
    "pe\030\003 \003(\0162\027.toutiao_ssp.api.AdType\022\021\n\tbid"
    "_floor\030\004 \001(\r\032V\n\006Banner\022\r\n\005width\030\001 \002(\r\022\016\n"
    "\006height\030\002 \002(\r\022-\n\003pos\030\003 \002(\0162 .toutiao_ssp"
    ".api.AdSlot.Position\",\n\010Position\022\n\n\006SPLA"
    "SH\020\001\022\010\n\004FEED\020\002\022\n\n\006DETAIL\020\004\"B\n\tPublisher\022"
    "\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003cat\030\003 \001(\t\022\016"
    "\n\006domain\030\004 \001(\t\"\231\002\n\007Content\022\n\n\002id\030\001 \002(\t\022\r"
    "\n\005title\030\002 \001(\t\022\016\n\006series\030\003 \001(\t\022\013\n\003url\030\004 \001"
    "(\t\022\020\n\010keywords\030\005 \001(\t\022\025\n\rcontentrating\030\006 "
    "\001(\t\022\022\n\nuserrating\030\007 \001(\t\022\017\n\007context\030\010 \001(\t"
    "\0223\n\010producer\030\t \001(\0132!.toutiao_ssp.api.Con"
    "tent.Producer\022\020\n\010language\030\n \001(\t\032A\n\010Produ"
    "cer\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003cat\030\003 \001"
    "(\t\022\016\n\006domain\030\004 \001(\t\"\341\001\n\003App\022\016\n\002id\030\001 \002(\t:\002"
    "11\022\014\n\004name\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\013\n\003ver\030"
    "\004 \001(\t\022\016\n\006bundle\030\005 \001(\t\022\025\n\rprivacypolicy\030\006"
    " \001(\r\022\014\n\004paid\030\007 \001(\r\022-\n\tpublisher\030\010 \001(\0132\032."
    "toutiao_ssp.api.Publisher\022)\n\007content\030\t \001"
    "(\0132\030.toutiao_ssp.api.Content\022\020\n\010keywords"
    "\030\n \001(\t\"\\\n\003Geo\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\022"
    "\017\n\007country\030\003 \001(\t\022\016\n\006region\030\004 \001(\t\022\014\n\004city"
    "\030\005 \001(\t\022\014\n\004type\030\006 \001(\t\"\266\003\n\006Device\022\013\n\003dnt\030\001"
    " \002(\010\022\n\n\002ua\030\002 \002(\t\022\n\n\002ip\030\003 \001(\t\022!\n\003geo\030\004 \001("
    "\0132\024.toutiao_ssp.api.Geo\022\021\n\tdevice_id\030\005 \001"
    "(\t\022\025\n\rdevice_id_md5\030\006 \001(\t\022\017\n\007carrier\030\007 \001"
    "(\t\022\020\n\010language\030\010 \001(\t\022\014\n\004make\030\t \001(\t\022\r\n\005mo"
    "del\030\n \001(\t\022\n\n\002os\030\013 \001(\t\022\013\n\003osv\030\014 \001(\t\022\n\n\002js"
    "\030\r \001(\010\022\?\n\017connection_type\030\016 \001(\0162&.toutia"
    "o_ssp.api.Device.ConnectionType\0227\n\013devic"
    "e_type\030\017 \001(\0162\".toutiao_ssp.api.Device.De"
    "viceType\"6\n\016ConnectionType\022\r\n\tHoneycomb\020"
    "\001\022\010\n\004WIFI\020\002\022\013\n\007UNKNOWN\020\003\"#\n\nDeviceType\022\t"
    "\n\005PHONE\020\001\022\n\n\006TABLET\020\002\"\204\001\n\004Data\022\n\n\002id\030\001 \002"
    "(\t\022\014\n\004name\030\002 \001(\t\022.\n\007segment\030\003 \001(\0132\035.tout"
    "iao_ssp.api.Data.Segment\0322\n\007Segment\022\n\n\002i"
    "d\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"\346\001\n"
    "\004User\022\n\n\002id\030\001 \002(\t\022\020\n\010buyer_id\030\002 \001(\t\022\013\n\003y"
    "ob\030\003 \001(\t\022,\n\006gender\030\004 \001(\0162\034.toutiao_ssp.a"
    "pi.User.Gender\022\020\n\010keywords\030\005 \001(\t\022!\n\003geo\030"
    "\006 \001(\0132\024.toutiao_ssp.api.Geo\022#\n\004data\030\007 \001("
    "\0132\025.toutiao_ssp.api.Data\"+\n\006Gender\022\010\n\004MA"
    "LE\020\001\022\n\n\006FEMALE\020\002\022\013\n\007UNKNOWN\020\003\"\320\001\n\nBidReq"
    "uest\022\022\n\nrequest_id\030\001 \002(\t\022\023\n\013api_version\030"
    "\002 \002(\t\022(\n\007adslots\030\003 \003(\0132\027.toutiao_ssp.api"
    ".AdSlot\022!\n\003app\030\004 \002(\0132\024.toutiao_ssp.api.A"
    "pp\022\'\n\006device\030\005 \002(\0132\027.toutiao_ssp.api.Dev"
    "ice\022#\n\004user\030\006 \002(\0132\025.toutiao_ssp.api.User"
    "\"\271\005\n\014MaterialMeta\022(\n\007ad_type\030\001 \002(\0162\027.tou"
    "tiao_ssp.api.AdType\022\014\n\004nurl\030\002 \002(\t\022\r\n\005tit"
    "le\030\003 \001(\t\022\016\n\006source\030\004 \002(\t\022=\n\014image_banner"
    "\030\005 \001(\0132\'.toutiao_ssp.api.MaterialMeta.Im"
    "ageMeta\022<\n\010external\030\006 \001(\0132*.toutiao_ssp."
    "api.MaterialMeta.ExternalMeta\022=\n\013android"
    "_app\030\007 \001(\0132(.toutiao_ssp.api.MaterialMet"
    "a.AndroidApp\0225\n\007ios_app\030\010 \001(\0132$.toutiao_"
    "ssp.api.MaterialMeta.IosApp\022\020\n\010show_url\030"
    "\t \003(\t\022\021\n\tclick_url\030\n \003(\t\022\020\n\010is_inapp\030\013 \001"
    "(\010\032L\n\tImageMeta\022\023\n\013description\030\001 \001(\t\022\r\n\005"
    "width\030\002 \002(\r\022\016\n\006height\030\003 \001(\r\022\013\n\003url\030\004 \002(\t"
    "\032\033\n\014ExternalMeta\022\013\n\003url\030\001 \002(\t\032W\n\nAndroid"
    "App\022\020\n\010app_name\030\001 \002(\t\022\024\n\014download_url\030\002 "
    "\002(\t\022\020\n\010open_url\030\003 \001(\t\022\017\n\007package\030\004 \001(\t\032d"
    "\n\006IosApp\022\020\n\010app_name\030\001 \002(\t\022\024\n\014download_u"
    "rl\030\002 \002(\t\022\020\n\010open_url\030\003 \001(\t\022\017\n\007appleid\030\004 "
    "\001(\t\022\017\n\007ipa_url\030\005 \001(\t\"r\n\003Bid\022\n\n\002id\030\001 \002(\t\022"
    "\021\n\tadslot_id\030\002 \002(\t\022\r\n\005price\030\003 \002(\r\022\014\n\004adi"
    "d\030\004 \002(\004\022/\n\010creative\030\005 \002(\0132\035.toutiao_ssp."
    "api.MaterialMeta\":\n\007SeatBid\022!\n\003ads\030\001 \003(\013"
    "2\024.toutiao_ssp.api.Bid\022\014\n\004seat\030\002 \001(\t\"a\n\013"
    "BidResponse\022\022\n\nrequest_id\030\001 \002(\t\022*\n\010seatb"
    "ids\030\002 \003(\0132\030.toutiao_ssp.api.SeatBid\022\022\n\ne"
    "rror_code\030\003 \001(\004*c\n\006AdType\022\r\n\tNEWS_FEED\020\001"
    "\022\r\n\tTEXT_LINK\020\002\022\013\n\007IOS_APP\020\003\022\017\n\013ANDROID_"
    "APP\020\004\022\n\n\006SPLASH\020\005\022\021\n\rDETAIL_BANNER\020\006", 3076);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "toutiao_ssp_api.proto", &protobuf_RegisterTypes);
  AdSlot::default_instance_ = new AdSlot();
  AdSlot_Banner::default_instance_ = new AdSlot_Banner();
  Publisher::default_instance_ = new Publisher();
  Content::default_instance_ = new Content();
  Content_Producer::default_instance_ = new Content_Producer();
  App::_default_id_ =
      new ::std::string("11", 2);
  App::default_instance_ = new App();
  Geo::default_instance_ = new Geo();
  Device::default_instance_ = new Device();
  Data::default_instance_ = new Data();
  Data_Segment::default_instance_ = new Data_Segment();
  User::default_instance_ = new User();
  BidRequest::default_instance_ = new BidRequest();
  MaterialMeta::default_instance_ = new MaterialMeta();
  MaterialMeta_ImageMeta::default_instance_ = new MaterialMeta_ImageMeta();
  MaterialMeta_ExternalMeta::default_instance_ = new MaterialMeta_ExternalMeta();
  MaterialMeta_AndroidApp::default_instance_ = new MaterialMeta_AndroidApp();
  MaterialMeta_IosApp::default_instance_ = new MaterialMeta_IosApp();
  Bid::default_instance_ = new Bid();
  SeatBid::default_instance_ = new SeatBid();
  BidResponse::default_instance_ = new BidResponse();
  AdSlot::default_instance_->InitAsDefaultInstance();
  AdSlot_Banner::default_instance_->InitAsDefaultInstance();
  Publisher::default_instance_->InitAsDefaultInstance();
  Content::default_instance_->InitAsDefaultInstance();
  Content_Producer::default_instance_->InitAsDefaultInstance();
  App::default_instance_->InitAsDefaultInstance();
  Geo::default_instance_->InitAsDefaultInstance();
  Device::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  Data_Segment::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  BidRequest::default_instance_->InitAsDefaultInstance();
  MaterialMeta::default_instance_->InitAsDefaultInstance();
  MaterialMeta_ImageMeta::default_instance_->InitAsDefaultInstance();
  MaterialMeta_ExternalMeta::default_instance_->InitAsDefaultInstance();
  MaterialMeta_AndroidApp::default_instance_->InitAsDefaultInstance();
  MaterialMeta_IosApp::default_instance_->InitAsDefaultInstance();
  Bid::default_instance_->InitAsDefaultInstance();
  SeatBid::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_toutiao_5fssp_5fapi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_toutiao_5fssp_5fapi_2eproto {
  StaticDescriptorInitializer_toutiao_5fssp_5fapi_2eproto() {
    protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  }
} static_descriptor_initializer_toutiao_5fssp_5fapi_2eproto_;
const ::google::protobuf::EnumDescriptor* AdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdType_descriptor_;
}
bool AdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AdSlot_Position_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdSlot_Position_descriptor_;
}
bool AdSlot_Position_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AdSlot_Position AdSlot::SPLASH;
const AdSlot_Position AdSlot::FEED;
const AdSlot_Position AdSlot::DETAIL;
const AdSlot_Position AdSlot::Position_MIN;
const AdSlot_Position AdSlot::Position_MAX;
const int AdSlot::Position_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AdSlot_Banner::kWidthFieldNumber;
const int AdSlot_Banner::kHeightFieldNumber;
const int AdSlot_Banner::kPosFieldNumber;
#endif  // !_MSC_VER

AdSlot_Banner::AdSlot_Banner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.AdSlot.Banner)
}

void AdSlot_Banner::InitAsDefaultInstance() {
}

AdSlot_Banner::AdSlot_Banner(const AdSlot_Banner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.AdSlot.Banner)
}

void AdSlot_Banner::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  pos_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdSlot_Banner::~AdSlot_Banner() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.AdSlot.Banner)
  SharedDtor();
}

void AdSlot_Banner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdSlot_Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdSlot_Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdSlot_Banner_descriptor_;
}

const AdSlot_Banner& AdSlot_Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

AdSlot_Banner* AdSlot_Banner::default_instance_ = NULL;

AdSlot_Banner* AdSlot_Banner::New() const {
  return new AdSlot_Banner;
}

void AdSlot_Banner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdSlot_Banner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(width_, height_);
    pos_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdSlot_Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.AdSlot.Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required .toutiao_ssp.api.AdSlot.Position pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toutiao_ssp::api::AdSlot_Position_IsValid(value)) {
            set_pos(static_cast< ::toutiao_ssp::api::AdSlot_Position >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.AdSlot.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.AdSlot.Banner)
  return false;
#undef DO_
}

void AdSlot_Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.AdSlot.Banner)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // required .toutiao_ssp.api.AdSlot.Position pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.AdSlot.Banner)
}

::google::protobuf::uint8* AdSlot_Banner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.AdSlot.Banner)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // required .toutiao_ssp.api.AdSlot.Position pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.AdSlot.Banner)
  return target;
}

int AdSlot_Banner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required .toutiao_ssp.api.AdSlot.Position pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdSlot_Banner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdSlot_Banner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdSlot_Banner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdSlot_Banner::MergeFrom(const AdSlot_Banner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdSlot_Banner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdSlot_Banner::CopyFrom(const AdSlot_Banner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdSlot_Banner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AdSlot_Banner::Swap(AdSlot_Banner* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdSlot_Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdSlot_Banner_descriptor_;
  metadata.reflection = AdSlot_Banner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdSlot::kIdFieldNumber;
const int AdSlot::kBannerFieldNumber;
const int AdSlot::kAdTypeFieldNumber;
const int AdSlot::kBidFloorFieldNumber;
#endif  // !_MSC_VER

AdSlot::AdSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.AdSlot)
}

void AdSlot::InitAsDefaultInstance() {
}

AdSlot::AdSlot(const AdSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.AdSlot)
}

void AdSlot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_floor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdSlot::~AdSlot() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.AdSlot)
  SharedDtor();
}

void AdSlot::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void AdSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdSlot_descriptor_;
}

const AdSlot& AdSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

AdSlot* AdSlot::default_instance_ = NULL;

AdSlot* AdSlot::New() const {
  return new AdSlot;
}

void AdSlot::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    bid_floor_ = 0u;
  }
  banner_.Clear();
  ad_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.AdSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banner;
        break;
      }

      // repeated .toutiao_ssp.api.AdSlot.Banner banner = 2;
      case 2: {
        if (tag == 18) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banner;
        if (input->ExpectTag(24)) goto parse_ad_type;
        break;
      }

      // repeated .toutiao_ssp.api.AdType ad_type = 3;
      case 3: {
        if (tag == 24) {
         parse_ad_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toutiao_ssp::api::AdType_IsValid(value)) {
            add_ad_type(static_cast< ::toutiao_ssp::api::AdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::toutiao_ssp::api::AdType_IsValid,
                 this->mutable_ad_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ad_type;
        if (input->ExpectTag(32)) goto parse_bid_floor;
        break;
      }

      // optional uint32 bid_floor = 4;
      case 4: {
        if (tag == 32) {
         parse_bid_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bid_floor_)));
          set_has_bid_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.AdSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.AdSlot)
  return false;
#undef DO_
}

void AdSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.AdSlot)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .toutiao_ssp.api.AdSlot.Banner banner = 2;
  for (int i = 0; i < this->banner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->banner(i), output);
  }

  // repeated .toutiao_ssp.api.AdType ad_type = 3;
  for (int i = 0; i < this->ad_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ad_type(i), output);
  }

  // optional uint32 bid_floor = 4;
  if (has_bid_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bid_floor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.AdSlot)
}

::google::protobuf::uint8* AdSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.AdSlot)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .toutiao_ssp.api.AdSlot.Banner banner = 2;
  for (int i = 0; i < this->banner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->banner(i), target);
  }

  // repeated .toutiao_ssp.api.AdType ad_type = 3;
  for (int i = 0; i < this->ad_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ad_type(i), target);
  }

  // optional uint32 bid_floor = 4;
  if (has_bid_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bid_floor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.AdSlot)
  return target;
}

int AdSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint32 bid_floor = 4;
    if (has_bid_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bid_floor());
    }

  }
  // repeated .toutiao_ssp.api.AdSlot.Banner banner = 2;
  total_size += 1 * this->banner_size();
  for (int i = 0; i < this->banner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->banner(i));
  }

  // repeated .toutiao_ssp.api.AdType ad_type = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ad_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ad_type(i));
    }
    total_size += 1 * this->ad_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdSlot::MergeFrom(const AdSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  banner_.MergeFrom(from.banner_);
  ad_type_.MergeFrom(from.ad_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bid_floor()) {
      set_bid_floor(from.bid_floor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdSlot::CopyFrom(const AdSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->banner())) return false;
  return true;
}

void AdSlot::Swap(AdSlot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    banner_.Swap(&other->banner_);
    ad_type_.Swap(&other->ad_type_);
    std::swap(bid_floor_, other->bid_floor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdSlot_descriptor_;
  metadata.reflection = AdSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Publisher::kIdFieldNumber;
const int Publisher::kNameFieldNumber;
const int Publisher::kCatFieldNumber;
const int Publisher::kDomainFieldNumber;
#endif  // !_MSC_VER

Publisher::Publisher()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.Publisher)
}

void Publisher::InitAsDefaultInstance() {
}

Publisher::Publisher(const Publisher& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.Publisher)
}

void Publisher::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Publisher::~Publisher() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.Publisher)
  SharedDtor();
}

void Publisher::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (cat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cat_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void Publisher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Publisher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Publisher_descriptor_;
}

const Publisher& Publisher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

Publisher* Publisher::default_instance_ = NULL;

Publisher* Publisher::New() const {
  return new Publisher;
}

void Publisher::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_cat()) {
      if (cat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cat_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Publisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.Publisher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        break;
      }

      // optional string cat = 3;
      case 3: {
        if (tag == 26) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat().data(), this->cat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.Publisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.Publisher)
  return false;
#undef DO_
}

void Publisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.Publisher)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string cat = 3;
  if (has_cat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat().data(), this->cat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cat(), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.Publisher)
}

::google::protobuf::uint8* Publisher::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.Publisher)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string cat = 3;
  if (has_cat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat().data(), this->cat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cat(), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.Publisher)
  return target;
}

int Publisher::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string cat = 3;
    if (has_cat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cat());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Publisher::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Publisher* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Publisher*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Publisher::MergeFrom(const Publisher& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cat()) {
      set_cat(from.cat());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Publisher::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Publisher::CopyFrom(const Publisher& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publisher::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Publisher::Swap(Publisher* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(cat_, other->cat_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Publisher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Publisher_descriptor_;
  metadata.reflection = Publisher_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Content_Producer::kIdFieldNumber;
const int Content_Producer::kNameFieldNumber;
const int Content_Producer::kCatFieldNumber;
const int Content_Producer::kDomainFieldNumber;
#endif  // !_MSC_VER

Content_Producer::Content_Producer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.Content.Producer)
}

void Content_Producer::InitAsDefaultInstance() {
}

Content_Producer::Content_Producer(const Content_Producer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.Content.Producer)
}

void Content_Producer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Content_Producer::~Content_Producer() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.Content.Producer)
  SharedDtor();
}

void Content_Producer::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (cat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cat_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void Content_Producer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Content_Producer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Content_Producer_descriptor_;
}

const Content_Producer& Content_Producer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

Content_Producer* Content_Producer::default_instance_ = NULL;

Content_Producer* Content_Producer::New() const {
  return new Content_Producer;
}

void Content_Producer::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_cat()) {
      if (cat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cat_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Content_Producer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.Content.Producer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        break;
      }

      // optional string cat = 3;
      case 3: {
        if (tag == 26) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat().data(), this->cat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.Content.Producer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.Content.Producer)
  return false;
#undef DO_
}

void Content_Producer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.Content.Producer)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string cat = 3;
  if (has_cat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat().data(), this->cat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cat(), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.Content.Producer)
}

::google::protobuf::uint8* Content_Producer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.Content.Producer)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string cat = 3;
  if (has_cat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat().data(), this->cat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cat(), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.Content.Producer)
  return target;
}

int Content_Producer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string cat = 3;
    if (has_cat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cat());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Content_Producer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Content_Producer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Content_Producer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Content_Producer::MergeFrom(const Content_Producer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cat()) {
      set_cat(from.cat());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Content_Producer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content_Producer::CopyFrom(const Content_Producer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content_Producer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Content_Producer::Swap(Content_Producer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(cat_, other->cat_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Content_Producer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Content_Producer_descriptor_;
  metadata.reflection = Content_Producer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Content::kIdFieldNumber;
const int Content::kTitleFieldNumber;
const int Content::kSeriesFieldNumber;
const int Content::kUrlFieldNumber;
const int Content::kKeywordsFieldNumber;
const int Content::kContentratingFieldNumber;
const int Content::kUserratingFieldNumber;
const int Content::kContextFieldNumber;
const int Content::kProducerFieldNumber;
const int Content::kLanguageFieldNumber;
#endif  // !_MSC_VER

Content::Content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.Content)
}

void Content::InitAsDefaultInstance() {
  producer_ = const_cast< ::toutiao_ssp::api::Content_Producer*>(&::toutiao_ssp::api::Content_Producer::default_instance());
}

Content::Content(const Content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.Content)
}

void Content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  series_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contentrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userrating_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_ = NULL;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.Content)
  SharedDtor();
}

void Content::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (series_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete series_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (contentrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contentrating_;
  }
  if (userrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userrating_;
  }
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (this != default_instance_) {
    delete producer_;
  }
}

void Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Content_descriptor_;
}

const Content& Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

Content* Content::default_instance_ = NULL;

Content* Content::New() const {
  return new Content;
}

void Content::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_series()) {
      if (series_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        series_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
    if (has_contentrating()) {
      if (contentrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contentrating_->clear();
      }
    }
    if (has_userrating()) {
      if (userrating_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userrating_->clear();
      }
    }
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        context_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_producer()) {
      if (producer_ != NULL) producer_->::toutiao_ssp::api::Content_Producer::Clear();
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_series;
        break;
      }

      // optional string series = 3;
      case 3: {
        if (tag == 26) {
         parse_series:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_series()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->series().data(), this->series().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "series");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (tag == 34) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keywords;
        break;
      }

      // optional string keywords = 5;
      case 5: {
        if (tag == 42) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_contentrating;
        break;
      }

      // optional string contentrating = 6;
      case 6: {
        if (tag == 50) {
         parse_contentrating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentrating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contentrating().data(), this->contentrating().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contentrating");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_userrating;
        break;
      }

      // optional string userrating = 7;
      case 7: {
        if (tag == 58) {
         parse_userrating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userrating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userrating().data(), this->userrating().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userrating");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_context;
        break;
      }

      // optional string context = 8;
      case 8: {
        if (tag == 66) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_producer;
        break;
      }

      // optional .toutiao_ssp.api.Content.Producer producer = 9;
      case 9: {
        if (tag == 74) {
         parse_producer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_producer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_language;
        break;
      }

      // optional string language = 10;
      case 10: {
        if (tag == 82) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.Content)
  return false;
#undef DO_
}

void Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.Content)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string series = 3;
  if (has_series()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series().data(), this->series().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "series");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->series(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // optional string keywords = 5;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->keywords(), output);
  }

  // optional string contentrating = 6;
  if (has_contentrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentrating().data(), this->contentrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contentrating");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->contentrating(), output);
  }

  // optional string userrating = 7;
  if (has_userrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userrating().data(), this->userrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userrating");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->userrating(), output);
  }

  // optional string context = 8;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->context(), output);
  }

  // optional .toutiao_ssp.api.Content.Producer producer = 9;
  if (has_producer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->producer(), output);
  }

  // optional string language = 10;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->language(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.Content)
}

::google::protobuf::uint8* Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.Content)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string series = 3;
  if (has_series()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series().data(), this->series().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "series");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->series(), target);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // optional string keywords = 5;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->keywords(), target);
  }

  // optional string contentrating = 6;
  if (has_contentrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentrating().data(), this->contentrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contentrating");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->contentrating(), target);
  }

  // optional string userrating = 7;
  if (has_userrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userrating().data(), this->userrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userrating");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->userrating(), target);
  }

  // optional string context = 8;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->context(), target);
  }

  // optional .toutiao_ssp.api.Content.Producer producer = 9;
  if (has_producer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->producer(), target);
  }

  // optional string language = 10;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->language(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.Content)
  return target;
}

int Content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string series = 3;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->series());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string keywords = 5;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional string contentrating = 6;
    if (has_contentrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentrating());
    }

    // optional string userrating = 7;
    if (has_userrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userrating());
    }

    // optional string context = 8;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .toutiao_ssp.api.Content.Producer producer = 9;
    if (has_producer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->producer());
    }

    // optional string language = 10;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_series()) {
      set_series(from.series());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_contentrating()) {
      set_contentrating(from.contentrating());
    }
    if (from.has_userrating()) {
      set_userrating(from.userrating());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_producer()) {
      mutable_producer()->::toutiao_ssp::api::Content_Producer::MergeFrom(from.producer());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_producer()) {
    if (!this->producer().IsInitialized()) return false;
  }
  return true;
}

void Content::Swap(Content* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(series_, other->series_);
    std::swap(url_, other->url_);
    std::swap(keywords_, other->keywords_);
    std::swap(contentrating_, other->contentrating_);
    std::swap(userrating_, other->userrating_);
    std::swap(context_, other->context_);
    std::swap(producer_, other->producer_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Content_descriptor_;
  metadata.reflection = Content_reflection_;
  return metadata;
}


// ===================================================================

::std::string* App::_default_id_ = NULL;
#ifndef _MSC_VER
const int App::kIdFieldNumber;
const int App::kNameFieldNumber;
const int App::kDomainFieldNumber;
const int App::kVerFieldNumber;
const int App::kBundleFieldNumber;
const int App::kPrivacypolicyFieldNumber;
const int App::kPaidFieldNumber;
const int App::kPublisherFieldNumber;
const int App::kContentFieldNumber;
const int App::kKeywordsFieldNumber;
#endif  // !_MSC_VER

App::App()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.App)
}

void App::InitAsDefaultInstance() {
  publisher_ = const_cast< ::toutiao_ssp::api::Publisher*>(&::toutiao_ssp::api::Publisher::default_instance());
  content_ = const_cast< ::toutiao_ssp::api::Content*>(&::toutiao_ssp::api::Content::default_instance());
}

App::App(const App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.App)
}

void App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(_default_id_);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacypolicy_ = 0u;
  paid_ = 0u;
  publisher_ = NULL;
  content_ = NULL;
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

App::~App() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.App)
  SharedDtor();
}

void App::SharedDtor() {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bundle_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (this != default_instance_) {
    delete publisher_;
    delete content_;
  }
}

void App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return App_descriptor_;
}

const App& App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

App* App::default_instance_ = NULL;

App* App::New() const {
  return new App;
}

void App::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<App*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(privacypolicy_, paid_);
    if (has_id()) {
      if (id_ != _default_id_) {
        id_->assign(*_default_id_);
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ver_->clear();
      }
    }
    if (has_bundle()) {
      if (bundle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bundle_->clear();
      }
    }
    if (has_publisher()) {
      if (publisher_ != NULL) publisher_->::toutiao_ssp::api::Publisher::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_content()) {
      if (content_ != NULL) content_->::toutiao_ssp::api::Content::Clear();
    }
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = "11"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (tag == 26) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ver;
        break;
      }

      // optional string ver = 4;
      case 4: {
        if (tag == 34) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bundle;
        break;
      }

      // optional string bundle = 5;
      case 5: {
        if (tag == 42) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_privacypolicy;
        break;
      }

      // optional uint32 privacypolicy = 6;
      case 6: {
        if (tag == 48) {
         parse_privacypolicy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privacypolicy_)));
          set_has_privacypolicy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_paid;
        break;
      }

      // optional uint32 paid = 7;
      case 7: {
        if (tag == 56) {
         parse_paid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paid_)));
          set_has_paid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_publisher;
        break;
      }

      // optional .toutiao_ssp.api.Publisher publisher = 8;
      case 8: {
        if (tag == 66) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_content;
        break;
      }

      // optional .toutiao_ssp.api.Content content = 9;
      case 9: {
        if (tag == 74) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_keywords;
        break;
      }

      // optional string keywords = 10;
      case 10: {
        if (tag == 82) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.App)
  return false;
#undef DO_
}

void App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.App)
  // required string id = 1 [default = "11"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // optional string ver = 4;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ver(), output);
  }

  // optional string bundle = 5;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bundle(), output);
  }

  // optional uint32 privacypolicy = 6;
  if (has_privacypolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->privacypolicy(), output);
  }

  // optional uint32 paid = 7;
  if (has_paid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->paid(), output);
  }

  // optional .toutiao_ssp.api.Publisher publisher = 8;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->publisher(), output);
  }

  // optional .toutiao_ssp.api.Content content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->content(), output);
  }

  // optional string keywords = 10;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->keywords(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.App)
}

::google::protobuf::uint8* App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.App)
  // required string id = 1 [default = "11"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // optional string ver = 4;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ver(), target);
  }

  // optional string bundle = 5;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bundle(), target);
  }

  // optional uint32 privacypolicy = 6;
  if (has_privacypolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->privacypolicy(), target);
  }

  // optional uint32 paid = 7;
  if (has_paid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->paid(), target);
  }

  // optional .toutiao_ssp.api.Publisher publisher = 8;
  if (has_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->publisher(), target);
  }

  // optional .toutiao_ssp.api.Content content = 9;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->content(), target);
  }

  // optional string keywords = 10;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->keywords(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.App)
  return target;
}

int App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = "11"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string ver = 4;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // optional string bundle = 5;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

    // optional uint32 privacypolicy = 6;
    if (has_privacypolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->privacypolicy());
    }

    // optional uint32 paid = 7;
    if (has_paid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paid());
    }

    // optional .toutiao_ssp.api.Publisher publisher = 8;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publisher());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .toutiao_ssp.api.Content content = 9;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional string keywords = 10;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void App::MergeFrom(const App& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_bundle()) {
      set_bundle(from.bundle());
    }
    if (from.has_privacypolicy()) {
      set_privacypolicy(from.privacypolicy());
    }
    if (from.has_paid()) {
      set_paid(from.paid());
    }
    if (from.has_publisher()) {
      mutable_publisher()->::toutiao_ssp::api::Publisher::MergeFrom(from.publisher());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_content()) {
      mutable_content()->::toutiao_ssp::api::Content::MergeFrom(from.content());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App::CopyFrom(const App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_publisher()) {
    if (!this->publisher().IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void App::Swap(App* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(domain_, other->domain_);
    std::swap(ver_, other->ver_);
    std::swap(bundle_, other->bundle_);
    std::swap(privacypolicy_, other->privacypolicy_);
    std::swap(paid_, other->paid_);
    std::swap(publisher_, other->publisher_);
    std::swap(content_, other->content_);
    std::swap(keywords_, other->keywords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = App_descriptor_;
  metadata.reflection = App_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Geo::kLatFieldNumber;
const int Geo::kLonFieldNumber;
const int Geo::kCountryFieldNumber;
const int Geo::kRegionFieldNumber;
const int Geo::kCityFieldNumber;
const int Geo::kTypeFieldNumber;
#endif  // !_MSC_VER

Geo::Geo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.Geo)
}

void Geo::InitAsDefaultInstance() {
}

Geo::Geo(const Geo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.Geo)
}

void Geo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Geo::~Geo() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.Geo)
  SharedDtor();
}

void Geo::SharedDtor() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete region_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Geo_descriptor_;
}

const Geo& Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

Geo* Geo::default_instance_ = NULL;

Geo* Geo::New() const {
  return new Geo;
}

void Geo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Geo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(lat_, lon_);
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        region_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // optional double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }

      // optional string country = 3;
      case 3: {
        if (tag == 26) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_region;
        break;
      }

      // optional string region = 4;
      case 4: {
        if (tag == 34) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "region");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_city;
        break;
      }

      // optional string city = 5;
      case 5: {
        if (tag == 42) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_type;
        break;
      }

      // optional string type = 6;
      case 6: {
        if (tag == 50) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.Geo)
  return false;
#undef DO_
}

void Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.Geo)
  // optional double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // optional double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country(), output);
  }

  // optional string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->region(), output);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->city(), output);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.Geo)
}

::google::protobuf::uint8* Geo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.Geo)
  // optional double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // optional double lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }

  // optional string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->region(), target);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city(), target);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.Geo)
  return target;
}

int Geo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string region = 4;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }

    // optional string city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Geo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Geo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Geo::MergeFrom(const Geo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Geo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geo::CopyFrom(const Geo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo::IsInitialized() const {

  return true;
}

void Geo::Swap(Geo* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(country_, other->country_);
    std::swap(region_, other->region_);
    std::swap(city_, other->city_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Geo_descriptor_;
  metadata.reflection = Geo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Device_ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_ConnectionType_descriptor_;
}
bool Device_ConnectionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Device_ConnectionType Device::Honeycomb;
const Device_ConnectionType Device::WIFI;
const Device_ConnectionType Device::UNKNOWN;
const Device_ConnectionType Device::ConnectionType_MIN;
const Device_ConnectionType Device::ConnectionType_MAX;
const int Device::ConnectionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Device_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_DeviceType_descriptor_;
}
bool Device_DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Device_DeviceType Device::PHONE;
const Device_DeviceType Device::TABLET;
const Device_DeviceType Device::DeviceType_MIN;
const Device_DeviceType Device::DeviceType_MAX;
const int Device::DeviceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Device::kDntFieldNumber;
const int Device::kUaFieldNumber;
const int Device::kIpFieldNumber;
const int Device::kGeoFieldNumber;
const int Device::kDeviceIdFieldNumber;
const int Device::kDeviceIdMd5FieldNumber;
const int Device::kCarrierFieldNumber;
const int Device::kLanguageFieldNumber;
const int Device::kMakeFieldNumber;
const int Device::kModelFieldNumber;
const int Device::kOsFieldNumber;
const int Device::kOsvFieldNumber;
const int Device::kJsFieldNumber;
const int Device::kConnectionTypeFieldNumber;
const int Device::kDeviceTypeFieldNumber;
#endif  // !_MSC_VER

Device::Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.Device)
}

void Device::InitAsDefaultInstance() {
  geo_ = const_cast< ::toutiao_ssp::api::Geo*>(&::toutiao_ssp::api::Geo::default_instance());
}

Device::Device(const Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.Device)
}

void Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dnt_ = false;
  ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  make_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  js_ = false;
  connection_type_ = 1;
  device_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_md5_;
  }
  if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carrier_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete make_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New() const {
  return new Device;
}

void Device::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    dnt_ = false;
    if (has_ua()) {
      if (ua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ua_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::toutiao_ssp::api::Geo::Clear();
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_id_->clear();
      }
    }
    if (has_device_id_md5()) {
      if (device_id_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_id_md5_->clear();
      }
    }
    if (has_carrier()) {
      if (carrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        carrier_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_make()) {
      if (make_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        make_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_->clear();
      }
    }
    if (has_osv()) {
      if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        osv_->clear();
      }
    }
    js_ = false;
    connection_type_ = 1;
    device_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool dnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dnt_)));
          set_has_dnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ua;
        break;
      }

      // required string ua = 2;
      case 2: {
        if (tag == 18) {
         parse_ua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_geo;
        break;
      }

      // optional .toutiao_ssp.api.Geo geo = 4;
      case 4: {
        if (tag == 34) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device_id;
        break;
      }

      // optional string device_id = 5;
      case 5: {
        if (tag == 42) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device_id_md5;
        break;
      }

      // optional string device_id_md5 = 6;
      case 6: {
        if (tag == 50) {
         parse_device_id_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id_md5().data(), this->device_id_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id_md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_carrier;
        break;
      }

      // optional string carrier = 7;
      case 7: {
        if (tag == 58) {
         parse_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->carrier().data(), this->carrier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "carrier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_language;
        break;
      }

      // optional string language = 8;
      case 8: {
        if (tag == 66) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_make;
        break;
      }

      // optional string make = 9;
      case 9: {
        if (tag == 74) {
         parse_make:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_make()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->make().data(), this->make().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "make");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_model;
        break;
      }

      // optional string model = 10;
      case 10: {
        if (tag == 82) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_os;
        break;
      }

      // optional string os = 11;
      case 11: {
        if (tag == 90) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_osv;
        break;
      }

      // optional string osv = 12;
      case 12: {
        if (tag == 98) {
         parse_osv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->osv().data(), this->osv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "osv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_js;
        break;
      }

      // optional bool js = 13;
      case 13: {
        if (tag == 104) {
         parse_js:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &js_)));
          set_has_js();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_connection_type;
        break;
      }

      // optional .toutiao_ssp.api.Device.ConnectionType connection_type = 14;
      case 14: {
        if (tag == 112) {
         parse_connection_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toutiao_ssp::api::Device_ConnectionType_IsValid(value)) {
            set_connection_type(static_cast< ::toutiao_ssp::api::Device_ConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_device_type;
        break;
      }

      // optional .toutiao_ssp.api.Device.DeviceType device_type = 15;
      case 15: {
        if (tag == 120) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toutiao_ssp::api::Device_DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::toutiao_ssp::api::Device_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.Device)
  // required bool dnt = 1;
  if (has_dnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dnt(), output);
  }

  // required string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ua(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional .toutiao_ssp.api.Geo geo = 4;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->geo(), output);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_id(), output);
  }

  // optional string device_id_md5 = 6;
  if (has_device_id_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id_md5().data(), this->device_id_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id_md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_id_md5(), output);
  }

  // optional string carrier = 7;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "carrier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->carrier(), output);
  }

  // optional string language = 8;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->language(), output);
  }

  // optional string make = 9;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "make");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->make(), output);
  }

  // optional string model = 10;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->model(), output);
  }

  // optional string os = 11;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->os(), output);
  }

  // optional string osv = 12;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->osv(), output);
  }

  // optional bool js = 13;
  if (has_js()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->js(), output);
  }

  // optional .toutiao_ssp.api.Device.ConnectionType connection_type = 14;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->connection_type(), output);
  }

  // optional .toutiao_ssp.api.Device.DeviceType device_type = 15;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->device_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.Device)
}

::google::protobuf::uint8* Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.Device)
  // required bool dnt = 1;
  if (has_dnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dnt(), target);
  }

  // required string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ua(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional .toutiao_ssp.api.Geo geo = 4;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->geo(), target);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_id(), target);
  }

  // optional string device_id_md5 = 6;
  if (has_device_id_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id_md5().data(), this->device_id_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id_md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_id_md5(), target);
  }

  // optional string carrier = 7;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "carrier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->carrier(), target);
  }

  // optional string language = 8;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->language(), target);
  }

  // optional string make = 9;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "make");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->make(), target);
  }

  // optional string model = 10;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->model(), target);
  }

  // optional string os = 11;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->os(), target);
  }

  // optional string osv = 12;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->osv(), target);
  }

  // optional bool js = 13;
  if (has_js()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->js(), target);
  }

  // optional .toutiao_ssp.api.Device.ConnectionType connection_type = 14;
  if (has_connection_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->connection_type(), target);
  }

  // optional .toutiao_ssp.api.Device.DeviceType device_type = 15;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->device_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.Device)
  return target;
}

int Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool dnt = 1;
    if (has_dnt()) {
      total_size += 1 + 1;
    }

    // required string ua = 2;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional .toutiao_ssp.api.Geo geo = 4;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // optional string device_id = 5;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string device_id_md5 = 6;
    if (has_device_id_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id_md5());
    }

    // optional string carrier = 7;
    if (has_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrier());
    }

    // optional string language = 8;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string make = 9;
    if (has_make()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->make());
    }

    // optional string model = 10;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string os = 11;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string osv = 12;
    if (has_osv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osv());
    }

    // optional bool js = 13;
    if (has_js()) {
      total_size += 1 + 1;
    }

    // optional .toutiao_ssp.api.Device.ConnectionType connection_type = 14;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_type());
    }

    // optional .toutiao_ssp.api.Device.DeviceType device_type = 15;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dnt()) {
      set_dnt(from.dnt());
    }
    if (from.has_ua()) {
      set_ua(from.ua());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_geo()) {
      mutable_geo()->::toutiao_ssp::api::Geo::MergeFrom(from.geo());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_device_id_md5()) {
      set_device_id_md5(from.device_id_md5());
    }
    if (from.has_carrier()) {
      set_carrier(from.carrier());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_make()) {
      set_make(from.make());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_osv()) {
      set_osv(from.osv());
    }
    if (from.has_js()) {
      set_js(from.js());
    }
    if (from.has_connection_type()) {
      set_connection_type(from.connection_type());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Device::Swap(Device* other) {
  if (other != this) {
    std::swap(dnt_, other->dnt_);
    std::swap(ua_, other->ua_);
    std::swap(ip_, other->ip_);
    std::swap(geo_, other->geo_);
    std::swap(device_id_, other->device_id_);
    std::swap(device_id_md5_, other->device_id_md5_);
    std::swap(carrier_, other->carrier_);
    std::swap(language_, other->language_);
    std::swap(make_, other->make_);
    std::swap(model_, other->model_);
    std::swap(os_, other->os_);
    std::swap(osv_, other->osv_);
    std::swap(js_, other->js_);
    std::swap(connection_type_, other->connection_type_);
    std::swap(device_type_, other->device_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Data_Segment::kIdFieldNumber;
const int Data_Segment::kNameFieldNumber;
const int Data_Segment::kValueFieldNumber;
#endif  // !_MSC_VER

Data_Segment::Data_Segment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.Data.Segment)
}

void Data_Segment::InitAsDefaultInstance() {
}

Data_Segment::Data_Segment(const Data_Segment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.Data.Segment)
}

void Data_Segment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data_Segment::~Data_Segment() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.Data.Segment)
  SharedDtor();
}

void Data_Segment::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Data_Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data_Segment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_Segment_descriptor_;
}

const Data_Segment& Data_Segment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

Data_Segment* Data_Segment::default_instance_ = NULL;

Data_Segment* Data_Segment::New() const {
  return new Data_Segment;
}

void Data_Segment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data_Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.Data.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.Data.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.Data.Segment)
  return false;
#undef DO_
}

void Data_Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.Data.Segment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.Data.Segment)
}

::google::protobuf::uint8* Data_Segment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.Data.Segment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.Data.Segment)
  return target;
}

int Data_Segment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data_Segment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data_Segment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data_Segment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data_Segment::MergeFrom(const Data_Segment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data_Segment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_Segment::CopyFrom(const Data_Segment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_Segment::IsInitialized() const {

  return true;
}

void Data_Segment::Swap(Data_Segment* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data_Segment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_Segment_descriptor_;
  metadata.reflection = Data_Segment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Data::kIdFieldNumber;
const int Data::kNameFieldNumber;
const int Data::kSegmentFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.Data)
}

void Data::InitAsDefaultInstance() {
  segment_ = const_cast< ::toutiao_ssp::api::Data_Segment*>(&::toutiao_ssp::api::Data_Segment::default_instance());
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.Data)
}

void Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete segment_;
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_segment()) {
      if (segment_ != NULL) segment_->::toutiao_ssp::api::Data_Segment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_segment;
        break;
      }

      // optional .toutiao_ssp.api.Data.Segment segment = 3;
      case 3: {
        if (tag == 26) {
         parse_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.Data)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .toutiao_ssp.api.Data.Segment segment = 3;
  if (has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->segment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.Data)
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.Data)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .toutiao_ssp.api.Data.Segment segment = 3;
  if (has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->segment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.Data)
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .toutiao_ssp.api.Data.Segment segment = 3;
    if (has_segment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_segment()) {
      mutable_segment()->::toutiao_ssp::api::Data_Segment::MergeFrom(from.segment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(segment_, other->segment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* User_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_Gender_descriptor_;
}
bool User_Gender_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const User_Gender User::MALE;
const User_Gender User::FEMALE;
const User_Gender User::UNKNOWN;
const User_Gender User::Gender_MIN;
const User_Gender User::Gender_MAX;
const int User::Gender_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int User::kIdFieldNumber;
const int User::kBuyerIdFieldNumber;
const int User::kYobFieldNumber;
const int User::kGenderFieldNumber;
const int User::kKeywordsFieldNumber;
const int User::kGeoFieldNumber;
const int User::kDataFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.User)
}

void User::InitAsDefaultInstance() {
  geo_ = const_cast< ::toutiao_ssp::api::Geo*>(&::toutiao_ssp::api::Geo::default_instance());
  data_ = const_cast< ::toutiao_ssp::api::Data*>(&::toutiao_ssp::api::Data::default_instance());
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.User)
}

void User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 1;
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.User)
  SharedDtor();
}

void User::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (buyer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyer_id_;
  }
  if (yob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete yob_;
  }
  if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keywords_;
  }
  if (this != default_instance_) {
    delete geo_;
    delete data_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_buyer_id()) {
      if (buyer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyer_id_->clear();
      }
    }
    if (has_yob()) {
      if (yob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        yob_->clear();
      }
    }
    gender_ = 1;
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keywords_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::toutiao_ssp::api::Geo::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::toutiao_ssp::api::Data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyer_id;
        break;
      }

      // optional string buyer_id = 2;
      case 2: {
        if (tag == 18) {
         parse_buyer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyer_id().data(), this->buyer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buyer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_yob;
        break;
      }

      // optional string yob = 3;
      case 3: {
        if (tag == 26) {
         parse_yob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->yob().data(), this->yob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional .toutiao_ssp.api.User.Gender gender = 4;
      case 4: {
        if (tag == 32) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toutiao_ssp::api::User_Gender_IsValid(value)) {
            set_gender(static_cast< ::toutiao_ssp::api::User_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keywords;
        break;
      }

      // optional string keywords = 5;
      case 5: {
        if (tag == 42) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_geo;
        break;
      }

      // optional .toutiao_ssp.api.Geo geo = 6;
      case 6: {
        if (tag == 50) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional .toutiao_ssp.api.Data data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.User)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string buyer_id = 2;
  if (has_buyer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_id().data(), this->buyer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buyer_id(), output);
  }

  // optional string yob = 3;
  if (has_yob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yob().data(), this->yob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->yob(), output);
  }

  // optional .toutiao_ssp.api.User.Gender gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gender(), output);
  }

  // optional string keywords = 5;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->keywords(), output);
  }

  // optional .toutiao_ssp.api.Geo geo = 6;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->geo(), output);
  }

  // optional .toutiao_ssp.api.Data data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.User)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string buyer_id = 2;
  if (has_buyer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_id().data(), this->buyer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buyer_id(), target);
  }

  // optional string yob = 3;
  if (has_yob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yob().data(), this->yob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->yob(), target);
  }

  // optional .toutiao_ssp.api.User.Gender gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gender(), target);
  }

  // optional string keywords = 5;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->keywords(), target);
  }

  // optional .toutiao_ssp.api.Geo geo = 6;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->geo(), target);
  }

  // optional .toutiao_ssp.api.Data data = 7;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string buyer_id = 2;
    if (has_buyer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyer_id());
    }

    // optional string yob = 3;
    if (has_yob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yob());
    }

    // optional .toutiao_ssp.api.User.Gender gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional string keywords = 5;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional .toutiao_ssp.api.Geo geo = 6;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // optional .toutiao_ssp.api.Data data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buyer_id()) {
      set_buyer_id(from.buyer_id());
    }
    if (from.has_yob()) {
      set_yob(from.yob());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_geo()) {
      mutable_geo()->::toutiao_ssp::api::Geo::MergeFrom(from.geo());
    }
    if (from.has_data()) {
      mutable_data()->::toutiao_ssp::api::Data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buyer_id_, other->buyer_id_);
    std::swap(yob_, other->yob_);
    std::swap(gender_, other->gender_);
    std::swap(keywords_, other->keywords_);
    std::swap(geo_, other->geo_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidRequest::kRequestIdFieldNumber;
const int BidRequest::kApiVersionFieldNumber;
const int BidRequest::kAdslotsFieldNumber;
const int BidRequest::kAppFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kUserFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  app_ = const_cast< ::toutiao_ssp::api::App*>(&::toutiao_ssp::api::App::default_instance());
  device_ = const_cast< ::toutiao_ssp::api::Device*>(&::toutiao_ssp::api::Device::default_instance());
  user_ = const_cast< ::toutiao_ssp::api::User*>(&::toutiao_ssp::api::User::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_ = NULL;
  device_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (api_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_version_;
  }
  if (this != default_instance_) {
    delete app_;
    delete device_;
    delete user_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
  if (_has_bits_[0 / 32] & 59) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_id_->clear();
      }
    }
    if (has_api_version()) {
      if (api_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        api_version_->clear();
      }
    }
    if (has_app()) {
      if (app_ != NULL) app_->::toutiao_ssp::api::App::Clear();
    }
    if (has_device()) {
      if (device_ != NULL) device_->::toutiao_ssp::api::Device::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::toutiao_ssp::api::User::Clear();
    }
  }
  adslots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "request_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_api_version;
        break;
      }

      // required string api_version = 2;
      case 2: {
        if (tag == 18) {
         parse_api_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->api_version().data(), this->api_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "api_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_adslots;
        break;
      }

      // repeated .toutiao_ssp.api.AdSlot adslots = 3;
      case 3: {
        if (tag == 26) {
         parse_adslots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adslots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_adslots;
        if (input->ExpectTag(34)) goto parse_app;
        break;
      }

      // required .toutiao_ssp.api.App app = 4;
      case 4: {
        if (tag == 34) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device;
        break;
      }

      // required .toutiao_ssp.api.Device device = 5;
      case 5: {
        if (tag == 42) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user;
        break;
      }

      // required .toutiao_ssp.api.User user = 6;
      case 6: {
        if (tag == 50) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.BidRequest)
  // required string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // required string api_version = 2;
  if (has_api_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->api_version().data(), this->api_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "api_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->api_version(), output);
  }

  // repeated .toutiao_ssp.api.AdSlot adslots = 3;
  for (int i = 0; i < this->adslots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->adslots(i), output);
  }

  // required .toutiao_ssp.api.App app = 4;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->app(), output);
  }

  // required .toutiao_ssp.api.Device device = 5;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device(), output);
  }

  // required .toutiao_ssp.api.User user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.BidRequest)
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.BidRequest)
  // required string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // required string api_version = 2;
  if (has_api_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->api_version().data(), this->api_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "api_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->api_version(), target);
  }

  // repeated .toutiao_ssp.api.AdSlot adslots = 3;
  for (int i = 0; i < this->adslots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->adslots(i), target);
  }

  // required .toutiao_ssp.api.App app = 4;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->app(), target);
  }

  // required .toutiao_ssp.api.Device device = 5;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device(), target);
  }

  // required .toutiao_ssp.api.User user = 6;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // required string api_version = 2;
    if (has_api_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->api_version());
    }

    // required .toutiao_ssp.api.App app = 4;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

    // required .toutiao_ssp.api.Device device = 5;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // required .toutiao_ssp.api.User user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  // repeated .toutiao_ssp.api.AdSlot adslots = 3;
  total_size += 1 * this->adslots_size();
  for (int i = 0; i < this->adslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adslots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  adslots_.MergeFrom(from.adslots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_api_version()) {
      set_api_version(from.api_version());
    }
    if (from.has_app()) {
      mutable_app()->::toutiao_ssp::api::App::MergeFrom(from.app());
    }
    if (from.has_device()) {
      mutable_device()->::toutiao_ssp::api::Device::MergeFrom(from.device());
    }
    if (from.has_user()) {
      mutable_user()->::toutiao_ssp::api::User::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->adslots())) return false;
  if (has_app()) {
    if (!this->app().IsInitialized()) return false;
  }
  if (has_device()) {
    if (!this->device().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(api_version_, other->api_version_);
    adslots_.Swap(&other->adslots_);
    std::swap(app_, other->app_);
    std::swap(device_, other->device_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialMeta_ImageMeta::kDescriptionFieldNumber;
const int MaterialMeta_ImageMeta::kWidthFieldNumber;
const int MaterialMeta_ImageMeta::kHeightFieldNumber;
const int MaterialMeta_ImageMeta::kUrlFieldNumber;
#endif  // !_MSC_VER

MaterialMeta_ImageMeta::MaterialMeta_ImageMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.MaterialMeta.ImageMeta)
}

void MaterialMeta_ImageMeta::InitAsDefaultInstance() {
}

MaterialMeta_ImageMeta::MaterialMeta_ImageMeta(const MaterialMeta_ImageMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.MaterialMeta.ImageMeta)
}

void MaterialMeta_ImageMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0u;
  height_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialMeta_ImageMeta::~MaterialMeta_ImageMeta() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.MaterialMeta.ImageMeta)
  SharedDtor();
}

void MaterialMeta_ImageMeta::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void MaterialMeta_ImageMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialMeta_ImageMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialMeta_ImageMeta_descriptor_;
}

const MaterialMeta_ImageMeta& MaterialMeta_ImageMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

MaterialMeta_ImageMeta* MaterialMeta_ImageMeta::default_instance_ = NULL;

MaterialMeta_ImageMeta* MaterialMeta_ImageMeta::New() const {
  return new MaterialMeta_ImageMeta;
}

void MaterialMeta_ImageMeta::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MaterialMeta_ImageMeta*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(width_, height_);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialMeta_ImageMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.MaterialMeta.ImageMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // required uint32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // required string url = 4;
      case 4: {
        if (tag == 34) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.MaterialMeta.ImageMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.MaterialMeta.ImageMeta)
  return false;
#undef DO_
}

void MaterialMeta_ImageMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.MaterialMeta.ImageMeta)
  // optional string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // required uint32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // required string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.MaterialMeta.ImageMeta)
}

::google::protobuf::uint8* MaterialMeta_ImageMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.MaterialMeta.ImageMeta)
  // optional string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // required uint32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // required string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.MaterialMeta.ImageMeta)
  return target;
}

int MaterialMeta_ImageMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialMeta_ImageMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialMeta_ImageMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialMeta_ImageMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialMeta_ImageMeta::MergeFrom(const MaterialMeta_ImageMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialMeta_ImageMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialMeta_ImageMeta::CopyFrom(const MaterialMeta_ImageMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialMeta_ImageMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  return true;
}

void MaterialMeta_ImageMeta::Swap(MaterialMeta_ImageMeta* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialMeta_ImageMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialMeta_ImageMeta_descriptor_;
  metadata.reflection = MaterialMeta_ImageMeta_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MaterialMeta_ExternalMeta::kUrlFieldNumber;
#endif  // !_MSC_VER

MaterialMeta_ExternalMeta::MaterialMeta_ExternalMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.MaterialMeta.ExternalMeta)
}

void MaterialMeta_ExternalMeta::InitAsDefaultInstance() {
}

MaterialMeta_ExternalMeta::MaterialMeta_ExternalMeta(const MaterialMeta_ExternalMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.MaterialMeta.ExternalMeta)
}

void MaterialMeta_ExternalMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialMeta_ExternalMeta::~MaterialMeta_ExternalMeta() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.MaterialMeta.ExternalMeta)
  SharedDtor();
}

void MaterialMeta_ExternalMeta::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void MaterialMeta_ExternalMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialMeta_ExternalMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialMeta_ExternalMeta_descriptor_;
}

const MaterialMeta_ExternalMeta& MaterialMeta_ExternalMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

MaterialMeta_ExternalMeta* MaterialMeta_ExternalMeta::default_instance_ = NULL;

MaterialMeta_ExternalMeta* MaterialMeta_ExternalMeta::New() const {
  return new MaterialMeta_ExternalMeta;
}

void MaterialMeta_ExternalMeta::Clear() {
  if (has_url()) {
    if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      url_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialMeta_ExternalMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.MaterialMeta.ExternalMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.MaterialMeta.ExternalMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.MaterialMeta.ExternalMeta)
  return false;
#undef DO_
}

void MaterialMeta_ExternalMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.MaterialMeta.ExternalMeta)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.MaterialMeta.ExternalMeta)
}

::google::protobuf::uint8* MaterialMeta_ExternalMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.MaterialMeta.ExternalMeta)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.MaterialMeta.ExternalMeta)
  return target;
}

int MaterialMeta_ExternalMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialMeta_ExternalMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialMeta_ExternalMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialMeta_ExternalMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialMeta_ExternalMeta::MergeFrom(const MaterialMeta_ExternalMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialMeta_ExternalMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialMeta_ExternalMeta::CopyFrom(const MaterialMeta_ExternalMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialMeta_ExternalMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MaterialMeta_ExternalMeta::Swap(MaterialMeta_ExternalMeta* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialMeta_ExternalMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialMeta_ExternalMeta_descriptor_;
  metadata.reflection = MaterialMeta_ExternalMeta_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MaterialMeta_AndroidApp::kAppNameFieldNumber;
const int MaterialMeta_AndroidApp::kDownloadUrlFieldNumber;
const int MaterialMeta_AndroidApp::kOpenUrlFieldNumber;
const int MaterialMeta_AndroidApp::kPackageFieldNumber;
#endif  // !_MSC_VER

MaterialMeta_AndroidApp::MaterialMeta_AndroidApp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.MaterialMeta.AndroidApp)
}

void MaterialMeta_AndroidApp::InitAsDefaultInstance() {
}

MaterialMeta_AndroidApp::MaterialMeta_AndroidApp(const MaterialMeta_AndroidApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.MaterialMeta.AndroidApp)
}

void MaterialMeta_AndroidApp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialMeta_AndroidApp::~MaterialMeta_AndroidApp() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.MaterialMeta.AndroidApp)
  SharedDtor();
}

void MaterialMeta_AndroidApp::SharedDtor() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_url_;
  }
  if (open_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete open_url_;
  }
  if (package_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete package_;
  }
  if (this != default_instance_) {
  }
}

void MaterialMeta_AndroidApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialMeta_AndroidApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialMeta_AndroidApp_descriptor_;
}

const MaterialMeta_AndroidApp& MaterialMeta_AndroidApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

MaterialMeta_AndroidApp* MaterialMeta_AndroidApp::default_instance_ = NULL;

MaterialMeta_AndroidApp* MaterialMeta_AndroidApp::New() const {
  return new MaterialMeta_AndroidApp;
}

void MaterialMeta_AndroidApp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_name_->clear();
      }
    }
    if (has_download_url()) {
      if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        download_url_->clear();
      }
    }
    if (has_open_url()) {
      if (open_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        open_url_->clear();
      }
    }
    if (has_package()) {
      if (package_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        package_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialMeta_AndroidApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.MaterialMeta.AndroidApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_download_url;
        break;
      }

      // required string download_url = 2;
      case 2: {
        if (tag == 18) {
         parse_download_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_url().data(), this->download_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "download_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_open_url;
        break;
      }

      // optional string open_url = 3;
      case 3: {
        if (tag == 26) {
         parse_open_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->open_url().data(), this->open_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "open_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_package;
        break;
      }

      // optional string package = 4;
      case 4: {
        if (tag == 34) {
         parse_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "package");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.MaterialMeta.AndroidApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.MaterialMeta.AndroidApp)
  return false;
#undef DO_
}

void MaterialMeta_AndroidApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.MaterialMeta.AndroidApp)
  // required string app_name = 1;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_name(), output);
  }

  // required string download_url = 2;
  if (has_download_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "download_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->download_url(), output);
  }

  // optional string open_url = 3;
  if (has_open_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_url().data(), this->open_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->open_url(), output);
  }

  // optional string package = 4;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "package");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->package(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.MaterialMeta.AndroidApp)
}

::google::protobuf::uint8* MaterialMeta_AndroidApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.MaterialMeta.AndroidApp)
  // required string app_name = 1;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_name(), target);
  }

  // required string download_url = 2;
  if (has_download_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "download_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->download_url(), target);
  }

  // optional string open_url = 3;
  if (has_open_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_url().data(), this->open_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->open_url(), target);
  }

  // optional string package = 4;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "package");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->package(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.MaterialMeta.AndroidApp)
  return target;
}

int MaterialMeta_AndroidApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_name = 1;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // required string download_url = 2;
    if (has_download_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_url());
    }

    // optional string open_url = 3;
    if (has_open_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_url());
    }

    // optional string package = 4;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialMeta_AndroidApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialMeta_AndroidApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialMeta_AndroidApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialMeta_AndroidApp::MergeFrom(const MaterialMeta_AndroidApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_download_url()) {
      set_download_url(from.download_url());
    }
    if (from.has_open_url()) {
      set_open_url(from.open_url());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialMeta_AndroidApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialMeta_AndroidApp::CopyFrom(const MaterialMeta_AndroidApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialMeta_AndroidApp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MaterialMeta_AndroidApp::Swap(MaterialMeta_AndroidApp* other) {
  if (other != this) {
    std::swap(app_name_, other->app_name_);
    std::swap(download_url_, other->download_url_);
    std::swap(open_url_, other->open_url_);
    std::swap(package_, other->package_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialMeta_AndroidApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialMeta_AndroidApp_descriptor_;
  metadata.reflection = MaterialMeta_AndroidApp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MaterialMeta_IosApp::kAppNameFieldNumber;
const int MaterialMeta_IosApp::kDownloadUrlFieldNumber;
const int MaterialMeta_IosApp::kOpenUrlFieldNumber;
const int MaterialMeta_IosApp::kAppleidFieldNumber;
const int MaterialMeta_IosApp::kIpaUrlFieldNumber;
#endif  // !_MSC_VER

MaterialMeta_IosApp::MaterialMeta_IosApp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.MaterialMeta.IosApp)
}

void MaterialMeta_IosApp::InitAsDefaultInstance() {
}

MaterialMeta_IosApp::MaterialMeta_IosApp(const MaterialMeta_IosApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.MaterialMeta.IosApp)
}

void MaterialMeta_IosApp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipa_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialMeta_IosApp::~MaterialMeta_IosApp() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.MaterialMeta.IosApp)
  SharedDtor();
}

void MaterialMeta_IosApp::SharedDtor() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_url_;
  }
  if (open_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete open_url_;
  }
  if (appleid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appleid_;
  }
  if (ipa_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipa_url_;
  }
  if (this != default_instance_) {
  }
}

void MaterialMeta_IosApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialMeta_IosApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialMeta_IosApp_descriptor_;
}

const MaterialMeta_IosApp& MaterialMeta_IosApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

MaterialMeta_IosApp* MaterialMeta_IosApp::default_instance_ = NULL;

MaterialMeta_IosApp* MaterialMeta_IosApp::New() const {
  return new MaterialMeta_IosApp;
}

void MaterialMeta_IosApp::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_name_->clear();
      }
    }
    if (has_download_url()) {
      if (download_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        download_url_->clear();
      }
    }
    if (has_open_url()) {
      if (open_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        open_url_->clear();
      }
    }
    if (has_appleid()) {
      if (appleid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        appleid_->clear();
      }
    }
    if (has_ipa_url()) {
      if (ipa_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipa_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialMeta_IosApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.MaterialMeta.IosApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_download_url;
        break;
      }

      // required string download_url = 2;
      case 2: {
        if (tag == 18) {
         parse_download_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_url().data(), this->download_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "download_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_open_url;
        break;
      }

      // optional string open_url = 3;
      case 3: {
        if (tag == 26) {
         parse_open_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->open_url().data(), this->open_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "open_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_appleid;
        break;
      }

      // optional string appleid = 4;
      case 4: {
        if (tag == 34) {
         parse_appleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appleid().data(), this->appleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "appleid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ipa_url;
        break;
      }

      // optional string ipa_url = 5;
      case 5: {
        if (tag == 42) {
         parse_ipa_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipa_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipa_url().data(), this->ipa_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipa_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.MaterialMeta.IosApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.MaterialMeta.IosApp)
  return false;
#undef DO_
}

void MaterialMeta_IosApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.MaterialMeta.IosApp)
  // required string app_name = 1;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_name(), output);
  }

  // required string download_url = 2;
  if (has_download_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "download_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->download_url(), output);
  }

  // optional string open_url = 3;
  if (has_open_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_url().data(), this->open_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->open_url(), output);
  }

  // optional string appleid = 4;
  if (has_appleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appleid().data(), this->appleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appleid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->appleid(), output);
  }

  // optional string ipa_url = 5;
  if (has_ipa_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipa_url().data(), this->ipa_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipa_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ipa_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.MaterialMeta.IosApp)
}

::google::protobuf::uint8* MaterialMeta_IosApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.MaterialMeta.IosApp)
  // required string app_name = 1;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_name(), target);
  }

  // required string download_url = 2;
  if (has_download_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "download_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->download_url(), target);
  }

  // optional string open_url = 3;
  if (has_open_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_url().data(), this->open_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->open_url(), target);
  }

  // optional string appleid = 4;
  if (has_appleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appleid().data(), this->appleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appleid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->appleid(), target);
  }

  // optional string ipa_url = 5;
  if (has_ipa_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipa_url().data(), this->ipa_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipa_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ipa_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.MaterialMeta.IosApp)
  return target;
}

int MaterialMeta_IosApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_name = 1;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // required string download_url = 2;
    if (has_download_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_url());
    }

    // optional string open_url = 3;
    if (has_open_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_url());
    }

    // optional string appleid = 4;
    if (has_appleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appleid());
    }

    // optional string ipa_url = 5;
    if (has_ipa_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipa_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialMeta_IosApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialMeta_IosApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialMeta_IosApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialMeta_IosApp::MergeFrom(const MaterialMeta_IosApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_download_url()) {
      set_download_url(from.download_url());
    }
    if (from.has_open_url()) {
      set_open_url(from.open_url());
    }
    if (from.has_appleid()) {
      set_appleid(from.appleid());
    }
    if (from.has_ipa_url()) {
      set_ipa_url(from.ipa_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialMeta_IosApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialMeta_IosApp::CopyFrom(const MaterialMeta_IosApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialMeta_IosApp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MaterialMeta_IosApp::Swap(MaterialMeta_IosApp* other) {
  if (other != this) {
    std::swap(app_name_, other->app_name_);
    std::swap(download_url_, other->download_url_);
    std::swap(open_url_, other->open_url_);
    std::swap(appleid_, other->appleid_);
    std::swap(ipa_url_, other->ipa_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialMeta_IosApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialMeta_IosApp_descriptor_;
  metadata.reflection = MaterialMeta_IosApp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MaterialMeta::kAdTypeFieldNumber;
const int MaterialMeta::kNurlFieldNumber;
const int MaterialMeta::kTitleFieldNumber;
const int MaterialMeta::kSourceFieldNumber;
const int MaterialMeta::kImageBannerFieldNumber;
const int MaterialMeta::kExternalFieldNumber;
const int MaterialMeta::kAndroidAppFieldNumber;
const int MaterialMeta::kIosAppFieldNumber;
const int MaterialMeta::kShowUrlFieldNumber;
const int MaterialMeta::kClickUrlFieldNumber;
const int MaterialMeta::kIsInappFieldNumber;
#endif  // !_MSC_VER

MaterialMeta::MaterialMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.MaterialMeta)
}

void MaterialMeta::InitAsDefaultInstance() {
  image_banner_ = const_cast< ::toutiao_ssp::api::MaterialMeta_ImageMeta*>(&::toutiao_ssp::api::MaterialMeta_ImageMeta::default_instance());
  external_ = const_cast< ::toutiao_ssp::api::MaterialMeta_ExternalMeta*>(&::toutiao_ssp::api::MaterialMeta_ExternalMeta::default_instance());
  android_app_ = const_cast< ::toutiao_ssp::api::MaterialMeta_AndroidApp*>(&::toutiao_ssp::api::MaterialMeta_AndroidApp::default_instance());
  ios_app_ = const_cast< ::toutiao_ssp::api::MaterialMeta_IosApp*>(&::toutiao_ssp::api::MaterialMeta_IosApp::default_instance());
}

MaterialMeta::MaterialMeta(const MaterialMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.MaterialMeta)
}

void MaterialMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ad_type_ = 1;
  nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_banner_ = NULL;
  external_ = NULL;
  android_app_ = NULL;
  ios_app_ = NULL;
  is_inapp_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialMeta::~MaterialMeta() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.MaterialMeta)
  SharedDtor();
}

void MaterialMeta::SharedDtor() {
  if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nurl_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
    delete image_banner_;
    delete external_;
    delete android_app_;
    delete ios_app_;
  }
}

void MaterialMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialMeta_descriptor_;
}

const MaterialMeta& MaterialMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

MaterialMeta* MaterialMeta::default_instance_ = NULL;

MaterialMeta* MaterialMeta::New() const {
  return new MaterialMeta;
}

void MaterialMeta::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    ad_type_ = 1;
    if (has_nurl()) {
      if (nurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nurl_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_image_banner()) {
      if (image_banner_ != NULL) image_banner_->::toutiao_ssp::api::MaterialMeta_ImageMeta::Clear();
    }
    if (has_external()) {
      if (external_ != NULL) external_->::toutiao_ssp::api::MaterialMeta_ExternalMeta::Clear();
    }
    if (has_android_app()) {
      if (android_app_ != NULL) android_app_->::toutiao_ssp::api::MaterialMeta_AndroidApp::Clear();
    }
    if (has_ios_app()) {
      if (ios_app_ != NULL) ios_app_->::toutiao_ssp::api::MaterialMeta_IosApp::Clear();
    }
  }
  is_inapp_ = false;
  show_url_.Clear();
  click_url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.MaterialMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .toutiao_ssp.api.AdType ad_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toutiao_ssp::api::AdType_IsValid(value)) {
            set_ad_type(static_cast< ::toutiao_ssp::api::AdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nurl;
        break;
      }

      // required string nurl = 2;
      case 2: {
        if (tag == 18) {
         parse_nurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nurl().data(), this->nurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_source;
        break;
      }

      // required string source = 4;
      case 4: {
        if (tag == 34) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_banner;
        break;
      }

      // optional .toutiao_ssp.api.MaterialMeta.ImageMeta image_banner = 5;
      case 5: {
        if (tag == 42) {
         parse_image_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_external;
        break;
      }

      // optional .toutiao_ssp.api.MaterialMeta.ExternalMeta external = 6;
      case 6: {
        if (tag == 50) {
         parse_external:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_android_app;
        break;
      }

      // optional .toutiao_ssp.api.MaterialMeta.AndroidApp android_app = 7;
      case 7: {
        if (tag == 58) {
         parse_android_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_android_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ios_app;
        break;
      }

      // optional .toutiao_ssp.api.MaterialMeta.IosApp ios_app = 8;
      case 8: {
        if (tag == 66) {
         parse_ios_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ios_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_show_url;
        break;
      }

      // repeated string show_url = 9;
      case 9: {
        if (tag == 74) {
         parse_show_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_show_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->show_url(this->show_url_size() - 1).data(),
            this->show_url(this->show_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "show_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_show_url;
        if (input->ExpectTag(82)) goto parse_click_url;
        break;
      }

      // repeated string click_url = 10;
      case 10: {
        if (tag == 82) {
         parse_click_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_url(this->click_url_size() - 1).data(),
            this->click_url(this->click_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_click_url;
        if (input->ExpectTag(88)) goto parse_is_inapp;
        break;
      }

      // optional bool is_inapp = 11;
      case 11: {
        if (tag == 88) {
         parse_is_inapp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inapp_)));
          set_has_is_inapp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.MaterialMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.MaterialMeta)
  return false;
#undef DO_
}

void MaterialMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.MaterialMeta)
  // required .toutiao_ssp.api.AdType ad_type = 1;
  if (has_ad_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ad_type(), output);
  }

  // required string nurl = 2;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nurl(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // required string source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source(), output);
  }

  // optional .toutiao_ssp.api.MaterialMeta.ImageMeta image_banner = 5;
  if (has_image_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->image_banner(), output);
  }

  // optional .toutiao_ssp.api.MaterialMeta.ExternalMeta external = 6;
  if (has_external()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->external(), output);
  }

  // optional .toutiao_ssp.api.MaterialMeta.AndroidApp android_app = 7;
  if (has_android_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->android_app(), output);
  }

  // optional .toutiao_ssp.api.MaterialMeta.IosApp ios_app = 8;
  if (has_ios_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ios_app(), output);
  }

  // repeated string show_url = 9;
  for (int i = 0; i < this->show_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->show_url(i).data(), this->show_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "show_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->show_url(i), output);
  }

  // repeated string click_url = 10;
  for (int i = 0; i < this->click_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->click_url(i).data(), this->click_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "click_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->click_url(i), output);
  }

  // optional bool is_inapp = 11;
  if (has_is_inapp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_inapp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.MaterialMeta)
}

::google::protobuf::uint8* MaterialMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.MaterialMeta)
  // required .toutiao_ssp.api.AdType ad_type = 1;
  if (has_ad_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ad_type(), target);
  }

  // required string nurl = 2;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nurl(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // required string source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source(), target);
  }

  // optional .toutiao_ssp.api.MaterialMeta.ImageMeta image_banner = 5;
  if (has_image_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->image_banner(), target);
  }

  // optional .toutiao_ssp.api.MaterialMeta.ExternalMeta external = 6;
  if (has_external()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->external(), target);
  }

  // optional .toutiao_ssp.api.MaterialMeta.AndroidApp android_app = 7;
  if (has_android_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->android_app(), target);
  }

  // optional .toutiao_ssp.api.MaterialMeta.IosApp ios_app = 8;
  if (has_ios_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ios_app(), target);
  }

  // repeated string show_url = 9;
  for (int i = 0; i < this->show_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_url(i).data(), this->show_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "show_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->show_url(i), target);
  }

  // repeated string click_url = 10;
  for (int i = 0; i < this->click_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_url(i).data(), this->click_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->click_url(i), target);
  }

  // optional bool is_inapp = 11;
  if (has_is_inapp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_inapp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.MaterialMeta)
  return target;
}

int MaterialMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .toutiao_ssp.api.AdType ad_type = 1;
    if (has_ad_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ad_type());
    }

    // required string nurl = 2;
    if (has_nurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nurl());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional .toutiao_ssp.api.MaterialMeta.ImageMeta image_banner = 5;
    if (has_image_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_banner());
    }

    // optional .toutiao_ssp.api.MaterialMeta.ExternalMeta external = 6;
    if (has_external()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->external());
    }

    // optional .toutiao_ssp.api.MaterialMeta.AndroidApp android_app = 7;
    if (has_android_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->android_app());
    }

    // optional .toutiao_ssp.api.MaterialMeta.IosApp ios_app = 8;
    if (has_ios_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ios_app());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bool is_inapp = 11;
    if (has_is_inapp()) {
      total_size += 1 + 1;
    }

  }
  // repeated string show_url = 9;
  total_size += 1 * this->show_url_size();
  for (int i = 0; i < this->show_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->show_url(i));
  }

  // repeated string click_url = 10;
  total_size += 1 * this->click_url_size();
  for (int i = 0; i < this->click_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_url(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialMeta::MergeFrom(const MaterialMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  show_url_.MergeFrom(from.show_url_);
  click_url_.MergeFrom(from.click_url_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ad_type()) {
      set_ad_type(from.ad_type());
    }
    if (from.has_nurl()) {
      set_nurl(from.nurl());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_image_banner()) {
      mutable_image_banner()->::toutiao_ssp::api::MaterialMeta_ImageMeta::MergeFrom(from.image_banner());
    }
    if (from.has_external()) {
      mutable_external()->::toutiao_ssp::api::MaterialMeta_ExternalMeta::MergeFrom(from.external());
    }
    if (from.has_android_app()) {
      mutable_android_app()->::toutiao_ssp::api::MaterialMeta_AndroidApp::MergeFrom(from.android_app());
    }
    if (from.has_ios_app()) {
      mutable_ios_app()->::toutiao_ssp::api::MaterialMeta_IosApp::MergeFrom(from.ios_app());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_is_inapp()) {
      set_is_inapp(from.is_inapp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialMeta::CopyFrom(const MaterialMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_image_banner()) {
    if (!this->image_banner().IsInitialized()) return false;
  }
  if (has_external()) {
    if (!this->external().IsInitialized()) return false;
  }
  if (has_android_app()) {
    if (!this->android_app().IsInitialized()) return false;
  }
  if (has_ios_app()) {
    if (!this->ios_app().IsInitialized()) return false;
  }
  return true;
}

void MaterialMeta::Swap(MaterialMeta* other) {
  if (other != this) {
    std::swap(ad_type_, other->ad_type_);
    std::swap(nurl_, other->nurl_);
    std::swap(title_, other->title_);
    std::swap(source_, other->source_);
    std::swap(image_banner_, other->image_banner_);
    std::swap(external_, other->external_);
    std::swap(android_app_, other->android_app_);
    std::swap(ios_app_, other->ios_app_);
    show_url_.Swap(&other->show_url_);
    click_url_.Swap(&other->click_url_);
    std::swap(is_inapp_, other->is_inapp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialMeta_descriptor_;
  metadata.reflection = MaterialMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bid::kIdFieldNumber;
const int Bid::kAdslotIdFieldNumber;
const int Bid::kPriceFieldNumber;
const int Bid::kAdidFieldNumber;
const int Bid::kCreativeFieldNumber;
#endif  // !_MSC_VER

Bid::Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.Bid)
}

void Bid::InitAsDefaultInstance() {
  creative_ = const_cast< ::toutiao_ssp::api::MaterialMeta*>(&::toutiao_ssp::api::MaterialMeta::default_instance());
}

Bid::Bid(const Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.Bid)
}

void Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adslot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0u;
  adid_ = GOOGLE_ULONGLONG(0);
  creative_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bid::~Bid() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.Bid)
  SharedDtor();
}

void Bid::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (adslot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adslot_id_;
  }
  if (this != default_instance_) {
    delete creative_;
  }
}

void Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bid_descriptor_;
}

const Bid& Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

Bid* Bid::default_instance_ = NULL;

Bid* Bid::New() const {
  return new Bid;
}

void Bid::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_adslot_id()) {
      if (adslot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adslot_id_->clear();
      }
    }
    price_ = 0u;
    adid_ = GOOGLE_ULONGLONG(0);
    if (has_creative()) {
      if (creative_ != NULL) creative_->::toutiao_ssp::api::MaterialMeta::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_adslot_id;
        break;
      }

      // required string adslot_id = 2;
      case 2: {
        if (tag == 18) {
         parse_adslot_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adslot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adslot_id().data(), this->adslot_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adslot_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // required uint32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adid;
        break;
      }

      // required uint64 adid = 4;
      case 4: {
        if (tag == 32) {
         parse_adid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adid_)));
          set_has_adid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_creative;
        break;
      }

      // required .toutiao_ssp.api.MaterialMeta creative = 5;
      case 5: {
        if (tag == 42) {
         parse_creative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.Bid)
  return false;
#undef DO_
}

void Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string adslot_id = 2;
  if (has_adslot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adslot_id().data(), this->adslot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adslot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->adslot_id(), output);
  }

  // required uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // required uint64 adid = 4;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->adid(), output);
  }

  // required .toutiao_ssp.api.MaterialMeta creative = 5;
  if (has_creative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->creative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.Bid)
}

::google::protobuf::uint8* Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string adslot_id = 2;
  if (has_adslot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adslot_id().data(), this->adslot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adslot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->adslot_id(), target);
  }

  // required uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // required uint64 adid = 4;
  if (has_adid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->adid(), target);
  }

  // required .toutiao_ssp.api.MaterialMeta creative = 5;
  if (has_creative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->creative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.Bid)
  return target;
}

int Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string adslot_id = 2;
    if (has_adslot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adslot_id());
    }

    // required uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required uint64 adid = 4;
    if (has_adid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adid());
    }

    // required .toutiao_ssp.api.MaterialMeta creative = 5;
    if (has_creative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creative());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bid::MergeFrom(const Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_adslot_id()) {
      set_adslot_id(from.adslot_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_adid()) {
      set_adid(from.adid());
    }
    if (from.has_creative()) {
      mutable_creative()->::toutiao_ssp::api::MaterialMeta::MergeFrom(from.creative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bid::CopyFrom(const Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_creative()) {
    if (!this->creative().IsInitialized()) return false;
  }
  return true;
}

void Bid::Swap(Bid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(adslot_id_, other->adslot_id_);
    std::swap(price_, other->price_);
    std::swap(adid_, other->adid_);
    std::swap(creative_, other->creative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bid_descriptor_;
  metadata.reflection = Bid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeatBid::kAdsFieldNumber;
const int SeatBid::kSeatFieldNumber;
#endif  // !_MSC_VER

SeatBid::SeatBid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.SeatBid)
}

void SeatBid::InitAsDefaultInstance() {
}

SeatBid::SeatBid(const SeatBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.SeatBid)
}

void SeatBid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatBid::~SeatBid() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.SeatBid)
  SharedDtor();
}

void SeatBid::SharedDtor() {
  if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seat_;
  }
  if (this != default_instance_) {
  }
}

void SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatBid_descriptor_;
}

const SeatBid& SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

SeatBid* SeatBid::default_instance_ = NULL;

SeatBid* SeatBid::New() const {
  return new SeatBid;
}

void SeatBid::Clear() {
  if (has_seat()) {
    if (seat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      seat_->clear();
    }
  }
  ads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.SeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .toutiao_ssp.api.Bid ads = 1;
      case 1: {
        if (tag == 10) {
         parse_ads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ads;
        if (input->ExpectTag(18)) goto parse_seat;
        break;
      }

      // optional string seat = 2;
      case 2: {
        if (tag == 18) {
         parse_seat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seat().data(), this->seat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "seat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.SeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.SeatBid)
  return false;
#undef DO_
}

void SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.SeatBid)
  // repeated .toutiao_ssp.api.Bid ads = 1;
  for (int i = 0; i < this->ads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ads(i), output);
  }

  // optional string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.SeatBid)
}

::google::protobuf::uint8* SeatBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.SeatBid)
  // repeated .toutiao_ssp.api.Bid ads = 1;
  for (int i = 0; i < this->ads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ads(i), target);
  }

  // optional string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.SeatBid)
  return target;
}

int SeatBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seat());
    }

  }
  // repeated .toutiao_ssp.api.Bid ads = 1;
  total_size += 1 * this->ads_size();
  for (int i = 0; i < this->ads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeatBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeatBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeatBid::MergeFrom(const SeatBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  ads_.MergeFrom(from.ads_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatBid::CopyFrom(const SeatBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatBid::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ads())) return false;
  return true;
}

void SeatBid::Swap(SeatBid* other) {
  if (other != this) {
    ads_.Swap(&other->ads_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatBid_descriptor_;
  metadata.reflection = SeatBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse::kRequestIdFieldNumber;
const int BidResponse::kSeatbidsFieldNumber;
const int BidResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toutiao_ssp.api.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:toutiao_ssp.api.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:toutiao_ssp.api.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toutiao_5fssp_5fapi_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_id_->clear();
      }
    }
    error_code_ = GOOGLE_ULONGLONG(0);
  }
  seatbids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toutiao_ssp.api.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "request_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbids;
        break;
      }

      // repeated .toutiao_ssp.api.SeatBid seatbids = 2;
      case 2: {
        if (tag == 18) {
         parse_seatbids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seatbids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbids;
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional uint64 error_code = 3;
      case 3: {
        if (tag == 24) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toutiao_ssp.api.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toutiao_ssp.api.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toutiao_ssp.api.BidResponse)
  // required string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // repeated .toutiao_ssp.api.SeatBid seatbids = 2;
  for (int i = 0; i < this->seatbids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seatbids(i), output);
  }

  // optional uint64 error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toutiao_ssp.api.BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:toutiao_ssp.api.BidResponse)
  // required string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // repeated .toutiao_ssp.api.SeatBid seatbids = 2;
  for (int i = 0; i < this->seatbids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seatbids(i), target);
  }

  // optional uint64 error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toutiao_ssp.api.BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional uint64 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->error_code());
    }

  }
  // repeated .toutiao_ssp.api.SeatBid seatbids = 2;
  total_size += 1 * this->seatbids_size();
  for (int i = 0; i < this->seatbids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatbids_.MergeFrom(from.seatbids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbids())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    seatbids_.Swap(&other->seatbids_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace toutiao_ssp

// @@protoc_insertion_point(global_scope)

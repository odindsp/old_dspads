// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tanx-bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tanx-bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Tanx {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdzInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Location_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_ViewScreen_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_UserAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_UserAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_PrivateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_PrivateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_ContentCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_ContentCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_Content_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ads_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ads_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResult_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResult_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Creative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Creative_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Creative_Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Creative_Attr_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tanx_2dbidding_2eproto() {
  protobuf_AddDesc_tanx_2dbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tanx-bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, timezone_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tid_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adx_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, anonymous_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, category_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adzinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_sensitive_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_ad_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, hosted_match_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, private_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, content_categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, aid_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  BidRequest_AdzInfo_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_AdzInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, publisher_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, ad_bid_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, view_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, excluded_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, min_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, adz_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, view_screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, page_session_ad_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, creative_organize_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, expandable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, api_),
  };
  BidRequest_AdzInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdzInfo_descriptor_,
      BidRequest_AdzInfo::default_instance_,
      BidRequest_AdzInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdzInfo));
  BidRequest_AdzInfo_Location_descriptor_ = BidRequest_AdzInfo_descriptor_->enum_type(0);
  BidRequest_AdzInfo_ViewScreen_descriptor_ = BidRequest_AdzInfo_descriptor_->enum_type(1);
  BidRequest_UserAttribute_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_UserAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, timestamp_),
  };
  BidRequest_UserAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_UserAttribute_descriptor_,
      BidRequest_UserAttribute::default_instance_,
      BidRequest_UserAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_UserAttribute));
  BidRequest_PrivateInfo_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_PrivateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, tanx_cnaui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, risk_control_),
  };
  BidRequest_PrivateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_PrivateInfo_descriptor_,
      BidRequest_PrivateInfo::default_instance_,
      BidRequest_PrivateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_PrivateInfo));
  BidRequest_Mobile_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Mobile_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, ad_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, ad_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_fullscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, package_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, device_),
  };
  BidRequest_Mobile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_descriptor_,
      BidRequest_Mobile::default_instance_,
      BidRequest_Mobile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile));
  BidRequest_Mobile_Device_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_Device_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, device_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, device_pixel_ratio_),
  };
  BidRequest_Mobile_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_Device_descriptor_,
      BidRequest_Mobile_Device::default_instance_,
      BidRequest_Mobile_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_Device));
  BidRequest_ContentCategory_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_ContentCategory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, confidence_level_),
  };
  BidRequest_ContentCategory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_ContentCategory_descriptor_,
      BidRequest_ContentCategory::default_instance_,
      BidRequest_ContentCategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_ContentCategory));
  BidRequest_Video_descriptor_ = BidRequest_descriptor_->nested_type(5);
  static const int BidRequest_Video_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, video_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, videoad_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, videoad_section_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, min_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, max_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, protocol_),
  };
  BidRequest_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Video_descriptor_,
      BidRequest_Video::default_instance_,
      BidRequest_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Video));
  BidRequest_Video_Content_descriptor_ = BidRequest_Video_descriptor_->nested_type(0);
  static const int BidRequest_Video_Content_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, keywords_),
  };
  BidRequest_Video_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Video_Content_descriptor_,
      BidRequest_Video_Content::default_instance_,
      BidRequest_Video_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Video_Content));
  BidRequest_Video_VideoFormat_descriptor_ = BidRequest_Video_descriptor_->enum_type(0);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, ads_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  BidResponse_Ads_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Ads_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, adzinfo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, max_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, ad_bid_count_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, html_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, network_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, extend_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, destination_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, resource_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, feedback_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, video_snippet_),
  };
  BidResponse_Ads_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ads_descriptor_,
      BidResponse_Ads::default_instance_,
      BidResponse_Ads_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ads));
  BidResult_descriptor_ = file->message_type(2);
  static const int BidResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, res_),
  };
  BidResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResult_descriptor_,
      BidResult::default_instance_,
      BidResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResult));
  BidResult_Res_descriptor_ = BidResult_descriptor_->nested_type(0);
  static const int BidResult_Res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, adzinfo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, ad_bid_count_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, result_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, extend_data_),
  };
  BidResult_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResult_Res_descriptor_,
      BidResult_Res::default_instance_,
      BidResult_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResult_Res));
  MobileCreative_descriptor_ = file->message_type(3);
  static const int MobileCreative_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, view_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, creatives_),
  };
  MobileCreative_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileCreative_descriptor_,
      MobileCreative::default_instance_,
      MobileCreative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileCreative));
  MobileCreative_Creative_descriptor_ = MobileCreative_descriptor_->nested_type(0);
  static const int MobileCreative_Creative_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, img_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, img_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, click_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, destination_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, category_),
  };
  MobileCreative_Creative_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileCreative_Creative_descriptor_,
      MobileCreative_Creative::default_instance_,
      MobileCreative_Creative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileCreative_Creative));
  MobileCreative_Creative_Attr_descriptor_ = MobileCreative_Creative_descriptor_->nested_type(0);
  static const int MobileCreative_Creative_Attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, value_),
  };
  MobileCreative_Creative_Attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileCreative_Creative_Attr_descriptor_,
      MobileCreative_Creative_Attr::default_instance_,
      MobileCreative_Creative_Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileCreative_Creative_Attr));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tanx_2dbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdzInfo_descriptor_, &BidRequest_AdzInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_UserAttribute_descriptor_, &BidRequest_UserAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_PrivateInfo_descriptor_, &BidRequest_PrivateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_descriptor_, &BidRequest_Mobile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_Device_descriptor_, &BidRequest_Mobile_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_ContentCategory_descriptor_, &BidRequest_ContentCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Video_descriptor_, &BidRequest_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Video_Content_descriptor_, &BidRequest_Video_Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ads_descriptor_, &BidResponse_Ads::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResult_descriptor_, &BidResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResult_Res_descriptor_, &BidResult_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileCreative_descriptor_, &MobileCreative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileCreative_Creative_descriptor_, &MobileCreative_Creative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileCreative_Creative_Attr_descriptor_, &MobileCreative_Creative_Attr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tanx_2dbidding_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_AdzInfo::default_instance_;
  delete BidRequest_AdzInfo_reflection_;
  delete BidRequest_UserAttribute::default_instance_;
  delete BidRequest_UserAttribute_reflection_;
  delete BidRequest_PrivateInfo::default_instance_;
  delete BidRequest_PrivateInfo_reflection_;
  delete BidRequest_Mobile::default_instance_;
  delete BidRequest_Mobile_reflection_;
  delete BidRequest_Mobile_Device::default_instance_;
  delete BidRequest_Mobile_Device_reflection_;
  delete BidRequest_ContentCategory::default_instance_;
  delete BidRequest_ContentCategory_reflection_;
  delete BidRequest_Video::default_instance_;
  delete BidRequest_Video_reflection_;
  delete BidRequest_Video_Content::default_instance_;
  delete BidRequest_Video_Content_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Ads::default_instance_;
  delete BidResponse_Ads_reflection_;
  delete BidResult::default_instance_;
  delete BidResult_reflection_;
  delete BidResult_Res::default_instance_;
  delete BidResult_Res_reflection_;
  delete MobileCreative::default_instance_;
  delete MobileCreative_reflection_;
  delete MobileCreative_Creative::default_instance_;
  delete MobileCreative_Creative_reflection_;
  delete MobileCreative_Creative_Attr::default_instance_;
  delete MobileCreative_Creative_Attr_reflection_;
}

void protobuf_AddDesc_tanx_2dbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022tanx-bidding.proto\022\004Tanx\"\354\021\n\nBidReques"
    "t\022\017\n\007version\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t\022\022\n\007is_te"
    "st\030\013 \001(\r:\0010\022\022\n\007is_ping\030\014 \001(\r:\0010\022\013\n\003tid\030\003"
    " \001(\t\022\n\n\002ip\030\004 \001(\t\022\022\n\nuser_agent\030\005 \001(\t\022\027\n\017"
    "timezone_offset\030\r \001(\005\022\025\n\ruser_vertical\030\016"
    " \003(\005\022\023\n\013tid_version\030\023 \001(\r\022\"\n\032excluded_cl"
    "ick_through_url\030\006 \003(\t\022\013\n\003url\030\007 \001(\t\022\020\n\010ca"
    "tegory\030\010 \001(\r\022\023\n\010adx_type\030\t \001(\r:\0010\022\024\n\014ano"
    "nymous_id\030\017 \001(\t\022\031\n\021detected_language\030\020 \001"
    "(\t\022\030\n\020category_version\030\022 \001(\005\022)\n\007adzinfo\030"
    "\n \003(\0132\030.Tanx.BidRequest.AdzInfo\022#\n\033exclu"
    "ded_sensitive_category\030\021 \003(\005\022\034\n\024excluded"
    "_ad_category\030\024 \003(\005\022\031\n\021hosted_match_data\030"
    "\025 \001(\t\0226\n\016user_attribute\030\026 \003(\0132\036.Tanx.Bid"
    "Request.UserAttribute\022\027\n\017page_session_id"
    "\030\027 \001(\t\0222\n\014private_info\030\030 \003(\0132\034.Tanx.BidR"
    "equest.PrivateInfo\022\'\n\006mobile\030\031 \001(\0132\027.Tan"
    "x.BidRequest.Mobile\022<\n\022content_categorie"
    "s\030\032 \003(\0132 .Tanx.BidRequest.ContentCategor"
    "y\022%\n\005video\030\033 \001(\0132\026.Tanx.BidRequest.Video"
    "\022\013\n\003aid\030\034 \001(\t\032\304\004\n\007AdzInfo\022\n\n\002id\030\001 \002(\r\022\013\n"
    "\003pid\030\002 \002(\t\022\024\n\014publisher_id\030\013 \001(\t\022\014\n\004size"
    "\030\003 \001(\t\022\027\n\014ad_bid_count\030\004 \001(\r:\0012\022\021\n\tview_"
    "type\030\005 \003(\r\022\027\n\017excluded_filter\030\006 \003(\r\022\025\n\rm"
    "in_cpm_price\030\007 \001(\r\022;\n\014adz_location\030\010 \001(\016"
    "2!.Tanx.BidRequest.AdzInfo.Location:\002NA\022"
    "C\n\013view_screen\030\t \001(\0162#.Tanx.BidRequest.A"
    "dzInfo.ViewScreen:\tSCREEN_NA\022\033\n\023page_ses"
    "sion_ad_idx\030\n \001(\r\022 \n\030creative_organize_f"
    "ormat\030\014 \001(\r\022\022\n\nexpandable\030\r \001(\r\022\013\n\003api\030\016"
    " \003(\r\"2\n\010Location\022\006\n\002NA\020\000\022\016\n\nFIRST_VIEW\020\001"
    "\022\016\n\nOTHER_VIEW\020\002\"\211\001\n\nViewScreen\022\r\n\tSCREE"
    "N_NA\020\000\022\020\n\014SCREEN_FIRST\020\001\022\021\n\rSCREEN_SECON"
    "D\020\002\022\020\n\014SCREEN_THIRD\020\003\022\021\n\rSCREEN_FOURTH\020\004"
    "\022\020\n\014SCREEN_FIFTH\020\005\022\020\n\014SCREEN_OTHER\020\006\032.\n\r"
    "UserAttribute\022\n\n\002id\030\001 \002(\r\022\021\n\ttimestamp\030\002"
    " \001(\r\0327\n\013PrivateInfo\022\022\n\ntanx_cnaui\030\001 \001(\t\022"
    "\024\n\014risk_control\030\002 \001(\t\032\206\003\n\006Mobile\022\016\n\006is_a"
    "pp\030\001 \001(\010\022\016\n\006ad_num\030\002 \001(\r\022\022\n\nad_keyword\030\003"
    " \003(\t\022\025\n\ris_fullscreen\030\004 \001(\010\022\024\n\014package_n"
    "ame\030\005 \001(\t\022.\n\006device\030\006 \001(\0132\036.Tanx.BidRequ"
    "est.Mobile.Device\032\352\001\n\006Device\022\020\n\010platform"
    "\030\001 \001(\t\022\r\n\005brand\030\002 \001(\t\022\r\n\005model\030\003 \001(\t\022\n\n\002"
    "os\030\004 \001(\t\022\022\n\nos_version\030\005 \001(\t\022\017\n\007network\030"
    "\006 \001(\r\022\020\n\010operator\030\007 \001(\005\022\021\n\tlongitude\030\010 \001"
    "(\t\022\020\n\010latitude\030\t \001(\t\022\023\n\013device_size\030\n \001("
    "\t\022\021\n\tdevice_id\030\013 \001(\t\022 \n\022device_pixel_rat"
    "io\030\014 \001(\005:\0041000\0327\n\017ContentCategory\022\n\n\002id\030"
    "\001 \002(\005\022\030\n\020confidence_level\030\002 \002(\005\032\347\002\n\005Vide"
    "o\0228\n\014video_format\030\001 \003(\0162\".Tanx.BidReques"
    "t.Video.VideoFormat\022/\n\007content\030\002 \001(\0132\036.T"
    "anx.BidRequest.Video.Content\022\033\n\023videoad_"
    "start_delay\030\003 \001(\005\022#\n\033videoad_section_sta"
    "rt_delay\030\004 \001(\005\022\027\n\017min_ad_duration\030\005 \001(\005\022"
    "\027\n\017max_ad_duration\030\006 \001(\005\022\020\n\010protocol\030\007 \001"
    "(\t\032<\n\007Content\022\r\n\005title\030\001 \001(\t\022\020\n\010duration"
    "\030\002 \001(\005\022\020\n\010keywords\030\003 \003(\t\"/\n\013VideoFormat\022"
    "\017\n\013VIDEO_FLASH\020\000\022\017\n\013VIDEO_HTML5\020\001\"\232\003\n\013Bi"
    "dResponse\022\017\n\007version\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t\022"
    "\"\n\003ads\030\003 \003(\0132\025.Tanx.BidResponse.Ads\032\310\002\n\003"
    "Ads\022\022\n\nadzinfo_id\030\001 \002(\r\022\025\n\rmax_cpm_price"
    "\030\002 \002(\r\022\030\n\020ad_bid_count_idx\030\003 \001(\r\022\024\n\014html"
    "_snippet\030\004 \001(\t\022\031\n\021click_through_url\030\005 \003("
    "\t\022\020\n\010category\030\006 \003(\005\022\025\n\rcreative_type\030\007 \003"
    "(\005\022\024\n\014network_guid\030\010 \001(\t\022\023\n\013extend_data\030"
    "\t \001(\t\022\027\n\017destination_url\030\n \003(\t\022\023\n\013creati"
    "ve_id\030\013 \001(\t\022\030\n\020resource_address\030\014 \001(\t\022\030\n"
    "\020feedback_address\030\r \001(\t\022\025\n\rvideo_snippet"
    "\030\016 \001(\t\"\303\001\n\tBidResult\022\017\n\007version\030\001 \002(\005\022\013\n"
    "\003bid\030\002 \002(\t\022 \n\003res\030\003 \003(\0132\023.Tanx.BidResult"
    ".Res\032v\n\003Res\022\022\n\nadzinfo_id\030\001 \002(\r\022\030\n\020ad_bi"
    "d_count_idx\030\002 \001(\r\022\026\n\013result_code\030\003 \001(\005:\001"
    "0\022\024\n\014result_price\030\004 \001(\r\022\023\n\013extend_data\030\005"
    " \001(\t\"\334\002\n\016MobileCreative\022\017\n\007version\030\001 \002(\005"
    "\022\013\n\003bid\030\002 \002(\t\022\021\n\tview_type\030\003 \001(\r\0220\n\tcrea"
    "tives\030\004 \003(\0132\035.Tanx.MobileCreative.Creati"
    "ve\032\346\001\n\010Creative\022\017\n\007img_url\030\001 \001(\t\022\020\n\010img_"
    "size\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\021\n\tclick_url\030\004"
    " \001(\t\022\027\n\017destination_url\030\005 \001(\t\0220\n\004attr\030\006 "
    "\003(\0132\".Tanx.MobileCreative.Creative.Attr\022"
    "\023\n\013creative_id\030\007 \001(\t\022\020\n\010category\030\010 \003(\005\032#"
    "\n\004Attr\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t", 3275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tanx-bidding.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_AdzInfo::default_instance_ = new BidRequest_AdzInfo();
  BidRequest_UserAttribute::default_instance_ = new BidRequest_UserAttribute();
  BidRequest_PrivateInfo::default_instance_ = new BidRequest_PrivateInfo();
  BidRequest_Mobile::default_instance_ = new BidRequest_Mobile();
  BidRequest_Mobile_Device::default_instance_ = new BidRequest_Mobile_Device();
  BidRequest_ContentCategory::default_instance_ = new BidRequest_ContentCategory();
  BidRequest_Video::default_instance_ = new BidRequest_Video();
  BidRequest_Video_Content::default_instance_ = new BidRequest_Video_Content();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Ads::default_instance_ = new BidResponse_Ads();
  BidResult::default_instance_ = new BidResult();
  BidResult_Res::default_instance_ = new BidResult_Res();
  MobileCreative::default_instance_ = new MobileCreative();
  MobileCreative_Creative::default_instance_ = new MobileCreative_Creative();
  MobileCreative_Creative_Attr::default_instance_ = new MobileCreative_Creative_Attr();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_AdzInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_UserAttribute::default_instance_->InitAsDefaultInstance();
  BidRequest_PrivateInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_ContentCategory::default_instance_->InitAsDefaultInstance();
  BidRequest_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_Video_Content::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Ads::default_instance_->InitAsDefaultInstance();
  BidResult::default_instance_->InitAsDefaultInstance();
  BidResult_Res::default_instance_->InitAsDefaultInstance();
  MobileCreative::default_instance_->InitAsDefaultInstance();
  MobileCreative_Creative::default_instance_->InitAsDefaultInstance();
  MobileCreative_Creative_Attr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tanx_2dbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tanx_2dbidding_2eproto {
  StaticDescriptorInitializer_tanx_2dbidding_2eproto() {
    protobuf_AddDesc_tanx_2dbidding_2eproto();
  }
} static_descriptor_initializer_tanx_2dbidding_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Location_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_Location_descriptor_;
}
bool BidRequest_AdzInfo_Location_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::NA;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::FIRST_VIEW;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::OTHER_VIEW;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::Location_MIN;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::Location_MAX;
const int BidRequest_AdzInfo::Location_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_ViewScreen_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_ViewScreen_descriptor_;
}
bool BidRequest_AdzInfo_ViewScreen_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_NA;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_FIRST;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_SECOND;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_THIRD;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_FOURTH;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_FIFTH;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_OTHER;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::ViewScreen_MIN;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::ViewScreen_MAX;
const int BidRequest_AdzInfo::ViewScreen_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_AdzInfo::kIdFieldNumber;
const int BidRequest_AdzInfo::kPidFieldNumber;
const int BidRequest_AdzInfo::kPublisherIdFieldNumber;
const int BidRequest_AdzInfo::kSizeFieldNumber;
const int BidRequest_AdzInfo::kAdBidCountFieldNumber;
const int BidRequest_AdzInfo::kViewTypeFieldNumber;
const int BidRequest_AdzInfo::kExcludedFilterFieldNumber;
const int BidRequest_AdzInfo::kMinCpmPriceFieldNumber;
const int BidRequest_AdzInfo::kAdzLocationFieldNumber;
const int BidRequest_AdzInfo::kViewScreenFieldNumber;
const int BidRequest_AdzInfo::kPageSessionAdIdxFieldNumber;
const int BidRequest_AdzInfo::kCreativeOrganizeFormatFieldNumber;
const int BidRequest_AdzInfo::kExpandableFieldNumber;
const int BidRequest_AdzInfo::kApiFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdzInfo::BidRequest_AdzInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_AdzInfo::InitAsDefaultInstance() {
}

BidRequest_AdzInfo::BidRequest_AdzInfo(const BidRequest_AdzInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_AdzInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publisher_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ad_bid_count_ = 2u;
  min_cpm_price_ = 0u;
  adz_location_ = 0;
  view_screen_ = 0;
  page_session_ad_idx_ = 0u;
  creative_organize_format_ = 0u;
  expandable_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdzInfo::~BidRequest_AdzInfo() {
  SharedDtor();
}

void BidRequest_AdzInfo::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (publisher_id_ != &::google::protobuf::internal::kEmptyString) {
    delete publisher_id_;
  }
  if (size_ != &::google::protobuf::internal::kEmptyString) {
    delete size_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_AdzInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdzInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_descriptor_;
}

const BidRequest_AdzInfo& BidRequest_AdzInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdzInfo* BidRequest_AdzInfo::default_instance_ = NULL;

BidRequest_AdzInfo* BidRequest_AdzInfo::New() const {
  return new BidRequest_AdzInfo;
}

void BidRequest_AdzInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
    if (has_publisher_id()) {
      if (publisher_id_ != &::google::protobuf::internal::kEmptyString) {
        publisher_id_->clear();
      }
    }
    if (has_size()) {
      if (size_ != &::google::protobuf::internal::kEmptyString) {
        size_->clear();
      }
    }
    ad_bid_count_ = 2u;
    min_cpm_price_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    adz_location_ = 0;
    view_screen_ = 0;
    page_session_ad_idx_ = 0u;
    creative_organize_format_ = 0u;
    expandable_ = 0u;
  }
  view_type_.Clear();
  excluded_filter_.Clear();
  api_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdzInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pid;
        break;
      }

      // required string pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_size;
        break;
      }

      // optional string size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->size().data(), this->size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ad_bid_count;
        break;
      }

      // optional uint32 ad_bid_count = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad_bid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bid_count_)));
          set_has_ad_bid_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_view_type;
        break;
      }

      // repeated uint32 view_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_view_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_view_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_view_type;
        if (input->ExpectTag(48)) goto parse_excluded_filter;
        break;
      }

      // repeated uint32 excluded_filter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excluded_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_excluded_filter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_excluded_filter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_excluded_filter;
        if (input->ExpectTag(56)) goto parse_min_cpm_price;
        break;
      }

      // optional uint32 min_cpm_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cpm_price_)));
          set_has_min_cpm_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_adz_location;
        break;
      }

      // optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adz_location:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Tanx::BidRequest_AdzInfo_Location_IsValid(value)) {
            set_adz_location(static_cast< ::Tanx::BidRequest_AdzInfo_Location >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_view_screen;
        break;
      }

      // optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_screen:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Tanx::BidRequest_AdzInfo_ViewScreen_IsValid(value)) {
            set_view_screen(static_cast< ::Tanx::BidRequest_AdzInfo_ViewScreen >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_page_session_ad_idx;
        break;
      }

      // optional uint32 page_session_ad_idx = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_session_ad_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_session_ad_idx_)));
          set_has_page_session_ad_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_publisher_id;
        break;
      }

      // optional string publisher_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher_id().data(), this->publisher_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_creative_organize_format;
        break;
      }

      // optional uint32 creative_organize_format = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creative_organize_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creative_organize_format_)));
          set_has_creative_organize_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_expandable;
        break;
      }

      // optional uint32 expandable = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expandable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expandable_)));
          set_has_expandable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_api;
        break;
      }

      // repeated uint32 api = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_api:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_api())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_api())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_api;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_AdzInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pid(), output);
  }

  // optional string size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->size(), output);
  }

  // optional uint32 ad_bid_count = 4 [default = 2];
  if (has_ad_bid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ad_bid_count(), output);
  }

  // repeated uint32 view_type = 5;
  for (int i = 0; i < this->view_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->view_type(i), output);
  }

  // repeated uint32 excluded_filter = 6;
  for (int i = 0; i < this->excluded_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->excluded_filter(i), output);
  }

  // optional uint32 min_cpm_price = 7;
  if (has_min_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->min_cpm_price(), output);
  }

  // optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
  if (has_adz_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->adz_location(), output);
  }

  // optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
  if (has_view_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->view_screen(), output);
  }

  // optional uint32 page_session_ad_idx = 10;
  if (has_page_session_ad_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->page_session_ad_idx(), output);
  }

  // optional string publisher_id = 11;
  if (has_publisher_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher_id().data(), this->publisher_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->publisher_id(), output);
  }

  // optional uint32 creative_organize_format = 12;
  if (has_creative_organize_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->creative_organize_format(), output);
  }

  // optional uint32 expandable = 13;
  if (has_expandable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->expandable(), output);
  }

  // repeated uint32 api = 14;
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->api(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_AdzInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pid(), target);
  }

  // optional string size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->size(), target);
  }

  // optional uint32 ad_bid_count = 4 [default = 2];
  if (has_ad_bid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ad_bid_count(), target);
  }

  // repeated uint32 view_type = 5;
  for (int i = 0; i < this->view_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->view_type(i), target);
  }

  // repeated uint32 excluded_filter = 6;
  for (int i = 0; i < this->excluded_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->excluded_filter(i), target);
  }

  // optional uint32 min_cpm_price = 7;
  if (has_min_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->min_cpm_price(), target);
  }

  // optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
  if (has_adz_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->adz_location(), target);
  }

  // optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
  if (has_view_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->view_screen(), target);
  }

  // optional uint32 page_session_ad_idx = 10;
  if (has_page_session_ad_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->page_session_ad_idx(), target);
  }

  // optional string publisher_id = 11;
  if (has_publisher_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher_id().data(), this->publisher_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->publisher_id(), target);
  }

  // optional uint32 creative_organize_format = 12;
  if (has_creative_organize_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->creative_organize_format(), target);
  }

  // optional uint32 expandable = 13;
  if (has_expandable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->expandable(), target);
  }

  // repeated uint32 api = 14;
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->api(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_AdzInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional string publisher_id = 11;
    if (has_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher_id());
    }

    // optional string size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->size());
    }

    // optional uint32 ad_bid_count = 4 [default = 2];
    if (has_ad_bid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bid_count());
    }

    // optional uint32 min_cpm_price = 7;
    if (has_min_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_cpm_price());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
    if (has_adz_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adz_location());
    }

    // optional .Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
    if (has_view_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->view_screen());
    }

    // optional uint32 page_session_ad_idx = 10;
    if (has_page_session_ad_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_session_ad_idx());
    }

    // optional uint32 creative_organize_format = 12;
    if (has_creative_organize_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creative_organize_format());
    }

    // optional uint32 expandable = 13;
    if (has_expandable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expandable());
    }

  }
  // repeated uint32 view_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->view_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->view_type(i));
    }
    total_size += 1 * this->view_type_size() + data_size;
  }

  // repeated uint32 excluded_filter = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_filter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->excluded_filter(i));
    }
    total_size += 1 * this->excluded_filter_size() + data_size;
  }

  // repeated uint32 api = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->api(i));
    }
    total_size += 1 * this->api_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdzInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdzInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdzInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdzInfo::MergeFrom(const BidRequest_AdzInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  view_type_.MergeFrom(from.view_type_);
  excluded_filter_.MergeFrom(from.excluded_filter_);
  api_.MergeFrom(from.api_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_publisher_id()) {
      set_publisher_id(from.publisher_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ad_bid_count()) {
      set_ad_bid_count(from.ad_bid_count());
    }
    if (from.has_min_cpm_price()) {
      set_min_cpm_price(from.min_cpm_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adz_location()) {
      set_adz_location(from.adz_location());
    }
    if (from.has_view_screen()) {
      set_view_screen(from.view_screen());
    }
    if (from.has_page_session_ad_idx()) {
      set_page_session_ad_idx(from.page_session_ad_idx());
    }
    if (from.has_creative_organize_format()) {
      set_creative_organize_format(from.creative_organize_format());
    }
    if (from.has_expandable()) {
      set_expandable(from.expandable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdzInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdzInfo::CopyFrom(const BidRequest_AdzInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdzInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_AdzInfo::Swap(BidRequest_AdzInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pid_, other->pid_);
    std::swap(publisher_id_, other->publisher_id_);
    std::swap(size_, other->size_);
    std::swap(ad_bid_count_, other->ad_bid_count_);
    view_type_.Swap(&other->view_type_);
    excluded_filter_.Swap(&other->excluded_filter_);
    std::swap(min_cpm_price_, other->min_cpm_price_);
    std::swap(adz_location_, other->adz_location_);
    std::swap(view_screen_, other->view_screen_);
    std::swap(page_session_ad_idx_, other->page_session_ad_idx_);
    std::swap(creative_organize_format_, other->creative_organize_format_);
    std::swap(expandable_, other->expandable_);
    api_.Swap(&other->api_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdzInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdzInfo_descriptor_;
  metadata.reflection = BidRequest_AdzInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_UserAttribute::kIdFieldNumber;
const int BidRequest_UserAttribute::kTimestampFieldNumber;
#endif  // !_MSC_VER

BidRequest_UserAttribute::BidRequest_UserAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_UserAttribute::InitAsDefaultInstance() {
}

BidRequest_UserAttribute::BidRequest_UserAttribute(const BidRequest_UserAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_UserAttribute::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_UserAttribute::~BidRequest_UserAttribute() {
  SharedDtor();
}

void BidRequest_UserAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_UserAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_UserAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_UserAttribute_descriptor_;
}

const BidRequest_UserAttribute& BidRequest_UserAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_UserAttribute* BidRequest_UserAttribute::default_instance_ = NULL;

BidRequest_UserAttribute* BidRequest_UserAttribute::New() const {
  return new BidRequest_UserAttribute;
}

void BidRequest_UserAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_UserAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_UserAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_UserAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_UserAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_UserAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_UserAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_UserAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_UserAttribute::MergeFrom(const BidRequest_UserAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_UserAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_UserAttribute::CopyFrom(const BidRequest_UserAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_UserAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_UserAttribute::Swap(BidRequest_UserAttribute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_UserAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_UserAttribute_descriptor_;
  metadata.reflection = BidRequest_UserAttribute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_PrivateInfo::kTanxCnauiFieldNumber;
const int BidRequest_PrivateInfo::kRiskControlFieldNumber;
#endif  // !_MSC_VER

BidRequest_PrivateInfo::BidRequest_PrivateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_PrivateInfo::InitAsDefaultInstance() {
}

BidRequest_PrivateInfo::BidRequest_PrivateInfo(const BidRequest_PrivateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_PrivateInfo::SharedCtor() {
  _cached_size_ = 0;
  tanx_cnaui_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  risk_control_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_PrivateInfo::~BidRequest_PrivateInfo() {
  SharedDtor();
}

void BidRequest_PrivateInfo::SharedDtor() {
  if (tanx_cnaui_ != &::google::protobuf::internal::kEmptyString) {
    delete tanx_cnaui_;
  }
  if (risk_control_ != &::google::protobuf::internal::kEmptyString) {
    delete risk_control_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_PrivateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_PrivateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_PrivateInfo_descriptor_;
}

const BidRequest_PrivateInfo& BidRequest_PrivateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_PrivateInfo* BidRequest_PrivateInfo::default_instance_ = NULL;

BidRequest_PrivateInfo* BidRequest_PrivateInfo::New() const {
  return new BidRequest_PrivateInfo;
}

void BidRequest_PrivateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tanx_cnaui()) {
      if (tanx_cnaui_ != &::google::protobuf::internal::kEmptyString) {
        tanx_cnaui_->clear();
      }
    }
    if (has_risk_control()) {
      if (risk_control_ != &::google::protobuf::internal::kEmptyString) {
        risk_control_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_PrivateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tanx_cnaui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tanx_cnaui()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tanx_cnaui().data(), this->tanx_cnaui().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_risk_control;
        break;
      }

      // optional string risk_control = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_risk_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_risk_control()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->risk_control().data(), this->risk_control().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_PrivateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tanx_cnaui = 1;
  if (has_tanx_cnaui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tanx_cnaui().data(), this->tanx_cnaui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tanx_cnaui(), output);
  }

  // optional string risk_control = 2;
  if (has_risk_control()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->risk_control().data(), this->risk_control().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->risk_control(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_PrivateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tanx_cnaui = 1;
  if (has_tanx_cnaui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tanx_cnaui().data(), this->tanx_cnaui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tanx_cnaui(), target);
  }

  // optional string risk_control = 2;
  if (has_risk_control()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->risk_control().data(), this->risk_control().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->risk_control(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_PrivateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tanx_cnaui = 1;
    if (has_tanx_cnaui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tanx_cnaui());
    }

    // optional string risk_control = 2;
    if (has_risk_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->risk_control());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_PrivateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_PrivateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_PrivateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_PrivateInfo::MergeFrom(const BidRequest_PrivateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tanx_cnaui()) {
      set_tanx_cnaui(from.tanx_cnaui());
    }
    if (from.has_risk_control()) {
      set_risk_control(from.risk_control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_PrivateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_PrivateInfo::CopyFrom(const BidRequest_PrivateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_PrivateInfo::IsInitialized() const {

  return true;
}

void BidRequest_PrivateInfo::Swap(BidRequest_PrivateInfo* other) {
  if (other != this) {
    std::swap(tanx_cnaui_, other->tanx_cnaui_);
    std::swap(risk_control_, other->risk_control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_PrivateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_PrivateInfo_descriptor_;
  metadata.reflection = BidRequest_PrivateInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile_Device::kPlatformFieldNumber;
const int BidRequest_Mobile_Device::kBrandFieldNumber;
const int BidRequest_Mobile_Device::kModelFieldNumber;
const int BidRequest_Mobile_Device::kOsFieldNumber;
const int BidRequest_Mobile_Device::kOsVersionFieldNumber;
const int BidRequest_Mobile_Device::kNetworkFieldNumber;
const int BidRequest_Mobile_Device::kOperatorFieldNumber;
const int BidRequest_Mobile_Device::kLongitudeFieldNumber;
const int BidRequest_Mobile_Device::kLatitudeFieldNumber;
const int BidRequest_Mobile_Device::kDeviceSizeFieldNumber;
const int BidRequest_Mobile_Device::kDeviceIdFieldNumber;
const int BidRequest_Mobile_Device::kDevicePixelRatioFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_Device::BidRequest_Mobile_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Mobile_Device::InitAsDefaultInstance() {
}

BidRequest_Mobile_Device::BidRequest_Mobile_Device(const BidRequest_Mobile_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Mobile_Device::SharedCtor() {
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = 0u;
  operator__ = 0;
  longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_pixel_ratio_ = 1000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_Device::~BidRequest_Mobile_Device() {
  SharedDtor();
}

void BidRequest_Mobile_Device::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    delete longitude_;
  }
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    delete latitude_;
  }
  if (device_size_ != &::google::protobuf::internal::kEmptyString) {
    delete device_size_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_Device_descriptor_;
}

const BidRequest_Mobile_Device& BidRequest_Mobile_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_Device* BidRequest_Mobile_Device::default_instance_ = NULL;

BidRequest_Mobile_Device* BidRequest_Mobile_Device::New() const {
  return new BidRequest_Mobile_Device;
}

void BidRequest_Mobile_Device::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::kEmptyString) {
        brand_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
    network_ = 0u;
    operator__ = 0;
    if (has_longitude()) {
      if (longitude_ != &::google::protobuf::internal::kEmptyString) {
        longitude_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_latitude()) {
      if (latitude_ != &::google::protobuf::internal::kEmptyString) {
        latitude_->clear();
      }
    }
    if (has_device_size()) {
      if (device_size_ != &::google::protobuf::internal::kEmptyString) {
        device_size_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    device_pixel_ratio_ = 1000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brand;
        break;
      }

      // optional string brand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_os;
        break;
      }

      // optional string os = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_os_version;
        break;
      }

      // optional string os_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_network;
        break;
      }

      // optional uint32 network = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_)));
          set_has_network();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_operator;
        break;
      }

      // optional int32 operator = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator__)));
          set_has_operator_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_longitude;
        break;
      }

      // optional string longitude = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_longitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->longitude().data(), this->longitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_latitude;
        break;
      }

      // optional string latitude = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latitude().data(), this->latitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_device_size;
        break;
      }

      // optional string device_size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_size().data(), this->device_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_device_id;
        break;
      }

      // optional string device_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_device_pixel_ratio;
        break;
      }

      // optional int32 device_pixel_ratio = 12 [default = 1000];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_pixel_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_pixel_ratio_)));
          set_has_device_pixel_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Mobile_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->platform(), output);
  }

  // optional string brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->brand(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->model(), output);
  }

  // optional string os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->os(), output);
  }

  // optional string os_version = 5;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->os_version(), output);
  }

  // optional uint32 network = 6;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->network(), output);
  }

  // optional int32 operator = 7;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->operator_(), output);
  }

  // optional string longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->longitude(), output);
  }

  // optional string latitude = 9;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->latitude(), output);
  }

  // optional string device_size = 10;
  if (has_device_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_size().data(), this->device_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->device_size(), output);
  }

  // optional string device_id = 11;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->device_id(), output);
  }

  // optional int32 device_pixel_ratio = 12 [default = 1000];
  if (has_device_pixel_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->device_pixel_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Mobile_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platform(), target);
  }

  // optional string brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brand(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os(), target);
  }

  // optional string os_version = 5;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->os_version(), target);
  }

  // optional uint32 network = 6;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->network(), target);
  }

  // optional int32 operator = 7;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->operator_(), target);
  }

  // optional string longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->longitude(), target);
  }

  // optional string latitude = 9;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->latitude(), target);
  }

  // optional string device_size = 10;
  if (has_device_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_size().data(), this->device_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device_size(), target);
  }

  // optional string device_id = 11;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->device_id(), target);
  }

  // optional int32 device_pixel_ratio = 12 [default = 1000];
  if (has_device_pixel_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->device_pixel_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Mobile_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string brand = 2;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string os = 4;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string os_version = 5;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional uint32 network = 6;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network());
    }

    // optional int32 operator = 7;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operator_());
    }

    // optional string longitude = 8;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longitude());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string latitude = 9;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latitude());
    }

    // optional string device_size = 10;
    if (has_device_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_size());
    }

    // optional string device_id = 11;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 device_pixel_ratio = 12 [default = 1000];
    if (has_device_pixel_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_pixel_ratio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_Device::MergeFrom(const BidRequest_Mobile_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_device_size()) {
      set_device_size(from.device_size());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_device_pixel_ratio()) {
      set_device_pixel_ratio(from.device_pixel_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_Device::CopyFrom(const BidRequest_Mobile_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_Device::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_Device::Swap(BidRequest_Mobile_Device* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(brand_, other->brand_);
    std::swap(model_, other->model_);
    std::swap(os_, other->os_);
    std::swap(os_version_, other->os_version_);
    std::swap(network_, other->network_);
    std::swap(operator__, other->operator__);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(device_size_, other->device_size_);
    std::swap(device_id_, other->device_id_);
    std::swap(device_pixel_ratio_, other->device_pixel_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_Device_descriptor_;
  metadata.reflection = BidRequest_Mobile_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile::kIsAppFieldNumber;
const int BidRequest_Mobile::kAdNumFieldNumber;
const int BidRequest_Mobile::kAdKeywordFieldNumber;
const int BidRequest_Mobile::kIsFullscreenFieldNumber;
const int BidRequest_Mobile::kPackageNameFieldNumber;
const int BidRequest_Mobile::kDeviceFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile::BidRequest_Mobile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Mobile::InitAsDefaultInstance() {
  device_ = const_cast< ::Tanx::BidRequest_Mobile_Device*>(&::Tanx::BidRequest_Mobile_Device::default_instance());
}

BidRequest_Mobile::BidRequest_Mobile(const BidRequest_Mobile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Mobile::SharedCtor() {
  _cached_size_ = 0;
  is_app_ = false;
  ad_num_ = 0u;
  is_fullscreen_ = false;
  package_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile::~BidRequest_Mobile() {
  SharedDtor();
}

void BidRequest_Mobile::SharedDtor() {
  if (package_name_ != &::google::protobuf::internal::kEmptyString) {
    delete package_name_;
  }
  if (this != default_instance_) {
    delete device_;
  }
}

void BidRequest_Mobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_descriptor_;
}

const BidRequest_Mobile& BidRequest_Mobile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile* BidRequest_Mobile::default_instance_ = NULL;

BidRequest_Mobile* BidRequest_Mobile::New() const {
  return new BidRequest_Mobile;
}

void BidRequest_Mobile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_app_ = false;
    ad_num_ = 0u;
    is_fullscreen_ = false;
    if (has_package_name()) {
      if (package_name_ != &::google::protobuf::internal::kEmptyString) {
        package_name_->clear();
      }
    }
    if (has_device()) {
      if (device_ != NULL) device_->::Tanx::BidRequest_Mobile_Device::Clear();
    }
  }
  ad_keyword_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_app = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_app_)));
          set_has_is_app();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ad_num;
        break;
      }

      // optional uint32 ad_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_num_)));
          set_has_ad_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ad_keyword;
        break;
      }

      // repeated string ad_keyword = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ad_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ad_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ad_keyword(this->ad_keyword_size() - 1).data(),
            this->ad_keyword(this->ad_keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ad_keyword;
        if (input->ExpectTag(32)) goto parse_is_fullscreen;
        break;
      }

      // optional bool is_fullscreen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fullscreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fullscreen_)));
          set_has_is_fullscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_package_name;
        break;
      }

      // optional string package_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->package_name().data(), this->package_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // optional .Tanx.BidRequest.Mobile.Device device = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Mobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_app = 1;
  if (has_is_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_app(), output);
  }

  // optional uint32 ad_num = 2;
  if (has_ad_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ad_num(), output);
  }

  // repeated string ad_keyword = 3;
  for (int i = 0; i < this->ad_keyword_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ad_keyword(i).data(), this->ad_keyword(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ad_keyword(i), output);
  }

  // optional bool is_fullscreen = 4;
  if (has_is_fullscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_fullscreen(), output);
  }

  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->package_name(), output);
  }

  // optional .Tanx.BidRequest.Mobile.Device device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Mobile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_app = 1;
  if (has_is_app()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_app(), target);
  }

  // optional uint32 ad_num = 2;
  if (has_ad_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ad_num(), target);
  }

  // repeated string ad_keyword = 3;
  for (int i = 0; i < this->ad_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad_keyword(i).data(), this->ad_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->ad_keyword(i), target);
  }

  // optional bool is_fullscreen = 4;
  if (has_is_fullscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_fullscreen(), target);
  }

  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->package_name(), target);
  }

  // optional .Tanx.BidRequest.Mobile.Device device = 6;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Mobile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_app = 1;
    if (has_is_app()) {
      total_size += 1 + 1;
    }

    // optional uint32 ad_num = 2;
    if (has_ad_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_num());
    }

    // optional bool is_fullscreen = 4;
    if (has_is_fullscreen()) {
      total_size += 1 + 1;
    }

    // optional string package_name = 5;
    if (has_package_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional .Tanx.BidRequest.Mobile.Device device = 6;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

  }
  // repeated string ad_keyword = 3;
  total_size += 1 * this->ad_keyword_size();
  for (int i = 0; i < this->ad_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ad_keyword(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile::MergeFrom(const BidRequest_Mobile& from) {
  GOOGLE_CHECK_NE(&from, this);
  ad_keyword_.MergeFrom(from.ad_keyword_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_app()) {
      set_is_app(from.is_app());
    }
    if (from.has_ad_num()) {
      set_ad_num(from.ad_num());
    }
    if (from.has_is_fullscreen()) {
      set_is_fullscreen(from.is_fullscreen());
    }
    if (from.has_package_name()) {
      set_package_name(from.package_name());
    }
    if (from.has_device()) {
      mutable_device()->::Tanx::BidRequest_Mobile_Device::MergeFrom(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile::CopyFrom(const BidRequest_Mobile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile::IsInitialized() const {

  return true;
}

void BidRequest_Mobile::Swap(BidRequest_Mobile* other) {
  if (other != this) {
    std::swap(is_app_, other->is_app_);
    std::swap(ad_num_, other->ad_num_);
    ad_keyword_.Swap(&other->ad_keyword_);
    std::swap(is_fullscreen_, other->is_fullscreen_);
    std::swap(package_name_, other->package_name_);
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_descriptor_;
  metadata.reflection = BidRequest_Mobile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_ContentCategory::kIdFieldNumber;
const int BidRequest_ContentCategory::kConfidenceLevelFieldNumber;
#endif  // !_MSC_VER

BidRequest_ContentCategory::BidRequest_ContentCategory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_ContentCategory::InitAsDefaultInstance() {
}

BidRequest_ContentCategory::BidRequest_ContentCategory(const BidRequest_ContentCategory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_ContentCategory::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  confidence_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_ContentCategory::~BidRequest_ContentCategory() {
  SharedDtor();
}

void BidRequest_ContentCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_ContentCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_ContentCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_ContentCategory_descriptor_;
}

const BidRequest_ContentCategory& BidRequest_ContentCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_ContentCategory* BidRequest_ContentCategory::default_instance_ = NULL;

BidRequest_ContentCategory* BidRequest_ContentCategory::New() const {
  return new BidRequest_ContentCategory;
}

void BidRequest_ContentCategory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    confidence_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_ContentCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_confidence_level;
        break;
      }

      // required int32 confidence_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_confidence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_level_)));
          set_has_confidence_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_ContentCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confidence_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_ContentCategory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confidence_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_ContentCategory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 confidence_level = 2;
    if (has_confidence_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confidence_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_ContentCategory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_ContentCategory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_ContentCategory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_ContentCategory::MergeFrom(const BidRequest_ContentCategory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confidence_level()) {
      set_confidence_level(from.confidence_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_ContentCategory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_ContentCategory::CopyFrom(const BidRequest_ContentCategory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_ContentCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_ContentCategory::Swap(BidRequest_ContentCategory* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(confidence_level_, other->confidence_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_ContentCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_ContentCategory_descriptor_;
  metadata.reflection = BidRequest_ContentCategory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_VideoFormat_descriptor_;
}
bool BidRequest_Video_VideoFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_FLASH;
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_HTML5;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MIN;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MAX;
const int BidRequest_Video::VideoFormat_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Video_Content::kTitleFieldNumber;
const int BidRequest_Video_Content::kDurationFieldNumber;
const int BidRequest_Video_Content::kKeywordsFieldNumber;
#endif  // !_MSC_VER

BidRequest_Video_Content::BidRequest_Video_Content()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Video_Content::InitAsDefaultInstance() {
}

BidRequest_Video_Content::BidRequest_Video_Content(const BidRequest_Video_Content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Video_Content::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video_Content::~BidRequest_Video_Content() {
  SharedDtor();
}

void BidRequest_Video_Content::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Video_Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_Content_descriptor_;
}

const BidRequest_Video_Content& BidRequest_Video_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video_Content* BidRequest_Video_Content::default_instance_ = NULL;

BidRequest_Video_Content* BidRequest_Video_Content::New() const {
  return new BidRequest_Video_Content;
}

void BidRequest_Video_Content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    duration_ = 0;
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Video_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Video_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keywords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Video_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->keywords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Video_Content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  // repeated string keywords = 3;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Video_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Video_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video_Content::MergeFrom(const BidRequest_Video_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Video_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video_Content::CopyFrom(const BidRequest_Video_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video_Content::IsInitialized() const {

  return true;
}

void BidRequest_Video_Content::Swap(BidRequest_Video_Content* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(duration_, other->duration_);
    keywords_.Swap(&other->keywords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Video_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_Content_descriptor_;
  metadata.reflection = BidRequest_Video_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Video::kVideoFormatFieldNumber;
const int BidRequest_Video::kContentFieldNumber;
const int BidRequest_Video::kVideoadStartDelayFieldNumber;
const int BidRequest_Video::kVideoadSectionStartDelayFieldNumber;
const int BidRequest_Video::kMinAdDurationFieldNumber;
const int BidRequest_Video::kMaxAdDurationFieldNumber;
const int BidRequest_Video::kProtocolFieldNumber;
#endif  // !_MSC_VER

BidRequest_Video::BidRequest_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Video::InitAsDefaultInstance() {
  content_ = const_cast< ::Tanx::BidRequest_Video_Content*>(&::Tanx::BidRequest_Video_Content::default_instance());
}

BidRequest_Video::BidRequest_Video(const BidRequest_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Video::SharedCtor() {
  _cached_size_ = 0;
  content_ = NULL;
  videoad_start_delay_ = 0;
  videoad_section_start_delay_ = 0;
  min_ad_duration_ = 0;
  max_ad_duration_ = 0;
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video::~BidRequest_Video() {
  SharedDtor();
}

void BidRequest_Video::SharedDtor() {
  if (protocol_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void BidRequest_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_descriptor_;
}

const BidRequest_Video& BidRequest_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video* BidRequest_Video::default_instance_ = NULL;

BidRequest_Video* BidRequest_Video::New() const {
  return new BidRequest_Video;
}

void BidRequest_Video::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_content()) {
      if (content_ != NULL) content_->::Tanx::BidRequest_Video_Content::Clear();
    }
    videoad_start_delay_ = 0;
    videoad_section_start_delay_ = 0;
    min_ad_duration_ = 0;
    max_ad_duration_ = 0;
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::kEmptyString) {
        protocol_->clear();
      }
    }
  }
  video_format_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Tanx::BidRequest_Video_VideoFormat_IsValid(value)) {
            add_video_format(static_cast< ::Tanx::BidRequest_Video_VideoFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Tanx::BidRequest_Video_VideoFormat_IsValid,
                 this->mutable_video_format())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_video_format;
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .Tanx.BidRequest.Video.Content content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_videoad_start_delay;
        break;
      }

      // optional int32 videoad_start_delay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoad_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_start_delay_)));
          set_has_videoad_start_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_videoad_section_start_delay;
        break;
      }

      // optional int32 videoad_section_start_delay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoad_section_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_section_start_delay_)));
          set_has_videoad_section_start_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_min_ad_duration;
        break;
      }

      // optional int32 min_ad_duration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_ad_duration_)));
          set_has_min_ad_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_ad_duration;
        break;
      }

      // optional int32 max_ad_duration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ad_duration_)));
          set_has_max_ad_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_protocol;
        break;
      }

      // optional string protocol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
  for (int i = 0; i < this->video_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->video_format(i), output);
  }

  // optional .Tanx.BidRequest.Video.Content content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  // optional int32 videoad_start_delay = 3;
  if (has_videoad_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->videoad_start_delay(), output);
  }

  // optional int32 videoad_section_start_delay = 4;
  if (has_videoad_section_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->videoad_section_start_delay(), output);
  }

  // optional int32 min_ad_duration = 5;
  if (has_min_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_ad_duration(), output);
  }

  // optional int32 max_ad_duration = 6;
  if (has_max_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_ad_duration(), output);
  }

  // optional string protocol = 7;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->protocol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
  for (int i = 0; i < this->video_format_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->video_format(i), target);
  }

  // optional .Tanx.BidRequest.Video.Content content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  // optional int32 videoad_start_delay = 3;
  if (has_videoad_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->videoad_start_delay(), target);
  }

  // optional int32 videoad_section_start_delay = 4;
  if (has_videoad_section_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->videoad_section_start_delay(), target);
  }

  // optional int32 min_ad_duration = 5;
  if (has_min_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_ad_duration(), target);
  }

  // optional int32 max_ad_duration = 6;
  if (has_max_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_ad_duration(), target);
  }

  // optional string protocol = 7;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->protocol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Tanx.BidRequest.Video.Content content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional int32 videoad_start_delay = 3;
    if (has_videoad_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_start_delay());
    }

    // optional int32 videoad_section_start_delay = 4;
    if (has_videoad_section_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_section_start_delay());
    }

    // optional int32 min_ad_duration = 5;
    if (has_min_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_ad_duration());
    }

    // optional int32 max_ad_duration = 6;
    if (has_max_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ad_duration());
    }

    // optional string protocol = 7;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

  }
  // repeated .Tanx.BidRequest.Video.VideoFormat video_format = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->video_format_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->video_format(i));
    }
    total_size += 1 * this->video_format_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video::MergeFrom(const BidRequest_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  video_format_.MergeFrom(from.video_format_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_content()) {
      mutable_content()->::Tanx::BidRequest_Video_Content::MergeFrom(from.content());
    }
    if (from.has_videoad_start_delay()) {
      set_videoad_start_delay(from.videoad_start_delay());
    }
    if (from.has_videoad_section_start_delay()) {
      set_videoad_section_start_delay(from.videoad_section_start_delay());
    }
    if (from.has_min_ad_duration()) {
      set_min_ad_duration(from.min_ad_duration());
    }
    if (from.has_max_ad_duration()) {
      set_max_ad_duration(from.max_ad_duration());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video::CopyFrom(const BidRequest_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video::IsInitialized() const {

  return true;
}

void BidRequest_Video::Swap(BidRequest_Video* other) {
  if (other != this) {
    video_format_.Swap(&other->video_format_);
    std::swap(content_, other->content_);
    std::swap(videoad_start_delay_, other->videoad_start_delay_);
    std::swap(videoad_section_start_delay_, other->videoad_section_start_delay_);
    std::swap(min_ad_duration_, other->min_ad_duration_);
    std::swap(max_ad_duration_, other->max_ad_duration_);
    std::swap(protocol_, other->protocol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_descriptor_;
  metadata.reflection = BidRequest_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest::kVersionFieldNumber;
const int BidRequest::kBidFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kIsPingFieldNumber;
const int BidRequest::kTidFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kUserAgentFieldNumber;
const int BidRequest::kTimezoneOffsetFieldNumber;
const int BidRequest::kUserVerticalFieldNumber;
const int BidRequest::kTidVersionFieldNumber;
const int BidRequest::kExcludedClickThroughUrlFieldNumber;
const int BidRequest::kUrlFieldNumber;
const int BidRequest::kCategoryFieldNumber;
const int BidRequest::kAdxTypeFieldNumber;
const int BidRequest::kAnonymousIdFieldNumber;
const int BidRequest::kDetectedLanguageFieldNumber;
const int BidRequest::kCategoryVersionFieldNumber;
const int BidRequest::kAdzinfoFieldNumber;
const int BidRequest::kExcludedSensitiveCategoryFieldNumber;
const int BidRequest::kExcludedAdCategoryFieldNumber;
const int BidRequest::kHostedMatchDataFieldNumber;
const int BidRequest::kUserAttributeFieldNumber;
const int BidRequest::kPageSessionIdFieldNumber;
const int BidRequest::kPrivateInfoFieldNumber;
const int BidRequest::kMobileFieldNumber;
const int BidRequest::kContentCategoriesFieldNumber;
const int BidRequest::kVideoFieldNumber;
const int BidRequest::kAidFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest::InitAsDefaultInstance() {
  mobile_ = const_cast< ::Tanx::BidRequest_Mobile*>(&::Tanx::BidRequest_Mobile::default_instance());
  video_ = const_cast< ::Tanx::BidRequest_Video*>(&::Tanx::BidRequest_Video::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_test_ = 0u;
  is_ping_ = 0u;
  tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timezone_offset_ = 0;
  tid_version_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = 0u;
  adx_type_ = 0u;
  anonymous_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detected_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_version_ = 0;
  hosted_match_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_ = NULL;
  video_ = NULL;
  aid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (anonymous_id_ != &::google::protobuf::internal::kEmptyString) {
    delete anonymous_id_;
  }
  if (detected_language_ != &::google::protobuf::internal::kEmptyString) {
    delete detected_language_;
  }
  if (hosted_match_data_ != &::google::protobuf::internal::kEmptyString) {
    delete hosted_match_data_;
  }
  if (page_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete page_session_id_;
  }
  if (aid_ != &::google::protobuf::internal::kEmptyString) {
    delete aid_;
  }
  if (this != default_instance_) {
    delete mobile_;
    delete video_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::kEmptyString) {
        bid_->clear();
      }
    }
    is_test_ = 0u;
    is_ping_ = 0u;
    if (has_tid()) {
      if (tid_ != &::google::protobuf::internal::kEmptyString) {
        tid_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
        user_agent_->clear();
      }
    }
    timezone_offset_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    tid_version_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    category_ = 0u;
    adx_type_ = 0u;
    if (has_anonymous_id()) {
      if (anonymous_id_ != &::google::protobuf::internal::kEmptyString) {
        anonymous_id_->clear();
      }
    }
    if (has_detected_language()) {
      if (detected_language_ != &::google::protobuf::internal::kEmptyString) {
        detected_language_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    category_version_ = 0;
    if (has_hosted_match_data()) {
      if (hosted_match_data_ != &::google::protobuf::internal::kEmptyString) {
        hosted_match_data_->clear();
      }
    }
    if (has_page_session_id()) {
      if (page_session_id_ != &::google::protobuf::internal::kEmptyString) {
        page_session_id_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::Tanx::BidRequest_Mobile::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::Tanx::BidRequest_Video::Clear();
    }
    if (has_aid()) {
      if (aid_ != &::google::protobuf::internal::kEmptyString) {
        aid_->clear();
      }
    }
  }
  user_vertical_.Clear();
  excluded_click_through_url_.Clear();
  adzinfo_.Clear();
  excluded_sensitive_category_.Clear();
  excluded_ad_category_.Clear();
  user_attribute_.Clear();
  private_info_.Clear();
  content_categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tid;
        break;
      }

      // optional string tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tid().data(), this->tid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_excluded_click_through_url;
        break;
      }

      // repeated string excluded_click_through_url = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_excluded_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excluded_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->excluded_click_through_url(this->excluded_click_through_url_size() - 1).data(),
            this->excluded_click_through_url(this->excluded_click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_excluded_click_through_url;
        if (input->ExpectTag(58)) goto parse_url;
        break;
      }

      // optional string url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_category;
        break;
      }

      // optional uint32 category = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_adx_type;
        break;
      }

      // optional uint32 adx_type = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adx_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adx_type_)));
          set_has_adx_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_adzinfo;
        break;
      }

      // repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adzinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adzinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_adzinfo;
        if (input->ExpectTag(88)) goto parse_is_test;
        break;
      }

      // optional uint32 is_test = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_ping;
        break;
      }

      // optional uint32 is_ping = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_timezone_offset;
        break;
      }

      // optional int32 timezone_offset = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timezone_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_offset_)));
          set_has_timezone_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_user_vertical;
        break;
      }

      // repeated int32 user_vertical = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_user_vertical())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_vertical())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_user_vertical;
        if (input->ExpectTag(122)) goto parse_anonymous_id;
        break;
      }

      // optional string anonymous_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anonymous_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anonymous_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anonymous_id().data(), this->anonymous_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_detected_language;
        break;
      }

      // optional string detected_language = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detected_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detected_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detected_language().data(), this->detected_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_excluded_sensitive_category;
        break;
      }

      // repeated int32 excluded_sensitive_category = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excluded_sensitive_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_excluded_sensitive_category())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_sensitive_category())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_excluded_sensitive_category;
        if (input->ExpectTag(144)) goto parse_category_version;
        break;
      }

      // optional int32 category_version = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_version_)));
          set_has_category_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tid_version;
        break;
      }

      // optional uint32 tid_version = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_version_)));
          set_has_tid_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_excluded_ad_category;
        break;
      }

      // repeated int32 excluded_ad_category = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excluded_ad_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_excluded_ad_category())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_ad_category())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_excluded_ad_category;
        if (input->ExpectTag(170)) goto parse_hosted_match_data;
        break;
      }

      // optional string hosted_match_data = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hosted_match_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hosted_match_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hosted_match_data().data(), this->hosted_match_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_user_attribute;
        break;
      }

      // repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_user_attribute;
        if (input->ExpectTag(186)) goto parse_page_session_id;
        break;
      }

      // optional string page_session_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_session_id().data(), this->page_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_private_info;
        break;
      }

      // repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_private_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_private_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_private_info;
        if (input->ExpectTag(202)) goto parse_mobile;
        break;
      }

      // optional .Tanx.BidRequest.Mobile mobile = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_content_categories;
        break;
      }

      // repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content_categories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_content_categories;
        if (input->ExpectTag(218)) goto parse_video;
        break;
      }

      // optional .Tanx.BidRequest.Video video = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_aid;
        break;
      }

      // optional string aid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aid().data(), this->aid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bid(), output);
  }

  // optional string tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tid(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_agent(), output);
  }

  // repeated string excluded_click_through_url = 6;
  for (int i = 0; i < this->excluded_click_through_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->excluded_click_through_url(i).data(), this->excluded_click_through_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->excluded_click_through_url(i), output);
  }

  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->url(), output);
  }

  // optional uint32 category = 8;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->category(), output);
  }

  // optional uint32 adx_type = 9 [default = 0];
  if (has_adx_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->adx_type(), output);
  }

  // repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
  for (int i = 0; i < this->adzinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->adzinfo(i), output);
  }

  // optional uint32 is_test = 11 [default = 0];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->is_test(), output);
  }

  // optional uint32 is_ping = 12 [default = 0];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->is_ping(), output);
  }

  // optional int32 timezone_offset = 13;
  if (has_timezone_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->timezone_offset(), output);
  }

  // repeated int32 user_vertical = 14;
  for (int i = 0; i < this->user_vertical_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->user_vertical(i), output);
  }

  // optional string anonymous_id = 15;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->anonymous_id(), output);
  }

  // optional string detected_language = 16;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->detected_language(), output);
  }

  // repeated int32 excluded_sensitive_category = 17;
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->excluded_sensitive_category(i), output);
  }

  // optional int32 category_version = 18;
  if (has_category_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->category_version(), output);
  }

  // optional uint32 tid_version = 19;
  if (has_tid_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tid_version(), output);
  }

  // repeated int32 excluded_ad_category = 20;
  for (int i = 0; i < this->excluded_ad_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->excluded_ad_category(i), output);
  }

  // optional string hosted_match_data = 21;
  if (has_hosted_match_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hosted_match_data().data(), this->hosted_match_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->hosted_match_data(), output);
  }

  // repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
  for (int i = 0; i < this->user_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->user_attribute(i), output);
  }

  // optional string page_session_id = 23;
  if (has_page_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_session_id().data(), this->page_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->page_session_id(), output);
  }

  // repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
  for (int i = 0; i < this->private_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->private_info(i), output);
  }

  // optional .Tanx.BidRequest.Mobile mobile = 25;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->mobile(), output);
  }

  // repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
  for (int i = 0; i < this->content_categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->content_categories(i), output);
  }

  // optional .Tanx.BidRequest.Video video = 27;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->video(), output);
  }

  // optional string aid = 28;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aid().data(), this->aid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->aid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // optional string tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tid(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_agent(), target);
  }

  // repeated string excluded_click_through_url = 6;
  for (int i = 0; i < this->excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->excluded_click_through_url(i).data(), this->excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->excluded_click_through_url(i), target);
  }

  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->url(), target);
  }

  // optional uint32 category = 8;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->category(), target);
  }

  // optional uint32 adx_type = 9 [default = 0];
  if (has_adx_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->adx_type(), target);
  }

  // repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
  for (int i = 0; i < this->adzinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->adzinfo(i), target);
  }

  // optional uint32 is_test = 11 [default = 0];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->is_test(), target);
  }

  // optional uint32 is_ping = 12 [default = 0];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->is_ping(), target);
  }

  // optional int32 timezone_offset = 13;
  if (has_timezone_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->timezone_offset(), target);
  }

  // repeated int32 user_vertical = 14;
  for (int i = 0; i < this->user_vertical_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->user_vertical(i), target);
  }

  // optional string anonymous_id = 15;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->anonymous_id(), target);
  }

  // optional string detected_language = 16;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->detected_language(), target);
  }

  // repeated int32 excluded_sensitive_category = 17;
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->excluded_sensitive_category(i), target);
  }

  // optional int32 category_version = 18;
  if (has_category_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->category_version(), target);
  }

  // optional uint32 tid_version = 19;
  if (has_tid_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tid_version(), target);
  }

  // repeated int32 excluded_ad_category = 20;
  for (int i = 0; i < this->excluded_ad_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->excluded_ad_category(i), target);
  }

  // optional string hosted_match_data = 21;
  if (has_hosted_match_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hosted_match_data().data(), this->hosted_match_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->hosted_match_data(), target);
  }

  // repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
  for (int i = 0; i < this->user_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->user_attribute(i), target);
  }

  // optional string page_session_id = 23;
  if (has_page_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_session_id().data(), this->page_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->page_session_id(), target);
  }

  // repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
  for (int i = 0; i < this->private_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->private_info(i), target);
  }

  // optional .Tanx.BidRequest.Mobile mobile = 25;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->mobile(), target);
  }

  // repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
  for (int i = 0; i < this->content_categories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->content_categories(i), target);
  }

  // optional .Tanx.BidRequest.Video video = 27;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->video(), target);
  }

  // optional string aid = 28;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aid().data(), this->aid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->aid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required string bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

    // optional uint32 is_test = 11 [default = 0];
    if (has_is_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_test());
    }

    // optional uint32 is_ping = 12 [default = 0];
    if (has_is_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_ping());
    }

    // optional string tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tid());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string user_agent = 5;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional int32 timezone_offset = 13;
    if (has_timezone_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone_offset());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 tid_version = 19;
    if (has_tid_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid_version());
    }

    // optional string url = 7;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 category = 8;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

    // optional uint32 adx_type = 9 [default = 0];
    if (has_adx_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adx_type());
    }

    // optional string anonymous_id = 15;
    if (has_anonymous_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anonymous_id());
    }

    // optional string detected_language = 16;
    if (has_detected_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detected_language());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 category_version = 18;
    if (has_category_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_version());
    }

    // optional string hosted_match_data = 21;
    if (has_hosted_match_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hosted_match_data());
    }

    // optional string page_session_id = 23;
    if (has_page_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_session_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Tanx.BidRequest.Mobile mobile = 25;
    if (has_mobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

    // optional .Tanx.BidRequest.Video video = 27;
    if (has_video()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional string aid = 28;
    if (has_aid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aid());
    }

  }
  // repeated int32 user_vertical = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_vertical_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user_vertical(i));
    }
    total_size += 1 * this->user_vertical_size() + data_size;
  }

  // repeated string excluded_click_through_url = 6;
  total_size += 1 * this->excluded_click_through_url_size();
  for (int i = 0; i < this->excluded_click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excluded_click_through_url(i));
  }

  // repeated .Tanx.BidRequest.AdzInfo adzinfo = 10;
  total_size += 1 * this->adzinfo_size();
  for (int i = 0; i < this->adzinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adzinfo(i));
  }

  // repeated int32 excluded_sensitive_category = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_sensitive_category(i));
    }
    total_size += 2 * this->excluded_sensitive_category_size() + data_size;
  }

  // repeated int32 excluded_ad_category = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_ad_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_ad_category(i));
    }
    total_size += 2 * this->excluded_ad_category_size() + data_size;
  }

  // repeated .Tanx.BidRequest.UserAttribute user_attribute = 22;
  total_size += 2 * this->user_attribute_size();
  for (int i = 0; i < this->user_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_attribute(i));
  }

  // repeated .Tanx.BidRequest.PrivateInfo private_info = 24;
  total_size += 2 * this->private_info_size();
  for (int i = 0; i < this->private_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->private_info(i));
  }

  // repeated .Tanx.BidRequest.ContentCategory content_categories = 26;
  total_size += 2 * this->content_categories_size();
  for (int i = 0; i < this->content_categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content_categories(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_vertical_.MergeFrom(from.user_vertical_);
  excluded_click_through_url_.MergeFrom(from.excluded_click_through_url_);
  adzinfo_.MergeFrom(from.adzinfo_);
  excluded_sensitive_category_.MergeFrom(from.excluded_sensitive_category_);
  excluded_ad_category_.MergeFrom(from.excluded_ad_category_);
  user_attribute_.MergeFrom(from.user_attribute_);
  private_info_.MergeFrom(from.private_info_);
  content_categories_.MergeFrom(from.content_categories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_timezone_offset()) {
      set_timezone_offset(from.timezone_offset());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_tid_version()) {
      set_tid_version(from.tid_version());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_adx_type()) {
      set_adx_type(from.adx_type());
    }
    if (from.has_anonymous_id()) {
      set_anonymous_id(from.anonymous_id());
    }
    if (from.has_detected_language()) {
      set_detected_language(from.detected_language());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_category_version()) {
      set_category_version(from.category_version());
    }
    if (from.has_hosted_match_data()) {
      set_hosted_match_data(from.hosted_match_data());
    }
    if (from.has_page_session_id()) {
      set_page_session_id(from.page_session_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_mobile()) {
      mutable_mobile()->::Tanx::BidRequest_Mobile::MergeFrom(from.mobile());
    }
    if (from.has_video()) {
      mutable_video()->::Tanx::BidRequest_Video::MergeFrom(from.video());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < adzinfo_size(); i++) {
    if (!this->adzinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < user_attribute_size(); i++) {
    if (!this->user_attribute(i).IsInitialized()) return false;
  }
  for (int i = 0; i < content_categories_size(); i++) {
    if (!this->content_categories(i).IsInitialized()) return false;
  }
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bid_, other->bid_);
    std::swap(is_test_, other->is_test_);
    std::swap(is_ping_, other->is_ping_);
    std::swap(tid_, other->tid_);
    std::swap(ip_, other->ip_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(timezone_offset_, other->timezone_offset_);
    user_vertical_.Swap(&other->user_vertical_);
    std::swap(tid_version_, other->tid_version_);
    excluded_click_through_url_.Swap(&other->excluded_click_through_url_);
    std::swap(url_, other->url_);
    std::swap(category_, other->category_);
    std::swap(adx_type_, other->adx_type_);
    std::swap(anonymous_id_, other->anonymous_id_);
    std::swap(detected_language_, other->detected_language_);
    std::swap(category_version_, other->category_version_);
    adzinfo_.Swap(&other->adzinfo_);
    excluded_sensitive_category_.Swap(&other->excluded_sensitive_category_);
    excluded_ad_category_.Swap(&other->excluded_ad_category_);
    std::swap(hosted_match_data_, other->hosted_match_data_);
    user_attribute_.Swap(&other->user_attribute_);
    std::swap(page_session_id_, other->page_session_id_);
    private_info_.Swap(&other->private_info_);
    std::swap(mobile_, other->mobile_);
    content_categories_.Swap(&other->content_categories_);
    std::swap(video_, other->video_);
    std::swap(aid_, other->aid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse_Ads::kAdzinfoIdFieldNumber;
const int BidResponse_Ads::kMaxCpmPriceFieldNumber;
const int BidResponse_Ads::kAdBidCountIdxFieldNumber;
const int BidResponse_Ads::kHtmlSnippetFieldNumber;
const int BidResponse_Ads::kClickThroughUrlFieldNumber;
const int BidResponse_Ads::kCategoryFieldNumber;
const int BidResponse_Ads::kCreativeTypeFieldNumber;
const int BidResponse_Ads::kNetworkGuidFieldNumber;
const int BidResponse_Ads::kExtendDataFieldNumber;
const int BidResponse_Ads::kDestinationUrlFieldNumber;
const int BidResponse_Ads::kCreativeIdFieldNumber;
const int BidResponse_Ads::kResourceAddressFieldNumber;
const int BidResponse_Ads::kFeedbackAddressFieldNumber;
const int BidResponse_Ads::kVideoSnippetFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ads::BidResponse_Ads()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResponse_Ads::InitAsDefaultInstance() {
}

BidResponse_Ads::BidResponse_Ads(const BidResponse_Ads& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResponse_Ads::SharedCtor() {
  _cached_size_ = 0;
  adzinfo_id_ = 0u;
  max_cpm_price_ = 0u;
  ad_bid_count_idx_ = 0u;
  html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feedback_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  video_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ads::~BidResponse_Ads() {
  SharedDtor();
}

void BidResponse_Ads::SharedDtor() {
  if (html_snippet_ != &::google::protobuf::internal::kEmptyString) {
    delete html_snippet_;
  }
  if (network_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete network_guid_;
  }
  if (extend_data_ != &::google::protobuf::internal::kEmptyString) {
    delete extend_data_;
  }
  if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_id_;
  }
  if (resource_address_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_address_;
  }
  if (feedback_address_ != &::google::protobuf::internal::kEmptyString) {
    delete feedback_address_;
  }
  if (video_snippet_ != &::google::protobuf::internal::kEmptyString) {
    delete video_snippet_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Ads::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ads::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ads_descriptor_;
}

const BidResponse_Ads& BidResponse_Ads::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ads* BidResponse_Ads::default_instance_ = NULL;

BidResponse_Ads* BidResponse_Ads::New() const {
  return new BidResponse_Ads;
}

void BidResponse_Ads::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    adzinfo_id_ = 0u;
    max_cpm_price_ = 0u;
    ad_bid_count_idx_ = 0u;
    if (has_html_snippet()) {
      if (html_snippet_ != &::google::protobuf::internal::kEmptyString) {
        html_snippet_->clear();
      }
    }
    if (has_network_guid()) {
      if (network_guid_ != &::google::protobuf::internal::kEmptyString) {
        network_guid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_extend_data()) {
      if (extend_data_ != &::google::protobuf::internal::kEmptyString) {
        extend_data_->clear();
      }
    }
    if (has_creative_id()) {
      if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
        creative_id_->clear();
      }
    }
    if (has_resource_address()) {
      if (resource_address_ != &::google::protobuf::internal::kEmptyString) {
        resource_address_->clear();
      }
    }
    if (has_feedback_address()) {
      if (feedback_address_ != &::google::protobuf::internal::kEmptyString) {
        feedback_address_->clear();
      }
    }
    if (has_video_snippet()) {
      if (video_snippet_ != &::google::protobuf::internal::kEmptyString) {
        video_snippet_->clear();
      }
    }
  }
  click_through_url_.Clear();
  category_.Clear();
  creative_type_.Clear();
  destination_url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ads::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adzinfo_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adzinfo_id_)));
          set_has_adzinfo_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_cpm_price;
        break;
      }

      // required uint32 max_cpm_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cpm_price_)));
          set_has_max_cpm_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ad_bid_count_idx;
        break;
      }

      // optional uint32 ad_bid_count_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad_bid_count_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bid_count_idx_)));
          set_has_ad_bid_count_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_html_snippet;
        break;
      }

      // optional string html_snippet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_html_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->html_snippet().data(), this->html_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_click_through_url;
        break;
      }

      // repeated string click_through_url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->click_through_url(this->click_through_url_size() - 1).data(),
            this->click_through_url(this->click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_click_through_url;
        if (input->ExpectTag(48)) goto parse_category;
        break;
      }

      // repeated int32 category = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_category())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_category;
        if (input->ExpectTag(56)) goto parse_creative_type;
        break;
      }

      // repeated int32 creative_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_creative_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_creative_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_creative_type;
        if (input->ExpectTag(66)) goto parse_network_guid;
        break;
      }

      // optional string network_guid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_guid().data(), this->network_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_extend_data;
        break;
      }

      // optional string extend_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extend_data().data(), this->extend_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_destination_url;
        break;
      }

      // repeated string destination_url = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_destination_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination_url(this->destination_url_size() - 1).data(),
            this->destination_url(this->destination_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_destination_url;
        if (input->ExpectTag(90)) goto parse_creative_id;
        break;
      }

      // optional string creative_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creative_id().data(), this->creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_resource_address;
        break;
      }

      // optional string resource_address = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource_address().data(), this->resource_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_feedback_address;
        break;
      }

      // optional string feedback_address = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feedback_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feedback_address().data(), this->feedback_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_video_snippet;
        break;
      }

      // optional string video_snippet = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->video_snippet().data(), this->video_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResponse_Ads::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adzinfo_id(), output);
  }

  // required uint32 max_cpm_price = 2;
  if (has_max_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_cpm_price(), output);
  }

  // optional uint32 ad_bid_count_idx = 3;
  if (has_ad_bid_count_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ad_bid_count_idx(), output);
  }

  // optional string html_snippet = 4;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->html_snippet(), output);
  }

  // repeated string click_through_url = 5;
  for (int i = 0; i < this->click_through_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->click_through_url(i).data(), this->click_through_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->click_through_url(i), output);
  }

  // repeated int32 category = 6;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->category(i), output);
  }

  // repeated int32 creative_type = 7;
  for (int i = 0; i < this->creative_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->creative_type(i), output);
  }

  // optional string network_guid = 8;
  if (has_network_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_guid().data(), this->network_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->network_guid(), output);
  }

  // optional string extend_data = 9;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->extend_data(), output);
  }

  // repeated string destination_url = 10;
  for (int i = 0; i < this->destination_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->destination_url(i).data(), this->destination_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->destination_url(i), output);
  }

  // optional string creative_id = 11;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->creative_id(), output);
  }

  // optional string resource_address = 12;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->resource_address(), output);
  }

  // optional string feedback_address = 13;
  if (has_feedback_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedback_address().data(), this->feedback_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->feedback_address(), output);
  }

  // optional string video_snippet = 14;
  if (has_video_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video_snippet().data(), this->video_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->video_snippet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResponse_Ads::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adzinfo_id(), target);
  }

  // required uint32 max_cpm_price = 2;
  if (has_max_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_cpm_price(), target);
  }

  // optional uint32 ad_bid_count_idx = 3;
  if (has_ad_bid_count_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ad_bid_count_idx(), target);
  }

  // optional string html_snippet = 4;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->html_snippet(), target);
  }

  // repeated string click_through_url = 5;
  for (int i = 0; i < this->click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->click_through_url(i).data(), this->click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->click_through_url(i), target);
  }

  // repeated int32 category = 6;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->category(i), target);
  }

  // repeated int32 creative_type = 7;
  for (int i = 0; i < this->creative_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->creative_type(i), target);
  }

  // optional string network_guid = 8;
  if (has_network_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_guid().data(), this->network_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->network_guid(), target);
  }

  // optional string extend_data = 9;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->extend_data(), target);
  }

  // repeated string destination_url = 10;
  for (int i = 0; i < this->destination_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination_url(i).data(), this->destination_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->destination_url(i), target);
  }

  // optional string creative_id = 11;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->creative_id(), target);
  }

  // optional string resource_address = 12;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->resource_address(), target);
  }

  // optional string feedback_address = 13;
  if (has_feedback_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedback_address().data(), this->feedback_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->feedback_address(), target);
  }

  // optional string video_snippet = 14;
  if (has_video_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video_snippet().data(), this->video_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->video_snippet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResponse_Ads::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 adzinfo_id = 1;
    if (has_adzinfo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adzinfo_id());
    }

    // required uint32 max_cpm_price = 2;
    if (has_max_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_cpm_price());
    }

    // optional uint32 ad_bid_count_idx = 3;
    if (has_ad_bid_count_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bid_count_idx());
    }

    // optional string html_snippet = 4;
    if (has_html_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->html_snippet());
    }

    // optional string network_guid = 8;
    if (has_network_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_guid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string extend_data = 9;
    if (has_extend_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extend_data());
    }

    // optional string creative_id = 11;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_id());
    }

    // optional string resource_address = 12;
    if (has_resource_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_address());
    }

    // optional string feedback_address = 13;
    if (has_feedback_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feedback_address());
    }

    // optional string video_snippet = 14;
    if (has_video_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_snippet());
    }

  }
  // repeated string click_through_url = 5;
  total_size += 1 * this->click_through_url_size();
  for (int i = 0; i < this->click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_through_url(i));
  }

  // repeated int32 category = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  // repeated int32 creative_type = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->creative_type(i));
    }
    total_size += 1 * this->creative_type_size() + data_size;
  }

  // repeated string destination_url = 10;
  total_size += 1 * this->destination_url_size();
  for (int i = 0; i < this->destination_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->destination_url(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ads::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ads* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ads*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ads::MergeFrom(const BidResponse_Ads& from) {
  GOOGLE_CHECK_NE(&from, this);
  click_through_url_.MergeFrom(from.click_through_url_);
  category_.MergeFrom(from.category_);
  creative_type_.MergeFrom(from.creative_type_);
  destination_url_.MergeFrom(from.destination_url_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adzinfo_id()) {
      set_adzinfo_id(from.adzinfo_id());
    }
    if (from.has_max_cpm_price()) {
      set_max_cpm_price(from.max_cpm_price());
    }
    if (from.has_ad_bid_count_idx()) {
      set_ad_bid_count_idx(from.ad_bid_count_idx());
    }
    if (from.has_html_snippet()) {
      set_html_snippet(from.html_snippet());
    }
    if (from.has_network_guid()) {
      set_network_guid(from.network_guid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extend_data()) {
      set_extend_data(from.extend_data());
    }
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
    if (from.has_resource_address()) {
      set_resource_address(from.resource_address());
    }
    if (from.has_feedback_address()) {
      set_feedback_address(from.feedback_address());
    }
    if (from.has_video_snippet()) {
      set_video_snippet(from.video_snippet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ads::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ads::CopyFrom(const BidResponse_Ads& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ads::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidResponse_Ads::Swap(BidResponse_Ads* other) {
  if (other != this) {
    std::swap(adzinfo_id_, other->adzinfo_id_);
    std::swap(max_cpm_price_, other->max_cpm_price_);
    std::swap(ad_bid_count_idx_, other->ad_bid_count_idx_);
    std::swap(html_snippet_, other->html_snippet_);
    click_through_url_.Swap(&other->click_through_url_);
    category_.Swap(&other->category_);
    creative_type_.Swap(&other->creative_type_);
    std::swap(network_guid_, other->network_guid_);
    std::swap(extend_data_, other->extend_data_);
    destination_url_.Swap(&other->destination_url_);
    std::swap(creative_id_, other->creative_id_);
    std::swap(resource_address_, other->resource_address_);
    std::swap(feedback_address_, other->feedback_address_);
    std::swap(video_snippet_, other->video_snippet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ads::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ads_descriptor_;
  metadata.reflection = BidResponse_Ads_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse::kVersionFieldNumber;
const int BidResponse::kBidFieldNumber;
const int BidResponse::kAdsFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::kEmptyString) {
        bid_->clear();
      }
    }
  }
  ads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ads;
        break;
      }

      // repeated .Tanx.BidResponse.Ads ads = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ads;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bid(), output);
  }

  // repeated .Tanx.BidResponse.Ads ads = 3;
  for (int i = 0; i < this->ads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ads(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // repeated .Tanx.BidResponse.Ads ads = 3;
  for (int i = 0; i < this->ads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ads(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required string bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

  }
  // repeated .Tanx.BidResponse.Ads ads = 3;
  total_size += 1 * this->ads_size();
  for (int i = 0; i < this->ads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ads_.MergeFrom(from.ads_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < ads_size(); i++) {
    if (!this->ads(i).IsInitialized()) return false;
  }
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bid_, other->bid_);
    ads_.Swap(&other->ads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResult_Res::kAdzinfoIdFieldNumber;
const int BidResult_Res::kAdBidCountIdxFieldNumber;
const int BidResult_Res::kResultCodeFieldNumber;
const int BidResult_Res::kResultPriceFieldNumber;
const int BidResult_Res::kExtendDataFieldNumber;
#endif  // !_MSC_VER

BidResult_Res::BidResult_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResult_Res::InitAsDefaultInstance() {
}

BidResult_Res::BidResult_Res(const BidResult_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResult_Res::SharedCtor() {
  _cached_size_ = 0;
  adzinfo_id_ = 0u;
  ad_bid_count_idx_ = 0u;
  result_code_ = 0;
  result_price_ = 0u;
  extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResult_Res::~BidResult_Res() {
  SharedDtor();
}

void BidResult_Res::SharedDtor() {
  if (extend_data_ != &::google::protobuf::internal::kEmptyString) {
    delete extend_data_;
  }
  if (this != default_instance_) {
  }
}

void BidResult_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResult_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResult_Res_descriptor_;
}

const BidResult_Res& BidResult_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidResult_Res* BidResult_Res::default_instance_ = NULL;

BidResult_Res* BidResult_Res::New() const {
  return new BidResult_Res;
}

void BidResult_Res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    adzinfo_id_ = 0u;
    ad_bid_count_idx_ = 0u;
    result_code_ = 0;
    result_price_ = 0u;
    if (has_extend_data()) {
      if (extend_data_ != &::google::protobuf::internal::kEmptyString) {
        extend_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResult_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adzinfo_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adzinfo_id_)));
          set_has_adzinfo_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ad_bid_count_idx;
        break;
      }

      // optional uint32 ad_bid_count_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad_bid_count_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bid_count_idx_)));
          set_has_ad_bid_count_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // optional int32 result_code = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result_price;
        break;
      }

      // optional uint32 result_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_price_)));
          set_has_result_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_extend_data;
        break;
      }

      // optional string extend_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extend_data().data(), this->extend_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResult_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adzinfo_id(), output);
  }

  // optional uint32 ad_bid_count_idx = 2;
  if (has_ad_bid_count_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ad_bid_count_idx(), output);
  }

  // optional int32 result_code = 3 [default = 0];
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result_code(), output);
  }

  // optional uint32 result_price = 4;
  if (has_result_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_price(), output);
  }

  // optional string extend_data = 5;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->extend_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResult_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adzinfo_id(), target);
  }

  // optional uint32 ad_bid_count_idx = 2;
  if (has_ad_bid_count_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ad_bid_count_idx(), target);
  }

  // optional int32 result_code = 3 [default = 0];
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result_code(), target);
  }

  // optional uint32 result_price = 4;
  if (has_result_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result_price(), target);
  }

  // optional string extend_data = 5;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extend_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResult_Res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 adzinfo_id = 1;
    if (has_adzinfo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adzinfo_id());
    }

    // optional uint32 ad_bid_count_idx = 2;
    if (has_ad_bid_count_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bid_count_idx());
    }

    // optional int32 result_code = 3 [default = 0];
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

    // optional uint32 result_price = 4;
    if (has_result_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_price());
    }

    // optional string extend_data = 5;
    if (has_extend_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extend_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResult_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResult_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResult_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResult_Res::MergeFrom(const BidResult_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adzinfo_id()) {
      set_adzinfo_id(from.adzinfo_id());
    }
    if (from.has_ad_bid_count_idx()) {
      set_ad_bid_count_idx(from.ad_bid_count_idx());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_price()) {
      set_result_price(from.result_price());
    }
    if (from.has_extend_data()) {
      set_extend_data(from.extend_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResult_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResult_Res::CopyFrom(const BidResult_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResult_Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidResult_Res::Swap(BidResult_Res* other) {
  if (other != this) {
    std::swap(adzinfo_id_, other->adzinfo_id_);
    std::swap(ad_bid_count_idx_, other->ad_bid_count_idx_);
    std::swap(result_code_, other->result_code_);
    std::swap(result_price_, other->result_price_);
    std::swap(extend_data_, other->extend_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResult_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResult_Res_descriptor_;
  metadata.reflection = BidResult_Res_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResult::kVersionFieldNumber;
const int BidResult::kBidFieldNumber;
const int BidResult::kResFieldNumber;
#endif  // !_MSC_VER

BidResult::BidResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResult::InitAsDefaultInstance() {
}

BidResult::BidResult(const BidResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResult::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResult::~BidResult() {
  SharedDtor();
}

void BidResult::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (this != default_instance_) {
  }
}

void BidResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResult_descriptor_;
}

const BidResult& BidResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

BidResult* BidResult::default_instance_ = NULL;

BidResult* BidResult::New() const {
  return new BidResult;
}

void BidResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::kEmptyString) {
        bid_->clear();
      }
    }
  }
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_res;
        break;
      }

      // repeated .Tanx.BidResult.Res res = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_res;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bid(), output);
  }

  // repeated .Tanx.BidResult.Res res = 3;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->res(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // repeated .Tanx.BidResult.Res res = 3;
  for (int i = 0; i < this->res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->res(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required string bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

  }
  // repeated .Tanx.BidResult.Res res = 3;
  total_size += 1 * this->res_size();
  for (int i = 0; i < this->res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->res(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResult::MergeFrom(const BidResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  res_.MergeFrom(from.res_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResult::CopyFrom(const BidResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < res_size(); i++) {
    if (!this->res(i).IsInitialized()) return false;
  }
  return true;
}

void BidResult::Swap(BidResult* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bid_, other->bid_);
    res_.Swap(&other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResult_descriptor_;
  metadata.reflection = BidResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobileCreative_Creative_Attr::kNameFieldNumber;
const int MobileCreative_Creative_Attr::kValueFieldNumber;
#endif  // !_MSC_VER

MobileCreative_Creative_Attr::MobileCreative_Creative_Attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MobileCreative_Creative_Attr::InitAsDefaultInstance() {
}

MobileCreative_Creative_Attr::MobileCreative_Creative_Attr(const MobileCreative_Creative_Attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MobileCreative_Creative_Attr::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Creative_Attr::~MobileCreative_Creative_Attr() {
  SharedDtor();
}

void MobileCreative_Creative_Attr::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MobileCreative_Creative_Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Creative_Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Creative_Attr_descriptor_;
}

const MobileCreative_Creative_Attr& MobileCreative_Creative_Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Creative_Attr* MobileCreative_Creative_Attr::default_instance_ = NULL;

MobileCreative_Creative_Attr* MobileCreative_Creative_Attr::New() const {
  return new MobileCreative_Creative_Attr;
}

void MobileCreative_Creative_Attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileCreative_Creative_Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MobileCreative_Creative_Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MobileCreative_Creative_Attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MobileCreative_Creative_Attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Creative_Attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileCreative_Creative_Attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileCreative_Creative_Attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileCreative_Creative_Attr::MergeFrom(const MobileCreative_Creative_Attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileCreative_Creative_Attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Creative_Attr::CopyFrom(const MobileCreative_Creative_Attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Creative_Attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MobileCreative_Creative_Attr::Swap(MobileCreative_Creative_Attr* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileCreative_Creative_Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Creative_Attr_descriptor_;
  metadata.reflection = MobileCreative_Creative_Attr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MobileCreative_Creative::kImgUrlFieldNumber;
const int MobileCreative_Creative::kImgSizeFieldNumber;
const int MobileCreative_Creative::kTitleFieldNumber;
const int MobileCreative_Creative::kClickUrlFieldNumber;
const int MobileCreative_Creative::kDestinationUrlFieldNumber;
const int MobileCreative_Creative::kAttrFieldNumber;
const int MobileCreative_Creative::kCreativeIdFieldNumber;
const int MobileCreative_Creative::kCategoryFieldNumber;
#endif  // !_MSC_VER

MobileCreative_Creative::MobileCreative_Creative()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MobileCreative_Creative::InitAsDefaultInstance() {
}

MobileCreative_Creative::MobileCreative_Creative(const MobileCreative_Creative& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MobileCreative_Creative::SharedCtor() {
  _cached_size_ = 0;
  img_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  img_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  click_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destination_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Creative::~MobileCreative_Creative() {
  SharedDtor();
}

void MobileCreative_Creative::SharedDtor() {
  if (img_url_ != &::google::protobuf::internal::kEmptyString) {
    delete img_url_;
  }
  if (img_size_ != &::google::protobuf::internal::kEmptyString) {
    delete img_size_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (click_url_ != &::google::protobuf::internal::kEmptyString) {
    delete click_url_;
  }
  if (destination_url_ != &::google::protobuf::internal::kEmptyString) {
    delete destination_url_;
  }
  if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_id_;
  }
  if (this != default_instance_) {
  }
}

void MobileCreative_Creative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Creative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Creative_descriptor_;
}

const MobileCreative_Creative& MobileCreative_Creative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Creative* MobileCreative_Creative::default_instance_ = NULL;

MobileCreative_Creative* MobileCreative_Creative::New() const {
  return new MobileCreative_Creative;
}

void MobileCreative_Creative::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_img_url()) {
      if (img_url_ != &::google::protobuf::internal::kEmptyString) {
        img_url_->clear();
      }
    }
    if (has_img_size()) {
      if (img_size_ != &::google::protobuf::internal::kEmptyString) {
        img_size_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_click_url()) {
      if (click_url_ != &::google::protobuf::internal::kEmptyString) {
        click_url_->clear();
      }
    }
    if (has_destination_url()) {
      if (destination_url_ != &::google::protobuf::internal::kEmptyString) {
        destination_url_->clear();
      }
    }
    if (has_creative_id()) {
      if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
        creative_id_->clear();
      }
    }
  }
  attr_.Clear();
  category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileCreative_Creative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string img_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_url().data(), this->img_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_img_size;
        break;
      }

      // optional string img_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_size().data(), this->img_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_click_url;
        break;
      }

      // optional string click_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_click_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_click_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->click_url().data(), this->click_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_destination_url;
        break;
      }

      // optional string destination_url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination_url().data(), this->destination_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        break;
      }

      // repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        if (input->ExpectTag(58)) goto parse_creative_id;
        break;
      }

      // optional string creative_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creative_id().data(), this->creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_category;
        break;
      }

      // repeated int32 category = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_category())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_category;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MobileCreative_Creative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string img_url = 1;
  if (has_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_url().data(), this->img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->img_url(), output);
  }

  // optional string img_size = 2;
  if (has_img_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_size().data(), this->img_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->img_size(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string click_url = 4;
  if (has_click_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->click_url().data(), this->click_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->click_url(), output);
  }

  // optional string destination_url = 5;
  if (has_destination_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination_url().data(), this->destination_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->destination_url(), output);
  }

  // repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attr(i), output);
  }

  // optional string creative_id = 7;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->creative_id(), output);
  }

  // repeated int32 category = 8;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->category(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MobileCreative_Creative::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string img_url = 1;
  if (has_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_url().data(), this->img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->img_url(), target);
  }

  // optional string img_size = 2;
  if (has_img_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_size().data(), this->img_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->img_size(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string click_url = 4;
  if (has_click_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->click_url().data(), this->click_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->click_url(), target);
  }

  // optional string destination_url = 5;
  if (has_destination_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination_url().data(), this->destination_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->destination_url(), target);
  }

  // repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attr(i), target);
  }

  // optional string creative_id = 7;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->creative_id(), target);
  }

  // repeated int32 category = 8;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->category(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MobileCreative_Creative::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string img_url = 1;
    if (has_img_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_url());
    }

    // optional string img_size = 2;
    if (has_img_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_size());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string click_url = 4;
    if (has_click_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->click_url());
    }

    // optional string destination_url = 5;
    if (has_destination_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_url());
    }

    // optional string creative_id = 7;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_id());
    }

  }
  // repeated .Tanx.MobileCreative.Creative.Attr attr = 6;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated int32 category = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Creative::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileCreative_Creative* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileCreative_Creative*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileCreative_Creative::MergeFrom(const MobileCreative_Creative& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  category_.MergeFrom(from.category_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_url()) {
      set_img_url(from.img_url());
    }
    if (from.has_img_size()) {
      set_img_size(from.img_size());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_click_url()) {
      set_click_url(from.click_url());
    }
    if (from.has_destination_url()) {
      set_destination_url(from.destination_url());
    }
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileCreative_Creative::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Creative::CopyFrom(const MobileCreative_Creative& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Creative::IsInitialized() const {

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  return true;
}

void MobileCreative_Creative::Swap(MobileCreative_Creative* other) {
  if (other != this) {
    std::swap(img_url_, other->img_url_);
    std::swap(img_size_, other->img_size_);
    std::swap(title_, other->title_);
    std::swap(click_url_, other->click_url_);
    std::swap(destination_url_, other->destination_url_);
    attr_.Swap(&other->attr_);
    std::swap(creative_id_, other->creative_id_);
    category_.Swap(&other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileCreative_Creative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Creative_descriptor_;
  metadata.reflection = MobileCreative_Creative_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MobileCreative::kVersionFieldNumber;
const int MobileCreative::kBidFieldNumber;
const int MobileCreative::kViewTypeFieldNumber;
const int MobileCreative::kCreativesFieldNumber;
#endif  // !_MSC_VER

MobileCreative::MobileCreative()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MobileCreative::InitAsDefaultInstance() {
}

MobileCreative::MobileCreative(const MobileCreative& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MobileCreative::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  view_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative::~MobileCreative() {
  SharedDtor();
}

void MobileCreative::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (this != default_instance_) {
  }
}

void MobileCreative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_descriptor_;
}

const MobileCreative& MobileCreative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_2dbidding_2eproto();
  return *default_instance_;
}

MobileCreative* MobileCreative::default_instance_ = NULL;

MobileCreative* MobileCreative::New() const {
  return new MobileCreative;
}

void MobileCreative::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::kEmptyString) {
        bid_->clear();
      }
    }
    view_type_ = 0u;
  }
  creatives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileCreative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_view_type;
        break;
      }

      // optional uint32 view_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &view_type_)));
          set_has_view_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_creatives;
        break;
      }

      // repeated .Tanx.MobileCreative.Creative creatives = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creatives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_creatives()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_creatives;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MobileCreative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bid(), output);
  }

  // optional uint32 view_type = 3;
  if (has_view_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->view_type(), output);
  }

  // repeated .Tanx.MobileCreative.Creative creatives = 4;
  for (int i = 0; i < this->creatives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->creatives(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MobileCreative::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // optional uint32 view_type = 3;
  if (has_view_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->view_type(), target);
  }

  // repeated .Tanx.MobileCreative.Creative creatives = 4;
  for (int i = 0; i < this->creatives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->creatives(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MobileCreative::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required string bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

    // optional uint32 view_type = 3;
    if (has_view_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->view_type());
    }

  }
  // repeated .Tanx.MobileCreative.Creative creatives = 4;
  total_size += 1 * this->creatives_size();
  for (int i = 0; i < this->creatives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatives(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileCreative* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileCreative*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileCreative::MergeFrom(const MobileCreative& from) {
  GOOGLE_CHECK_NE(&from, this);
  creatives_.MergeFrom(from.creatives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_view_type()) {
      set_view_type(from.view_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileCreative::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative::CopyFrom(const MobileCreative& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < creatives_size(); i++) {
    if (!this->creatives(i).IsInitialized()) return false;
  }
  return true;
}

void MobileCreative::Swap(MobileCreative* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bid_, other->bid_);
    std::swap(view_type_, other->view_type_);
    creatives_.Swap(&other->creatives_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileCreative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_descriptor_;
  metadata.reflection = MobileCreative_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Tanx

// @@protoc_insertion_point(global_scope)

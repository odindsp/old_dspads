// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdt_rtb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../gdt/gdt_rtb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gdt {
namespace adx {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Impression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Impression_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Impression_Native_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Impression_Native_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Fields_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_Demographic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_Demographic_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Gender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Education_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_ConsumptionAbilityLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_Vertical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_Vertical_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_App_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Carrier_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_ConnectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_OperatingSystem_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Bid_DynamicCreative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Bid_DynamicCreative_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Bid_DynamicCreative_ProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Bid_DynamicCreative_ProductInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gdt_5frtb_2eproto() {
  protobuf_AddDesc_gdt_5frtb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gdt_rtb.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, impressions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, area_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, boss_qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, support_deep_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, wx_flow_class_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  BidRequest_Impression_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_Impression_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, placement_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, creative_specs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, bid_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, blocking_industry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, natives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, contract_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, multimedia_type_white_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, blocking_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, advertiser_whitelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, advertiser_blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, pretargeting_ids_),
  };
  BidRequest_Impression_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Impression_descriptor_,
      BidRequest_Impression::default_instance_,
      BidRequest_Impression_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Impression));
  BidRequest_Impression_Native_descriptor_ = BidRequest_Impression_descriptor_->nested_type(0);
  static const int BidRequest_Impression_Native_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression_Native, required_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression_Native, type_),
  };
  BidRequest_Impression_Native_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Impression_Native_descriptor_,
      BidRequest_Impression_Native::default_instance_,
      BidRequest_Impression_Native_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression_Native, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression_Native, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Impression_Native));
  BidRequest_Impression_Native_Fields_descriptor_ = BidRequest_Impression_Native_descriptor_->enum_type(0);
  BidRequest_Impression_Native_Type_descriptor_ = BidRequest_Impression_Native_descriptor_->enum_type(1);
  BidRequest_Device_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_Device_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, screen_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, screen_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, dpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, connection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, brand_and_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, manufacturer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, android_id_),
  };
  BidRequest_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Device_descriptor_,
      BidRequest_Device::default_instance_,
      BidRequest_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Device));
  BidRequest_User_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_User_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, user_demographic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, verticals_),
  };
  BidRequest_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_User_descriptor_,
      BidRequest_User::default_instance_,
      BidRequest_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_User));
  BidRequest_User_Demographic_descriptor_ = BidRequest_User_descriptor_->nested_type(0);
  static const int BidRequest_User_Demographic_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, education_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, age_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, age_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, consume_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, house_price_),
  };
  BidRequest_User_Demographic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_User_Demographic_descriptor_,
      BidRequest_User_Demographic::default_instance_,
      BidRequest_User_Demographic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_User_Demographic));
  BidRequest_User_Demographic_Gender_descriptor_ = BidRequest_User_Demographic_descriptor_->enum_type(0);
  BidRequest_User_Demographic_Education_descriptor_ = BidRequest_User_Demographic_descriptor_->enum_type(1);
  BidRequest_User_Demographic_ConsumptionAbilityLevel_descriptor_ = BidRequest_User_Demographic_descriptor_->enum_type(2);
  BidRequest_User_Vertical_descriptor_ = BidRequest_User_descriptor_->nested_type(1);
  static const int BidRequest_User_Vertical_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Vertical, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Vertical, weight_),
  };
  BidRequest_User_Vertical_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_User_Vertical_descriptor_,
      BidRequest_User_Vertical::default_instance_,
      BidRequest_User_Vertical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Vertical, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Vertical, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_User_Vertical));
  BidRequest_Geo_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Geo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, accuracy_),
  };
  BidRequest_Geo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Geo_descriptor_,
      BidRequest_Geo::default_instance_,
      BidRequest_Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Geo));
  BidRequest_App_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_App_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, industry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, app_bundle_id_),
  };
  BidRequest_App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_App_descriptor_,
      BidRequest_App::default_instance_,
      BidRequest_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_App));
  BidRequest_DeviceType_descriptor_ = BidRequest_descriptor_->enum_type(0);
  BidRequest_Carrier_descriptor_ = BidRequest_descriptor_->enum_type(1);
  BidRequest_ConnectionType_descriptor_ = BidRequest_descriptor_->enum_type(2);
  BidRequest_OperatingSystem_descriptor_ = BidRequest_descriptor_->enum_type(3);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seat_bids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, processing_time_ms_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  BidResponse_Bid_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Bid_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, impression_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, click_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, dynamic_creative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, app_filter_),
  };
  BidResponse_Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Bid_descriptor_,
      BidResponse_Bid::default_instance_,
      BidResponse_Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Bid));
  BidResponse_Bid_DynamicCreative_descriptor_ = BidResponse_Bid_descriptor_->nested_type(0);
  static const int BidResponse_Bid_DynamicCreative_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative, html_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative, support_gdt_helper_js_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative, product_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative, click_url_domain_whitelist_),
  };
  BidResponse_Bid_DynamicCreative_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Bid_DynamicCreative_descriptor_,
      BidResponse_Bid_DynamicCreative::default_instance_,
      BidResponse_Bid_DynamicCreative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Bid_DynamicCreative));
  BidResponse_Bid_DynamicCreative_ProductInfo_descriptor_ = BidResponse_Bid_DynamicCreative_descriptor_->nested_type(0);
  static const int BidResponse_Bid_DynamicCreative_ProductInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative_ProductInfo, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative_ProductInfo, product_industry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative_ProductInfo, product_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative_ProductInfo, product_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative_ProductInfo, product_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative_ProductInfo, product_multimedia_url_),
  };
  BidResponse_Bid_DynamicCreative_ProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Bid_DynamicCreative_ProductInfo_descriptor_,
      BidResponse_Bid_DynamicCreative_ProductInfo::default_instance_,
      BidResponse_Bid_DynamicCreative_ProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative_ProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid_DynamicCreative_ProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Bid_DynamicCreative_ProductInfo));
  BidResponse_SeatBid_descriptor_ = BidResponse_descriptor_->nested_type(1);
  static const int BidResponse_SeatBid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, impression_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, bids_),
  };
  BidResponse_SeatBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_SeatBid_descriptor_,
      BidResponse_SeatBid::default_instance_,
      BidResponse_SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_SeatBid));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gdt_5frtb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Impression_descriptor_, &BidRequest_Impression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Impression_Native_descriptor_, &BidRequest_Impression_Native::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Device_descriptor_, &BidRequest_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_User_descriptor_, &BidRequest_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_User_Demographic_descriptor_, &BidRequest_User_Demographic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_User_Vertical_descriptor_, &BidRequest_User_Vertical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Geo_descriptor_, &BidRequest_Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_App_descriptor_, &BidRequest_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Bid_descriptor_, &BidResponse_Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Bid_DynamicCreative_descriptor_, &BidResponse_Bid_DynamicCreative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Bid_DynamicCreative_ProductInfo_descriptor_, &BidResponse_Bid_DynamicCreative_ProductInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_SeatBid_descriptor_, &BidResponse_SeatBid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gdt_5frtb_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_Impression::default_instance_;
  delete BidRequest_Impression_reflection_;
  delete BidRequest_Impression_Native::default_instance_;
  delete BidRequest_Impression_Native_reflection_;
  delete BidRequest_Device::default_instance_;
  delete BidRequest_Device_reflection_;
  delete BidRequest_User::default_instance_;
  delete BidRequest_User_reflection_;
  delete BidRequest_User_Demographic::default_instance_;
  delete BidRequest_User_Demographic_reflection_;
  delete BidRequest_User_Vertical::default_instance_;
  delete BidRequest_User_Vertical_reflection_;
  delete BidRequest_Geo::default_instance_;
  delete BidRequest_Geo_reflection_;
  delete BidRequest_App::default_instance_;
  delete BidRequest_App_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Bid::default_instance_;
  delete BidResponse_Bid_reflection_;
  delete BidResponse_Bid_DynamicCreative::default_instance_;
  delete BidResponse_Bid_DynamicCreative_reflection_;
  delete BidResponse_Bid_DynamicCreative_ProductInfo::default_instance_;
  delete BidResponse_Bid_DynamicCreative_ProductInfo_reflection_;
  delete BidResponse_SeatBid::default_instance_;
  delete BidResponse_SeatBid_reflection_;
}

void protobuf_AddDesc_gdt_5frtb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgdt_rtb.proto\022\007gdt.adx\"\221\026\n\nBidRequest\022"
    "\n\n\002id\030\001 \001(\t\022\026\n\007is_ping\030\002 \001(\010:\005false\022\026\n\007i"
    "s_test\030\003 \001(\010:\005false\0223\n\013impressions\030\004 \003(\013"
    "2\036.gdt.adx.BidRequest.Impression\022*\n\006devi"
    "ce\030\005 \001(\0132\032.gdt.adx.BidRequest.Device\022\n\n\002"
    "ip\030\006 \001(\t\022\021\n\tarea_code\030\007 \001(\005\022&\n\004user\030\010 \001("
    "\0132\030.gdt.adx.BidRequest.User\022$\n\003geo\030\t \001(\013"
    "2\027.gdt.adx.BidRequest.Geo\022$\n\003app\030\n \001(\0132\027"
    ".gdt.adx.BidRequest.App\022\017\n\007boss_qq\030\013 \001(\004"
    "\022 \n\021support_deep_link\030\014 \001(\010:\005false\022\025\n\rwx"
    "_flow_class\030\r \003(\004\032\221\004\n\nImpression\022\n\n\002id\030\001"
    " \001(\t\022\024\n\014placement_id\030\002 \001(\003\022\026\n\016creative_s"
    "pecs\030\003 \003(\005\022\021\n\tbid_floor\030\004 \001(\005\022\034\n\024blockin"
    "g_industry_id\030\005 \003(\003\0226\n\007natives\030\006 \003(\0132%.g"
    "dt.adx.BidRequest.Impression.Native\022\025\n\rc"
    "ontract_code\030\007 \003(\t\022\"\n\032multimedia_type_wh"
    "ite_list\030\010 \003(\t\022\030\n\020blocking_keyword\030\n \003(\t"
    "\022\034\n\024advertiser_whitelist\030\013 \003(\t\022\034\n\024advert"
    "iser_blacklist\030\014 \003(\t\022\030\n\020pretargeting_ids"
    "\030\r \003(\t\032\264\001\n\006Native\022\027\n\017required_fields\030\001 \001"
    "(\004\0228\n\004type\030\002 \001(\0162*.gdt.adx.BidRequest.Im"
    "pression.Native.Type\"<\n\006Fields\022\014\n\010HEADLI"
    "NE\020\001\022\010\n\004ICON\020\002\022\t\n\005IMAGE\020\004\022\017\n\013DESCRIPTION"
    "\020\010\"\031\n\004Type\022\010\n\004LINK\020\000\022\007\n\003APP\020\001\032\252\003\n\006Device"
    "\022\n\n\002id\030\001 \001(\t\0223\n\013device_type\030\002 \001(\0162\036.gdt."
    "adx.BidRequest.DeviceType\022/\n\002os\030\003 \001(\0162#."
    "gdt.adx.BidRequest.OperatingSystem\022\022\n\nos"
    "_version\030\004 \001(\t\022\022\n\nuser_agent\030\005 \001(\t\022\024\n\014sc"
    "reen_width\030\006 \001(\005\022\025\n\rscreen_height\030\007 \001(\005\022"
    "\013\n\003dpi\030\010 \001(\005\022,\n\007carrier\030\t \001(\0162\033.gdt.adx."
    "BidRequest.Carrier\022;\n\017connection_type\030\n "
    "\001(\0162\".gdt.adx.BidRequest.ConnectionType\022"
    "\027\n\017brand_and_model\030\013 \001(\t\022\020\n\010language\030\014 \001"
    "(\t\022\014\n\004idfa\030\r \001(\t\022\024\n\014manufacturer\030\016 \001(\t\022\022"
    "\n\nandroid_id\030\017 \001(\t\032\202\007\n\004User\022\n\n\002id\030\001 \001(\t\022"
    ">\n\020user_demographic\030\002 \001(\0132$.gdt.adx.BidR"
    "equest.User.Demographic\0224\n\tverticals\030\003 \003"
    "(\0132!.gdt.adx.BidRequest.User.Vertical\032\317\005"
    "\n\013Demographic\022K\n\006gender\030\001 \001(\0162+.gdt.adx."
    "BidRequest.User.Demographic.Gender:\016GEND"
    "ER_UNKNOWN\022T\n\teducation\030\002 \001(\0162..gdt.adx."
    "BidRequest.User.Demographic.Education:\021E"
    "DUCATION_UNKNOWN\022\022\n\007age_low\030\003 \001(\005:\0010\022\025\n\010"
    "age_high\030\004 \001(\005:\003999\022S\n\rconsume_level\030\005 \001"
    "(\0162<.gdt.adx.BidRequest.User.Demographic"
    ".ConsumptionAbilityLevel\022\023\n\013house_price\030"
    "\006 \001(\r\"@\n\006Gender\022\022\n\016GENDER_UNKNOWN\020\000\022\017\n\013G"
    "ENDER_MALE\020\001\022\021\n\rGENDER_FEMALE\020\002\"\273\001\n\tEduc"
    "ation\022\025\n\021EDUCATION_UNKNOWN\020\000\022\024\n\020EDUCATIO"
    "N_DOCTOR\020\001\022\024\n\020EDUCATION_MASTER\020\002\022\025\n\021EDUC"
    "ATION_COLLEGE\020\003\022\031\n\025EDUCATION_HIGH_SCHOOL"
    "\020\004\022\033\n\027EDUCATION_MIDDLE_SCHOOL\020\005\022\034\n\030EDUCA"
    "TION_PRIMARY_SCHOOL\020\006\"\207\001\n\027ConsumptionAbi"
    "lityLevel\022%\n!CONSUMPTION_ABILITY_LEVEL_U"
    "NKNOWN\020\000\022\"\n\036CONSUMPTION_ABILITY_LEVEL_HI"
    "GH\020\001\022!\n\035CONSUMPTION_ABILITY_LEVEL_LOW\020\002\032"
    "&\n\010Vertical\022\n\n\002id\030\001 \001(\r\022\016\n\006weight\030\002 \001(\002\032"
    "<\n\003Geo\022\020\n\010latitude\030\001 \001(\005\022\021\n\tlongitude\030\002 "
    "\001(\005\022\020\n\010accuracy\030\003 \001(\001\0321\n\003App\022\023\n\013industry"
    "_id\030\001 \001(\003\022\025\n\rapp_bundle_id\030\002 \001(\t\"b\n\nDevi"
    "ceType\022\026\n\022DEVICETYPE_UNKNOWN\020\000\022\021\n\rDEVICE"
    "TYPE_PC\020\001\022\025\n\021DEVICETYPE_MOBILE\020\002\022\022\n\016DEVI"
    "CETYPE_PAD\020\003\"j\n\007Carrier\022\023\n\017CARRIER_UNKNO"
    "WN\020\000\022\027\n\023CARRIER_CHINAMOBILE\020\001\022\027\n\023CARRIER"
    "_CHINAUNICOM\020\002\022\030\n\024CARRIER_CHINATELECOM\020\003"
    "\"\212\001\n\016ConnectionType\022\032\n\026CONNECTIONTYPE_UN"
    "KNOWN\020\000\022\027\n\023CONNECTIONTYPE_WIFI\020\001\022\025\n\021CONN"
    "ECTIONTYPE_2G\020\002\022\025\n\021CONNECTIONTYPE_3G\020\003\022\025"
    "\n\021CONNECTIONTYPE_4G\020\004\"j\n\017OperatingSystem"
    "\022\016\n\nOS_UNKNOWN\020\000\022\n\n\006OS_IOS\020\001\022\016\n\nOS_ANDRO"
    "ID\020\002\022\016\n\nOS_WINDOWS\020\003\022\016\n\nOS_SYMBIAN\020\004\022\013\n\007"
    "OS_JAVA\020\005*\t\010\220N\020\200\200\200\200\002\"\361\005\n\013BidResponse\022\022\n\n"
    "request_id\030\001 \001(\t\022/\n\tseat_bids\030\002 \003(\0132\034.gd"
    "t.adx.BidResponse.SeatBid\022\032\n\022processing_"
    "time_ms\030\003 \001(\005\032\253\004\n\003Bid\022\023\n\013creative_id\030\001 \001"
    "(\t\022\021\n\tbid_price\030\002 \001(\005\022\030\n\020impression_para"
    "m\030\003 \001(\t\022\023\n\013click_param\030\004 \001(\t\022B\n\020dynamic_"
    "creative\030\005 \001(\0132(.gdt.adx.BidResponse.Bid"
    ".DynamicCreative\022\031\n\napp_filter\030\006 \001(\010:\005fa"
    "lse\032\342\002\n\017DynamicCreative\022\024\n\014html_snippet\030"
    "\001 \001(\t\022\035\n\025support_gdt_helper_js\030\002 \001(\010\022K\n\r"
    "product_infos\030\003 \003(\01324.gdt.adx.BidRespons"
    "e.Bid.DynamicCreative.ProductInfo\022\"\n\032cli"
    "ck_url_domain_whitelist\030\004 \003(\t\032\250\001\n\013Produc"
    "tInfo\022\022\n\nproduct_id\030\001 \001(\t\022\030\n\020product_ind"
    "ustry\030\002 \001(\003\022\030\n\020product_category\030\003 \001(\003\022\024\n"
    "\014product_name\030\004 \001(\t\022\033\n\023product_descripti"
    "on\030\005 \001(\t\022\036\n\026product_multimedia_url\030\006 \001(\t"
    "*\t\010\220N\020\200\200\200\200\002\032H\n\007SeatBid\022\025\n\rimpression_id\030"
    "\001 \001(\t\022&\n\004bids\030\002 \003(\0132\030.gdt.adx.BidRespons"
    "e.Bid*\t\010\220N\020\200\200\200\200\002", 3616);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gdt_rtb.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_Impression::default_instance_ = new BidRequest_Impression();
  BidRequest_Impression_Native::default_instance_ = new BidRequest_Impression_Native();
  BidRequest_Device::default_instance_ = new BidRequest_Device();
  BidRequest_User::default_instance_ = new BidRequest_User();
  BidRequest_User_Demographic::default_instance_ = new BidRequest_User_Demographic();
  BidRequest_User_Vertical::default_instance_ = new BidRequest_User_Vertical();
  BidRequest_Geo::default_instance_ = new BidRequest_Geo();
  BidRequest_App::default_instance_ = new BidRequest_App();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Bid::default_instance_ = new BidResponse_Bid();
  BidResponse_Bid_DynamicCreative::default_instance_ = new BidResponse_Bid_DynamicCreative();
  BidResponse_Bid_DynamicCreative_ProductInfo::default_instance_ = new BidResponse_Bid_DynamicCreative_ProductInfo();
  BidResponse_SeatBid::default_instance_ = new BidResponse_SeatBid();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_Impression::default_instance_->InitAsDefaultInstance();
  BidRequest_Impression_Native::default_instance_->InitAsDefaultInstance();
  BidRequest_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_User::default_instance_->InitAsDefaultInstance();
  BidRequest_User_Demographic::default_instance_->InitAsDefaultInstance();
  BidRequest_User_Vertical::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo::default_instance_->InitAsDefaultInstance();
  BidRequest_App::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Bid::default_instance_->InitAsDefaultInstance();
  BidResponse_Bid_DynamicCreative::default_instance_->InitAsDefaultInstance();
  BidResponse_Bid_DynamicCreative_ProductInfo::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gdt_5frtb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gdt_5frtb_2eproto {
  StaticDescriptorInitializer_gdt_5frtb_2eproto() {
    protobuf_AddDesc_gdt_5frtb_2eproto();
  }
} static_descriptor_initializer_gdt_5frtb_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BidRequest_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_DeviceType_descriptor_;
}
bool BidRequest_DeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_DeviceType BidRequest::DEVICETYPE_UNKNOWN;
const BidRequest_DeviceType BidRequest::DEVICETYPE_PC;
const BidRequest_DeviceType BidRequest::DEVICETYPE_MOBILE;
const BidRequest_DeviceType BidRequest::DEVICETYPE_PAD;
const BidRequest_DeviceType BidRequest::DeviceType_MIN;
const BidRequest_DeviceType BidRequest::DeviceType_MAX;
const int BidRequest::DeviceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Carrier_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Carrier_descriptor_;
}
bool BidRequest_Carrier_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Carrier BidRequest::CARRIER_UNKNOWN;
const BidRequest_Carrier BidRequest::CARRIER_CHINAMOBILE;
const BidRequest_Carrier BidRequest::CARRIER_CHINAUNICOM;
const BidRequest_Carrier BidRequest::CARRIER_CHINATELECOM;
const BidRequest_Carrier BidRequest::Carrier_MIN;
const BidRequest_Carrier BidRequest::Carrier_MAX;
const int BidRequest::Carrier_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_ConnectionType_descriptor_;
}
bool BidRequest_ConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_ConnectionType BidRequest::CONNECTIONTYPE_UNKNOWN;
const BidRequest_ConnectionType BidRequest::CONNECTIONTYPE_WIFI;
const BidRequest_ConnectionType BidRequest::CONNECTIONTYPE_2G;
const BidRequest_ConnectionType BidRequest::CONNECTIONTYPE_3G;
const BidRequest_ConnectionType BidRequest::CONNECTIONTYPE_4G;
const BidRequest_ConnectionType BidRequest::ConnectionType_MIN;
const BidRequest_ConnectionType BidRequest::ConnectionType_MAX;
const int BidRequest::ConnectionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_OperatingSystem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_OperatingSystem_descriptor_;
}
bool BidRequest_OperatingSystem_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_OperatingSystem BidRequest::OS_UNKNOWN;
const BidRequest_OperatingSystem BidRequest::OS_IOS;
const BidRequest_OperatingSystem BidRequest::OS_ANDROID;
const BidRequest_OperatingSystem BidRequest::OS_WINDOWS;
const BidRequest_OperatingSystem BidRequest::OS_SYMBIAN;
const BidRequest_OperatingSystem BidRequest::OS_JAVA;
const BidRequest_OperatingSystem BidRequest::OperatingSystem_MIN;
const BidRequest_OperatingSystem BidRequest::OperatingSystem_MAX;
const int BidRequest::OperatingSystem_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Fields_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Impression_Native_Fields_descriptor_;
}
bool BidRequest_Impression_Native_Fields_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::HEADLINE;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::ICON;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::IMAGE;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::DESCRIPTION;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::Fields_MIN;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::Fields_MAX;
const int BidRequest_Impression_Native::Fields_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Impression_Native_Type_descriptor_;
}
bool BidRequest_Impression_Native_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Impression_Native_Type BidRequest_Impression_Native::LINK;
const BidRequest_Impression_Native_Type BidRequest_Impression_Native::APP;
const BidRequest_Impression_Native_Type BidRequest_Impression_Native::Type_MIN;
const BidRequest_Impression_Native_Type BidRequest_Impression_Native::Type_MAX;
const int BidRequest_Impression_Native::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Impression_Native::kRequiredFieldsFieldNumber;
const int BidRequest_Impression_Native::kTypeFieldNumber;
#endif  // !_MSC_VER

BidRequest_Impression_Native::BidRequest_Impression_Native()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidRequest.Impression.Native)
}

void BidRequest_Impression_Native::InitAsDefaultInstance() {
}

BidRequest_Impression_Native::BidRequest_Impression_Native(const BidRequest_Impression_Native& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidRequest.Impression.Native)
}

void BidRequest_Impression_Native::SharedCtor() {
  _cached_size_ = 0;
  required_fields_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Impression_Native::~BidRequest_Impression_Native() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidRequest.Impression.Native)
  SharedDtor();
}

void BidRequest_Impression_Native::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Impression_Native::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Impression_Native::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Impression_Native_descriptor_;
}

const BidRequest_Impression_Native& BidRequest_Impression_Native::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidRequest_Impression_Native* BidRequest_Impression_Native::default_instance_ = NULL;

BidRequest_Impression_Native* BidRequest_Impression_Native::New() const {
  return new BidRequest_Impression_Native;
}

void BidRequest_Impression_Native::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Impression_Native*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(required_fields_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Impression_Native::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidRequest.Impression.Native)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 required_fields = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &required_fields_)));
          set_has_required_fields();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .gdt.adx.BidRequest.Impression.Native.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gdt::adx::BidRequest_Impression_Native_Type_IsValid(value)) {
            set_type(static_cast< ::gdt::adx::BidRequest_Impression_Native_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidRequest.Impression.Native)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidRequest.Impression.Native)
  return false;
#undef DO_
}

void BidRequest_Impression_Native::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidRequest.Impression.Native)
  // optional uint64 required_fields = 1;
  if (has_required_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->required_fields(), output);
  }

  // optional .gdt.adx.BidRequest.Impression.Native.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidRequest.Impression.Native)
}

::google::protobuf::uint8* BidRequest_Impression_Native::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidRequest.Impression.Native)
  // optional uint64 required_fields = 1;
  if (has_required_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->required_fields(), target);
  }

  // optional .gdt.adx.BidRequest.Impression.Native.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidRequest.Impression.Native)
  return target;
}

int BidRequest_Impression_Native::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 required_fields = 1;
    if (has_required_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->required_fields());
    }

    // optional .gdt.adx.BidRequest.Impression.Native.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Impression_Native::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Impression_Native* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Impression_Native*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Impression_Native::MergeFrom(const BidRequest_Impression_Native& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_required_fields()) {
      set_required_fields(from.required_fields());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Impression_Native::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Impression_Native::CopyFrom(const BidRequest_Impression_Native& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Impression_Native::IsInitialized() const {

  return true;
}

void BidRequest_Impression_Native::Swap(BidRequest_Impression_Native* other) {
  if (other != this) {
    std::swap(required_fields_, other->required_fields_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Impression_Native::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Impression_Native_descriptor_;
  metadata.reflection = BidRequest_Impression_Native_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Impression::kIdFieldNumber;
const int BidRequest_Impression::kPlacementIdFieldNumber;
const int BidRequest_Impression::kCreativeSpecsFieldNumber;
const int BidRequest_Impression::kBidFloorFieldNumber;
const int BidRequest_Impression::kBlockingIndustryIdFieldNumber;
const int BidRequest_Impression::kNativesFieldNumber;
const int BidRequest_Impression::kContractCodeFieldNumber;
const int BidRequest_Impression::kMultimediaTypeWhiteListFieldNumber;
const int BidRequest_Impression::kBlockingKeywordFieldNumber;
const int BidRequest_Impression::kAdvertiserWhitelistFieldNumber;
const int BidRequest_Impression::kAdvertiserBlacklistFieldNumber;
const int BidRequest_Impression::kPretargetingIdsFieldNumber;
#endif  // !_MSC_VER

BidRequest_Impression::BidRequest_Impression()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidRequest.Impression)
}

void BidRequest_Impression::InitAsDefaultInstance() {
}

BidRequest_Impression::BidRequest_Impression(const BidRequest_Impression& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidRequest.Impression)
}

void BidRequest_Impression::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  placement_id_ = GOOGLE_LONGLONG(0);
  bid_floor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Impression::~BidRequest_Impression() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidRequest.Impression)
  SharedDtor();
}

void BidRequest_Impression::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Impression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Impression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Impression_descriptor_;
}

const BidRequest_Impression& BidRequest_Impression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidRequest_Impression* BidRequest_Impression::default_instance_ = NULL;

BidRequest_Impression* BidRequest_Impression::New() const {
  return new BidRequest_Impression;
}

void BidRequest_Impression::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    placement_id_ = GOOGLE_LONGLONG(0);
    bid_floor_ = 0;
  }
  creative_specs_.Clear();
  blocking_industry_id_.Clear();
  natives_.Clear();
  contract_code_.Clear();
  multimedia_type_white_list_.Clear();
  blocking_keyword_.Clear();
  advertiser_whitelist_.Clear();
  advertiser_blacklist_.Clear();
  pretargeting_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Impression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidRequest.Impression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_placement_id;
        break;
      }

      // optional int64 placement_id = 2;
      case 2: {
        if (tag == 16) {
         parse_placement_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &placement_id_)));
          set_has_placement_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creative_specs;
        break;
      }

      // repeated int32 creative_specs = 3;
      case 3: {
        if (tag == 24) {
         parse_creative_specs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_creative_specs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_creative_specs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creative_specs;
        if (input->ExpectTag(32)) goto parse_bid_floor;
        break;
      }

      // optional int32 bid_floor = 4;
      case 4: {
        if (tag == 32) {
         parse_bid_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_floor_)));
          set_has_bid_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_blocking_industry_id;
        break;
      }

      // repeated int64 blocking_industry_id = 5;
      case 5: {
        if (tag == 40) {
         parse_blocking_industry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_blocking_industry_id())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_blocking_industry_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_blocking_industry_id;
        if (input->ExpectTag(50)) goto parse_natives;
        break;
      }

      // repeated .gdt.adx.BidRequest.Impression.Native natives = 6;
      case 6: {
        if (tag == 50) {
         parse_natives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_natives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_natives;
        if (input->ExpectTag(58)) goto parse_contract_code;
        break;
      }

      // repeated string contract_code = 7;
      case 7: {
        if (tag == 58) {
         parse_contract_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_contract_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract_code(this->contract_code_size() - 1).data(),
            this->contract_code(this->contract_code_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contract_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_contract_code;
        if (input->ExpectTag(66)) goto parse_multimedia_type_white_list;
        break;
      }

      // repeated string multimedia_type_white_list = 8;
      case 8: {
        if (tag == 66) {
         parse_multimedia_type_white_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_multimedia_type_white_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->multimedia_type_white_list(this->multimedia_type_white_list_size() - 1).data(),
            this->multimedia_type_white_list(this->multimedia_type_white_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "multimedia_type_white_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_multimedia_type_white_list;
        if (input->ExpectTag(82)) goto parse_blocking_keyword;
        break;
      }

      // repeated string blocking_keyword = 10;
      case 10: {
        if (tag == 82) {
         parse_blocking_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blocking_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocking_keyword(this->blocking_keyword_size() - 1).data(),
            this->blocking_keyword(this->blocking_keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocking_keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_blocking_keyword;
        if (input->ExpectTag(90)) goto parse_advertiser_whitelist;
        break;
      }

      // repeated string advertiser_whitelist = 11;
      case 11: {
        if (tag == 90) {
         parse_advertiser_whitelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_advertiser_whitelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->advertiser_whitelist(this->advertiser_whitelist_size() - 1).data(),
            this->advertiser_whitelist(this->advertiser_whitelist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "advertiser_whitelist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_advertiser_whitelist;
        if (input->ExpectTag(98)) goto parse_advertiser_blacklist;
        break;
      }

      // repeated string advertiser_blacklist = 12;
      case 12: {
        if (tag == 98) {
         parse_advertiser_blacklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_advertiser_blacklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->advertiser_blacklist(this->advertiser_blacklist_size() - 1).data(),
            this->advertiser_blacklist(this->advertiser_blacklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "advertiser_blacklist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_advertiser_blacklist;
        if (input->ExpectTag(106)) goto parse_pretargeting_ids;
        break;
      }

      // repeated string pretargeting_ids = 13;
      case 13: {
        if (tag == 106) {
         parse_pretargeting_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pretargeting_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pretargeting_ids(this->pretargeting_ids_size() - 1).data(),
            this->pretargeting_ids(this->pretargeting_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pretargeting_ids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_pretargeting_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidRequest.Impression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidRequest.Impression)
  return false;
#undef DO_
}

void BidRequest_Impression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidRequest.Impression)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int64 placement_id = 2;
  if (has_placement_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->placement_id(), output);
  }

  // repeated int32 creative_specs = 3;
  for (int i = 0; i < this->creative_specs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->creative_specs(i), output);
  }

  // optional int32 bid_floor = 4;
  if (has_bid_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bid_floor(), output);
  }

  // repeated int64 blocking_industry_id = 5;
  for (int i = 0; i < this->blocking_industry_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->blocking_industry_id(i), output);
  }

  // repeated .gdt.adx.BidRequest.Impression.Native natives = 6;
  for (int i = 0; i < this->natives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->natives(i), output);
  }

  // repeated string contract_code = 7;
  for (int i = 0; i < this->contract_code_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->contract_code(i).data(), this->contract_code(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "contract_code");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->contract_code(i), output);
  }

  // repeated string multimedia_type_white_list = 8;
  for (int i = 0; i < this->multimedia_type_white_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->multimedia_type_white_list(i).data(), this->multimedia_type_white_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "multimedia_type_white_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->multimedia_type_white_list(i), output);
  }

  // repeated string blocking_keyword = 10;
  for (int i = 0; i < this->blocking_keyword_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->blocking_keyword(i).data(), this->blocking_keyword(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "blocking_keyword");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->blocking_keyword(i), output);
  }

  // repeated string advertiser_whitelist = 11;
  for (int i = 0; i < this->advertiser_whitelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->advertiser_whitelist(i).data(), this->advertiser_whitelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "advertiser_whitelist");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->advertiser_whitelist(i), output);
  }

  // repeated string advertiser_blacklist = 12;
  for (int i = 0; i < this->advertiser_blacklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->advertiser_blacklist(i).data(), this->advertiser_blacklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "advertiser_blacklist");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->advertiser_blacklist(i), output);
  }

  // repeated string pretargeting_ids = 13;
  for (int i = 0; i < this->pretargeting_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->pretargeting_ids(i).data(), this->pretargeting_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "pretargeting_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->pretargeting_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidRequest.Impression)
}

::google::protobuf::uint8* BidRequest_Impression::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidRequest.Impression)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int64 placement_id = 2;
  if (has_placement_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->placement_id(), target);
  }

  // repeated int32 creative_specs = 3;
  for (int i = 0; i < this->creative_specs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->creative_specs(i), target);
  }

  // optional int32 bid_floor = 4;
  if (has_bid_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bid_floor(), target);
  }

  // repeated int64 blocking_industry_id = 5;
  for (int i = 0; i < this->blocking_industry_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->blocking_industry_id(i), target);
  }

  // repeated .gdt.adx.BidRequest.Impression.Native natives = 6;
  for (int i = 0; i < this->natives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->natives(i), target);
  }

  // repeated string contract_code = 7;
  for (int i = 0; i < this->contract_code_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract_code(i).data(), this->contract_code(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract_code");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->contract_code(i), target);
  }

  // repeated string multimedia_type_white_list = 8;
  for (int i = 0; i < this->multimedia_type_white_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multimedia_type_white_list(i).data(), this->multimedia_type_white_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "multimedia_type_white_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->multimedia_type_white_list(i), target);
  }

  // repeated string blocking_keyword = 10;
  for (int i = 0; i < this->blocking_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocking_keyword(i).data(), this->blocking_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocking_keyword");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->blocking_keyword(i), target);
  }

  // repeated string advertiser_whitelist = 11;
  for (int i = 0; i < this->advertiser_whitelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advertiser_whitelist(i).data(), this->advertiser_whitelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "advertiser_whitelist");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->advertiser_whitelist(i), target);
  }

  // repeated string advertiser_blacklist = 12;
  for (int i = 0; i < this->advertiser_blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advertiser_blacklist(i).data(), this->advertiser_blacklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "advertiser_blacklist");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->advertiser_blacklist(i), target);
  }

  // repeated string pretargeting_ids = 13;
  for (int i = 0; i < this->pretargeting_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretargeting_ids(i).data(), this->pretargeting_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pretargeting_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->pretargeting_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidRequest.Impression)
  return target;
}

int BidRequest_Impression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 placement_id = 2;
    if (has_placement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->placement_id());
    }

    // optional int32 bid_floor = 4;
    if (has_bid_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_floor());
    }

  }
  // repeated int32 creative_specs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_specs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->creative_specs(i));
    }
    total_size += 1 * this->creative_specs_size() + data_size;
  }

  // repeated int64 blocking_industry_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->blocking_industry_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->blocking_industry_id(i));
    }
    total_size += 1 * this->blocking_industry_id_size() + data_size;
  }

  // repeated .gdt.adx.BidRequest.Impression.Native natives = 6;
  total_size += 1 * this->natives_size();
  for (int i = 0; i < this->natives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->natives(i));
  }

  // repeated string contract_code = 7;
  total_size += 1 * this->contract_code_size();
  for (int i = 0; i < this->contract_code_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->contract_code(i));
  }

  // repeated string multimedia_type_white_list = 8;
  total_size += 1 * this->multimedia_type_white_list_size();
  for (int i = 0; i < this->multimedia_type_white_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->multimedia_type_white_list(i));
  }

  // repeated string blocking_keyword = 10;
  total_size += 1 * this->blocking_keyword_size();
  for (int i = 0; i < this->blocking_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blocking_keyword(i));
  }

  // repeated string advertiser_whitelist = 11;
  total_size += 1 * this->advertiser_whitelist_size();
  for (int i = 0; i < this->advertiser_whitelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->advertiser_whitelist(i));
  }

  // repeated string advertiser_blacklist = 12;
  total_size += 1 * this->advertiser_blacklist_size();
  for (int i = 0; i < this->advertiser_blacklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->advertiser_blacklist(i));
  }

  // repeated string pretargeting_ids = 13;
  total_size += 1 * this->pretargeting_ids_size();
  for (int i = 0; i < this->pretargeting_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pretargeting_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Impression::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Impression* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Impression*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Impression::MergeFrom(const BidRequest_Impression& from) {
  GOOGLE_CHECK_NE(&from, this);
  creative_specs_.MergeFrom(from.creative_specs_);
  blocking_industry_id_.MergeFrom(from.blocking_industry_id_);
  natives_.MergeFrom(from.natives_);
  contract_code_.MergeFrom(from.contract_code_);
  multimedia_type_white_list_.MergeFrom(from.multimedia_type_white_list_);
  blocking_keyword_.MergeFrom(from.blocking_keyword_);
  advertiser_whitelist_.MergeFrom(from.advertiser_whitelist_);
  advertiser_blacklist_.MergeFrom(from.advertiser_blacklist_);
  pretargeting_ids_.MergeFrom(from.pretargeting_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_placement_id()) {
      set_placement_id(from.placement_id());
    }
    if (from.has_bid_floor()) {
      set_bid_floor(from.bid_floor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Impression::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Impression::CopyFrom(const BidRequest_Impression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Impression::IsInitialized() const {

  return true;
}

void BidRequest_Impression::Swap(BidRequest_Impression* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(placement_id_, other->placement_id_);
    creative_specs_.Swap(&other->creative_specs_);
    std::swap(bid_floor_, other->bid_floor_);
    blocking_industry_id_.Swap(&other->blocking_industry_id_);
    natives_.Swap(&other->natives_);
    contract_code_.Swap(&other->contract_code_);
    multimedia_type_white_list_.Swap(&other->multimedia_type_white_list_);
    blocking_keyword_.Swap(&other->blocking_keyword_);
    advertiser_whitelist_.Swap(&other->advertiser_whitelist_);
    advertiser_blacklist_.Swap(&other->advertiser_blacklist_);
    pretargeting_ids_.Swap(&other->pretargeting_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Impression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Impression_descriptor_;
  metadata.reflection = BidRequest_Impression_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Device::kIdFieldNumber;
const int BidRequest_Device::kDeviceTypeFieldNumber;
const int BidRequest_Device::kOsFieldNumber;
const int BidRequest_Device::kOsVersionFieldNumber;
const int BidRequest_Device::kUserAgentFieldNumber;
const int BidRequest_Device::kScreenWidthFieldNumber;
const int BidRequest_Device::kScreenHeightFieldNumber;
const int BidRequest_Device::kDpiFieldNumber;
const int BidRequest_Device::kCarrierFieldNumber;
const int BidRequest_Device::kConnectionTypeFieldNumber;
const int BidRequest_Device::kBrandAndModelFieldNumber;
const int BidRequest_Device::kLanguageFieldNumber;
const int BidRequest_Device::kIdfaFieldNumber;
const int BidRequest_Device::kManufacturerFieldNumber;
const int BidRequest_Device::kAndroidIdFieldNumber;
#endif  // !_MSC_VER

BidRequest_Device::BidRequest_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidRequest.Device)
}

void BidRequest_Device::InitAsDefaultInstance() {
}

BidRequest_Device::BidRequest_Device(const BidRequest_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidRequest.Device)
}

void BidRequest_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
  os_ = 0;
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  screen_width_ = 0;
  screen_height_ = 0;
  dpi_ = 0;
  carrier_ = 0;
  connection_type_ = 0;
  brand_and_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Device::~BidRequest_Device() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidRequest.Device)
  SharedDtor();
}

void BidRequest_Device::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_agent_;
  }
  if (brand_and_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_and_model_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idfa_;
  }
  if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manufacturer_;
  }
  if (android_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete android_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_descriptor_;
}

const BidRequest_Device& BidRequest_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidRequest_Device* BidRequest_Device::default_instance_ = NULL;

BidRequest_Device* BidRequest_Device::New() const {
  return new BidRequest_Device;
}

void BidRequest_Device::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(device_type_, os_);
    ZR_(screen_width_, dpi_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_agent_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    carrier_ = 0;
    connection_type_ = 0;
    if (has_brand_and_model()) {
      if (brand_and_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_and_model_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idfa_->clear();
      }
    }
    if (has_manufacturer()) {
      if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manufacturer_->clear();
      }
    }
    if (has_android_id()) {
      if (android_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        android_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidRequest.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_type;
        break;
      }

      // optional .gdt.adx.BidRequest.DeviceType device_type = 2;
      case 2: {
        if (tag == 16) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gdt::adx::BidRequest_DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::gdt::adx::BidRequest_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_os;
        break;
      }

      // optional .gdt.adx.BidRequest.OperatingSystem os = 3;
      case 3: {
        if (tag == 24) {
         parse_os:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gdt::adx::BidRequest_OperatingSystem_IsValid(value)) {
            set_os(static_cast< ::gdt::adx::BidRequest_OperatingSystem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_os_version;
        break;
      }

      // optional string os_version = 4;
      case 4: {
        if (tag == 34) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 5;
      case 5: {
        if (tag == 42) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_screen_width;
        break;
      }

      // optional int32 screen_width = 6;
      case 6: {
        if (tag == 48) {
         parse_screen_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_width_)));
          set_has_screen_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screen_height;
        break;
      }

      // optional int32 screen_height = 7;
      case 7: {
        if (tag == 56) {
         parse_screen_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_height_)));
          set_has_screen_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dpi;
        break;
      }

      // optional int32 dpi = 8;
      case 8: {
        if (tag == 64) {
         parse_dpi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dpi_)));
          set_has_dpi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_carrier;
        break;
      }

      // optional .gdt.adx.BidRequest.Carrier carrier = 9;
      case 9: {
        if (tag == 72) {
         parse_carrier:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gdt::adx::BidRequest_Carrier_IsValid(value)) {
            set_carrier(static_cast< ::gdt::adx::BidRequest_Carrier >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_connection_type;
        break;
      }

      // optional .gdt.adx.BidRequest.ConnectionType connection_type = 10;
      case 10: {
        if (tag == 80) {
         parse_connection_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gdt::adx::BidRequest_ConnectionType_IsValid(value)) {
            set_connection_type(static_cast< ::gdt::adx::BidRequest_ConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_brand_and_model;
        break;
      }

      // optional string brand_and_model = 11;
      case 11: {
        if (tag == 90) {
         parse_brand_and_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand_and_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand_and_model().data(), this->brand_and_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brand_and_model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_language;
        break;
      }

      // optional string language = 12;
      case 12: {
        if (tag == 98) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_idfa;
        break;
      }

      // optional string idfa = 13;
      case 13: {
        if (tag == 106) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "idfa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_manufacturer;
        break;
      }

      // optional string manufacturer = 14;
      case 14: {
        if (tag == 114) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufacturer().data(), this->manufacturer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "manufacturer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_android_id;
        break;
      }

      // optional string android_id = 15;
      case 15: {
        if (tag == 122) {
         parse_android_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_android_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->android_id().data(), this->android_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "android_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidRequest.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidRequest.Device)
  return false;
#undef DO_
}

void BidRequest_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidRequest.Device)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .gdt.adx.BidRequest.DeviceType device_type = 2;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_type(), output);
  }

  // optional .gdt.adx.BidRequest.OperatingSystem os = 3;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->os(), output);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os_version(), output);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_agent(), output);
  }

  // optional int32 screen_width = 6;
  if (has_screen_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->screen_width(), output);
  }

  // optional int32 screen_height = 7;
  if (has_screen_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->screen_height(), output);
  }

  // optional int32 dpi = 8;
  if (has_dpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dpi(), output);
  }

  // optional .gdt.adx.BidRequest.Carrier carrier = 9;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->carrier(), output);
  }

  // optional .gdt.adx.BidRequest.ConnectionType connection_type = 10;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->connection_type(), output);
  }

  // optional string brand_and_model = 11;
  if (has_brand_and_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand_and_model().data(), this->brand_and_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand_and_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->brand_and_model(), output);
  }

  // optional string language = 12;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->language(), output);
  }

  // optional string idfa = 13;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->idfa(), output);
  }

  // optional string manufacturer = 14;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->manufacturer(), output);
  }

  // optional string android_id = 15;
  if (has_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_id().data(), this->android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "android_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->android_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidRequest.Device)
}

::google::protobuf::uint8* BidRequest_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidRequest.Device)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .gdt.adx.BidRequest.DeviceType device_type = 2;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_type(), target);
  }

  // optional .gdt.adx.BidRequest.OperatingSystem os = 3;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->os(), target);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os_version(), target);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_agent(), target);
  }

  // optional int32 screen_width = 6;
  if (has_screen_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->screen_width(), target);
  }

  // optional int32 screen_height = 7;
  if (has_screen_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->screen_height(), target);
  }

  // optional int32 dpi = 8;
  if (has_dpi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dpi(), target);
  }

  // optional .gdt.adx.BidRequest.Carrier carrier = 9;
  if (has_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->carrier(), target);
  }

  // optional .gdt.adx.BidRequest.ConnectionType connection_type = 10;
  if (has_connection_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->connection_type(), target);
  }

  // optional string brand_and_model = 11;
  if (has_brand_and_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand_and_model().data(), this->brand_and_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand_and_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->brand_and_model(), target);
  }

  // optional string language = 12;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->language(), target);
  }

  // optional string idfa = 13;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->idfa(), target);
  }

  // optional string manufacturer = 14;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufacturer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->manufacturer(), target);
  }

  // optional string android_id = 15;
  if (has_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_id().data(), this->android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "android_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->android_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidRequest.Device)
  return target;
}

int BidRequest_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .gdt.adx.BidRequest.DeviceType device_type = 2;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

    // optional .gdt.adx.BidRequest.OperatingSystem os = 3;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->os());
    }

    // optional string os_version = 4;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional string user_agent = 5;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional int32 screen_width = 6;
    if (has_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_width());
    }

    // optional int32 screen_height = 7;
    if (has_screen_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_height());
    }

    // optional int32 dpi = 8;
    if (has_dpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dpi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .gdt.adx.BidRequest.Carrier carrier = 9;
    if (has_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->carrier());
    }

    // optional .gdt.adx.BidRequest.ConnectionType connection_type = 10;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_type());
    }

    // optional string brand_and_model = 11;
    if (has_brand_and_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand_and_model());
    }

    // optional string language = 12;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string idfa = 13;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string manufacturer = 14;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string android_id = 15;
    if (has_android_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->android_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Device::MergeFrom(const BidRequest_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_screen_width()) {
      set_screen_width(from.screen_width());
    }
    if (from.has_screen_height()) {
      set_screen_height(from.screen_height());
    }
    if (from.has_dpi()) {
      set_dpi(from.dpi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_carrier()) {
      set_carrier(from.carrier());
    }
    if (from.has_connection_type()) {
      set_connection_type(from.connection_type());
    }
    if (from.has_brand_and_model()) {
      set_brand_and_model(from.brand_and_model());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_manufacturer()) {
      set_manufacturer(from.manufacturer());
    }
    if (from.has_android_id()) {
      set_android_id(from.android_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Device::CopyFrom(const BidRequest_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Device::IsInitialized() const {

  return true;
}

void BidRequest_Device::Swap(BidRequest_Device* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(device_type_, other->device_type_);
    std::swap(os_, other->os_);
    std::swap(os_version_, other->os_version_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(screen_width_, other->screen_width_);
    std::swap(screen_height_, other->screen_height_);
    std::swap(dpi_, other->dpi_);
    std::swap(carrier_, other->carrier_);
    std::swap(connection_type_, other->connection_type_);
    std::swap(brand_and_model_, other->brand_and_model_);
    std::swap(language_, other->language_);
    std::swap(idfa_, other->idfa_);
    std::swap(manufacturer_, other->manufacturer_);
    std::swap(android_id_, other->android_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Device_descriptor_;
  metadata.reflection = BidRequest_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Demographic_Gender_descriptor_;
}
bool BidRequest_User_Demographic_Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::GENDER_UNKNOWN;
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::GENDER_MALE;
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::GENDER_FEMALE;
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::Gender_MIN;
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::Gender_MAX;
const int BidRequest_User_Demographic::Gender_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Education_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Demographic_Education_descriptor_;
}
bool BidRequest_User_Demographic_Education_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_UNKNOWN;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_DOCTOR;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_MASTER;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_COLLEGE;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_HIGH_SCHOOL;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_MIDDLE_SCHOOL;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_PRIMARY_SCHOOL;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::Education_MIN;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::Education_MAX;
const int BidRequest_User_Demographic::Education_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_ConsumptionAbilityLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Demographic_ConsumptionAbilityLevel_descriptor_;
}
bool BidRequest_User_Demographic_ConsumptionAbilityLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_User_Demographic_ConsumptionAbilityLevel BidRequest_User_Demographic::CONSUMPTION_ABILITY_LEVEL_UNKNOWN;
const BidRequest_User_Demographic_ConsumptionAbilityLevel BidRequest_User_Demographic::CONSUMPTION_ABILITY_LEVEL_HIGH;
const BidRequest_User_Demographic_ConsumptionAbilityLevel BidRequest_User_Demographic::CONSUMPTION_ABILITY_LEVEL_LOW;
const BidRequest_User_Demographic_ConsumptionAbilityLevel BidRequest_User_Demographic::ConsumptionAbilityLevel_MIN;
const BidRequest_User_Demographic_ConsumptionAbilityLevel BidRequest_User_Demographic::ConsumptionAbilityLevel_MAX;
const int BidRequest_User_Demographic::ConsumptionAbilityLevel_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_User_Demographic::kGenderFieldNumber;
const int BidRequest_User_Demographic::kEducationFieldNumber;
const int BidRequest_User_Demographic::kAgeLowFieldNumber;
const int BidRequest_User_Demographic::kAgeHighFieldNumber;
const int BidRequest_User_Demographic::kConsumeLevelFieldNumber;
const int BidRequest_User_Demographic::kHousePriceFieldNumber;
#endif  // !_MSC_VER

BidRequest_User_Demographic::BidRequest_User_Demographic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidRequest.User.Demographic)
}

void BidRequest_User_Demographic::InitAsDefaultInstance() {
}

BidRequest_User_Demographic::BidRequest_User_Demographic(const BidRequest_User_Demographic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidRequest.User.Demographic)
}

void BidRequest_User_Demographic::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 0;
  education_ = 0;
  age_low_ = 0;
  age_high_ = 999;
  consume_level_ = 0;
  house_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User_Demographic::~BidRequest_User_Demographic() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidRequest.User.Demographic)
  SharedDtor();
}

void BidRequest_User_Demographic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_User_Demographic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User_Demographic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Demographic_descriptor_;
}

const BidRequest_User_Demographic& BidRequest_User_Demographic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidRequest_User_Demographic* BidRequest_User_Demographic::default_instance_ = NULL;

BidRequest_User_Demographic* BidRequest_User_Demographic::New() const {
  return new BidRequest_User_Demographic;
}

void BidRequest_User_Demographic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_User_Demographic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(gender_, age_low_);
    ZR_(consume_level_, house_price_);
    age_high_ = 999;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_User_Demographic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidRequest.User.Demographic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gdt::adx::BidRequest_User_Demographic_Gender_IsValid(value)) {
            set_gender(static_cast< ::gdt::adx::BidRequest_User_Demographic_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_education;
        break;
      }

      // optional .gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
      case 2: {
        if (tag == 16) {
         parse_education:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gdt::adx::BidRequest_User_Demographic_Education_IsValid(value)) {
            set_education(static_cast< ::gdt::adx::BidRequest_User_Demographic_Education >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_age_low;
        break;
      }

      // optional int32 age_low = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_age_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_low_)));
          set_has_age_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_age_high;
        break;
      }

      // optional int32 age_high = 4 [default = 999];
      case 4: {
        if (tag == 32) {
         parse_age_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_high_)));
          set_has_age_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_consume_level;
        break;
      }

      // optional .gdt.adx.BidRequest.User.Demographic.ConsumptionAbilityLevel consume_level = 5;
      case 5: {
        if (tag == 40) {
         parse_consume_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gdt::adx::BidRequest_User_Demographic_ConsumptionAbilityLevel_IsValid(value)) {
            set_consume_level(static_cast< ::gdt::adx::BidRequest_User_Demographic_ConsumptionAbilityLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_house_price;
        break;
      }

      // optional uint32 house_price = 6;
      case 6: {
        if (tag == 48) {
         parse_house_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &house_price_)));
          set_has_house_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidRequest.User.Demographic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidRequest.User.Demographic)
  return false;
#undef DO_
}

void BidRequest_User_Demographic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidRequest.User.Demographic)
  // optional .gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gender(), output);
  }

  // optional .gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
  if (has_education()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->education(), output);
  }

  // optional int32 age_low = 3 [default = 0];
  if (has_age_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age_low(), output);
  }

  // optional int32 age_high = 4 [default = 999];
  if (has_age_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->age_high(), output);
  }

  // optional .gdt.adx.BidRequest.User.Demographic.ConsumptionAbilityLevel consume_level = 5;
  if (has_consume_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->consume_level(), output);
  }

  // optional uint32 house_price = 6;
  if (has_house_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->house_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidRequest.User.Demographic)
}

::google::protobuf::uint8* BidRequest_User_Demographic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidRequest.User.Demographic)
  // optional .gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gender(), target);
  }

  // optional .gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
  if (has_education()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->education(), target);
  }

  // optional int32 age_low = 3 [default = 0];
  if (has_age_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age_low(), target);
  }

  // optional int32 age_high = 4 [default = 999];
  if (has_age_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->age_high(), target);
  }

  // optional .gdt.adx.BidRequest.User.Demographic.ConsumptionAbilityLevel consume_level = 5;
  if (has_consume_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->consume_level(), target);
  }

  // optional uint32 house_price = 6;
  if (has_house_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->house_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidRequest.User.Demographic)
  return target;
}

int BidRequest_User_Demographic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
    if (has_education()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->education());
    }

    // optional int32 age_low = 3 [default = 0];
    if (has_age_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_low());
    }

    // optional int32 age_high = 4 [default = 999];
    if (has_age_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_high());
    }

    // optional .gdt.adx.BidRequest.User.Demographic.ConsumptionAbilityLevel consume_level = 5;
    if (has_consume_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->consume_level());
    }

    // optional uint32 house_price = 6;
    if (has_house_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->house_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User_Demographic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_User_Demographic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_User_Demographic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_User_Demographic::MergeFrom(const BidRequest_User_Demographic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_education()) {
      set_education(from.education());
    }
    if (from.has_age_low()) {
      set_age_low(from.age_low());
    }
    if (from.has_age_high()) {
      set_age_high(from.age_high());
    }
    if (from.has_consume_level()) {
      set_consume_level(from.consume_level());
    }
    if (from.has_house_price()) {
      set_house_price(from.house_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_User_Demographic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User_Demographic::CopyFrom(const BidRequest_User_Demographic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User_Demographic::IsInitialized() const {

  return true;
}

void BidRequest_User_Demographic::Swap(BidRequest_User_Demographic* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(education_, other->education_);
    std::swap(age_low_, other->age_low_);
    std::swap(age_high_, other->age_high_);
    std::swap(consume_level_, other->consume_level_);
    std::swap(house_price_, other->house_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_User_Demographic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_Demographic_descriptor_;
  metadata.reflection = BidRequest_User_Demographic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_User_Vertical::kIdFieldNumber;
const int BidRequest_User_Vertical::kWeightFieldNumber;
#endif  // !_MSC_VER

BidRequest_User_Vertical::BidRequest_User_Vertical()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidRequest.User.Vertical)
}

void BidRequest_User_Vertical::InitAsDefaultInstance() {
}

BidRequest_User_Vertical::BidRequest_User_Vertical(const BidRequest_User_Vertical& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidRequest.User.Vertical)
}

void BidRequest_User_Vertical::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User_Vertical::~BidRequest_User_Vertical() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidRequest.User.Vertical)
  SharedDtor();
}

void BidRequest_User_Vertical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_User_Vertical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User_Vertical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Vertical_descriptor_;
}

const BidRequest_User_Vertical& BidRequest_User_Vertical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidRequest_User_Vertical* BidRequest_User_Vertical::default_instance_ = NULL;

BidRequest_User_Vertical* BidRequest_User_Vertical::New() const {
  return new BidRequest_User_Vertical;
}

void BidRequest_User_Vertical::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_User_Vertical*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, weight_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_User_Vertical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidRequest.User.Vertical)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_weight;
        break;
      }

      // optional float weight = 2;
      case 2: {
        if (tag == 21) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidRequest.User.Vertical)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidRequest.User.Vertical)
  return false;
#undef DO_
}

void BidRequest_User_Vertical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidRequest.User.Vertical)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional float weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidRequest.User.Vertical)
}

::google::protobuf::uint8* BidRequest_User_Vertical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidRequest.User.Vertical)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional float weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidRequest.User.Vertical)
  return target;
}

int BidRequest_User_Vertical::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional float weight = 2;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User_Vertical::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_User_Vertical* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_User_Vertical*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_User_Vertical::MergeFrom(const BidRequest_User_Vertical& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_User_Vertical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User_Vertical::CopyFrom(const BidRequest_User_Vertical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User_Vertical::IsInitialized() const {

  return true;
}

void BidRequest_User_Vertical::Swap(BidRequest_User_Vertical* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_User_Vertical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_Vertical_descriptor_;
  metadata.reflection = BidRequest_User_Vertical_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_User::kIdFieldNumber;
const int BidRequest_User::kUserDemographicFieldNumber;
const int BidRequest_User::kVerticalsFieldNumber;
#endif  // !_MSC_VER

BidRequest_User::BidRequest_User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidRequest.User)
}

void BidRequest_User::InitAsDefaultInstance() {
  user_demographic_ = const_cast< ::gdt::adx::BidRequest_User_Demographic*>(&::gdt::adx::BidRequest_User_Demographic::default_instance());
}

BidRequest_User::BidRequest_User(const BidRequest_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidRequest.User)
}

void BidRequest_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_demographic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User::~BidRequest_User() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidRequest.User)
  SharedDtor();
}

void BidRequest_User::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete user_demographic_;
  }
}

void BidRequest_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_descriptor_;
}

const BidRequest_User& BidRequest_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidRequest_User* BidRequest_User::default_instance_ = NULL;

BidRequest_User* BidRequest_User::New() const {
  return new BidRequest_User;
}

void BidRequest_User::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_user_demographic()) {
      if (user_demographic_ != NULL) user_demographic_->::gdt::adx::BidRequest_User_Demographic::Clear();
    }
  }
  verticals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidRequest.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_demographic;
        break;
      }

      // optional .gdt.adx.BidRequest.User.Demographic user_demographic = 2;
      case 2: {
        if (tag == 18) {
         parse_user_demographic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_demographic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_verticals;
        break;
      }

      // repeated .gdt.adx.BidRequest.User.Vertical verticals = 3;
      case 3: {
        if (tag == 26) {
         parse_verticals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_verticals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_verticals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidRequest.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidRequest.User)
  return false;
#undef DO_
}

void BidRequest_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidRequest.User)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .gdt.adx.BidRequest.User.Demographic user_demographic = 2;
  if (has_user_demographic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_demographic(), output);
  }

  // repeated .gdt.adx.BidRequest.User.Vertical verticals = 3;
  for (int i = 0; i < this->verticals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->verticals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidRequest.User)
}

::google::protobuf::uint8* BidRequest_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidRequest.User)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .gdt.adx.BidRequest.User.Demographic user_demographic = 2;
  if (has_user_demographic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_demographic(), target);
  }

  // repeated .gdt.adx.BidRequest.User.Vertical verticals = 3;
  for (int i = 0; i < this->verticals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->verticals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidRequest.User)
  return target;
}

int BidRequest_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .gdt.adx.BidRequest.User.Demographic user_demographic = 2;
    if (has_user_demographic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_demographic());
    }

  }
  // repeated .gdt.adx.BidRequest.User.Vertical verticals = 3;
  total_size += 1 * this->verticals_size();
  for (int i = 0; i < this->verticals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->verticals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_User::MergeFrom(const BidRequest_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  verticals_.MergeFrom(from.verticals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_demographic()) {
      mutable_user_demographic()->::gdt::adx::BidRequest_User_Demographic::MergeFrom(from.user_demographic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User::CopyFrom(const BidRequest_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User::IsInitialized() const {

  return true;
}

void BidRequest_User::Swap(BidRequest_User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_demographic_, other->user_demographic_);
    verticals_.Swap(&other->verticals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_descriptor_;
  metadata.reflection = BidRequest_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Geo::kLatitudeFieldNumber;
const int BidRequest_Geo::kLongitudeFieldNumber;
const int BidRequest_Geo::kAccuracyFieldNumber;
#endif  // !_MSC_VER

BidRequest_Geo::BidRequest_Geo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidRequest.Geo)
}

void BidRequest_Geo::InitAsDefaultInstance() {
}

BidRequest_Geo::BidRequest_Geo(const BidRequest_Geo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidRequest.Geo)
}

void BidRequest_Geo::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  accuracy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo::~BidRequest_Geo() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidRequest.Geo)
  SharedDtor();
}

void BidRequest_Geo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_descriptor_;
}

const BidRequest_Geo& BidRequest_Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidRequest_Geo* BidRequest_Geo::default_instance_ = NULL;

BidRequest_Geo* BidRequest_Geo::New() const {
  return new BidRequest_Geo;
}

void BidRequest_Geo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest_Geo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(latitude_, accuracy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidRequest.Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 latitude = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_longitude;
        break;
      }

      // optional int32 longitude = 2;
      case 2: {
        if (tag == 16) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_accuracy;
        break;
      }

      // optional double accuracy = 3;
      case 3: {
        if (tag == 25) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidRequest.Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidRequest.Geo)
  return false;
#undef DO_
}

void BidRequest_Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidRequest.Geo)
  // optional int32 latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->latitude(), output);
  }

  // optional int32 longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->longitude(), output);
  }

  // optional double accuracy = 3;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->accuracy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidRequest.Geo)
}

::google::protobuf::uint8* BidRequest_Geo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidRequest.Geo)
  // optional int32 latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->latitude(), target);
  }

  // optional int32 longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->longitude(), target);
  }

  // optional double accuracy = 3;
  if (has_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->accuracy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidRequest.Geo)
  return target;
}

int BidRequest_Geo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 latitude = 1;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude());
    }

    // optional int32 longitude = 2;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude());
    }

    // optional double accuracy = 3;
    if (has_accuracy()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Geo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Geo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Geo::MergeFrom(const BidRequest_Geo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Geo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo::CopyFrom(const BidRequest_Geo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo::IsInitialized() const {

  return true;
}

void BidRequest_Geo::Swap(BidRequest_Geo* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_descriptor_;
  metadata.reflection = BidRequest_Geo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_App::kIndustryIdFieldNumber;
const int BidRequest_App::kAppBundleIdFieldNumber;
#endif  // !_MSC_VER

BidRequest_App::BidRequest_App()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidRequest.App)
}

void BidRequest_App::InitAsDefaultInstance() {
}

BidRequest_App::BidRequest_App(const BidRequest_App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidRequest.App)
}

void BidRequest_App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  industry_id_ = GOOGLE_LONGLONG(0);
  app_bundle_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_App::~BidRequest_App() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidRequest.App)
  SharedDtor();
}

void BidRequest_App::SharedDtor() {
  if (app_bundle_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_bundle_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_App_descriptor_;
}

const BidRequest_App& BidRequest_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidRequest_App* BidRequest_App::default_instance_ = NULL;

BidRequest_App* BidRequest_App::New() const {
  return new BidRequest_App;
}

void BidRequest_App::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    industry_id_ = GOOGLE_LONGLONG(0);
    if (has_app_bundle_id()) {
      if (app_bundle_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_bundle_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidRequest.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 industry_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &industry_id_)));
          set_has_industry_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_bundle_id;
        break;
      }

      // optional string app_bundle_id = 2;
      case 2: {
        if (tag == 18) {
         parse_app_bundle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_bundle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_bundle_id().data(), this->app_bundle_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_bundle_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidRequest.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidRequest.App)
  return false;
#undef DO_
}

void BidRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidRequest.App)
  // optional int64 industry_id = 1;
  if (has_industry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->industry_id(), output);
  }

  // optional string app_bundle_id = 2;
  if (has_app_bundle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_bundle_id().data(), this->app_bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_bundle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_bundle_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidRequest.App)
}

::google::protobuf::uint8* BidRequest_App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidRequest.App)
  // optional int64 industry_id = 1;
  if (has_industry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->industry_id(), target);
  }

  // optional string app_bundle_id = 2;
  if (has_app_bundle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_bundle_id().data(), this->app_bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_bundle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_bundle_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidRequest.App)
  return target;
}

int BidRequest_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 industry_id = 1;
    if (has_industry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->industry_id());
    }

    // optional string app_bundle_id = 2;
    if (has_app_bundle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_bundle_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_App::MergeFrom(const BidRequest_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_industry_id()) {
      set_industry_id(from.industry_id());
    }
    if (from.has_app_bundle_id()) {
      set_app_bundle_id(from.app_bundle_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_App::CopyFrom(const BidRequest_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_App::IsInitialized() const {

  return true;
}

void BidRequest_App::Swap(BidRequest_App* other) {
  if (other != this) {
    std::swap(industry_id_, other->industry_id_);
    std::swap(app_bundle_id_, other->app_bundle_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_App_descriptor_;
  metadata.reflection = BidRequest_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest::kIdFieldNumber;
const int BidRequest::kIsPingFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kImpressionsFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kAreaCodeFieldNumber;
const int BidRequest::kUserFieldNumber;
const int BidRequest::kGeoFieldNumber;
const int BidRequest::kAppFieldNumber;
const int BidRequest::kBossQqFieldNumber;
const int BidRequest::kSupportDeepLinkFieldNumber;
const int BidRequest::kWxFlowClassFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  device_ = const_cast< ::gdt::adx::BidRequest_Device*>(&::gdt::adx::BidRequest_Device::default_instance());
  user_ = const_cast< ::gdt::adx::BidRequest_User*>(&::gdt::adx::BidRequest_User::default_instance());
  geo_ = const_cast< ::gdt::adx::BidRequest_Geo*>(&::gdt::adx::BidRequest_Geo::default_instance());
  app_ = const_cast< ::gdt::adx::BidRequest_App*>(&::gdt::adx::BidRequest_App::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_ping_ = false;
  is_test_ = false;
  device_ = NULL;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_code_ = 0;
  user_ = NULL;
  geo_ = NULL;
  app_ = NULL;
  boss_qq_ = GOOGLE_ULONGLONG(0);
  support_deep_link_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete device_;
    delete user_;
    delete geo_;
    delete app_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(is_ping_, is_test_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_device()) {
      if (device_ != NULL) device_->::gdt::adx::BidRequest_Device::Clear();
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    area_code_ = 0;
    if (has_user()) {
      if (user_ != NULL) user_->::gdt::adx::BidRequest_User::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_geo()) {
      if (geo_ != NULL) geo_->::gdt::adx::BidRequest_Geo::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::gdt::adx::BidRequest_App::Clear();
    }
    boss_qq_ = GOOGLE_ULONGLONG(0);
    support_deep_link_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  impressions_.Clear();
  wx_flow_class_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_ping;
        break;
      }

      // optional bool is_ping = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_test;
        break;
      }

      // optional bool is_test = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_impressions;
        break;
      }

      // repeated .gdt.adx.BidRequest.Impression impressions = 4;
      case 4: {
        if (tag == 34) {
         parse_impressions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_impressions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_impressions;
        if (input->ExpectTag(42)) goto parse_device;
        break;
      }

      // optional .gdt.adx.BidRequest.Device device = 5;
      case 5: {
        if (tag == 42) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (tag == 50) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_area_code;
        break;
      }

      // optional int32 area_code = 7;
      case 7: {
        if (tag == 56) {
         parse_area_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_code_)));
          set_has_area_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user;
        break;
      }

      // optional .gdt.adx.BidRequest.User user = 8;
      case 8: {
        if (tag == 66) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_geo;
        break;
      }

      // optional .gdt.adx.BidRequest.Geo geo = 9;
      case 9: {
        if (tag == 74) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_app;
        break;
      }

      // optional .gdt.adx.BidRequest.App app = 10;
      case 10: {
        if (tag == 82) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_boss_qq;
        break;
      }

      // optional uint64 boss_qq = 11;
      case 11: {
        if (tag == 88) {
         parse_boss_qq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boss_qq_)));
          set_has_boss_qq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_support_deep_link;
        break;
      }

      // optional bool support_deep_link = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_support_deep_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &support_deep_link_)));
          set_has_support_deep_link();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_wx_flow_class;
        break;
      }

      // repeated uint64 wx_flow_class = 13;
      case 13: {
        if (tag == 104) {
         parse_wx_flow_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 104, input, this->mutable_wx_flow_class())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_wx_flow_class())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_wx_flow_class;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidRequest)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional bool is_ping = 2 [default = false];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_ping(), output);
  }

  // optional bool is_test = 3 [default = false];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_test(), output);
  }

  // repeated .gdt.adx.BidRequest.Impression impressions = 4;
  for (int i = 0; i < this->impressions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->impressions(i), output);
  }

  // optional .gdt.adx.BidRequest.Device device = 5;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ip(), output);
  }

  // optional int32 area_code = 7;
  if (has_area_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->area_code(), output);
  }

  // optional .gdt.adx.BidRequest.User user = 8;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->user(), output);
  }

  // optional .gdt.adx.BidRequest.Geo geo = 9;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->geo(), output);
  }

  // optional .gdt.adx.BidRequest.App app = 10;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->app(), output);
  }

  // optional uint64 boss_qq = 11;
  if (has_boss_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->boss_qq(), output);
  }

  // optional bool support_deep_link = 12 [default = false];
  if (has_support_deep_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->support_deep_link(), output);
  }

  // repeated uint64 wx_flow_class = 13;
  for (int i = 0; i < this->wx_flow_class_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      13, this->wx_flow_class(i), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidRequest)
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidRequest)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bool is_ping = 2 [default = false];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_ping(), target);
  }

  // optional bool is_test = 3 [default = false];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_test(), target);
  }

  // repeated .gdt.adx.BidRequest.Impression impressions = 4;
  for (int i = 0; i < this->impressions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->impressions(i), target);
  }

  // optional .gdt.adx.BidRequest.Device device = 5;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional int32 area_code = 7;
  if (has_area_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->area_code(), target);
  }

  // optional .gdt.adx.BidRequest.User user = 8;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->user(), target);
  }

  // optional .gdt.adx.BidRequest.Geo geo = 9;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->geo(), target);
  }

  // optional .gdt.adx.BidRequest.App app = 10;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->app(), target);
  }

  // optional uint64 boss_qq = 11;
  if (has_boss_qq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->boss_qq(), target);
  }

  // optional bool support_deep_link = 12 [default = false];
  if (has_support_deep_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->support_deep_link(), target);
  }

  // repeated uint64 wx_flow_class = 13;
  for (int i = 0; i < this->wx_flow_class_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(13, this->wx_flow_class(i), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bool is_ping = 2 [default = false];
    if (has_is_ping()) {
      total_size += 1 + 1;
    }

    // optional bool is_test = 3 [default = false];
    if (has_is_test()) {
      total_size += 1 + 1;
    }

    // optional .gdt.adx.BidRequest.Device device = 5;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 area_code = 7;
    if (has_area_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_code());
    }

    // optional .gdt.adx.BidRequest.User user = 8;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .gdt.adx.BidRequest.Geo geo = 9;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // optional .gdt.adx.BidRequest.App app = 10;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

    // optional uint64 boss_qq = 11;
    if (has_boss_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boss_qq());
    }

    // optional bool support_deep_link = 12 [default = false];
    if (has_support_deep_link()) {
      total_size += 1 + 1;
    }

  }
  // repeated .gdt.adx.BidRequest.Impression impressions = 4;
  total_size += 1 * this->impressions_size();
  for (int i = 0; i < this->impressions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->impressions(i));
  }

  // repeated uint64 wx_flow_class = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->wx_flow_class_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->wx_flow_class(i));
    }
    total_size += 1 * this->wx_flow_class_size() + data_size;
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  impressions_.MergeFrom(from.impressions_);
  wx_flow_class_.MergeFrom(from.wx_flow_class_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_device()) {
      mutable_device()->::gdt::adx::BidRequest_Device::MergeFrom(from.device());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_area_code()) {
      set_area_code(from.area_code());
    }
    if (from.has_user()) {
      mutable_user()->::gdt::adx::BidRequest_User::MergeFrom(from.user());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_geo()) {
      mutable_geo()->::gdt::adx::BidRequest_Geo::MergeFrom(from.geo());
    }
    if (from.has_app()) {
      mutable_app()->::gdt::adx::BidRequest_App::MergeFrom(from.app());
    }
    if (from.has_boss_qq()) {
      set_boss_qq(from.boss_qq());
    }
    if (from.has_support_deep_link()) {
      set_support_deep_link(from.support_deep_link());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_ping_, other->is_ping_);
    std::swap(is_test_, other->is_test_);
    impressions_.Swap(&other->impressions_);
    std::swap(device_, other->device_);
    std::swap(ip_, other->ip_);
    std::swap(area_code_, other->area_code_);
    std::swap(user_, other->user_);
    std::swap(geo_, other->geo_);
    std::swap(app_, other->app_);
    std::swap(boss_qq_, other->boss_qq_);
    std::swap(support_deep_link_, other->support_deep_link_);
    wx_flow_class_.Swap(&other->wx_flow_class_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse_Bid_DynamicCreative_ProductInfo::kProductIdFieldNumber;
const int BidResponse_Bid_DynamicCreative_ProductInfo::kProductIndustryFieldNumber;
const int BidResponse_Bid_DynamicCreative_ProductInfo::kProductCategoryFieldNumber;
const int BidResponse_Bid_DynamicCreative_ProductInfo::kProductNameFieldNumber;
const int BidResponse_Bid_DynamicCreative_ProductInfo::kProductDescriptionFieldNumber;
const int BidResponse_Bid_DynamicCreative_ProductInfo::kProductMultimediaUrlFieldNumber;
#endif  // !_MSC_VER

BidResponse_Bid_DynamicCreative_ProductInfo::BidResponse_Bid_DynamicCreative_ProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
}

void BidResponse_Bid_DynamicCreative_ProductInfo::InitAsDefaultInstance() {
}

BidResponse_Bid_DynamicCreative_ProductInfo::BidResponse_Bid_DynamicCreative_ProductInfo(const BidResponse_Bid_DynamicCreative_ProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
}

void BidResponse_Bid_DynamicCreative_ProductInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_industry_ = GOOGLE_LONGLONG(0);
  product_category_ = GOOGLE_LONGLONG(0);
  product_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_multimedia_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Bid_DynamicCreative_ProductInfo::~BidResponse_Bid_DynamicCreative_ProductInfo() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
  SharedDtor();
}

void BidResponse_Bid_DynamicCreative_ProductInfo::SharedDtor() {
  if (product_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete product_id_;
  }
  if (product_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete product_name_;
  }
  if (product_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete product_description_;
  }
  if (product_multimedia_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete product_multimedia_url_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Bid_DynamicCreative_ProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Bid_DynamicCreative_ProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Bid_DynamicCreative_ProductInfo_descriptor_;
}

const BidResponse_Bid_DynamicCreative_ProductInfo& BidResponse_Bid_DynamicCreative_ProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidResponse_Bid_DynamicCreative_ProductInfo* BidResponse_Bid_DynamicCreative_ProductInfo::default_instance_ = NULL;

BidResponse_Bid_DynamicCreative_ProductInfo* BidResponse_Bid_DynamicCreative_ProductInfo::New() const {
  return new BidResponse_Bid_DynamicCreative_ProductInfo;
}

void BidResponse_Bid_DynamicCreative_ProductInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_Bid_DynamicCreative_ProductInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(product_industry_, product_category_);
    if (has_product_id()) {
      if (product_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        product_id_->clear();
      }
    }
    if (has_product_name()) {
      if (product_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        product_name_->clear();
      }
    }
    if (has_product_description()) {
      if (product_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        product_description_->clear();
      }
    }
    if (has_product_multimedia_url()) {
      if (product_multimedia_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        product_multimedia_url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Bid_DynamicCreative_ProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_id().data(), this->product_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "product_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_product_industry;
        break;
      }

      // optional int64 product_industry = 2;
      case 2: {
        if (tag == 16) {
         parse_product_industry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &product_industry_)));
          set_has_product_industry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_product_category;
        break;
      }

      // optional int64 product_category = 3;
      case 3: {
        if (tag == 24) {
         parse_product_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &product_category_)));
          set_has_product_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_product_name;
        break;
      }

      // optional string product_name = 4;
      case 4: {
        if (tag == 34) {
         parse_product_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_name().data(), this->product_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "product_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_product_description;
        break;
      }

      // optional string product_description = 5;
      case 5: {
        if (tag == 42) {
         parse_product_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_description().data(), this->product_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "product_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_product_multimedia_url;
        break;
      }

      // optional string product_multimedia_url = 6;
      case 6: {
        if (tag == 50) {
         parse_product_multimedia_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_multimedia_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_multimedia_url().data(), this->product_multimedia_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "product_multimedia_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
  return false;
#undef DO_
}

void BidResponse_Bid_DynamicCreative_ProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
  // optional string product_id = 1;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_id(), output);
  }

  // optional int64 product_industry = 2;
  if (has_product_industry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->product_industry(), output);
  }

  // optional int64 product_category = 3;
  if (has_product_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->product_category(), output);
  }

  // optional string product_name = 4;
  if (has_product_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->product_name(), output);
  }

  // optional string product_description = 5;
  if (has_product_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_description().data(), this->product_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->product_description(), output);
  }

  // optional string product_multimedia_url = 6;
  if (has_product_multimedia_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_multimedia_url().data(), this->product_multimedia_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product_multimedia_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->product_multimedia_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
}

::google::protobuf::uint8* BidResponse_Bid_DynamicCreative_ProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
  // optional string product_id = 1;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_id(), target);
  }

  // optional int64 product_industry = 2;
  if (has_product_industry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->product_industry(), target);
  }

  // optional int64 product_category = 3;
  if (has_product_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->product_category(), target);
  }

  // optional string product_name = 4;
  if (has_product_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->product_name(), target);
  }

  // optional string product_description = 5;
  if (has_product_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_description().data(), this->product_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->product_description(), target);
  }

  // optional string product_multimedia_url = 6;
  if (has_product_multimedia_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_multimedia_url().data(), this->product_multimedia_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product_multimedia_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->product_multimedia_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo)
  return target;
}

int BidResponse_Bid_DynamicCreative_ProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string product_id = 1;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_id());
    }

    // optional int64 product_industry = 2;
    if (has_product_industry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->product_industry());
    }

    // optional int64 product_category = 3;
    if (has_product_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->product_category());
    }

    // optional string product_name = 4;
    if (has_product_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_name());
    }

    // optional string product_description = 5;
    if (has_product_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_description());
    }

    // optional string product_multimedia_url = 6;
    if (has_product_multimedia_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_multimedia_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Bid_DynamicCreative_ProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Bid_DynamicCreative_ProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Bid_DynamicCreative_ProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Bid_DynamicCreative_ProductInfo::MergeFrom(const BidResponse_Bid_DynamicCreative_ProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_product_industry()) {
      set_product_industry(from.product_industry());
    }
    if (from.has_product_category()) {
      set_product_category(from.product_category());
    }
    if (from.has_product_name()) {
      set_product_name(from.product_name());
    }
    if (from.has_product_description()) {
      set_product_description(from.product_description());
    }
    if (from.has_product_multimedia_url()) {
      set_product_multimedia_url(from.product_multimedia_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Bid_DynamicCreative_ProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Bid_DynamicCreative_ProductInfo::CopyFrom(const BidResponse_Bid_DynamicCreative_ProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Bid_DynamicCreative_ProductInfo::IsInitialized() const {

  return true;
}

void BidResponse_Bid_DynamicCreative_ProductInfo::Swap(BidResponse_Bid_DynamicCreative_ProductInfo* other) {
  if (other != this) {
    std::swap(product_id_, other->product_id_);
    std::swap(product_industry_, other->product_industry_);
    std::swap(product_category_, other->product_category_);
    std::swap(product_name_, other->product_name_);
    std::swap(product_description_, other->product_description_);
    std::swap(product_multimedia_url_, other->product_multimedia_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Bid_DynamicCreative_ProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Bid_DynamicCreative_ProductInfo_descriptor_;
  metadata.reflection = BidResponse_Bid_DynamicCreative_ProductInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_Bid_DynamicCreative::kHtmlSnippetFieldNumber;
const int BidResponse_Bid_DynamicCreative::kSupportGdtHelperJsFieldNumber;
const int BidResponse_Bid_DynamicCreative::kProductInfosFieldNumber;
const int BidResponse_Bid_DynamicCreative::kClickUrlDomainWhitelistFieldNumber;
#endif  // !_MSC_VER

BidResponse_Bid_DynamicCreative::BidResponse_Bid_DynamicCreative()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidResponse.Bid.DynamicCreative)
}

void BidResponse_Bid_DynamicCreative::InitAsDefaultInstance() {
}

BidResponse_Bid_DynamicCreative::BidResponse_Bid_DynamicCreative(const BidResponse_Bid_DynamicCreative& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidResponse.Bid.DynamicCreative)
}

void BidResponse_Bid_DynamicCreative::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  support_gdt_helper_js_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Bid_DynamicCreative::~BidResponse_Bid_DynamicCreative() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidResponse.Bid.DynamicCreative)
  SharedDtor();
}

void BidResponse_Bid_DynamicCreative::SharedDtor() {
  if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete html_snippet_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Bid_DynamicCreative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Bid_DynamicCreative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Bid_DynamicCreative_descriptor_;
}

const BidResponse_Bid_DynamicCreative& BidResponse_Bid_DynamicCreative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidResponse_Bid_DynamicCreative* BidResponse_Bid_DynamicCreative::default_instance_ = NULL;

BidResponse_Bid_DynamicCreative* BidResponse_Bid_DynamicCreative::New() const {
  return new BidResponse_Bid_DynamicCreative;
}

void BidResponse_Bid_DynamicCreative::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_html_snippet()) {
      if (html_snippet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        html_snippet_->clear();
      }
    }
    support_gdt_helper_js_ = false;
  }
  product_infos_.Clear();
  click_url_domain_whitelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Bid_DynamicCreative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidResponse.Bid.DynamicCreative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string html_snippet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html_snippet().data(), this->html_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "html_snippet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_support_gdt_helper_js;
        break;
      }

      // optional bool support_gdt_helper_js = 2;
      case 2: {
        if (tag == 16) {
         parse_support_gdt_helper_js:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &support_gdt_helper_js_)));
          set_has_support_gdt_helper_js();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_product_infos;
        break;
      }

      // repeated .gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo product_infos = 3;
      case 3: {
        if (tag == 26) {
         parse_product_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_product_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_product_infos;
        if (input->ExpectTag(34)) goto parse_click_url_domain_whitelist;
        break;
      }

      // repeated string click_url_domain_whitelist = 4;
      case 4: {
        if (tag == 34) {
         parse_click_url_domain_whitelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_url_domain_whitelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_url_domain_whitelist(this->click_url_domain_whitelist_size() - 1).data(),
            this->click_url_domain_whitelist(this->click_url_domain_whitelist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_url_domain_whitelist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_click_url_domain_whitelist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidResponse.Bid.DynamicCreative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidResponse.Bid.DynamicCreative)
  return false;
#undef DO_
}

void BidResponse_Bid_DynamicCreative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidResponse.Bid.DynamicCreative)
  // optional string html_snippet = 1;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "html_snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->html_snippet(), output);
  }

  // optional bool support_gdt_helper_js = 2;
  if (has_support_gdt_helper_js()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->support_gdt_helper_js(), output);
  }

  // repeated .gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo product_infos = 3;
  for (int i = 0; i < this->product_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->product_infos(i), output);
  }

  // repeated string click_url_domain_whitelist = 4;
  for (int i = 0; i < this->click_url_domain_whitelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->click_url_domain_whitelist(i).data(), this->click_url_domain_whitelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "click_url_domain_whitelist");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->click_url_domain_whitelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidResponse.Bid.DynamicCreative)
}

::google::protobuf::uint8* BidResponse_Bid_DynamicCreative::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidResponse.Bid.DynamicCreative)
  // optional string html_snippet = 1;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "html_snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->html_snippet(), target);
  }

  // optional bool support_gdt_helper_js = 2;
  if (has_support_gdt_helper_js()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->support_gdt_helper_js(), target);
  }

  // repeated .gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo product_infos = 3;
  for (int i = 0; i < this->product_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->product_infos(i), target);
  }

  // repeated string click_url_domain_whitelist = 4;
  for (int i = 0; i < this->click_url_domain_whitelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_url_domain_whitelist(i).data(), this->click_url_domain_whitelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_url_domain_whitelist");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->click_url_domain_whitelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidResponse.Bid.DynamicCreative)
  return target;
}

int BidResponse_Bid_DynamicCreative::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string html_snippet = 1;
    if (has_html_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->html_snippet());
    }

    // optional bool support_gdt_helper_js = 2;
    if (has_support_gdt_helper_js()) {
      total_size += 1 + 1;
    }

  }
  // repeated .gdt.adx.BidResponse.Bid.DynamicCreative.ProductInfo product_infos = 3;
  total_size += 1 * this->product_infos_size();
  for (int i = 0; i < this->product_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->product_infos(i));
  }

  // repeated string click_url_domain_whitelist = 4;
  total_size += 1 * this->click_url_domain_whitelist_size();
  for (int i = 0; i < this->click_url_domain_whitelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_url_domain_whitelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Bid_DynamicCreative::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Bid_DynamicCreative* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Bid_DynamicCreative*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Bid_DynamicCreative::MergeFrom(const BidResponse_Bid_DynamicCreative& from) {
  GOOGLE_CHECK_NE(&from, this);
  product_infos_.MergeFrom(from.product_infos_);
  click_url_domain_whitelist_.MergeFrom(from.click_url_domain_whitelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_html_snippet()) {
      set_html_snippet(from.html_snippet());
    }
    if (from.has_support_gdt_helper_js()) {
      set_support_gdt_helper_js(from.support_gdt_helper_js());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Bid_DynamicCreative::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Bid_DynamicCreative::CopyFrom(const BidResponse_Bid_DynamicCreative& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Bid_DynamicCreative::IsInitialized() const {

  return true;
}

void BidResponse_Bid_DynamicCreative::Swap(BidResponse_Bid_DynamicCreative* other) {
  if (other != this) {
    std::swap(html_snippet_, other->html_snippet_);
    std::swap(support_gdt_helper_js_, other->support_gdt_helper_js_);
    product_infos_.Swap(&other->product_infos_);
    click_url_domain_whitelist_.Swap(&other->click_url_domain_whitelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Bid_DynamicCreative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Bid_DynamicCreative_descriptor_;
  metadata.reflection = BidResponse_Bid_DynamicCreative_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_Bid::kCreativeIdFieldNumber;
const int BidResponse_Bid::kBidPriceFieldNumber;
const int BidResponse_Bid::kImpressionParamFieldNumber;
const int BidResponse_Bid::kClickParamFieldNumber;
const int BidResponse_Bid::kDynamicCreativeFieldNumber;
const int BidResponse_Bid::kAppFilterFieldNumber;
#endif  // !_MSC_VER

BidResponse_Bid::BidResponse_Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidResponse.Bid)
}

void BidResponse_Bid::InitAsDefaultInstance() {
  dynamic_creative_ = const_cast< ::gdt::adx::BidResponse_Bid_DynamicCreative*>(&::gdt::adx::BidResponse_Bid_DynamicCreative::default_instance());
}

BidResponse_Bid::BidResponse_Bid(const BidResponse_Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidResponse.Bid)
}

void BidResponse_Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_price_ = 0;
  impression_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  click_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamic_creative_ = NULL;
  app_filter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Bid::~BidResponse_Bid() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidResponse.Bid)
  SharedDtor();
}

void BidResponse_Bid::SharedDtor() {
  if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creative_id_;
  }
  if (impression_param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impression_param_;
  }
  if (click_param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete click_param_;
  }
  if (this != default_instance_) {
    delete dynamic_creative_;
  }
}

void BidResponse_Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Bid_descriptor_;
}

const BidResponse_Bid& BidResponse_Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidResponse_Bid* BidResponse_Bid::default_instance_ = NULL;

BidResponse_Bid* BidResponse_Bid::New() const {
  return new BidResponse_Bid;
}

void BidResponse_Bid::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BidResponse_Bid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(bid_price_, app_filter_);
    if (has_creative_id()) {
      if (creative_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creative_id_->clear();
      }
    }
    if (has_impression_param()) {
      if (impression_param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        impression_param_->clear();
      }
    }
    if (has_click_param()) {
      if (click_param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        click_param_->clear();
      }
    }
    if (has_dynamic_creative()) {
      if (dynamic_creative_ != NULL) dynamic_creative_->::gdt::adx::BidResponse_Bid_DynamicCreative::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidResponse.Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string creative_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->creative_id().data(), this->creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "creative_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bid_price;
        break;
      }

      // optional int32 bid_price = 2;
      case 2: {
        if (tag == 16) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_price_)));
          set_has_bid_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_impression_param;
        break;
      }

      // optional string impression_param = 3;
      case 3: {
        if (tag == 26) {
         parse_impression_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impression_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impression_param().data(), this->impression_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impression_param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_click_param;
        break;
      }

      // optional string click_param = 4;
      case 4: {
        if (tag == 34) {
         parse_click_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_click_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_param().data(), this->click_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "click_param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dynamic_creative;
        break;
      }

      // optional .gdt.adx.BidResponse.Bid.DynamicCreative dynamic_creative = 5;
      case 5: {
        if (tag == 42) {
         parse_dynamic_creative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dynamic_creative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_app_filter;
        break;
      }

      // optional bool app_filter = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_app_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &app_filter_)));
          set_has_app_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidResponse.Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidResponse.Bid)
  return false;
#undef DO_
}

void BidResponse_Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidResponse.Bid)
  // optional string creative_id = 1;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "creative_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->creative_id(), output);
  }

  // optional int32 bid_price = 2;
  if (has_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bid_price(), output);
  }

  // optional string impression_param = 3;
  if (has_impression_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impression_param().data(), this->impression_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impression_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->impression_param(), output);
  }

  // optional string click_param = 4;
  if (has_click_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_param().data(), this->click_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->click_param(), output);
  }

  // optional .gdt.adx.BidResponse.Bid.DynamicCreative dynamic_creative = 5;
  if (has_dynamic_creative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dynamic_creative(), output);
  }

  // optional bool app_filter = 6 [default = false];
  if (has_app_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->app_filter(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidResponse.Bid)
}

::google::protobuf::uint8* BidResponse_Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidResponse.Bid)
  // optional string creative_id = 1;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "creative_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->creative_id(), target);
  }

  // optional int32 bid_price = 2;
  if (has_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bid_price(), target);
  }

  // optional string impression_param = 3;
  if (has_impression_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impression_param().data(), this->impression_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impression_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->impression_param(), target);
  }

  // optional string click_param = 4;
  if (has_click_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_param().data(), this->click_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "click_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->click_param(), target);
  }

  // optional .gdt.adx.BidResponse.Bid.DynamicCreative dynamic_creative = 5;
  if (has_dynamic_creative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dynamic_creative(), target);
  }

  // optional bool app_filter = 6 [default = false];
  if (has_app_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->app_filter(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidResponse.Bid)
  return target;
}

int BidResponse_Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string creative_id = 1;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_id());
    }

    // optional int32 bid_price = 2;
    if (has_bid_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_price());
    }

    // optional string impression_param = 3;
    if (has_impression_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impression_param());
    }

    // optional string click_param = 4;
    if (has_click_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->click_param());
    }

    // optional .gdt.adx.BidResponse.Bid.DynamicCreative dynamic_creative = 5;
    if (has_dynamic_creative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dynamic_creative());
    }

    // optional bool app_filter = 6 [default = false];
    if (has_app_filter()) {
      total_size += 1 + 1;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Bid::MergeFrom(const BidResponse_Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
    if (from.has_bid_price()) {
      set_bid_price(from.bid_price());
    }
    if (from.has_impression_param()) {
      set_impression_param(from.impression_param());
    }
    if (from.has_click_param()) {
      set_click_param(from.click_param());
    }
    if (from.has_dynamic_creative()) {
      mutable_dynamic_creative()->::gdt::adx::BidResponse_Bid_DynamicCreative::MergeFrom(from.dynamic_creative());
    }
    if (from.has_app_filter()) {
      set_app_filter(from.app_filter());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Bid::CopyFrom(const BidResponse_Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Bid::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse_Bid::Swap(BidResponse_Bid* other) {
  if (other != this) {
    std::swap(creative_id_, other->creative_id_);
    std::swap(bid_price_, other->bid_price_);
    std::swap(impression_param_, other->impression_param_);
    std::swap(click_param_, other->click_param_);
    std::swap(dynamic_creative_, other->dynamic_creative_);
    std::swap(app_filter_, other->app_filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidResponse_Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Bid_descriptor_;
  metadata.reflection = BidResponse_Bid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_SeatBid::kImpressionIdFieldNumber;
const int BidResponse_SeatBid::kBidsFieldNumber;
#endif  // !_MSC_VER

BidResponse_SeatBid::BidResponse_SeatBid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidResponse.SeatBid)
}

void BidResponse_SeatBid::InitAsDefaultInstance() {
}

BidResponse_SeatBid::BidResponse_SeatBid(const BidResponse_SeatBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidResponse.SeatBid)
}

void BidResponse_SeatBid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  impression_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid::~BidResponse_SeatBid() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidResponse.SeatBid)
  SharedDtor();
}

void BidResponse_SeatBid::SharedDtor() {
  if (impression_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete impression_id_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_descriptor_;
}

const BidResponse_SeatBid& BidResponse_SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid* BidResponse_SeatBid::default_instance_ = NULL;

BidResponse_SeatBid* BidResponse_SeatBid::New() const {
  return new BidResponse_SeatBid;
}

void BidResponse_SeatBid::Clear() {
  if (has_impression_id()) {
    if (impression_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      impression_id_->clear();
    }
  }
  bids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidResponse.SeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string impression_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impression_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impression_id().data(), this->impression_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "impression_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bids;
        break;
      }

      // repeated .gdt.adx.BidResponse.Bid bids = 2;
      case 2: {
        if (tag == 18) {
         parse_bids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidResponse.SeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidResponse.SeatBid)
  return false;
#undef DO_
}

void BidResponse_SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidResponse.SeatBid)
  // optional string impression_id = 1;
  if (has_impression_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impression_id().data(), this->impression_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impression_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->impression_id(), output);
  }

  // repeated .gdt.adx.BidResponse.Bid bids = 2;
  for (int i = 0; i < this->bids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidResponse.SeatBid)
}

::google::protobuf::uint8* BidResponse_SeatBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidResponse.SeatBid)
  // optional string impression_id = 1;
  if (has_impression_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impression_id().data(), this->impression_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "impression_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->impression_id(), target);
  }

  // repeated .gdt.adx.BidResponse.Bid bids = 2;
  for (int i = 0; i < this->bids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidResponse.SeatBid)
  return target;
}

int BidResponse_SeatBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string impression_id = 1;
    if (has_impression_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impression_id());
    }

  }
  // repeated .gdt.adx.BidResponse.Bid bids = 2;
  total_size += 1 * this->bids_size();
  for (int i = 0; i < this->bids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_SeatBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_SeatBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid::MergeFrom(const BidResponse_SeatBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bids_.MergeFrom(from.bids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impression_id()) {
      set_impression_id(from.impression_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid::CopyFrom(const BidResponse_SeatBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bids())) return false;
  return true;
}

void BidResponse_SeatBid::Swap(BidResponse_SeatBid* other) {
  if (other != this) {
    std::swap(impression_id_, other->impression_id_);
    bids_.Swap(&other->bids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse::kRequestIdFieldNumber;
const int BidResponse::kSeatBidsFieldNumber;
const int BidResponse::kProcessingTimeMsFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gdt.adx.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gdt.adx.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:gdt.adx.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_5frtb_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 5) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_id_->clear();
      }
    }
    processing_time_ms_ = 0;
  }
  seat_bids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gdt.adx.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "request_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seat_bids;
        break;
      }

      // repeated .gdt.adx.BidResponse.SeatBid seat_bids = 2;
      case 2: {
        if (tag == 18) {
         parse_seat_bids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seat_bids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seat_bids;
        if (input->ExpectTag(24)) goto parse_processing_time_ms;
        break;
      }

      // optional int32 processing_time_ms = 3;
      case 3: {
        if (tag == 24) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processing_time_ms_)));
          set_has_processing_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gdt.adx.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gdt.adx.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gdt.adx.BidResponse)
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // repeated .gdt.adx.BidResponse.SeatBid seat_bids = 2;
  for (int i = 0; i < this->seat_bids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seat_bids(i), output);
  }

  // optional int32 processing_time_ms = 3;
  if (has_processing_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->processing_time_ms(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gdt.adx.BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt.adx.BidResponse)
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // repeated .gdt.adx.BidResponse.SeatBid seat_bids = 2;
  for (int i = 0; i < this->seat_bids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seat_bids(i), target);
  }

  // optional int32 processing_time_ms = 3;
  if (has_processing_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->processing_time_ms(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt.adx.BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 processing_time_ms = 3;
    if (has_processing_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processing_time_ms());
    }

  }
  // repeated .gdt.adx.BidResponse.SeatBid seat_bids = 2;
  total_size += 1 * this->seat_bids_size();
  for (int i = 0; i < this->seat_bids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seat_bids(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  seat_bids_.MergeFrom(from.seat_bids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_processing_time_ms()) {
      set_processing_time_ms(from.processing_time_ms());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->seat_bids())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    seat_bids_.Swap(&other->seat_bids_);
    std::swap(processing_time_ms_, other->processing_time_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace adx
}  // namespace gdt

// @@protoc_insertion_point(global_scope)
